commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return a unique session identifier.  */ ;/**  * Return a unique session identifier.  */ String getId().
true;;0;1;/**  * Return a map that holds session attributes.  */ ;/**  * Return a map that holds session attributes.  */ Map<String, Object> getAttributes().
true;default;1;5;/**  * Return the session attribute value if present.  * @param name the attribute name  * @param <T> the attribute type  * @return the attribute value  */ ;/**  * Return the session attribute value if present.  * @param name the attribute name  * @param <T> the attribute type  * @return the attribute value  */ @SuppressWarnings("unchecked") @Nullable default <T> T getAttribute(String name) {     return (T) getAttributes().get(name). }
true;default;1;6;/**  * Return the session attribute value or if not present raise an  * {@link IllegalArgumentException}.  * @param name the attribute name  * @param <T> the attribute type  * @return the attribute value  */ ;/**  * Return the session attribute value or if not present raise an  * {@link IllegalArgumentException}.  * @param name the attribute name  * @param <T> the attribute type  * @return the attribute value  */ @SuppressWarnings("unchecked") default <T> T getRequiredAttribute(String name) {     T value = getAttribute(name).     Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.").     return value. }
true;default;2;4;/**  * Return the session attribute value, or a default, fallback value.  * @param name the attribute name  * @param defaultValue a default value to return instead  * @param <T> the attribute type  * @return the attribute value  */ ;/**  * Return the session attribute value, or a default, fallback value.  * @param name the attribute name  * @param defaultValue a default value to return instead  * @param <T> the attribute type  * @return the attribute value  */ @SuppressWarnings("unchecked") default <T> T getAttributeOrDefault(String name, T defaultValue) {     return (T) getAttributes().getOrDefault(name, defaultValue). }
true;;0;1;/**  * Force the creation of a session causing the session id to be sent when  * {@link #save()} is called.  */ ;/**  * Force the creation of a session causing the session id to be sent when  * {@link #save()} is called.  */ void start().
true;;0;1;/**  * Whether a session with the client has been started explicitly via  * {@link #start()} or implicitly by adding session attributes.  * If "false" then the session id is not sent to the client and the  * {@link #save()} method is essentially a no-op.  */ ;/**  * Whether a session with the client has been started explicitly via  * {@link #start()} or implicitly by adding session attributes.  * If "false" then the session id is not sent to the client and the  * {@link #save()} method is essentially a no-op.  */ boolean isStarted().
true;;0;1;/**  * Generate a new id for the session and update the underlying session  * storage to reflect the new id. After a successful call {@link #getId()}  * reflects the new session id.  * @return completion notification (success or error)  */ ;/**  * Generate a new id for the session and update the underlying session  * storage to reflect the new id. After a successful call {@link #getId()}  * reflects the new session id.  * @return completion notification (success or error)  */ Mono<Void> changeSessionId().
true;;0;1;/**  * Invalidate the current session and clear session storage.  * @return completion notification (success or error)  */ ;/**  * Invalidate the current session and clear session storage.  * @return completion notification (success or error)  */ Mono<Void> invalidate().
true;;0;1;/**  * Save the session through the {@code WebSessionStore} as follows:  * <ul>  * <li>If the session is new (i.e. created but never persisted), it must have  * been started explicitly via {@link #start()} or implicitly by adding  * attributes, or otherwise this method should have no effect.  * <li>If the session was retrieved through the {@code WebSessionStore},  * the implementation for this method must check whether the session was  * {@link #invalidate() invalidated} and if so return an error.  * </ul>  * <p>Note that this method is not intended for direct use by applications.  * Instead it is automatically invoked just before the response is  * committed.  * @return {@code Mono} to indicate completion with success or error  */ ;/**  * Save the session through the {@code WebSessionStore} as follows:  * <ul>  * <li>If the session is new (i.e. created but never persisted), it must have  * been started explicitly via {@link #start()} or implicitly by adding  * attributes, or otherwise this method should have no effect.  * <li>If the session was retrieved through the {@code WebSessionStore},  * the implementation for this method must check whether the session was  * {@link #invalidate() invalidated} and if so return an error.  * </ul>  * <p>Note that this method is not intended for direct use by applications.  * Instead it is automatically invoked just before the response is  * committed.  * @return {@code Mono} to indicate completion with success or error  */ Mono<Void> save().
true;;0;1;/**  * Return {@code true} if the session expired after {@link #getMaxIdleTime()  * maxIdleTime} elapsed.  * <p>Typically expiration checks should be automatically made when a session  * is accessed, a new {@code WebSession} instance created if necessary, at  * the start of request processing so that applications don't have to worry  * about expired session by default.  */ ;/**  * Return {@code true} if the session expired after {@link #getMaxIdleTime()  * maxIdleTime} elapsed.  * <p>Typically expiration checks should be automatically made when a session  * is accessed, a new {@code WebSession} instance created if necessary, at  * the start of request processing so that applications don't have to worry  * about expired session by default.  */ boolean isExpired().
true;;0;1;/**  * Return the time when the session was created.  */ ;/**  * Return the time when the session was created.  */ Instant getCreationTime().
true;;0;1;/**  * Return the last time of session access as a result of user activity such  * as an HTTP request. Together with {@link #getMaxIdleTime()  * maxIdleTimeInSeconds} this helps to determine when a session is  * {@link #isExpired() expired}.  */ ;/**  * Return the last time of session access as a result of user activity such  * as an HTTP request. Together with {@link #getMaxIdleTime()  * maxIdleTimeInSeconds} this helps to determine when a session is  * {@link #isExpired() expired}.  */ Instant getLastAccessTime().
true;;1;1;/**  * Configure the max amount of time that may elapse after the  * {@link #getLastAccessTime() lastAccessTime} before a session is considered  * expired. A negative value indicates the session should not expire.  */ ;/**  * Configure the max amount of time that may elapse after the  * {@link #getLastAccessTime() lastAccessTime} before a session is considered  * expired. A negative value indicates the session should not expire.  */ void setMaxIdleTime(Duration maxIdleTime).
true;;0;1;/**  * Return the maximum time after the {@link #getLastAccessTime()  * lastAccessTime} before a session expires. A negative time indicates the  * session doesn't expire.  */ ;/**  * Return the maximum time after the {@link #getLastAccessTime()  * lastAccessTime} before a session expires. A negative time indicates the  * session doesn't expire.  */ Duration getMaxIdleTime().
