commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String getFirst(String key) {     return this.headers.get(key). }
false;public;2;4;;@Override public void add(String key, @Nullable String value) {     this.headers.add(key, value). }
false;public;2;4;;@Override public void addAll(String key, List<? extends String> values) {     values.forEach(value -> add(key, value)). }
false;public;1;4;;@Override public void addAll(MultiValueMap<String, String> values) {     values.forEach(this::addAll). }
false;public;2;4;;@Override public void set(String key, @Nullable String value) {     this.headers.put(key, value). }
false;public;1;4;;@Override public void setAll(Map<String, String> values) {     values.forEach(this::set). }
false;public;0;11;;@Override public Map<String, String> toSingleValueMap() {     Map<String, String> singleValueMap = new LinkedHashMap<>(this.headers.size()).     Iterator<HttpField> iterator = this.headers.iterator().     iterator.forEachRemaining(field -> {         if (!singleValueMap.containsKey(field.getName())) {             singleValueMap.put(field.getName(), field.getValue()).         }     }).     return singleValueMap. }
false;public;0;4;;@Override public int size() {     return this.headers.getFieldNamesCollection().size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return (this.headers.size() == 0). }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return (key instanceof String && this.headers.containsKey((String) key)). }
false;public;1;5;;@Override public boolean containsValue(Object value) {     return (value instanceof String && this.headers.stream().anyMatch(field -> field.contains((String) value))). }
false;public;1;8;;@Nullable @Override public List<String> get(Object key) {     if (containsKey(key)) {         return this.headers.getValuesList((String) key).     }     return null. }
false;public;2;7;;@Nullable @Override public List<String> put(String key, List<String> value) {     List<String> oldValues = get(key).     this.headers.put(key, value).     return oldValues. }
false;public;1;10;;@Nullable @Override public List<String> remove(Object key) {     if (key instanceof String) {         List<String> oldValues = get(key).         this.headers.remove((String) key).         return oldValues.     }     return null. }
false;public;1;4;;@Override public void putAll(Map<? extends String, ? extends List<String>> map) {     map.forEach(this::put). }
false;public;0;4;;@Override public void clear() {     this.headers.clear(). }
false;public;0;4;;@Override public Set<String> keySet() {     return this.headers.getFieldNamesCollection(). }
false;public;0;5;;@Override public Collection<List<String>> values() {     return this.headers.getFieldNamesCollection().stream().map(this.headers::getValuesList).collect(Collectors.toList()). }
false;public;0;4;;@Override public Iterator<Entry<String, List<String>>> iterator() {     return new EntryIterator(). }
false;public;0;4;;@Override public int size() {     return headers.size(). }
false;public;0;14;;@Override public Set<Entry<String, List<String>>> entrySet() {     return new AbstractSet<Entry<String, List<String>>>() {          @Override         public Iterator<Entry<String, List<String>>> iterator() {             return new EntryIterator().         }          @Override         public int size() {             return headers.size().         }     }. }
false;public;0;4;;@Override public String toString() {     return HttpHeaders.formatHeaders(this). }
false;public;0;4;;@Override public boolean hasNext() {     return this.names.hasMoreElements(). }
false;public;0;4;;@Override public Entry<String, List<String>> next() {     return new HeaderEntry(this.names.nextElement()). }
false;public;0;4;;@Override public String getKey() {     return this.key. }
false;public;0;4;;@Override public List<String> getValue() {     return headers.getValuesList(this.key). }
false;public;1;6;;@Override public List<String> setValue(List<String> value) {     List<String> previousValues = headers.getValuesList(this.key).     headers.put(this.key, value).     return previousValues. }
