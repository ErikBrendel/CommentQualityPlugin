commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Enable asynchronous processing after which the response remains open until a call  * to {@link #complete()} is made or the server times out the request. Once enabled,  * additional calls to this method are ignored.  */ ;/**  * Enable asynchronous processing after which the response remains open until a call  * to {@link #complete()} is made or the server times out the request. Once enabled,  * additional calls to this method are ignored.  */ void start().
true;;1;1;/**  * A variation on {@link #start()} that allows specifying a timeout value to use to  * use for asynchronous processing. If {@link #complete()} is not called within the  * specified value, the request times out.  */ ;/**  * A variation on {@link #start()} that allows specifying a timeout value to use to  * use for asynchronous processing. If {@link #complete()} is not called within the  * specified value, the request times out.  */ void start(long timeout).
true;;0;1;/**  * Return whether asynchronous request processing has been started.  */ ;/**  * Return whether asynchronous request processing has been started.  */ boolean isStarted().
true;;0;1;/**  * Mark asynchronous request processing as completed.  */ ;/**  * Mark asynchronous request processing as completed.  */ void complete().
true;;0;1;/**  * Return whether asynchronous request processing has been completed.  */ ;/**  * Return whether asynchronous request processing has been completed.  */ boolean isCompleted().
