# id;timestamp;commentText;codeText;commentWords;codeWords
SeparatorPathElement -> @Override 	public boolean matches(int pathIndex, MatchingContext matchingContext);1498861175;Matching a separator is easy, basically the character at candidateIndex_must be the separator.;@Override_	public boolean matches(int pathIndex, MatchingContext matchingContext) {_		if (pathIndex < matchingContext.pathLength && matchingContext.isSeparator(pathIndex)) {_			if (isNoMorePattern()) {_				if (matchingContext.determineRemainingPath) {_					matchingContext.remainingPathIndex = pathIndex + 1__					return true__				}_				else {_					return (pathIndex + 1 == matchingContext.pathLength)__				}_			}_			else {_				pathIndex++__				if (matchingContext.isMatchStartMatching && pathIndex == matchingContext.pathLength) {_					return true_ _				}_				return this.next.matches(pathIndex, matchingContext)__			}_		}_		return false__	};matching,a,separator,is,easy,basically,the,character,at,candidate,index,must,be,the,separator;override,public,boolean,matches,int,path,index,matching,context,matching,context,if,path,index,matching,context,path,length,matching,context,is,separator,path,index,if,is,no,more,pattern,if,matching,context,determine,remaining,path,matching,context,remaining,path,index,path,index,1,return,true,else,return,path,index,1,matching,context,path,length,else,path,index,if,matching,context,is,match,start,matching,path,index,matching,context,path,length,return,true,return,this,next,matches,path,index,matching,context,return,false
SeparatorPathElement -> @Override 	public boolean matches(int pathIndex, MatchingContext matchingContext);1499445979;Matching a separator is easy, basically the character at candidateIndex_must be the separator.;@Override_	public boolean matches(int pathIndex, MatchingContext matchingContext) {_		if (pathIndex < matchingContext.pathLength && matchingContext.isSeparator(pathIndex)) {_			if (isNoMorePattern()) {_				if (matchingContext.determineRemainingPath) {_					matchingContext.remainingPathIndex = pathIndex + 1__					return true__				}_				else {_					return (pathIndex + 1 == matchingContext.pathLength)__				}_			}_			else {_				pathIndex++__				if (matchingContext.isMatchStartMatching && pathIndex == matchingContext.pathLength) {_					return true_  _				}_				return (this.next != null && this.next.matches(pathIndex, matchingContext))__			}_		}_		return false__	};matching,a,separator,is,easy,basically,the,character,at,candidate,index,must,be,the,separator;override,public,boolean,matches,int,path,index,matching,context,matching,context,if,path,index,matching,context,path,length,matching,context,is,separator,path,index,if,is,no,more,pattern,if,matching,context,determine,remaining,path,matching,context,remaining,path,index,path,index,1,return,true,else,return,path,index,1,matching,context,path,length,else,path,index,if,matching,context,is,match,start,matching,path,index,matching,context,path,length,return,true,return,this,next,null,this,next,matches,path,index,matching,context,return,false
SeparatorPathElement -> @Override 	public boolean matches(int pathIndex, MatchingContext matchingContext);1504818226;Matching a separator is easy, basically the character at candidateIndex_must be the separator.;@Override_	public boolean matches(int pathIndex, MatchingContext matchingContext) {_		if (pathIndex < matchingContext.pathLength && matchingContext.isSeparator(pathIndex)) {_			if (isNoMorePattern()) {_				if (matchingContext.determineRemainingPath) {_					matchingContext.remainingPathIndex = pathIndex + 1__					return true__				}_				else {_					return (pathIndex + 1 == matchingContext.pathLength)__				}_			}_			else {_				pathIndex++__				return (this.next != null && this.next.matches(pathIndex, matchingContext))__			}_		}_		return false__	};matching,a,separator,is,easy,basically,the,character,at,candidate,index,must,be,the,separator;override,public,boolean,matches,int,path,index,matching,context,matching,context,if,path,index,matching,context,path,length,matching,context,is,separator,path,index,if,is,no,more,pattern,if,matching,context,determine,remaining,path,matching,context,remaining,path,index,path,index,1,return,true,else,return,path,index,1,matching,context,path,length,else,path,index,return,this,next,null,this,next,matches,path,index,matching,context,return,false
SeparatorPathElement -> @Override 	public boolean matches(int pathIndex, MatchingContext matchingContext);1530174524;Matching a separator is easy, basically the character at candidateIndex_must be the separator.;@Override_	public boolean matches(int pathIndex, MatchingContext matchingContext) {_		if (pathIndex < matchingContext.pathLength && matchingContext.isSeparator(pathIndex)) {_			if (isNoMorePattern()) {_				if (matchingContext.determineRemainingPath) {_					matchingContext.remainingPathIndex = pathIndex + 1__					return true__				}_				else {_					return (pathIndex + 1 == matchingContext.pathLength)__				}_			}_			else {_				pathIndex++__				return (this.next != null && this.next.matches(pathIndex, matchingContext))__			}_		}_		return false__	};matching,a,separator,is,easy,basically,the,character,at,candidate,index,must,be,the,separator;override,public,boolean,matches,int,path,index,matching,context,matching,context,if,path,index,matching,context,path,length,matching,context,is,separator,path,index,if,is,no,more,pattern,if,matching,context,determine,remaining,path,matching,context,remaining,path,index,path,index,1,return,true,else,return,path,index,1,matching,context,path,length,else,path,index,return,this,next,null,this,next,matches,path,index,matching,context,return,false
SeparatorPathElement -> @Override 	public boolean matches(int candidateIndex, MatchingContext matchingContext);1495035625;Matching a separator is easy, basically the character at candidateIndex_must be the separator.;@Override_	public boolean matches(int candidateIndex, MatchingContext matchingContext) {_		boolean matched = false__		if (candidateIndex < matchingContext.candidateLength &&_			matchingContext.candidate[candidateIndex] == separator) {_			if (this.next == null) {_				if (matchingContext.determineRemainingPath) {_					matchingContext.remainingPathIndex = candidateIndex + 1__					matched = true__				}_				else {_					matched = ((candidateIndex + 1) == matchingContext.candidateLength)__				}_			}_			else {_				candidateIndex++__				if (matchingContext.isMatchStartMatching && candidateIndex == matchingContext.candidateLength) {_					return true_ _				}_				matched = this.next.matches(candidateIndex, matchingContext)__			}_		}_		return matched__	};matching,a,separator,is,easy,basically,the,character,at,candidate,index,must,be,the,separator;override,public,boolean,matches,int,candidate,index,matching,context,matching,context,boolean,matched,false,if,candidate,index,matching,context,candidate,length,matching,context,candidate,candidate,index,separator,if,this,next,null,if,matching,context,determine,remaining,path,matching,context,remaining,path,index,candidate,index,1,matched,true,else,matched,candidate,index,1,matching,context,candidate,length,else,candidate,index,if,matching,context,is,match,start,matching,candidate,index,matching,context,candidate,length,return,true,matched,this,next,matches,candidate,index,matching,context,return,matched
SeparatorPathElement -> @Override 	public boolean matches(int candidateIndex, MatchingContext matchingContext);1497970202;Matching a separator is easy, basically the character at candidateIndex_must be the separator.;@Override_	public boolean matches(int candidateIndex, MatchingContext matchingContext) {_		boolean matched = false__		if (candidateIndex < matchingContext.candidateLength &&_			matchingContext.candidate[candidateIndex] == separator) {_			if (this.next == null) {_				if (matchingContext.determineRemainingPath) {_					matchingContext.remainingPathIndex = candidateIndex + 1__					matched = true__				}_				else {_					matched = (candidateIndex + 1 == matchingContext.candidateLength)__				}_			}_			else {_				candidateIndex++__				if (matchingContext.isMatchStartMatching && candidateIndex == matchingContext.candidateLength) {_					return true_ _				}_				matched = this.next.matches(candidateIndex, matchingContext)__			}_		}_		return matched__	};matching,a,separator,is,easy,basically,the,character,at,candidate,index,must,be,the,separator;override,public,boolean,matches,int,candidate,index,matching,context,matching,context,boolean,matched,false,if,candidate,index,matching,context,candidate,length,matching,context,candidate,candidate,index,separator,if,this,next,null,if,matching,context,determine,remaining,path,matching,context,remaining,path,index,candidate,index,1,matched,true,else,matched,candidate,index,1,matching,context,candidate,length,else,candidate,index,if,matching,context,is,match,start,matching,candidate,index,matching,context,candidate,length,return,true,matched,this,next,matches,candidate,index,matching,context,return,matched
