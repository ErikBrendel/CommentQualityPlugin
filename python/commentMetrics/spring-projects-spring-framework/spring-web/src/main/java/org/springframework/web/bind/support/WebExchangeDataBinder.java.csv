commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Bind query params, form data, and or multipart form data to the binder target.  * @param exchange the current exchange.  * @return a {@code Mono<Void>} when binding is complete  */ ;/**  * Bind query params, form data, and or multipart form data to the binder target.  * @param exchange the current exchange.  * @return a {@code Mono<Void>} when binding is complete  */ public Mono<Void> bind(ServerWebExchange exchange) {     return getValuesToBind(exchange).doOnNext(values -> doBind(new MutablePropertyValues(values))).then(). }
true;protected;1;3;/**  * Protected method to obtain the values for data binding. By default this  * method delegates to {@link #extractValuesToBind(ServerWebExchange)}.  */ ;/**  * Protected method to obtain the values for data binding. By default this  * method delegates to {@link #extractValuesToBind(ServerWebExchange)}.  */ protected Mono<Map<String, Object>> getValuesToBind(ServerWebExchange exchange) {     return extractValuesToBind(exchange). }
true;public,static;1;14;/**  * Combine query params and form data for multipart form data from the body  * of the request into a {@code Map<String, Object>} of values to use for  * data binding purposes.  * @param exchange the current exchange  * @return a {@code Mono} with the values to bind  * @see org.springframework.http.server.reactive.ServerHttpRequest#getQueryParams()  * @see ServerWebExchange#getFormData()  * @see ServerWebExchange#getMultipartData()  */ ;/**  * Combine query params and form data for multipart form data from the body  * of the request into a {@code Map<String, Object>} of values to use for  * data binding purposes.  * @param exchange the current exchange  * @return a {@code Mono} with the values to bind  * @see org.springframework.http.server.reactive.ServerHttpRequest#getQueryParams()  * @see ServerWebExchange#getFormData()  * @see ServerWebExchange#getMultipartData()  */ public static Mono<Map<String, Object>> extractValuesToBind(ServerWebExchange exchange) {     MultiValueMap<String, String> queryParams = exchange.getRequest().getQueryParams().     Mono<MultiValueMap<String, String>> formData = exchange.getFormData().     Mono<MultiValueMap<String, Part>> multipartData = exchange.getMultipartData().     return Mono.zip(Mono.just(queryParams), formData, multipartData).map(tuple -> {         Map<String, Object> result = new TreeMap<>().         tuple.getT1().forEach((key, values) -> addBindValue(result, key, values)).         tuple.getT2().forEach((key, values) -> addBindValue(result, key, values)).         tuple.getT3().forEach((key, values) -> addBindValue(result, key, values)).         return result.     }). }
false;private,static;3;8;;private static void addBindValue(Map<String, Object> params, String key, List<?> values) {     if (!CollectionUtils.isEmpty(values)) {         values = values.stream().map(value -> value instanceof FormFieldPart ? ((FormFieldPart) value).value() : value).collect(Collectors.toList()).         params.put(key, values.size() == 1 ? values.get(0) : values).     } }
