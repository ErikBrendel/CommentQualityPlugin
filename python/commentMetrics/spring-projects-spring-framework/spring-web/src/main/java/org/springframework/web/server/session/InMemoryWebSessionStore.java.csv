# id;timestamp;commentText;codeText;commentWords;codeWords
InMemoryWebSessionStore -> public Clock getClock();1504712897;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1505772160;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1506481932;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1506481978;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1506485438;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1506490991;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1510790672;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1516914749;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1530174524;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1531339158;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1531426339;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1531518683;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public Clock getClock();1531966442;Return the configured clock for session lastAccessTime calculations.;public Clock getClock() {_		return this.clock__	};return,the,configured,clock,for,session,last,access,time,calculations;public,clock,get,clock,return,this,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1504712897;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "'clock' is required.")__		this.clock = clock__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1505772160;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1506481932;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1506481978;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1506485438;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1506490991;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		_		this.nextExpirationCheckTime = Instant.now(this.clock)__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,this,next,expiration,check,time,instant,now,this,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1510790672;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		_		this.nextExpirationCheckTime = Instant.now(this.clock)__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,this,next,expiration,check,time,instant,now,this,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1516914749;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		_		this.nextExpirationCheckTime = Instant.now(this.clock)__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,this,next,expiration,check,time,instant,now,this,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1530174524;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		_		this.nextExpirationCheckTime = Instant.now(this.clock)__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,this,next,expiration,check,time,instant,now,this,clock
InMemoryWebSessionStore -> public void setClock(Clock clock);1531339158;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		this.expiredSessionChecker.removeExpiredSessions(clock.instant())__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,this,expired,session,checker,remove,expired,sessions,clock,instant
InMemoryWebSessionStore -> public void setClock(Clock clock);1531426339;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		removeExpiredSessions()__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,remove,expired,sessions
InMemoryWebSessionStore -> public void setClock(Clock clock);1531518683;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		removeExpiredSessions()__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,remove,expired,sessions
InMemoryWebSessionStore -> public void setClock(Clock clock);1531966442;Configure the {@link Clock} to use to set lastAccessTime on every created_session and to calculate if it is expired._<p>This may be useful to align to different timezone or to set the clock_back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}_in order to simulate session expiration._<p>By default this is {@code Clock.system(ZoneId.of("GMT"))}._@param clock the clock to use;public void setClock(Clock clock) {_		Assert.notNull(clock, "Clock is required")__		this.clock = clock__		removeExpiredSessions()__	};configure,the,link,clock,to,use,to,set,last,access,time,on,every,created,session,and,to,calculate,if,it,is,expired,p,this,may,be,useful,to,align,to,different,timezone,or,to,set,the,clock,back,in,a,test,e,g,code,clock,offset,clock,duration,of,minutes,31,in,order,to,simulate,session,expiration,p,by,default,this,is,code,clock,system,zone,id,of,gmt,param,clock,the,clock,to,use;public,void,set,clock,clock,clock,assert,not,null,clock,clock,is,required,this,clock,clock,remove,expired,sessions
InMemoryWebSessionStore -> public void setMaxSessions(int maxSessions);1531426339;Set the maximum number of sessions that can be stored. Once the limit is_reached, any attempt to store an additional session will result in an_{@link IllegalStateException}._<p>By default set to 10000._@param maxSessions the maximum number of sessions_@since 5.1;public void setMaxSessions(int maxSessions) {_		this.maxSessions = maxSessions__	};set,the,maximum,number,of,sessions,that,can,be,stored,once,the,limit,is,reached,any,attempt,to,store,an,additional,session,will,result,in,an,link,illegal,state,exception,p,by,default,set,to,10000,param,max,sessions,the,maximum,number,of,sessions,since,5,1;public,void,set,max,sessions,int,max,sessions,this,max,sessions,max,sessions
InMemoryWebSessionStore -> public void setMaxSessions(int maxSessions);1531518683;Set the maximum number of sessions that can be stored. Once the limit is_reached, any attempt to store an additional session will result in an_{@link IllegalStateException}._<p>By default set to 10000._@param maxSessions the maximum number of sessions_@since 5.0.8;public void setMaxSessions(int maxSessions) {_		this.maxSessions = maxSessions__	};set,the,maximum,number,of,sessions,that,can,be,stored,once,the,limit,is,reached,any,attempt,to,store,an,additional,session,will,result,in,an,link,illegal,state,exception,p,by,default,set,to,10000,param,max,sessions,the,maximum,number,of,sessions,since,5,0,8;public,void,set,max,sessions,int,max,sessions,this,max,sessions,max,sessions
InMemoryWebSessionStore -> public void setMaxSessions(int maxSessions);1531966442;Set the maximum number of sessions that can be stored. Once the limit is_reached, any attempt to store an additional session will result in an_{@link IllegalStateException}._<p>By default set to 10000._@param maxSessions the maximum number of sessions_@since 5.0.8;public void setMaxSessions(int maxSessions) {_		this.maxSessions = maxSessions__	};set,the,maximum,number,of,sessions,that,can,be,stored,once,the,limit,is,reached,any,attempt,to,store,an,additional,session,will,result,in,an,link,illegal,state,exception,p,by,default,set,to,10000,param,max,sessions,the,maximum,number,of,sessions,since,5,0,8;public,void,set,max,sessions,int,max,sessions,this,max,sessions,max,sessions
InMemoryWebSessionStore -> public void removeExpiredSessions();1531426339;Check for expired sessions and remove them. Typically such checks are_kicked off lazily during calls to {@link #createWebSession() create} or_{@link #retrieveSession retrieve}, no less than 60 seconds apart._This method can be called to force a check at a specific time._@since 5.1;public void removeExpiredSessions() {_		this.expiredSessionChecker.removeExpiredSessions(this.clock.instant())__	};check,for,expired,sessions,and,remove,them,typically,such,checks,are,kicked,off,lazily,during,calls,to,link,create,web,session,create,or,link,retrieve,session,retrieve,no,less,than,60,seconds,apart,this,method,can,be,called,to,force,a,check,at,a,specific,time,since,5,1;public,void,remove,expired,sessions,this,expired,session,checker,remove,expired,sessions,this,clock,instant
InMemoryWebSessionStore -> public void removeExpiredSessions();1531518683;Check for expired sessions and remove them. Typically such checks are_kicked off lazily during calls to {@link #createWebSession() create} or_{@link #retrieveSession retrieve}, no less than 60 seconds apart._This method can be called to force a check at a specific time._@since 5.0.8;public void removeExpiredSessions() {_		this.expiredSessionChecker.removeExpiredSessions(this.clock.instant())__	};check,for,expired,sessions,and,remove,them,typically,such,checks,are,kicked,off,lazily,during,calls,to,link,create,web,session,create,or,link,retrieve,session,retrieve,no,less,than,60,seconds,apart,this,method,can,be,called,to,force,a,check,at,a,specific,time,since,5,0,8;public,void,remove,expired,sessions,this,expired,session,checker,remove,expired,sessions,this,clock,instant
InMemoryWebSessionStore -> public void removeExpiredSessions();1531966442;Check for expired sessions and remove them. Typically such checks are_kicked off lazily during calls to {@link #createWebSession() create} or_{@link #retrieveSession retrieve}, no less than 60 seconds apart._This method can be called to force a check at a specific time._@since 5.0.8;public void removeExpiredSessions() {_		this.expiredSessionChecker.removeExpiredSessions(this.clock.instant())__	};check,for,expired,sessions,and,remove,them,typically,such,checks,are,kicked,off,lazily,during,calls,to,link,create,web,session,create,or,link,retrieve,session,retrieve,no,less,than,60,seconds,apart,this,method,can,be,called,to,force,a,check,at,a,specific,time,since,5,0,8;public,void,remove,expired,sessions,this,expired,session,checker,remove,expired,sessions,this,clock,instant
InMemoryWebSessionStore -> public Map<String, WebSession> getSessions();1531518683;Return the map of sessions with an {@link Collections#unmodifiableMap_unmodifiable} wrapper. This could be used for management purposes, to_list active sessions, invalidate expired ones, etc._@since 5.0.8;public Map<String, WebSession> getSessions() {_		return Collections.unmodifiableMap(this.sessions)__	};return,the,map,of,sessions,with,an,link,collections,unmodifiable,map,unmodifiable,wrapper,this,could,be,used,for,management,purposes,to,list,active,sessions,invalidate,expired,ones,etc,since,5,0,8;public,map,string,web,session,get,sessions,return,collections,unmodifiable,map,this,sessions
InMemoryWebSessionStore -> public Map<String, WebSession> getSessions();1531966442;Return the map of sessions with an {@link Collections#unmodifiableMap_unmodifiable} wrapper. This could be used for management purposes, to_list active sessions, invalidate expired ones, etc._@since 5.0.8;public Map<String, WebSession> getSessions() {_		return Collections.unmodifiableMap(this.sessions)__	};return,the,map,of,sessions,with,an,link,collections,unmodifiable,map,unmodifiable,wrapper,this,could,be,used,for,management,purposes,to,list,active,sessions,invalidate,expired,ones,etc,since,5,0,8;public,map,string,web,session,get,sessions,return,collections,unmodifiable,map,this,sessions
InMemoryWebSessionStore -> public int getMaxSessions();1531426339;Return the maximum number of sessions that can be stored._@since 5.1;public int getMaxSessions() {_		return this.maxSessions__	};return,the,maximum,number,of,sessions,that,can,be,stored,since,5,1;public,int,get,max,sessions,return,this,max,sessions
InMemoryWebSessionStore -> public int getMaxSessions();1531518683;Return the maximum number of sessions that can be stored._@since 5.0.8;public int getMaxSessions() {_		return this.maxSessions__	};return,the,maximum,number,of,sessions,that,can,be,stored,since,5,0,8;public,int,get,max,sessions,return,this,max,sessions
InMemoryWebSessionStore -> public int getMaxSessions();1531966442;Return the maximum number of sessions that can be stored._@since 5.0.8;public int getMaxSessions() {_		return this.maxSessions__	};return,the,maximum,number,of,sessions,that,can,be,stored,since,5,0,8;public,int,get,max,sessions,return,this,max,sessions
