commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return Model.class.isAssignableFrom(parameter.getParameterType()). }
false;public;4;8;;@Override @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     Assert.state(mavContainer != null, "ModelAndViewContainer is required for model exposure").     return mavContainer.getModel(). }
false;public;1;4;;@Override public boolean supportsReturnType(MethodParameter returnType) {     return Model.class.isAssignableFrom(returnType.getParameterType()). }
false;public;4;16;;@Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {     if (returnValue == null) {         return.     } else if (returnValue instanceof Model) {         mavContainer.addAllAttributes(((Model) returnValue).asMap()).     } else {         // should not happen         throw new UnsupportedOperationException("Unexpected return type: " + returnType.getParameterType().getName() + " in method: " + returnType.getMethod()).     } }
