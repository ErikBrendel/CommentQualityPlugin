# id;timestamp;commentText;codeText;commentWords;codeWords
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1328020251;Stores a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null__			_			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};stores,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1329142650;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1355352386;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1364505266;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1433085663;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1458754760;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1467730834;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1469561191;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1495868221;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null) ? value.getClass() : null___			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1496837955;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			Class<?> attrType = (value != null ? value.getClass() : null)__			if (isHandlerSessionAttribute(name, attrType)) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,class,attr,type,value,null,value,get,class,null,if,is,handler,session,attribute,name,attr,type,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1500495740;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			if (value != null && isHandlerSessionAttribute(name, value.getClass())) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,if,value,null,is,handler,session,attribute,name,value,get,class,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1504993259;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			if (value != null && isHandlerSessionAttribute(name, value.getClass())) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,if,value,null,is,handler,session,attribute,name,value,get,class,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1506468851;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			if (value != null && isHandlerSessionAttribute(name, value.getClass())) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,if,value,null,is,handler,session,attribute,name,value,get,class,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1519514499;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		for (String name : attributes.keySet()) {_			Object value = attributes.get(name)__			if (value != null && isHandlerSessionAttribute(name, value.getClass())) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		}_	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,for,string,name,attributes,key,set,object,value,attributes,get,name,if,value,null,is,handler,session,attribute,name,value,get,class,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void storeAttributes(WebRequest request, Map<String, ?> attributes);1522192143;Store a subset of the given attributes in the session. Attributes not_declared as session attributes via {@code @SessionAttributes} are ignored._@param request the current request_@param attributes candidate attributes for session storage;public void storeAttributes(WebRequest request, Map<String, ?> attributes) {_		attributes.forEach((name, value) -> {_			if (value != null && isHandlerSessionAttribute(name, value.getClass())) {_				this.sessionAttributeStore.storeAttribute(request, name, value)__			}_		})__	};store,a,subset,of,the,given,attributes,in,the,session,attributes,not,declared,as,session,attributes,via,code,session,attributes,are,ignored,param,request,the,current,request,param,attributes,candidate,attributes,for,session,storage;public,void,store,attributes,web,request,request,map,string,attributes,attributes,for,each,name,value,if,value,null,is,handler,session,attribute,name,value,get,class,this,session,attribute,store,store,attribute,request,name,value
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1328020251;Cleans "known" attributes from the session - i.e. attributes listed_in {@code @SessionAttributes} and previously stored in the in the model_at least once._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.resolvedAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};cleans,known,attributes,from,the,session,i,e,attributes,listed,in,code,session,attributes,and,previously,stored,in,the,in,the,model,at,least,once,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,resolved,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1329142650;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1355352386;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames.keySet()) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,key,set,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1364505266;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1433085663;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1458754760;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1467730834;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1469561191;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1495868221;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1496837955;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1500495740;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1504993259;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1506468851;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1519514499;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public void cleanupAttributes(WebRequest request);1522192143;Remove "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request;public void cleanupAttributes(WebRequest request) {_		for (String attributeName : this.knownAttributeNames) {_			this.sessionAttributeStore.cleanupAttribute(request, attributeName)__		}_	};remove,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request;public,void,cleanup,attributes,web,request,request,for,string,attribute,name,this,known,attribute,names,this,session,attribute,store,cleanup,attribute,request,attribute,name
SessionAttributesHandler -> public boolean hasSessionAttributes();1328020251;Whether the controller represented by this instance has declared session_attribute names or types of interest via {@link SessionAttributes}.;public boolean hasSessionAttributes() {_		return ((this.attributeNames.size() > 0) || (this.attributeTypes.size() > 0))_ _	};whether,the,controller,represented,by,this,instance,has,declared,session,attribute,names,or,types,of,interest,via,link,session,attributes;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1329142650;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return ((this.attributeNames.size() > 0) || (this.attributeTypes.size() > 0))__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1355352386;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return ((this.attributeNames.size() > 0) || (this.attributeTypes.size() > 0))__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1364505266;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return ((this.attributeNames.size() > 0) || (this.attributeTypes.size() > 0))__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1433085663;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return ((this.attributeNames.size() > 0) || (this.attributeTypes.size() > 0))__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1458754760;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (this.attributeNames.size() > 0 || this.attributeTypes.size() > 0)__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1467730834;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (this.attributeNames.size() > 0 || this.attributeTypes.size() > 0)__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1469561191;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (this.attributeNames.size() > 0 || this.attributeTypes.size() > 0)__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1495868221;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (this.attributeNames.size() > 0 || this.attributeTypes.size() > 0)__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1496837955;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (this.attributeNames.size() > 0 || this.attributeTypes.size() > 0)__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,size,0,this,attribute,types,size,0
SessionAttributesHandler -> public boolean hasSessionAttributes();1500495740;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (!this.attributeNames.isEmpty() || !this.attributeTypes.isEmpty())__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,is,empty,this,attribute,types,is,empty
SessionAttributesHandler -> public boolean hasSessionAttributes();1504993259;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (!this.attributeNames.isEmpty() || !this.attributeTypes.isEmpty())__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,is,empty,this,attribute,types,is,empty
SessionAttributesHandler -> public boolean hasSessionAttributes();1506468851;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (!this.attributeNames.isEmpty() || !this.attributeTypes.isEmpty())__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,is,empty,this,attribute,types,is,empty
SessionAttributesHandler -> public boolean hasSessionAttributes();1519514499;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (!this.attributeNames.isEmpty() || !this.attributeTypes.isEmpty())__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,is,empty,this,attribute,types,is,empty
SessionAttributesHandler -> public boolean hasSessionAttributes();1522192143;Whether the controller represented by this instance has declared any_session attributes through an {@link SessionAttributes} annotation.;public boolean hasSessionAttributes() {_		return (!this.attributeNames.isEmpty() || !this.attributeTypes.isEmpty())__	};whether,the,controller,represented,by,this,instance,has,declared,any,session,attributes,through,an,link,session,attributes,annotation;public,boolean,has,session,attributes,return,this,attribute,names,is,empty,this,attribute,types,is,empty
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1328020251;Creates a new instance for a controller type. Session attribute names/types_are extracted from a type-level {@code @SessionAttributes} if found._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null.")__		this.sessionAttributeStore = sessionAttributeStore__		_		SessionAttributes annotation = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.value()))_ _			this.attributeTypes.addAll(Arrays.<Class<?>>asList(annotation.types()))__		}		_	};creates,a,new,instance,for,a,controller,type,session,attribute,names,types,are,extracted,from,a,type,level,code,session,attributes,if,found,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotation,utils,find,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,value,this,attribute,types,add,all,arrays,class,as,list,annotation,types
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1329142650;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null.")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.value()))__			this.attributeTypes.addAll(Arrays.<Class<?>>asList(annotation.types()))__		}__		this.knownAttributeNames.addAll(this.attributeNames)__	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotation,utils,find,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,value,this,attribute,types,add,all,arrays,class,as,list,annotation,types,this,known,attribute,names,add,all,this,attribute,names
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1355352386;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null.")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.value()))__			this.attributeTypes.addAll(Arrays.<Class<?>>asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.put(attributeName, Boolean.TRUE)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotation,utils,find,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,value,this,attribute,types,add,all,arrays,class,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,put,attribute,name,boolean,true
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1364505266;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null.")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.value()))__			this.attributeTypes.addAll(Arrays.<Class<?>>asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotation,utils,find,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,value,this,attribute,types,add,all,arrays,class,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1433085663;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null.")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotation,utils,find,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1458754760;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1467730834;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1469561191;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1495868221;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1496837955;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1500495740;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}__		for (String attributeName : this.attributeNames) {_			this.knownAttributeNames.add(attributeName)__		}_	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,for,string,attribute,name,this,attribute,names,this,known,attribute,names,add,attribute,name
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1504993259;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}_		this.knownAttributeNames.addAll(this.attributeNames)__	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,this,known,attribute,names,add,all,this,attribute,names
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1506468851;Create a new instance for a controller type. Session attribute names and_types are extracted from the {@code @SessionAttributes} annotation, if_present, on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes annotation =_				AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (annotation != null) {_			this.attributeNames.addAll(Arrays.asList(annotation.names()))__			this.attributeTypes.addAll(Arrays.asList(annotation.types()))__		}_		this.knownAttributeNames.addAll(this.attributeNames)__	};create,a,new,instance,for,a,controller,type,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,annotation,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,annotation,null,this,attribute,names,add,all,arrays,as,list,annotation,names,this,attribute,types,add,all,arrays,as,list,annotation,types,this,known,attribute,names,add,all,this,attribute,names
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1519514499;Create a new session attributes handler. Session attribute names and types_are extracted from the {@code @SessionAttributes} annotation, if present,_on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes ann = AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (ann != null) {_			Collections.addAll(this.attributeNames, ann.names())__			Collections.addAll(this.attributeTypes, ann.types())__		}_		this.knownAttributeNames.addAll(this.attributeNames)__	};create,a,new,session,attributes,handler,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,ann,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,ann,null,collections,add,all,this,attribute,names,ann,names,collections,add,all,this,attribute,types,ann,types,this,known,attribute,names,add,all,this,attribute,names
SessionAttributesHandler -> public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore);1522192143;Create a new session attributes handler. Session attribute names and types_are extracted from the {@code @SessionAttributes} annotation, if present,_on the given type._@param handlerType the controller type_@param sessionAttributeStore used for session access;public SessionAttributesHandler(Class<?> handlerType, SessionAttributeStore sessionAttributeStore) {_		Assert.notNull(sessionAttributeStore, "SessionAttributeStore may not be null")__		this.sessionAttributeStore = sessionAttributeStore___		SessionAttributes ann = AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes.class)__		if (ann != null) {_			Collections.addAll(this.attributeNames, ann.names())__			Collections.addAll(this.attributeTypes, ann.types())__		}_		this.knownAttributeNames.addAll(this.attributeNames)__	};create,a,new,session,attributes,handler,session,attribute,names,and,types,are,extracted,from,the,code,session,attributes,annotation,if,present,on,the,given,type,param,handler,type,the,controller,type,param,session,attribute,store,used,for,session,access;public,session,attributes,handler,class,handler,type,session,attribute,store,session,attribute,store,assert,not,null,session,attribute,store,session,attribute,store,may,not,be,null,this,session,attribute,store,session,attribute,store,session,attributes,ann,annotated,element,utils,find,merged,annotation,handler,type,session,attributes,class,if,ann,null,collections,add,all,this,attribute,names,ann,names,collections,add,all,this,attribute,types,ann,types,this,known,attribute,names,add,all,this,attribute,names
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1328020251;Retrieve "known" attributes from the session -- i.e. attributes listed_in {@code @SessionAttributes} and previously stored in the in the model_at least once._@param request the current request_@return a map with handler session attributes_ possibly empty.;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<String, Object>()__		for (String name : this.resolvedAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,in,code,session,attributes,and,previously,stored,in,the,in,the,model,at,least,once,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,string,object,for,string,name,this,resolved,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1329142650;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<String, Object>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,string,object,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1355352386;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<String, Object>()__		for (String name : this.knownAttributeNames.keySet()) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,string,object,for,string,name,this,known,attribute,names,key,set,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1364505266;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<String, Object>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,string,object,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1433085663;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<String, Object>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,string,object,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1458754760;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<String, Object>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,string,object,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1467730834;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1469561191;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1495868221;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1496837955;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1500495740;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1504993259;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1506468851;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1519514499;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> public Map<String, Object> retrieveAttributes(WebRequest request);1522192143;Retrieve "known" attributes from the session, i.e. attributes listed_by name in {@code @SessionAttributes} or attributes previously stored_in the model that matched by type._@param request the current request_@return a map with handler session attributes, possibly empty;public Map<String, Object> retrieveAttributes(WebRequest request) {_		Map<String, Object> attributes = new HashMap<>()__		for (String name : this.knownAttributeNames) {_			Object value = this.sessionAttributeStore.retrieveAttribute(request, name)__			if (value != null) {_				attributes.put(name, value)__			}_		}_		return attributes__	};retrieve,known,attributes,from,the,session,i,e,attributes,listed,by,name,in,code,session,attributes,or,attributes,previously,stored,in,the,model,that,matched,by,type,param,request,the,current,request,return,a,map,with,handler,session,attributes,possibly,empty;public,map,string,object,retrieve,attributes,web,request,request,map,string,object,attributes,new,hash,map,for,string,name,this,known,attribute,names,object,value,this,session,attribute,store,retrieve,attribute,request,name,if,value,null,attributes,put,name,value,return,attributes
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1328020251;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1329142650;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1355352386;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1364505266;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1433085663;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1458754760;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1467730834;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> Object retrieveAttribute(WebRequest request, String attributeName);1469561191;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, @Nullable Class<?> attributeType);1495868221;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, @Nullable Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,nullable,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, @Nullable Class<?> attributeType);1496837955;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, @Nullable Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,nullable,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1328020251;Whether the attribute name and/or type match those specified in the_controller's {@code @SessionAttributes} annotation.__<p>Attributes successfully resolved through this method are "remembered"_and used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}. In other words, retrieval and_cleanup only affect attributes previously resolved through here.__@param attributeName the attribute name to check_ must not be null_@param attributeType the type for the attribute_ or {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.resolvedAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,and,or,type,match,those,specified,in,the,controller,s,code,session,attributes,annotation,p,attributes,successfully,resolved,through,this,method,are,remembered,and,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,in,other,words,retrieval,and,cleanup,only,affect,attributes,previously,resolved,through,here,param,attribute,name,the,attribute,name,to,check,must,not,be,null,param,attribute,type,the,type,for,the,attribute,or,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,resolved,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1329142650;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1355352386;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.put(attributeName, Boolean.TRUE)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,put,attribute,name,boolean,true,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1364505266;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1433085663;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1458754760;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1467730834;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1469561191;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller.__<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}.__@param attributeName the attribute name to check, never {@code null}_@param attributeType the type for the attribute, possibly {@code null};public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,never,code,null,param,attribute,type,the,type,for,the,attribute,possibly,code,null;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1500495740;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} in underlying controller._<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}._@param attributeName the attribute name to check_@param attributeType the type for the attribute;public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,in,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,param,attribute,type,the,type,for,the,attribute;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1504993259;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} on the underlying controller._<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}._@param attributeName the attribute name to check_@param attributeType the type for the attribute;public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,on,the,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,param,attribute,type,the,type,for,the,attribute;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1506468851;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} on the underlying controller._<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}._@param attributeName the attribute name to check_@param attributeType the type for the attribute;public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,on,the,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,param,attribute,type,the,type,for,the,attribute;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1519514499;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} on the underlying controller._<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}._@param attributeName the attribute name to check_@param attributeType the type for the attribute;public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,on,the,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,param,attribute,type,the,type,for,the,attribute;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType);1522192143;Whether the attribute name or type match the names and types specified_via {@code @SessionAttributes} on the underlying controller._<p>Attributes successfully resolved through this method are "remembered"_and subsequently used in {@link #retrieveAttributes(WebRequest)} and_{@link #cleanupAttributes(WebRequest)}._@param attributeName the attribute name to check_@param attributeType the type for the attribute;public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {_		Assert.notNull(attributeName, "Attribute name must not be null")__		if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {_			this.knownAttributeNames.add(attributeName)__			return true__		}_		else {_			return false__		}_	};whether,the,attribute,name,or,type,match,the,names,and,types,specified,via,code,session,attributes,on,the,underlying,controller,p,attributes,successfully,resolved,through,this,method,are,remembered,and,subsequently,used,in,link,retrieve,attributes,web,request,and,link,cleanup,attributes,web,request,param,attribute,name,the,attribute,name,to,check,param,attribute,type,the,type,for,the,attribute;public,boolean,is,handler,session,attribute,string,attribute,name,class,attribute,type,assert,not,null,attribute,name,attribute,name,must,not,be,null,if,this,attribute,names,contains,attribute,name,this,attribute,types,contains,attribute,type,this,known,attribute,names,add,attribute,name,return,true,else,return,false
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1495868221;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1496837955;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1500495740;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1504993259;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value or {@code null};@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1506468851;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value, or {@code null} if none;@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null,if,none;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1519514499;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value, or {@code null} if none;@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null,if,none;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
SessionAttributesHandler -> @Nullable 	Object retrieveAttribute(WebRequest request, String attributeName);1522192143;A pass-through call to the underlying {@link SessionAttributeStore}._@param request the current request_@param attributeName the name of the attribute of interest_@return the attribute value, or {@code null} if none;@Nullable_	Object retrieveAttribute(WebRequest request, String attributeName) {_		return this.sessionAttributeStore.retrieveAttribute(request, attributeName)__	};a,pass,through,call,to,the,underlying,link,session,attribute,store,param,request,the,current,request,param,attribute,name,the,name,of,the,attribute,of,interest,return,the,attribute,value,or,code,null,if,none;nullable,object,retrieve,attribute,web,request,request,string,attribute,name,return,this,session,attribute,store,retrieve,attribute,request,attribute,name
