commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;2;1;/**  * Attempt to match this path element.  * @param candidatePos the current position within the candidate path  * @param matchingContext encapsulates context for the match including the candidate  * @return {@code true} if it matches, otherwise {@code false}  */ ;/**  * Attempt to match this path element.  * @param candidatePos the current position within the candidate path  * @param matchingContext encapsulates context for the match including the candidate  * @return {@code true} if it matches, otherwise {@code false}  */ public abstract boolean matches(int candidatePos, MatchingContext matchingContext).
true;public,abstract;0;1;/**  * Return the length of the path element where captures are considered to be one character long.  * @return the normalized length  */ ;/**  * Return the length of the path element where captures are considered to be one character long.  * @return the normalized length  */ public abstract int getNormalizedLength().
false;public,abstract;0;1;;public abstract char[] getChars().
true;public;0;3;/**  * Return the number of variables captured by the path element.  */ ;/**  * Return the number of variables captured by the path element.  */ public int getCaptureCount() {     return 0. }
true;public;0;3;/**  * Return the number of wildcard elements (*, ?) in the path element.  */ ;/**  * Return the number of wildcard elements (*, ?) in the path element.  */ public int getWildcardCount() {     return 0. }
true;public;0;3;/**  * Return the score for this PathElement, combined score is used to compare parsed patterns.  */ ;/**  * Return the score for this PathElement, combined score is used to compare parsed patterns.  */ public int getScore() {     return 0. }
true;protected,final;0;3;/**  * Return if the there are no more PathElements in the pattern.  * @return {@code true} if the there are no more elements  */ ;/**  * Return if the there are no more PathElements in the pattern.  * @return {@code true} if the there are no more elements  */ protected final boolean isNoMorePattern() {     return this.next == null. }
