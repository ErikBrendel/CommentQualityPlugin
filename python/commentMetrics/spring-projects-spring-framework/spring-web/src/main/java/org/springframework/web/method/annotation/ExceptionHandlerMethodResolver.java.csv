# id;timestamp;commentText;codeText;commentWords;codeWords
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1328020251;Return the method mapped to the exception type, or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1344976537;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1355352386;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1356735495;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1357119239;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1368482696;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1371694679;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1374026866;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1385507683;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1386595157;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1392410324;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1392417603;Return the method mapped to the given exception type or {@code null}.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,method,mapped,to,the,given,exception,type,or,code,null;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1392418093;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for(Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1405696918;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Exception> exceptionType);1447077465;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Exception> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,exception,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1495868221;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1496837955;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1497341397;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1498780456;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1504012043;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1518772998;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1530174524;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethod(Exception exception);1533765296;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1328020251;A constructor that finds {@link ExceptionHandler} methods in a handler._@param handlerType the handler to inspect for exception handler methods._@throws IllegalStateException_If an exception type is mapped to two methods._@throws IllegalArgumentException_If an @{@link ExceptionHandler} method is not mapped to any exceptions.;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		init(HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS))__	};a,constructor,that,finds,link,exception,handler,methods,in,a,handler,param,handler,type,the,handler,to,inspect,for,exception,handler,methods,throws,illegal,state,exception,if,an,exception,type,is,mapped,to,two,methods,throws,illegal,argument,exception,if,an,link,exception,handler,method,is,not,mapped,to,any,exceptions;public,exception,handler,method,resolver,class,handler,type,init,handler,method,selector,select,methods,handler,type
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1344976537;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1355352386;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1356735495;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1357119239;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1368482696;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1371694679;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, getExceptionHandlerMethods())) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,get,exception,handler,methods,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1374026866;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1385507683;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1386595157;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1392410324;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1392417603;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1392418093;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1405696918;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,handler,method,selector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1447077465;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1459417956;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1465327321;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1467730834;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1488443434;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1488471227;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1495868221;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1496837955;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1497341397;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1498780456;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1504012043;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1518772998;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1530174524;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public ExceptionHandlerMethodResolver(Class<?> handlerType);1533765296;A constructor that finds {@link ExceptionHandler} methods in the given type._@param handlerType the type to introspect;public ExceptionHandlerMethodResolver(Class<?> handlerType) {_		for (Method method : MethodIntrospector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS)) {_			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {_				addExceptionMapping(exceptionType, method)__			}_		}_	};a,constructor,that,finds,link,exception,handler,methods,in,the,given,type,param,handler,type,the,type,to,introspect;public,exception,handler,method,resolver,class,handler,type,for,method,method,method,introspector,select,methods,handler,type,for,class,extends,throwable,exception,type,detect,exception,mappings,method,add,exception,mapping,exception,type,method
ExceptionHandlerMethodResolver -> public Method resolveMethodByThrowable(Throwable exception);1488443434;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> public Method resolveMethodByThrowable(Throwable exception);1488471227;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1495868221;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1496837955;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1497341397;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1498780456;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1504012043;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1518772998;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1530174524;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByThrowable(Throwable exception);1533765296;Find a {@link Method} to handle the given Throwable._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found_@since 5.0;@Nullable_	public Method resolveMethodByThrowable(Throwable exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,throwable,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found,since,5,0;nullable,public,method,resolve,method,by,throwable,throwable,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Throwable> exceptionType);1459417956;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Throwable> exceptionType);1465327321;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,class,extends,throwable,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Throwable> exceptionType);1467730834;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Throwable> exceptionType);1488443434;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> private Method getMappedMethod(Class<? extends Throwable> exceptionType);1488471227;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1344976537;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1355352386;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1356735495;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1357119239;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1368482696;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1371694679;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1374026866;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1385507683;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1386595157;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1392410324;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1392417603;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return (this.mappedMethods.size() > 0)__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,size,0
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1392418093;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1405696918;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1447077465;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1459417956;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1465327321;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1467730834;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1488443434;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1488471227;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1495868221;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1496837955;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1497341397;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1498780456;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1504012043;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1518772998;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1530174524;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public boolean hasExceptionMappings();1533765296;Whether the contained type has any exception mappings.;public boolean hasExceptionMappings() {_		return !this.mappedMethods.isEmpty()__	};whether,the,contained,type,has,any,exception,mappings;public,boolean,has,exception,mappings,return,this,mapped,methods,is,empty
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType);1386595157;Find a method to handle the given exception type. This can be useful if_an Exception instance is not available (example for tools)._@param exceptionType the exception type_@return a method to handle the exception or {@code null};public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,exception,instance,is,not,available,example,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,by,exception,type,class,extends,exception,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType);1392410324;Find a method to handle the given exception type. This can be useful if_an Exception instance is not available (example for tools)._@param exceptionType the exception type_@return a method to handle the exception or {@code null};public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,exception,instance,is,not,available,example,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,by,exception,type,class,extends,exception,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType);1392417603;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,exception,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType);1392418093;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,exception,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType);1405696918;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,exception,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType);1447077465;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,exception,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1344976537;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		ExceptionHandler annotation = AnnotationUtils.findAnnotation(method, ExceptionHandler.class)__		result.addAll(Arrays.asList(annotation.value()))___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,exception,handler,annotation,annotation,utils,find,annotation,method,exception,handler,class,result,add,all,arrays,as,list,annotation,value,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1355352386;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		ExceptionHandler annotation = AnnotationUtils.findAnnotation(method, ExceptionHandler.class)__		result.addAll(Arrays.asList(annotation.value()))___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,exception,handler,annotation,annotation,utils,find,annotation,method,exception,handler,class,result,add,all,arrays,as,list,annotation,value,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1356735495;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		ExceptionHandler annotation = AnnotationUtils.findAnnotation(method, ExceptionHandler.class)__		result.addAll(Arrays.asList(annotation.value()))___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,exception,handler,annotation,annotation,utils,find,annotation,method,exception,handler,class,result,add,all,arrays,as,list,annotation,value,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1357119239;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		ExceptionHandler annotation = AnnotationUtils.findAnnotation(method, ExceptionHandler.class)__		result.addAll(Arrays.asList(annotation.value()))___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,exception,handler,annotation,annotation,utils,find,annotation,method,exception,handler,class,result,add,all,arrays,as,list,annotation,value,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1368482696;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		ExceptionHandler annotation = AnnotationUtils.findAnnotation(method, ExceptionHandler.class)__		result.addAll(Arrays.asList(annotation.value()))___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,exception,handler,annotation,annotation,utils,find,annotation,method,exception,handler,class,result,add,all,arrays,as,list,annotation,value,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1371694679;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		detectAnnotationExceptionMappings(method, result)___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1374026866;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		detectAnnotationExceptionMappings(method, result)___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1385507683;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		detectAnnotationExceptionMappings(method, result)___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1386595157;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()___		detectAnnotationExceptionMappings(method, result)___		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}__		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")___		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1392410324;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1392417603;Extract exception mappings from the {@code @ExceptionHandler} annotation_first and as a fall-back from the method signature.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,as,a,fall,back,from,the,method,signature;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1392418093;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1405696918;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1447077465;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1459417956;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1465327321;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,class,extends,throwable,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1467730834;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1488443434;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1488471227;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1495868221;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1496837955;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1497341397;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1498780456;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		Assert.notEmpty(result, "No exception types mapped to {" + method + "}")__		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,assert,not,empty,result,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1504012043;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		if (result.isEmpty()) {_			throw new IllegalStateException("No exception types mapped to " + method)__		}_		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,if,result,is,empty,throw,new,illegal,state,exception,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1518772998;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		if (result.isEmpty()) {_			throw new IllegalStateException("No exception types mapped to " + method)__		}_		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,if,result,is,empty,throw,new,illegal,state,exception,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1530174524;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		if (result.isEmpty()) {_			throw new IllegalStateException("No exception types mapped to " + method)__		}_		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,if,result,is,empty,throw,new,illegal,state,exception,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> @SuppressWarnings("unchecked") 	private List<Class<? extends Throwable>> detectExceptionMappings(Method method);1533765296;Extract exception mappings from the {@code @ExceptionHandler} annotation first,_and then as a fallback from the method signature itself.;@SuppressWarnings("unchecked")_	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {_		List<Class<? extends Throwable>> result = new ArrayList<>()__		detectAnnotationExceptionMappings(method, result)__		if (result.isEmpty()) {_			for (Class<?> paramType : method.getParameterTypes()) {_				if (Throwable.class.isAssignableFrom(paramType)) {_					result.add((Class<? extends Throwable>) paramType)__				}_			}_		}_		if (result.isEmpty()) {_			throw new IllegalStateException("No exception types mapped to " + method)__		}_		return result__	};extract,exception,mappings,from,the,code,exception,handler,annotation,first,and,then,as,a,fallback,from,the,method,signature,itself;suppress,warnings,unchecked,private,list,class,extends,throwable,detect,exception,mappings,method,method,list,class,extends,throwable,result,new,array,list,detect,annotation,exception,mappings,method,result,if,result,is,empty,for,class,param,type,method,get,parameter,types,if,throwable,class,is,assignable,from,param,type,result,add,class,extends,throwable,param,type,if,result,is,empty,throw,new,illegal,state,exception,no,exception,types,mapped,to,method,return,result
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1459417956;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1465327321;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1467730834;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1488443434;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1488471227;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1328020251;Find a method to handle the given exception. If more than one match is_found, the best match is selected via {@link ExceptionDepthComparator}._@param exception the exception_@return an @{@link ExceptionHandler} method, or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,if,more,than,one,match,is,found,the,best,match,is,selected,via,link,exception,depth,comparator,param,exception,the,exception,return,an,link,exception,handler,method,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1344976537;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1355352386;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1356735495;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1357119239;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1368482696;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1371694679;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1374026866;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1385507683;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		Class<? extends Exception> exceptionType = exception.getClass()__		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method != null ? method : NO_METHOD_FOUND)__		}_		return method != NO_METHOD_FOUND ? method : null__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,class,extends,exception,exception,type,exception,get,class,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1386595157;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		return resolveMethodByExceptionType(exception.getClass())__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,return,resolve,method,by,exception,type,exception,get,class
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1392410324;Find a method to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a method to handle the exception or {@code null};public Method resolveMethod(Exception exception) {_		return resolveMethodByExceptionType(exception.getClass())__	};find,a,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null;public,method,resolve,method,exception,exception,return,resolve,method,by,exception,type,exception,get,class
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1392417603;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		return resolveMethodByExceptionType(exception.getClass())__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,return,resolve,method,by,exception,type,exception,get,class
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1392418093;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		return resolveMethodByExceptionType(exception.getClass())__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,return,resolve,method,by,exception,type,exception,get,class
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1405696918;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		return resolveMethodByExceptionType(exception.getClass())__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,return,resolve,method,by,exception,type,exception,get,class
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1447077465;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		return resolveMethodByExceptionType(exception.getClass())__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,return,resolve,method,by,exception,type,exception,get,class
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1459417956;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null && exception instanceof NestedServletException && exception.getCause() != null) {_			method = resolveMethodByExceptionType(exception.getCause().getClass())__		}_		return method__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,exception,instanceof,nested,servlet,exception,exception,get,cause,null,method,resolve,method,by,exception,type,exception,get,cause,get,class,return,method
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1465327321;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1467730834;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		Method method = resolveMethodByExceptionType(exception.getClass())__		if (method == null) {_			Throwable cause = exception.getCause()__			if (cause != null) {_				method = resolveMethodByExceptionType(cause.getClass())__			}_		}_		return method__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,method,method,resolve,method,by,exception,type,exception,get,class,if,method,null,throwable,cause,exception,get,cause,if,cause,null,method,resolve,method,by,exception,type,cause,get,class,return,method
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1488443434;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		return resolveMethod(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,return,resolve,method,exception
ExceptionHandlerMethodResolver -> public Method resolveMethod(Exception exception);1488471227;Find a {@link Method} to handle the given exception._Use {@link ExceptionDepthComparator} if more than one match is found._@param exception the exception_@return a Method to handle the exception, or {@code null} if none found;public Method resolveMethod(Exception exception) {_		return resolveMethodByThrowable(exception)__	};find,a,link,method,to,handle,the,given,exception,use,link,exception,depth,comparator,if,more,than,one,match,is,found,param,exception,the,exception,return,a,method,to,handle,the,exception,or,code,null,if,none,found;public,method,resolve,method,exception,exception,return,resolve,method,by,throwable,exception
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1495868221;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1496837955;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1497341397;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1498780456;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1504012043;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			Collections.sort(matches, new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,collections,sort,matches,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1518772998;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			matches.sort(new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,matches,sort,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1530174524;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			matches.sort(new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,matches,sort,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	private Method getMappedMethod(Class<? extends Throwable> exceptionType);1533765296;Return the {@link Method} mapped to the given exception type, or {@code null} if none.;@Nullable_	private Method getMappedMethod(Class<? extends Throwable> exceptionType) {_		List<Class<? extends Throwable>> matches = new ArrayList<>()__		for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) {_			if (mappedException.isAssignableFrom(exceptionType)) {_				matches.add(mappedException)__			}_		}_		if (!matches.isEmpty()) {_			matches.sort(new ExceptionDepthComparator(exceptionType))__			return this.mappedMethods.get(matches.get(0))__		}_		else {_			return null__		}_	};return,the,link,method,mapped,to,the,given,exception,type,or,code,null,if,none;nullable,private,method,get,mapped,method,class,extends,throwable,exception,type,list,class,extends,throwable,matches,new,array,list,for,class,extends,throwable,mapped,exception,this,mapped,methods,key,set,if,mapped,exception,is,assignable,from,exception,type,matches,add,mapped,exception,if,matches,is,empty,matches,sort,new,exception,depth,comparator,exception,type,return,this,mapped,methods,get,matches,get,0,else,return,null
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1495868221;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1496837955;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1497341397;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND))__		}_		return (method != NO_METHOD_FOUND ? method : null)__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,null,method,return,method,method,null
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1498780456;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method)__		}_		return method__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1504012043;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method)__		}_		return method__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1518772998;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method)__		}_		return method__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1530174524;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method)__		}_		return method__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,return,method
ExceptionHandlerMethodResolver -> @Nullable 	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType);1533765296;Find a {@link Method} to handle the given exception type. This can be_useful if an {@link Exception} instance is not available (e.g. for tools)._@param exceptionType the exception type_@return a Method to handle the exception, or {@code null} if none found;@Nullable_	public Method resolveMethodByExceptionType(Class<? extends Throwable> exceptionType) {_		Method method = this.exceptionLookupCache.get(exceptionType)__		if (method == null) {_			method = getMappedMethod(exceptionType)__			this.exceptionLookupCache.put(exceptionType, method)__		}_		return method__	};find,a,link,method,to,handle,the,given,exception,type,this,can,be,useful,if,an,link,exception,instance,is,not,available,e,g,for,tools,param,exception,type,the,exception,type,return,a,method,to,handle,the,exception,or,code,null,if,none,found;nullable,public,method,resolve,method,by,exception,type,class,extends,throwable,exception,type,method,method,this,exception,lookup,cache,get,exception,type,if,method,null,method,get,mapped,method,exception,type,this,exception,lookup,cache,put,exception,type,method,return,method
