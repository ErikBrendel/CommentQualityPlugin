commented;modifiers;parameterAmount;loc;comment;code
false;public;2;53;;@Override public boolean matches(int pathIndex, PathPattern.MatchingContext matchingContext) {     if (pathIndex >= matchingContext.pathLength) {         // no more path left to match this element         return false.     }     String candidateCapture = matchingContext.pathElementValue(pathIndex).     if (candidateCapture.length() == 0) {         return false.     }     if (this.constraintPattern != null) {         // TODO possible optimization - only regex match if rest of pattern matches?         // Benefit likely to vary pattern to pattern         Matcher matcher = this.constraintPattern.matcher(candidateCapture).         if (matcher.groupCount() != 0) {             throw new IllegalArgumentException("No capture groups allowed in the constraint regex: " + this.constraintPattern.pattern()).         }         if (!matcher.matches()) {             return false.         }     }     boolean match = false.     pathIndex++.     if (isNoMorePattern()) {         if (matchingContext.determineRemainingPath) {             matchingContext.remainingPathIndex = pathIndex.             match = true.         } else {             // Needs to be at least one character #SPR15264             match = (pathIndex == matchingContext.pathLength).             if (!match && matchingContext.isMatchOptionalTrailingSeparator()) {                 // (nextPos > candidateIndex) &&                 match = (pathIndex + 1) == matchingContext.pathLength && matchingContext.isSeparator(pathIndex).             }         }     } else {         if (this.next != null) {             match = this.next.matches(pathIndex, matchingContext).         }     }     if (match && matchingContext.extractingVariables) {         matchingContext.set(this.variableName, candidateCapture, ((PathSegment) matchingContext.pathElements.get(pathIndex - 1)).parameters()).     }     return match. }
false;public;0;3;;public String getVariableName() {     return this.variableName. }
false;public;0;4;;@Override public int getNormalizedLength() {     return 1. }
false;public;0;4;;@Override public int getWildcardCount() {     return 0. }
false;public;0;4;;@Override public int getCaptureCount() {     return 1. }
false;public;0;4;;@Override public int getScore() {     return CAPTURE_VARIABLE_WEIGHT. }
false;public;0;4;;public String toString() {     return "CaptureVariable({" + this.variableName + (this.constraintPattern != null ? ":" + this.constraintPattern.pattern() : "") + "})". }
false;public;0;10;;public char[] getChars() {     StringBuilder b = new StringBuilder().     b.append("{").     b.append(this.variableName).     if (this.constraintPattern != null) {         b.append(":").append(this.constraintPattern.pattern()).     }     b.append("}").     return b.toString().toCharArray(). }
