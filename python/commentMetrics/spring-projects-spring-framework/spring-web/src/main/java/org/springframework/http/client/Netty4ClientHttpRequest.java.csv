commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpMethod getMethod() {     return this.method. }
false;public;0;4;;@Override public String getMethodValue() {     return this.method.name(). }
false;public;0;4;;@Override public URI getURI() {     return this.uri. }
false;public;0;18;;@Override public ClientHttpResponse execute() throws IOException {     try {         return executeAsync().get().     } catch (InterruptedException ex) {         Thread.currentThread().interrupt().         throw new IOException("Interrupted during request execution", ex).     } catch (ExecutionException ex) {         if (ex.getCause() instanceof IOException) {             throw (IOException) ex.getCause().         } else {             throw new IOException(ex.getMessage(), ex.getCause()).         }     } }
false;protected;1;4;;@Override protected OutputStream getBodyInternal(HttpHeaders headers) throws IOException {     return this.body. }
false;protected;1;19;;@Override protected ListenableFuture<ClientHttpResponse> executeInternal(final HttpHeaders headers) throws IOException {     final SettableListenableFuture<ClientHttpResponse> responseFuture = new SettableListenableFuture<>().     ChannelFutureListener connectionListener = future -> {         if (future.isSuccess()) {             Channel channel = future.channel().             channel.pipeline().addLast(new RequestExecuteHandler(responseFuture)).             FullHttpRequest nettyRequest = createFullHttpRequest(headers).             channel.writeAndFlush(nettyRequest).         } else {             responseFuture.setException(future.cause()).         }     }.     this.bootstrap.connect(this.uri.getHost(), getPort(this.uri)).addListener(connectionListener).     return responseFuture. }
false;private;1;18;;private FullHttpRequest createFullHttpRequest(HttpHeaders headers) {     io.netty.handler.codec.http.HttpMethod nettyMethod = io.netty.handler.codec.http.HttpMethod.valueOf(this.method.name()).     String authority = this.uri.getRawAuthority().     String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length()).     FullHttpRequest nettyRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer()).     nettyRequest.headers().set(HttpHeaders.HOST, this.uri.getHost() + ":" + getPort(this.uri)).     nettyRequest.headers().set(HttpHeaders.CONNECTION, "close").     headers.forEach((headerName, headerValues) -> nettyRequest.headers().add(headerName, headerValues)).     if (!nettyRequest.headers().contains(HttpHeaders.CONTENT_LENGTH) && this.body.buffer().readableBytes() > 0) {         nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes()).     }     return nettyRequest. }
false;private,static;1;12;;private static int getPort(URI uri) {     int port = uri.getPort().     if (port == -1) {         if ("http".equalsIgnoreCase(uri.getScheme())) {             port = 80.         } else if ("https".equalsIgnoreCase(uri.getScheme())) {             port = 443.         }     }     return port. }
false;protected;2;4;;@Override protected void channelRead0(ChannelHandlerContext context, FullHttpResponse response) throws Exception {     this.responseFuture.set(new Netty4ClientHttpResponse(context, response)). }
false;public;2;4;;@Override public void exceptionCaught(ChannelHandlerContext context, Throwable cause) throws Exception {     this.responseFuture.setException(cause). }
