commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the name of the parameter in the multipart form.  * @return the name of the parameter (never {@code null} or empty)  */ ;/**  * Return the name of the parameter in the multipart form.  * @return the name of the parameter (never {@code null} or empty)  */ String getName().
true;;0;2;/**  * Return the original filename in the client's filesystem.  * <p>This may contain path information depending on the browser used,  * but it typically will not with any other than Opera.  * @return the original filename, or the empty String if no file has been chosen  * in the multipart form, or {@code null} if not defined or not available  * @see org.apache.commons.fileupload.FileItem#getName()  * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename  */ ;/**  * Return the original filename in the client's filesystem.  * <p>This may contain path information depending on the browser used,  * but it typically will not with any other than Opera.  * @return the original filename, or the empty String if no file has been chosen  * in the multipart form, or {@code null} if not defined or not available  * @see org.apache.commons.fileupload.FileItem#getName()  * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename  */ @Nullable String getOriginalFilename().
true;;0;2;/**  * Return the content type of the file.  * @return the content type, or {@code null} if not defined  * (or no file has been chosen in the multipart form)  */ ;/**  * Return the content type of the file.  * @return the content type, or {@code null} if not defined  * (or no file has been chosen in the multipart form)  */ @Nullable String getContentType().
true;;0;1;/**  * Return whether the uploaded file is empty, that is, either no file has  * been chosen in the multipart form or the chosen file has no content.  */ ;/**  * Return whether the uploaded file is empty, that is, either no file has  * been chosen in the multipart form or the chosen file has no content.  */ boolean isEmpty().
true;;0;1;/**  * Return the size of the file in bytes.  * @return the size of the file, or 0 if empty  */ ;/**  * Return the size of the file in bytes.  * @return the size of the file, or 0 if empty  */ long getSize().
true;;0;1;/**  * Return the contents of the file as an array of bytes.  * @return the contents of the file as bytes, or an empty byte array if empty  * @throws IOException in case of access errors (if the temporary store fails)  */ ;/**  * Return the contents of the file as an array of bytes.  * @return the contents of the file as bytes, or an empty byte array if empty  * @throws IOException in case of access errors (if the temporary store fails)  */ byte[] getBytes() throws IOException.
true;;0;2;/**  * Return an InputStream to read the contents of the file from.  * <p>The user is responsible for closing the returned stream.  * @return the contents of the file as stream, or an empty stream if empty  * @throws IOException in case of access errors (if the temporary store fails)  */ ;/**  * Return an InputStream to read the contents of the file from.  * <p>The user is responsible for closing the returned stream.  * @return the contents of the file as stream, or an empty stream if empty  * @throws IOException in case of access errors (if the temporary store fails)  */ @Override InputStream getInputStream() throws IOException.
true;default;0;3;/**  * Return a Resource representation of this MultipartFile. This can be used  * as input to the {@code RestTemplate} or the {@code WebClient} to expose  * content length and the filename along with the InputStream.  * @return this MultipartFile adapted to the Resource contract  * @since 5.1  */ ;/**  * Return a Resource representation of this MultipartFile. This can be used  * as input to the {@code RestTemplate} or the {@code WebClient} to expose  * content length and the filename along with the InputStream.  * @return this MultipartFile adapted to the Resource contract  * @since 5.1  */ default Resource getResource() {     return new MultipartFileResource(this). }
true;;1;1;/**  * Transfer the received file to the given destination file.  * <p>This may either move the file in the filesystem, copy the file in the  * filesystem, or save memory-held contents to the destination file. If the  * destination file already exists, it will be deleted first.  * <p>If the target file has been moved in the filesystem, this operation  * cannot be invoked again afterwards. Therefore, call this method just once  * in order to work with any storage mechanism.  * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage  * may be container-dependent, including the base directory for relative  * destinations specified here (e.g. with Servlet 3.0 multipart handling).  * For absolute destinations, the target file may get renamed/moved from its  * temporary location or newly copied, even if a temporary copy already exists.  * @param dest the destination file (typically absolute)  * @throws IOException in case of reading or writing errors  * @throws IllegalStateException if the file has already been moved  * in the filesystem and is not available anymore for another transfer  * @see org.apache.commons.fileupload.FileItem#write(File)  * @see javax.servlet.http.Part#write(String)  */ ;/**  * Transfer the received file to the given destination file.  * <p>This may either move the file in the filesystem, copy the file in the  * filesystem, or save memory-held contents to the destination file. If the  * destination file already exists, it will be deleted first.  * <p>If the target file has been moved in the filesystem, this operation  * cannot be invoked again afterwards. Therefore, call this method just once  * in order to work with any storage mechanism.  * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage  * may be container-dependent, including the base directory for relative  * destinations specified here (e.g. with Servlet 3.0 multipart handling).  * For absolute destinations, the target file may get renamed/moved from its  * temporary location or newly copied, even if a temporary copy already exists.  * @param dest the destination file (typically absolute)  * @throws IOException in case of reading or writing errors  * @throws IllegalStateException if the file has already been moved  * in the filesystem and is not available anymore for another transfer  * @see org.apache.commons.fileupload.FileItem#write(File)  * @see javax.servlet.http.Part#write(String)  */ void transferTo(File dest) throws IOException, IllegalStateException.
true;default;1;3;/**  * Transfer the received file to the given destination file.  * <p>The default implementation simply copies the file input stream.  * @since 5.1  * @see #getInputStream()  * @see #transferTo(File)  */ ;/**  * Transfer the received file to the given destination file.  * <p>The default implementation simply copies the file input stream.  * @since 5.1  * @see #getInputStream()  * @see #transferTo(File)  */ default void transferTo(Path dest) throws IOException, IllegalStateException {     FileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest)). }
