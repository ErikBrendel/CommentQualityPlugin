commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the name of the session header to use for the session id.  * The name is used to extract the session id from the request headers as  * well to set the session id on the response headers.  * <p>By default set to {@code DEFAULT_HEADER_NAME}  * @param headerName the header name  */ ;/**  * Set the name of the session header to use for the session id.  * The name is used to extract the session id from the request headers as  * well to set the session id on the response headers.  * <p>By default set to {@code DEFAULT_HEADER_NAME}  * @param headerName the header name  */ public void setHeaderName(String headerName) {     Assert.hasText(headerName, "'headerName' must not be empty").     this.headerName = headerName. }
true;public;0;3;/**  * Return the configured header name.  * @return the configured header name  */ ;/**  * Return the configured header name.  * @return the configured header name  */ public String getHeaderName() {     return this.headerName. }
false;public;1;5;;@Override public List<String> resolveSessionIds(ServerWebExchange exchange) {     HttpHeaders headers = exchange.getRequest().getHeaders().     return headers.getOrDefault(getHeaderName(), Collections.emptyList()). }
false;public;2;5;;@Override public void setSessionId(ServerWebExchange exchange, String id) {     Assert.notNull(id, "'id' is required.").     exchange.getResponse().getHeaders().set(getHeaderName(), id). }
false;public;1;4;;@Override public void expireSession(ServerWebExchange exchange) {     this.setSessionId(exchange, ""). }
