# id;timestamp;commentText;codeText;commentWords;codeWords
HessianClientInterceptor -> public void setProxyFactory(@Nullable HessianProxyFactory proxyFactory);1496837955;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(@Nullable HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,nullable,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setProxyFactory(@Nullable HessianProxyFactory proxyFactory);1498780456;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(@Nullable HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,nullable,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setProxyFactory(@Nullable HessianProxyFactory proxyFactory);1502974979;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(@Nullable HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,nullable,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1328020251;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1356735495;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1357119239;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1367327603;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1368482696;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1496837955;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1498780456;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setHessian2Request(boolean hessian2);1502974979;Set whether version 2 of the Hessian protocol should be used for_parsing requests. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2Request(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2request,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1328020251;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type <code>com.caucho.hessian.io.SerializerFactory</code>,_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,code,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1356735495;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1357119239;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1367327603;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1368482696;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1496837955;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1498780456;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setSerializerFactory(SerializerFactory serializerFactory);1502974979;Specify the Hessian SerializerFactory to use._<p>This will typically be passed in as an inner bean definition_of type {@code com.caucho.hessian.io.SerializerFactory},_with custom bean property values applied.;public void setSerializerFactory(SerializerFactory serializerFactory) {_		this.proxyFactory.setSerializerFactory(serializerFactory)__	};specify,the,hessian,serializer,factory,to,use,p,this,will,typically,be,passed,in,as,an,inner,bean,definition,of,type,code,com,caucho,hessian,io,serializer,factory,with,custom,bean,property,values,applied;public,void,set,serializer,factory,serializer,factory,serializer,factory,this,proxy,factory,set,serializer,factory,serializer,factory
HessianClientInterceptor -> public void setProxyFactory(HessianProxyFactory proxyFactory);1328020251;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setProxyFactory(HessianProxyFactory proxyFactory);1356735495;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setProxyFactory(HessianProxyFactory proxyFactory);1357119239;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setProxyFactory(HessianProxyFactory proxyFactory);1367327603;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> public void setProxyFactory(HessianProxyFactory proxyFactory);1368482696;Set the HessianProxyFactory instance to use._If not specified, a default HessianProxyFactory will be created._<p>Allows to use an externally configured factory instance,_in particular a custom HessianProxyFactory subclass.;public void setProxyFactory(HessianProxyFactory proxyFactory) {_		this.proxyFactory = (proxyFactory != null ? proxyFactory : new HessianProxyFactory())__	};set,the,hessian,proxy,factory,instance,to,use,if,not,specified,a,default,hessian,proxy,factory,will,be,created,p,allows,to,use,an,externally,configured,factory,instance,in,particular,a,custom,hessian,proxy,factory,subclass;public,void,set,proxy,factory,hessian,proxy,factory,proxy,factory,this,proxy,factory,proxy,factory,null,proxy,factory,new,hessian,proxy,factory
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1328020251;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_			    "Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1356735495;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1357119239;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1367327603;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1368482696;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1496837955;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1498780456;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> protected RemoteAccessException convertHessianAccessException(Throwable ex);1502974979;Convert the given Hessian access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertHessianAccessException(Throwable ex) {_		if (ex instanceof HessianConnectionException || ex instanceof ConnectException) {_			return new RemoteConnectFailureException(_					"Cannot connect to Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_		else {_			return new RemoteAccessException(_				"Cannot access Hessian remote service at [" + getServiceUrl() + "]", ex)__		}_	};convert,the,given,hessian,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,hessian,access,exception,throwable,ex,if,ex,instanceof,hessian,connection,exception,ex,instanceof,connect,exception,return,new,remote,connect,failure,exception,cannot,connect,to,hessian,remote,service,at,get,service,url,ex,else,return,new,remote,access,exception,cannot,access,hessian,remote,service,at,get,service,url,ex
HessianClientInterceptor -> public void setConnectTimeout(long timeout);1367327603;Set the socket connect timeout to use for the Hessian client._@see com.caucho.hessian.client.HessianProxyFactory#setConnectTimeout;public void setConnectTimeout(long timeout) {_		this.proxyFactory.setConnectTimeout(timeout)__	};set,the,socket,connect,timeout,to,use,for,the,hessian,client,see,com,caucho,hessian,client,hessian,proxy,factory,set,connect,timeout;public,void,set,connect,timeout,long,timeout,this,proxy,factory,set,connect,timeout,timeout
HessianClientInterceptor -> public void setConnectTimeout(long timeout);1368482696;Set the socket connect timeout to use for the Hessian client._@see com.caucho.hessian.client.HessianProxyFactory#setConnectTimeout;public void setConnectTimeout(long timeout) {_		this.proxyFactory.setConnectTimeout(timeout)__	};set,the,socket,connect,timeout,to,use,for,the,hessian,client,see,com,caucho,hessian,client,hessian,proxy,factory,set,connect,timeout;public,void,set,connect,timeout,long,timeout,this,proxy,factory,set,connect,timeout,timeout
HessianClientInterceptor -> public void setConnectTimeout(long timeout);1496837955;Set the socket connect timeout to use for the Hessian client._@see com.caucho.hessian.client.HessianProxyFactory#setConnectTimeout;public void setConnectTimeout(long timeout) {_		this.proxyFactory.setConnectTimeout(timeout)__	};set,the,socket,connect,timeout,to,use,for,the,hessian,client,see,com,caucho,hessian,client,hessian,proxy,factory,set,connect,timeout;public,void,set,connect,timeout,long,timeout,this,proxy,factory,set,connect,timeout,timeout
HessianClientInterceptor -> public void setConnectTimeout(long timeout);1498780456;Set the socket connect timeout to use for the Hessian client._@see com.caucho.hessian.client.HessianProxyFactory#setConnectTimeout;public void setConnectTimeout(long timeout) {_		this.proxyFactory.setConnectTimeout(timeout)__	};set,the,socket,connect,timeout,to,use,for,the,hessian,client,see,com,caucho,hessian,client,hessian,proxy,factory,set,connect,timeout;public,void,set,connect,timeout,long,timeout,this,proxy,factory,set,connect,timeout,timeout
HessianClientInterceptor -> public void setConnectTimeout(long timeout);1502974979;Set the socket connect timeout to use for the Hessian client._@see com.caucho.hessian.client.HessianProxyFactory#setConnectTimeout;public void setConnectTimeout(long timeout) {_		this.proxyFactory.setConnectTimeout(timeout)__	};set,the,socket,connect,timeout,to,use,for,the,hessian,client,see,com,caucho,hessian,client,hessian,proxy,factory,set,connect,timeout;public,void,set,connect,timeout,long,timeout,this,proxy,factory,set,connect,timeout,timeout
HessianClientInterceptor -> public void setConnectionFactory(HessianConnectionFactory connectionFactory);1367327603;Specify a custom HessianConnectionFactory to use for the Hessian client.;public void setConnectionFactory(HessianConnectionFactory connectionFactory) {_		this.proxyFactory.setConnectionFactory(connectionFactory)__	};specify,a,custom,hessian,connection,factory,to,use,for,the,hessian,client;public,void,set,connection,factory,hessian,connection,factory,connection,factory,this,proxy,factory,set,connection,factory,connection,factory
HessianClientInterceptor -> public void setConnectionFactory(HessianConnectionFactory connectionFactory);1368482696;Specify a custom HessianConnectionFactory to use for the Hessian client.;public void setConnectionFactory(HessianConnectionFactory connectionFactory) {_		this.proxyFactory.setConnectionFactory(connectionFactory)__	};specify,a,custom,hessian,connection,factory,to,use,for,the,hessian,client;public,void,set,connection,factory,hessian,connection,factory,connection,factory,this,proxy,factory,set,connection,factory,connection,factory
HessianClientInterceptor -> public void setConnectionFactory(HessianConnectionFactory connectionFactory);1496837955;Specify a custom HessianConnectionFactory to use for the Hessian client.;public void setConnectionFactory(HessianConnectionFactory connectionFactory) {_		this.proxyFactory.setConnectionFactory(connectionFactory)__	};specify,a,custom,hessian,connection,factory,to,use,for,the,hessian,client;public,void,set,connection,factory,hessian,connection,factory,connection,factory,this,proxy,factory,set,connection,factory,connection,factory
HessianClientInterceptor -> public void setConnectionFactory(HessianConnectionFactory connectionFactory);1498780456;Specify a custom HessianConnectionFactory to use for the Hessian client.;public void setConnectionFactory(HessianConnectionFactory connectionFactory) {_		this.proxyFactory.setConnectionFactory(connectionFactory)__	};specify,a,custom,hessian,connection,factory,to,use,for,the,hessian,client;public,void,set,connection,factory,hessian,connection,factory,connection,factory,this,proxy,factory,set,connection,factory,connection,factory
HessianClientInterceptor -> public void setConnectionFactory(HessianConnectionFactory connectionFactory);1502974979;Specify a custom HessianConnectionFactory to use for the Hessian client.;public void setConnectionFactory(HessianConnectionFactory connectionFactory) {_		this.proxyFactory.setConnectionFactory(connectionFactory)__	};specify,a,custom,hessian,connection,factory,to,use,for,the,hessian,client;public,void,set,connection,factory,hessian,connection,factory,connection,factory,this,proxy,factory,set,connection,factory,connection,factory
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1328020251;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1356735495;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1357119239;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1367327603;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1368482696;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1496837955;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1498780456;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setSendCollectionType(boolean sendCollectionType);1502974979;Set whether to send the Java collection type for each serialized_collection. Default is "true".;public void setSendCollectionType(boolean sendCollectionType) {_		this.proxyFactory.getSerializerFactory().setSendCollectionType(sendCollectionType)__	};set,whether,to,send,the,java,collection,type,for,each,serialized,collection,default,is,true;public,void,set,send,collection,type,boolean,send,collection,type,this,proxy,factory,get,serializer,factory,set,send,collection,type,send,collection,type
HessianClientInterceptor -> public void setDebug(boolean debug);1328020251;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1356735495;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1357119239;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1367327603;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1368482696;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1496837955;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1498780456;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setDebug(boolean debug);1502974979;Set whether Hessian's debug mode should be enabled._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setDebug;public void setDebug(boolean debug) {_		this.proxyFactory.setDebug(debug)__	};set,whether,hessian,s,debug,mode,should,be,enabled,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,debug;public,void,set,debug,boolean,debug,this,proxy,factory,set,debug,debug
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1328020251;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1356735495;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1357119239;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1367327603;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1368482696;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1496837955;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1498780456;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setOverloadEnabled(boolean overloadEnabled);1502974979;Set whether overloaded methods should be enabled for remote invocations._Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setOverloadEnabled;public void setOverloadEnabled(boolean overloadEnabled) {_		this.proxyFactory.setOverloadEnabled(overloadEnabled)__	};set,whether,overloaded,methods,should,be,enabled,for,remote,invocations,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,overload,enabled;public,void,set,overload,enabled,boolean,overload,enabled,this,proxy,factory,set,overload,enabled,overload,enabled
HessianClientInterceptor -> public void setAllowNonSerializable(boolean allowNonSerializable);1367327603;Set whether to allow non-serializable types as Hessian arguments_and return values. Default is "true".;public void setAllowNonSerializable(boolean allowNonSerializable) {_		this.proxyFactory.getSerializerFactory().setAllowNonSerializable(allowNonSerializable)__	};set,whether,to,allow,non,serializable,types,as,hessian,arguments,and,return,values,default,is,true;public,void,set,allow,non,serializable,boolean,allow,non,serializable,this,proxy,factory,get,serializer,factory,set,allow,non,serializable,allow,non,serializable
HessianClientInterceptor -> public void setAllowNonSerializable(boolean allowNonSerializable);1368482696;Set whether to allow non-serializable types as Hessian arguments_and return values. Default is "true".;public void setAllowNonSerializable(boolean allowNonSerializable) {_		this.proxyFactory.getSerializerFactory().setAllowNonSerializable(allowNonSerializable)__	};set,whether,to,allow,non,serializable,types,as,hessian,arguments,and,return,values,default,is,true;public,void,set,allow,non,serializable,boolean,allow,non,serializable,this,proxy,factory,get,serializer,factory,set,allow,non,serializable,allow,non,serializable
HessianClientInterceptor -> public void setAllowNonSerializable(boolean allowNonSerializable);1496837955;Set whether to allow non-serializable types as Hessian arguments_and return values. Default is "true".;public void setAllowNonSerializable(boolean allowNonSerializable) {_		this.proxyFactory.getSerializerFactory().setAllowNonSerializable(allowNonSerializable)__	};set,whether,to,allow,non,serializable,types,as,hessian,arguments,and,return,values,default,is,true;public,void,set,allow,non,serializable,boolean,allow,non,serializable,this,proxy,factory,get,serializer,factory,set,allow,non,serializable,allow,non,serializable
HessianClientInterceptor -> public void setAllowNonSerializable(boolean allowNonSerializable);1498780456;Set whether to allow non-serializable types as Hessian arguments_and return values. Default is "true".;public void setAllowNonSerializable(boolean allowNonSerializable) {_		this.proxyFactory.getSerializerFactory().setAllowNonSerializable(allowNonSerializable)__	};set,whether,to,allow,non,serializable,types,as,hessian,arguments,and,return,values,default,is,true;public,void,set,allow,non,serializable,boolean,allow,non,serializable,this,proxy,factory,get,serializer,factory,set,allow,non,serializable,allow,non,serializable
HessianClientInterceptor -> public void setAllowNonSerializable(boolean allowNonSerializable);1502974979;Set whether to allow non-serializable types as Hessian arguments_and return values. Default is "true".;public void setAllowNonSerializable(boolean allowNonSerializable) {_		this.proxyFactory.getSerializerFactory().setAllowNonSerializable(allowNonSerializable)__	};set,whether,to,allow,non,serializable,types,as,hessian,arguments,and,return,values,default,is,true;public,void,set,allow,non,serializable,boolean,allow,non,serializable,this,proxy,factory,get,serializer,factory,set,allow,non,serializable,allow,non,serializable
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1328020251;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1356735495;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1357119239;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1367327603;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1368482696;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1496837955;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1498780456;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setChunkedPost(boolean chunkedPost);1502974979;Set whether to use a chunked post for sending a Hessian request._@see com.caucho.hessian.client.HessianProxyFactory#setChunkedPost;public void setChunkedPost(boolean chunkedPost) {_		this.proxyFactory.setChunkedPost(chunkedPost)__	};set,whether,to,use,a,chunked,post,for,sending,a,hessian,request,see,com,caucho,hessian,client,hessian,proxy,factory,set,chunked,post;public,void,set,chunked,post,boolean,chunked,post,this,proxy,factory,set,chunked,post,chunked,post
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1328020251;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1356735495;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1357119239;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1367327603;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1368482696;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1496837955;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1498780456;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2Reply(boolean hessian2);1502974979;Set whether version 2 of the Hessian protocol should be used for_parsing replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Reply;public void setHessian2Reply(boolean hessian2) {_		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2reply;public,void,set,hessian2reply,boolean,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setReadTimeout(long timeout);1328020251;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1356735495;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1357119239;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1367327603;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1368482696;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1496837955;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1498780456;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setReadTimeout(long timeout);1502974979;Set the timeout to use when waiting for a reply from the Hessian service._@see com.caucho.hessian.client.HessianProxyFactory#setReadTimeout;public void setReadTimeout(long timeout) {_		this.proxyFactory.setReadTimeout(timeout)__	};set,the,timeout,to,use,when,waiting,for,a,reply,from,the,hessian,service,see,com,caucho,hessian,client,hessian,proxy,factory,set,read,timeout;public,void,set,read,timeout,long,timeout,this,proxy,factory,set,read,timeout,timeout
HessianClientInterceptor -> public void setUsername(String username);1328020251;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1356735495;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1357119239;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1367327603;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1368482696;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1496837955;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1498780456;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setUsername(String username);1502974979;Set the username that this factory should use to access the remote service._Default is none._<p>The username will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setUser;public void setUsername(String username) {_		this.proxyFactory.setUser(username)__	};set,the,username,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,username,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,user;public,void,set,username,string,username,this,proxy,factory,set,user,username
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1328020251;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1356735495;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1357119239;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1367327603;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1368482696;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1496837955;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1498780456;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setHessian2(boolean hessian2);1502974979;Set whether version 2 of the Hessian protocol should be used for_parsing requests and replies. Default is "false"._@see com.caucho.hessian.client.HessianProxyFactory#setHessian2Request;public void setHessian2(boolean hessian2) {_		this.proxyFactory.setHessian2Request(hessian2)__		this.proxyFactory.setHessian2Reply(hessian2)__	};set,whether,version,2,of,the,hessian,protocol,should,be,used,for,parsing,requests,and,replies,default,is,false,see,com,caucho,hessian,client,hessian,proxy,factory,set,hessian2request;public,void,set,hessian2,boolean,hessian2,this,proxy,factory,set,hessian2request,hessian2,this,proxy,factory,set,hessian2reply,hessian2
HessianClientInterceptor -> public void setPassword(String password);1328020251;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1356735495;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1357119239;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1367327603;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1368482696;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1496837955;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1498780456;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> public void setPassword(String password);1502974979;Set the password that this factory should use to access the remote service._Default is none._<p>The password will be sent by Hessian via HTTP Basic Authentication._@see com.caucho.hessian.client.HessianProxyFactory#setPassword;public void setPassword(String password) {_		this.proxyFactory.setPassword(password)__	};set,the,password,that,this,factory,should,use,to,access,the,remote,service,default,is,none,p,the,password,will,be,sent,by,hessian,via,http,basic,authentication,see,com,caucho,hessian,client,hessian,proxy,factory,set,password;public,void,set,password,string,password,this,proxy,factory,set,password,password
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1328020251;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1356735495;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1357119239;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1367327603;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl(), getBeanClassLoader())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url,get,bean,class,loader
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1368482696;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl(), getBeanClassLoader())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url,get,bean,class,loader
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1496837955;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl(), getBeanClassLoader())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url,get,bean,class,loader
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1498780456;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl(), getBeanClassLoader())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url,get,bean,class,loader
HessianClientInterceptor -> protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException;1502974979;Create the Hessian proxy that is wrapped by this interceptor._@param proxyFactory the proxy factory to use_@return the Hessian proxy_@throws MalformedURLException if thrown by the proxy factory_@see com.caucho.hessian.client.HessianProxyFactory#create;protected Object createHessianProxy(HessianProxyFactory proxyFactory) throws MalformedURLException {_		Assert.notNull(getServiceInterface(), "'serviceInterface' is required")__		return proxyFactory.create(getServiceInterface(), getServiceUrl(), getBeanClassLoader())__	};create,the,hessian,proxy,that,is,wrapped,by,this,interceptor,param,proxy,factory,the,proxy,factory,to,use,return,the,hessian,proxy,throws,malformed,urlexception,if,thrown,by,the,proxy,factory,see,com,caucho,hessian,client,hessian,proxy,factory,create;protected,object,create,hessian,proxy,hessian,proxy,factory,proxy,factory,throws,malformed,urlexception,assert,not,null,get,service,interface,service,interface,is,required,return,proxy,factory,create,get,service,interface,get,service,url,get,bean,class,loader
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1328020251;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1356735495;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1357119239;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1367327603;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1368482696;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1496837955;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1498780456;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
HessianClientInterceptor -> public void prepare() throws RemoteLookupFailureException;1502974979;Initialize the Hessian proxy for this interceptor._@throws RemoteLookupFailureException if the service URL is invalid;public void prepare() throws RemoteLookupFailureException {_		try {_			this.hessianProxy = createHessianProxy(this.proxyFactory)__		}_		catch (MalformedURLException ex) {_			throw new RemoteLookupFailureException("Service URL [" + getServiceUrl() + "] is invalid", ex)__		}_	};initialize,the,hessian,proxy,for,this,interceptor,throws,remote,lookup,failure,exception,if,the,service,url,is,invalid;public,void,prepare,throws,remote,lookup,failure,exception,try,this,hessian,proxy,create,hessian,proxy,this,proxy,factory,catch,malformed,urlexception,ex,throw,new,remote,lookup,failure,exception,service,url,get,service,url,is,invalid,ex
