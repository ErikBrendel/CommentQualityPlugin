commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Errors getSource() {     return this.source. }
false;public;0;4;;@Override public String getObjectName() {     return this.source.getObjectName(). }
false;public;1;4;;@Override public void setNestedPath(String nestedPath) {     this.source.setNestedPath(nestedPath). }
false;public;0;4;;@Override public String getNestedPath() {     return this.source.getNestedPath(). }
false;public;1;4;;@Override public void pushNestedPath(String subPath) {     this.source.pushNestedPath(subPath). }
false;public;0;4;;@Override public void popNestedPath() throws IllegalStateException {     this.source.popNestedPath(). }
false;public;1;4;;@Override public void reject(String errorCode) {     this.source.reject(errorCode). }
false;public;2;4;;@Override public void reject(String errorCode, String defaultMessage) {     this.source.reject(errorCode, defaultMessage). }
false;public;3;4;;@Override public void reject(String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {     this.source.reject(errorCode, errorArgs, defaultMessage). }
false;public;2;4;;@Override public void rejectValue(@Nullable String field, String errorCode) {     this.source.rejectValue(field, errorCode). }
false;public;3;4;;@Override public void rejectValue(@Nullable String field, String errorCode, String defaultMessage) {     this.source.rejectValue(field, errorCode, defaultMessage). }
false;public;4;6;;@Override public void rejectValue(@Nullable String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {     this.source.rejectValue(field, errorCode, errorArgs, defaultMessage). }
false;public;1;4;;@Override public void addAllErrors(Errors errors) {     this.source.addAllErrors(errors). }
false;public;0;4;;@Override public boolean hasErrors() {     return this.source.hasErrors(). }
false;public;0;4;;@Override public int getErrorCount() {     return this.source.getErrorCount(). }
false;public;0;4;;@Override public List<ObjectError> getAllErrors() {     return escapeObjectErrors(this.source.getAllErrors()). }
false;public;0;4;;@Override public boolean hasGlobalErrors() {     return this.source.hasGlobalErrors(). }
false;public;0;4;;@Override public int getGlobalErrorCount() {     return this.source.getGlobalErrorCount(). }
false;public;0;4;;@Override public List<ObjectError> getGlobalErrors() {     return escapeObjectErrors(this.source.getGlobalErrors()). }
false;public;0;5;;@Override @Nullable public ObjectError getGlobalError() {     return escapeObjectError(this.source.getGlobalError()). }
false;public;0;4;;@Override public boolean hasFieldErrors() {     return this.source.hasFieldErrors(). }
false;public;0;4;;@Override public int getFieldErrorCount() {     return this.source.getFieldErrorCount(). }
false;public;0;4;;@Override public List<FieldError> getFieldErrors() {     return this.source.getFieldErrors(). }
false;public;0;5;;@Override @Nullable public FieldError getFieldError() {     return this.source.getFieldError(). }
false;public;1;4;;@Override public boolean hasFieldErrors(String field) {     return this.source.hasFieldErrors(field). }
false;public;1;4;;@Override public int getFieldErrorCount(String field) {     return this.source.getFieldErrorCount(field). }
false;public;1;4;;@Override public List<FieldError> getFieldErrors(String field) {     return escapeObjectErrors(this.source.getFieldErrors(field)). }
false;public;1;5;;@Override @Nullable public FieldError getFieldError(String field) {     return escapeObjectError(this.source.getFieldError(field)). }
false;public;1;6;;@Override @Nullable public Object getFieldValue(String field) {     Object value = this.source.getFieldValue(field).     return (value instanceof String ? HtmlUtils.htmlEscape((String) value) : value). }
false;public;1;5;;@Override @Nullable public Class<?> getFieldType(String field) {     return this.source.getFieldType(field). }
false;private;1;25;;@SuppressWarnings("unchecked") @Nullable private <T extends ObjectError> T escapeObjectError(@Nullable T source) {     if (source == null) {         return null.     }     String defaultMessage = source.getDefaultMessage().     if (defaultMessage != null) {         defaultMessage = HtmlUtils.htmlEscape(defaultMessage).     }     if (source instanceof FieldError) {         FieldError fieldError = (FieldError) source.         Object value = fieldError.getRejectedValue().         if (value instanceof String) {             value = HtmlUtils.htmlEscape((String) value).         }         return (T) new FieldError(fieldError.getObjectName(), fieldError.getField(), value, fieldError.isBindingFailure(), fieldError.getCodes(), fieldError.getArguments(), defaultMessage).     } else {         return (T) new ObjectError(source.getObjectName(), source.getCodes(), source.getArguments(), defaultMessage).     } }
false;private;1;7;;private <T extends ObjectError> List<T> escapeObjectErrors(List<T> source) {     List<T> escaped = new ArrayList<>(source.size()).     for (T objectError : source) {         escaped.add(escapeObjectError(objectError)).     }     return escaped. }
