# id;timestamp;commentText;codeText;commentWords;codeWords
ServletRequestUtils -> public static Integer getIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an Integer parameter, or <code>null</code> if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Integer value, or <code>null</code> if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Integer getIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredIntParameter(request, name)__	};get,an,integer,parameter,or,code,null,code,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,integer,value,or,code,null,code,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,integer,get,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,int,parameter,request,name
ServletRequestUtils -> public static Integer getIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an Integer parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Integer value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Integer getIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredIntParameter(request, name)__	};get,an,integer,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,integer,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,integer,get,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,int,parameter,request,name
ServletRequestUtils -> public static double getDoubleParameter(ServletRequest request, String name, double defaultVal);1328020251;Get a double parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static double getDoubleParameter(ServletRequest request, String name, double defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredDoubleParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,double,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,double,get,double,parameter,servlet,request,request,string,name,double,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,double,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static double getDoubleParameter(ServletRequest request, String name, double defaultVal);1356735495;Get a double parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static double getDoubleParameter(ServletRequest request, String name, double defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredDoubleParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,double,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,double,get,double,parameter,servlet,request,request,string,name,double,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,double,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static double getDoubleParameter(ServletRequest request, String name, double defaultVal);1495868221;Get a double parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static double getDoubleParameter(ServletRequest request, String name, double defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredDoubleParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,double,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,double,get,double,parameter,servlet,request,request,string,name,double,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,double,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static double getDoubleParameter(ServletRequest request, String name, double defaultVal);1496837955;Get a double parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static double getDoubleParameter(ServletRequest request, String name, double defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredDoubleParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,double,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,double,get,double,parameter,servlet,request,request,string,name,double,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,double,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static double getRequiredDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a double parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double getRequiredDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDouble(name, request.getParameter(name))__	};get,a,double,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,double,name,request,get,parameter,name
ServletRequestUtils -> public static double getRequiredDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a double parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double getRequiredDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDouble(name, request.getParameter(name))__	};get,a,double,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,double,name,request,get,parameter,name
ServletRequestUtils -> public static double getRequiredDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a double parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double getRequiredDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDouble(name, request.getParameter(name))__	};get,a,double,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,double,name,request,get,parameter,name
ServletRequestUtils -> public static double getRequiredDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a double parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double getRequiredDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDouble(name, request.getParameter(name))__	};get,a,double,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,double,name,request,get,parameter,name
ServletRequestUtils -> public static int[] getIntParameters(ServletRequest request, String name);1328020251;Get an array of int parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static int[] getIntParameters(ServletRequest request, String name) {_		try {_			return getRequiredIntParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new int[0]__		}_	};get,an,array,of,int,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,int,get,int,parameters,servlet,request,request,string,name,try,return,get,required,int,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,int,0
ServletRequestUtils -> public static int[] getIntParameters(ServletRequest request, String name);1356735495;Get an array of int parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static int[] getIntParameters(ServletRequest request, String name) {_		try {_			return getRequiredIntParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new int[0]__		}_	};get,an,array,of,int,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,int,get,int,parameters,servlet,request,request,string,name,try,return,get,required,int,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,int,0
ServletRequestUtils -> public static int[] getIntParameters(ServletRequest request, String name);1495868221;Get an array of int parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static int[] getIntParameters(ServletRequest request, String name) {_		try {_			return getRequiredIntParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new int[0]__		}_	};get,an,array,of,int,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,int,get,int,parameters,servlet,request,request,string,name,try,return,get,required,int,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,int,0
ServletRequestUtils -> public static int[] getIntParameters(ServletRequest request, String name);1496837955;Get an array of int parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static int[] getIntParameters(ServletRequest request, String name) {_		try {_			return getRequiredIntParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new int[0]__		}_	};get,an,array,of,int,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,int,get,int,parameters,servlet,request,request,string,name,try,return,get,required,int,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,int,0
ServletRequestUtils -> public static Long getLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a Long parameter, or <code>null</code> if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Long value, or <code>null</code> if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Long getLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredLongParameter(request, name)__	};get,a,long,parameter,or,code,null,code,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,long,value,or,code,null,code,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,long,parameter,request,name
ServletRequestUtils -> public static Long getLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a Long parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Long value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Long getLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredLongParameter(request, name)__	};get,a,long,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,long,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,long,parameter,request,name
ServletRequestUtils -> public static int getRequiredIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an int parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int getRequiredIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInt(name, request.getParameter(name))__	};get,an,int,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,int,name,request,get,parameter,name
ServletRequestUtils -> public static int getRequiredIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an int parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int getRequiredIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInt(name, request.getParameter(name))__	};get,an,int,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,int,name,request,get,parameter,name
ServletRequestUtils -> public static int getRequiredIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an int parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int getRequiredIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInt(name, request.getParameter(name))__	};get,an,int,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,int,name,request,get,parameter,name
ServletRequestUtils -> public static int getRequiredIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an int parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int getRequiredIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInt(name, request.getParameter(name))__	};get,an,int,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,int,name,request,get,parameter,name
ServletRequestUtils -> public static double[] getDoubleParameters(ServletRequest request, String name);1328020251;Get an array of double parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static double[] getDoubleParameters(ServletRequest request, String name) {_		try {_			return getRequiredDoubleParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new double[0]__		}_	};get,an,array,of,double,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,double,get,double,parameters,servlet,request,request,string,name,try,return,get,required,double,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,double,0
ServletRequestUtils -> public static double[] getDoubleParameters(ServletRequest request, String name);1356735495;Get an array of double parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static double[] getDoubleParameters(ServletRequest request, String name) {_		try {_			return getRequiredDoubleParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new double[0]__		}_	};get,an,array,of,double,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,double,get,double,parameters,servlet,request,request,string,name,try,return,get,required,double,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,double,0
ServletRequestUtils -> public static double[] getDoubleParameters(ServletRequest request, String name);1495868221;Get an array of double parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static double[] getDoubleParameters(ServletRequest request, String name) {_		try {_			return getRequiredDoubleParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new double[0]__		}_	};get,an,array,of,double,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,double,get,double,parameters,servlet,request,request,string,name,try,return,get,required,double,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,double,0
ServletRequestUtils -> public static double[] getDoubleParameters(ServletRequest request, String name);1496837955;Get an array of double parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static double[] getDoubleParameters(ServletRequest request, String name) {_		try {_			return getRequiredDoubleParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new double[0]__		}_	};get,an,array,of,double,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,double,get,double,parameters,servlet,request,request,string,name,try,return,get,required,double,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,double,0
ServletRequestUtils -> @Nullable 	public static Float getFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a Float parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Float value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Float getFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredFloatParameter(request, name)__	};get,a,float,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,float,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,float,get,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,float,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Float getFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a Float parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Float value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Float getFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredFloatParameter(request, name)__	};get,a,float,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,float,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,float,get,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,float,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Boolean getBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a Boolean parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@return the Boolean value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Boolean getBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return (getRequiredBooleanParameter(request, name))__	};get,a,boolean,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,boolean,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,boolean,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Boolean getBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a Boolean parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@return the Boolean value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Boolean getBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return (getRequiredBooleanParameter(request, name))__	};get,a,boolean,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,boolean,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,boolean,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Integer getIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an Integer parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Integer value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Integer getIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredIntParameter(request, name)__	};get,an,integer,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,integer,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,integer,get,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,int,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Integer getIntParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an Integer parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Integer value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Integer getIntParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredIntParameter(request, name)__	};get,an,integer,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,integer,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,integer,get,int,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,int,parameter,request,name
ServletRequestUtils -> public static Float getFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a Float parameter, or <code>null</code> if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Float value, or <code>null</code> if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Float getFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredFloatParameter(request, name)__	};get,a,float,parameter,or,code,null,code,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,float,value,or,code,null,code,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,float,parameter,request,name
ServletRequestUtils -> public static Float getFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a Float parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Float value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Float getFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredFloatParameter(request, name)__	};get,a,float,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,float,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,float,parameter,request,name
ServletRequestUtils -> public static long[] getLongParameters(ServletRequest request, String name);1328020251;Get an array of long parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static long[] getLongParameters(ServletRequest request, String name) {_		try {_			return getRequiredLongParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new long[0]__		}_	};get,an,array,of,long,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,long,get,long,parameters,servlet,request,request,string,name,try,return,get,required,long,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,long,0
ServletRequestUtils -> public static long[] getLongParameters(ServletRequest request, String name);1356735495;Get an array of long parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static long[] getLongParameters(ServletRequest request, String name) {_		try {_			return getRequiredLongParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new long[0]__		}_	};get,an,array,of,long,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,long,get,long,parameters,servlet,request,request,string,name,try,return,get,required,long,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,long,0
ServletRequestUtils -> public static long[] getLongParameters(ServletRequest request, String name);1495868221;Get an array of long parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static long[] getLongParameters(ServletRequest request, String name) {_		try {_			return getRequiredLongParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new long[0]__		}_	};get,an,array,of,long,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,long,get,long,parameters,servlet,request,request,string,name,try,return,get,required,long,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,long,0
ServletRequestUtils -> public static long[] getLongParameters(ServletRequest request, String name);1496837955;Get an array of long parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static long[] getLongParameters(ServletRequest request, String name) {_		try {_			return getRequiredLongParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new long[0]__		}_	};get,an,array,of,long,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,long,get,long,parameters,servlet,request,request,string,name,try,return,get,required,long,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,long,0
ServletRequestUtils -> public static float getRequiredFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a float parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float getRequiredFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloat(name, request.getParameter(name))__	};get,a,float,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,float,name,request,get,parameter,name
ServletRequestUtils -> public static float getRequiredFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a float parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float getRequiredFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloat(name, request.getParameter(name))__	};get,a,float,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,float,name,request,get,parameter,name
ServletRequestUtils -> public static float getRequiredFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a float parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float getRequiredFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloat(name, request.getParameter(name))__	};get,a,float,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,float,name,request,get,parameter,name
ServletRequestUtils -> public static float getRequiredFloatParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a float parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float getRequiredFloatParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloat(name, request.getParameter(name))__	};get,a,float,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,float,name,request,get,parameter,name
ServletRequestUtils -> public static String[] getRequiredStringParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an array of String parameters, throwing an exception if not found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String[] getRequiredStringParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredStrings(name, request.getParameterValues(name))__	};get,an,array,of,string,parameters,throwing,an,exception,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,strings,name,request,get,parameter,values,name
ServletRequestUtils -> public static String[] getRequiredStringParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an array of String parameters, throwing an exception if not found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String[] getRequiredStringParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredStrings(name, request.getParameterValues(name))__	};get,an,array,of,string,parameters,throwing,an,exception,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,strings,name,request,get,parameter,values,name
ServletRequestUtils -> public static String[] getRequiredStringParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an array of String parameters, throwing an exception if not found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String[] getRequiredStringParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredStrings(name, request.getParameterValues(name))__	};get,an,array,of,string,parameters,throwing,an,exception,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,strings,name,request,get,parameter,values,name
ServletRequestUtils -> public static String[] getRequiredStringParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an array of String parameters, throwing an exception if not found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String[] getRequiredStringParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredStrings(name, request.getParameterValues(name))__	};get,an,array,of,string,parameters,throwing,an,exception,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,strings,name,request,get,parameter,values,name
ServletRequestUtils -> public static long[] getRequiredLongParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an array of long parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long[] getRequiredLongParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLongs(name, request.getParameterValues(name))__	};get,an,array,of,long,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,longs,name,request,get,parameter,values,name
ServletRequestUtils -> public static long[] getRequiredLongParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an array of long parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long[] getRequiredLongParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLongs(name, request.getParameterValues(name))__	};get,an,array,of,long,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,longs,name,request,get,parameter,values,name
ServletRequestUtils -> public static long[] getRequiredLongParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an array of long parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long[] getRequiredLongParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLongs(name, request.getParameterValues(name))__	};get,an,array,of,long,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,longs,name,request,get,parameter,values,name
ServletRequestUtils -> public static long[] getRequiredLongParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an array of long parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long[] getRequiredLongParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLongs(name, request.getParameterValues(name))__	};get,an,array,of,long,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,longs,name,request,get,parameter,values,name
ServletRequestUtils -> public static double[] getRequiredDoubleParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an array of double parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double[] getRequiredDoubleParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDoubles(name, request.getParameterValues(name))__	};get,an,array,of,double,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,doubles,name,request,get,parameter,values,name
ServletRequestUtils -> public static double[] getRequiredDoubleParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an array of double parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double[] getRequiredDoubleParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDoubles(name, request.getParameterValues(name))__	};get,an,array,of,double,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,doubles,name,request,get,parameter,values,name
ServletRequestUtils -> public static double[] getRequiredDoubleParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an array of double parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double[] getRequiredDoubleParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDoubles(name, request.getParameterValues(name))__	};get,an,array,of,double,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,doubles,name,request,get,parameter,values,name
ServletRequestUtils -> public static double[] getRequiredDoubleParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an array of double parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static double[] getRequiredDoubleParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return DOUBLE_PARSER.parseDoubles(name, request.getParameterValues(name))__	};get,an,array,of,double,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,required,double,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,doubles,name,request,get,parameter,values,name
ServletRequestUtils -> public static String getRequiredStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a String parameter, throwing an exception if it isn't found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String getRequiredStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredString(name, request.getParameter(name))__	};get,a,string,parameter,throwing,an,exception,if,it,isn,t,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,string,name,request,get,parameter,name
ServletRequestUtils -> public static String getRequiredStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a String parameter, throwing an exception if it isn't found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String getRequiredStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredString(name, request.getParameter(name))__	};get,a,string,parameter,throwing,an,exception,if,it,isn,t,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,string,name,request,get,parameter,name
ServletRequestUtils -> public static String getRequiredStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a String parameter, throwing an exception if it isn't found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String getRequiredStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredString(name, request.getParameter(name))__	};get,a,string,parameter,throwing,an,exception,if,it,isn,t,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,string,name,request,get,parameter,name
ServletRequestUtils -> public static String getRequiredStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a String parameter, throwing an exception if it isn't found._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String getRequiredStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return STRING_PARSER.validateRequiredString(name, request.getParameter(name))__	};get,a,string,parameter,throwing,an,exception,if,it,isn,t,found,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,required,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,validate,required,string,name,request,get,parameter,name
ServletRequestUtils -> public static long getRequiredLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a long parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long getRequiredLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLong(name, request.getParameter(name))__	};get,a,long,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,long,name,request,get,parameter,name
ServletRequestUtils -> public static long getRequiredLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a long parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long getRequiredLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLong(name, request.getParameter(name))__	};get,a,long,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,long,name,request,get,parameter,name
ServletRequestUtils -> public static long getRequiredLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a long parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long getRequiredLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLong(name, request.getParameter(name))__	};get,a,long,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,long,name,request,get,parameter,name
ServletRequestUtils -> public static long getRequiredLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a long parameter, throwing an exception if it isn't found or isn't a number._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static long getRequiredLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return LONG_PARSER.parseLong(name, request.getParameter(name))__	};get,a,long,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,long,get,required,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,long,name,request,get,parameter,name
ServletRequestUtils -> public static String getStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a String parameter, or <code>null</code> if not present._@param request current HTTP request_@param name the name of the parameter_@return the String value, or <code>null</code> if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String getStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredStringParameter(request, name)__	};get,a,string,parameter,or,code,null,code,if,not,present,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,string,value,or,code,null,code,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,string,parameter,request,name
ServletRequestUtils -> public static String getStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a String parameter, or {@code null} if not present._@param request current HTTP request_@param name the name of the parameter_@return the String value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static String getStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredStringParameter(request, name)__	};get,a,string,parameter,or,code,null,if,not,present,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,string,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,string,get,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,string,parameter,request,name
ServletRequestUtils -> public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an array of boolean parameters, throwing an exception if not found_or one isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBooleans(name, request.getParameterValues(name))__	};get,an,array,of,boolean,parameters,throwing,an,exception,if,not,found,or,one,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,booleans,name,request,get,parameter,values,name
ServletRequestUtils -> public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an array of boolean parameters, throwing an exception if not found_or one isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBooleans(name, request.getParameterValues(name))__	};get,an,array,of,boolean,parameters,throwing,an,exception,if,not,found,or,one,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,booleans,name,request,get,parameter,values,name
ServletRequestUtils -> public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an array of boolean parameters, throwing an exception if not found_or one isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBooleans(name, request.getParameterValues(name))__	};get,an,array,of,boolean,parameters,throwing,an,exception,if,not,found,or,one,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,booleans,name,request,get,parameter,values,name
ServletRequestUtils -> public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an array of boolean parameters, throwing an exception if not found_or one isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean[] getRequiredBooleanParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBooleans(name, request.getParameterValues(name))__	};get,an,array,of,boolean,parameters,throwing,an,exception,if,not,found,or,one,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,booleans,name,request,get,parameter,values,name
ServletRequestUtils -> public static int[] getRequiredIntParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an array of int parameters, throwing an exception if not found or one is not a number.._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int[] getRequiredIntParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInts(name, request.getParameterValues(name))__	};get,an,array,of,int,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,ints,name,request,get,parameter,values,name
ServletRequestUtils -> public static int[] getRequiredIntParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an array of int parameters, throwing an exception if not found or one is not a number.._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int[] getRequiredIntParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInts(name, request.getParameterValues(name))__	};get,an,array,of,int,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,ints,name,request,get,parameter,values,name
ServletRequestUtils -> public static int[] getRequiredIntParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an array of int parameters, throwing an exception if not found or one is not a number.._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int[] getRequiredIntParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInts(name, request.getParameterValues(name))__	};get,an,array,of,int,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,ints,name,request,get,parameter,values,name
ServletRequestUtils -> public static int[] getRequiredIntParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an array of int parameters, throwing an exception if not found or one is not a number.._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static int[] getRequiredIntParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return INT_PARSER.parseInts(name, request.getParameterValues(name))__	};get,an,array,of,int,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,int,get,required,int,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,ints,name,request,get,parameter,values,name
ServletRequestUtils -> public static float[] getRequiredFloatParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get an array of float parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float[] getRequiredFloatParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloats(name, request.getParameterValues(name))__	};get,an,array,of,float,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,floats,name,request,get,parameter,values,name
ServletRequestUtils -> public static float[] getRequiredFloatParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get an array of float parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float[] getRequiredFloatParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloats(name, request.getParameterValues(name))__	};get,an,array,of,float,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,floats,name,request,get,parameter,values,name
ServletRequestUtils -> public static float[] getRequiredFloatParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get an array of float parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float[] getRequiredFloatParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloats(name, request.getParameterValues(name))__	};get,an,array,of,float,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,floats,name,request,get,parameter,values,name
ServletRequestUtils -> public static float[] getRequiredFloatParameters(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get an array of float parameters, throwing an exception if not found or one is not a number._@param request current HTTP request_@param name the name of the parameter with multiple possible values_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static float[] getRequiredFloatParameters(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return FLOAT_PARSER.parseFloats(name, request.getParameterValues(name))__	};get,an,array,of,float,parameters,throwing,an,exception,if,not,found,or,one,is,not,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,float,get,required,float,parameters,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,floats,name,request,get,parameter,values,name
ServletRequestUtils -> public static int getIntParameter(ServletRequest request, String name, int defaultVal);1328020251;Get an int parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static int getIntParameter(ServletRequest request, String name, int defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredIntParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,an,int,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,int,get,int,parameter,servlet,request,request,string,name,int,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,int,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static int getIntParameter(ServletRequest request, String name, int defaultVal);1356735495;Get an int parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static int getIntParameter(ServletRequest request, String name, int defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredIntParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,an,int,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,int,get,int,parameter,servlet,request,request,string,name,int,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,int,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static int getIntParameter(ServletRequest request, String name, int defaultVal);1495868221;Get an int parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static int getIntParameter(ServletRequest request, String name, int defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredIntParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,an,int,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,int,get,int,parameter,servlet,request,request,string,name,int,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,int,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static int getIntParameter(ServletRequest request, String name, int defaultVal);1496837955;Get an int parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static int getIntParameter(ServletRequest request, String name, int defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredIntParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,an,int,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,int,get,int,parameter,servlet,request,request,string,name,int,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,int,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> @Nullable 	public static Long getLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a Long parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Long value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Long getLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredLongParameter(request, name)__	};get,a,long,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,long,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,long,get,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,long,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Long getLongParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a Long parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Long value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Long getLongParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredLongParameter(request, name)__	};get,a,long,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,long,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,long,get,long,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,long,parameter,request,name
ServletRequestUtils -> public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal);1328020251;Get a boolean parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredBooleanParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,boolean,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,boolean,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,boolean,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal);1356735495;Get a boolean parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredBooleanParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,boolean,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,boolean,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,boolean,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal);1495868221;Get a boolean parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredBooleanParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,boolean,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,boolean,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,boolean,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal);1496837955;Get a boolean parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredBooleanParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,boolean,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,boolean,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,boolean,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> @Nullable 	public static String getStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a String parameter, or {@code null} if not present._@param request current HTTP request_@param name the name of the parameter_@return the String value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static String getStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredStringParameter(request, name)__	};get,a,string,parameter,or,code,null,if,not,present,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,string,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,string,get,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,string,parameter,request,name
ServletRequestUtils -> @Nullable 	public static String getStringParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a String parameter, or {@code null} if not present._@param request current HTTP request_@param name the name of the parameter_@return the String value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static String getStringParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredStringParameter(request, name)__	};get,a,string,parameter,or,code,null,if,not,present,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,string,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,string,get,string,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,string,parameter,request,name
ServletRequestUtils -> public static long getLongParameter(ServletRequest request, String name, long defaultVal);1328020251;Get a long parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static long getLongParameter(ServletRequest request, String name, long defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredLongParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,long,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,long,get,long,parameter,servlet,request,request,string,name,long,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,long,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static long getLongParameter(ServletRequest request, String name, long defaultVal);1356735495;Get a long parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static long getLongParameter(ServletRequest request, String name, long defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredLongParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,long,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,long,get,long,parameter,servlet,request,request,string,name,long,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,long,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static long getLongParameter(ServletRequest request, String name, long defaultVal);1495868221;Get a long parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static long getLongParameter(ServletRequest request, String name, long defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredLongParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,long,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,long,get,long,parameter,servlet,request,request,string,name,long,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,long,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static long getLongParameter(ServletRequest request, String name, long defaultVal);1496837955;Get a long parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static long getLongParameter(ServletRequest request, String name, long defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredLongParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,long,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,long,get,long,parameter,servlet,request,request,string,name,long,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,long,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static boolean getRequiredBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a boolean parameter, throwing an exception if it isn't found_or isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean getRequiredBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBoolean(name, request.getParameter(name))__	};get,a,boolean,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,boolean,name,request,get,parameter,name
ServletRequestUtils -> public static boolean getRequiredBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a boolean parameter, throwing an exception if it isn't found_or isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean getRequiredBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBoolean(name, request.getParameter(name))__	};get,a,boolean,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,boolean,name,request,get,parameter,name
ServletRequestUtils -> public static boolean getRequiredBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a boolean parameter, throwing an exception if it isn't found_or isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean getRequiredBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBoolean(name, request.getParameter(name))__	};get,a,boolean,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,boolean,name,request,get,parameter,name
ServletRequestUtils -> public static boolean getRequiredBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a boolean parameter, throwing an exception if it isn't found_or isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static boolean getRequiredBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		return BOOLEAN_PARSER.parseBoolean(name, request.getParameter(name))__	};get,a,boolean,parameter,throwing,an,exception,if,it,isn,t,found,or,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,required,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,return,parse,boolean,name,request,get,parameter,name
ServletRequestUtils -> public static String[] getStringParameters(ServletRequest request, String name);1328020251;Get an array of String parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static String[] getStringParameters(ServletRequest request, String name) {_		try {_			return getRequiredStringParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new String[0]__		}_	};get,an,array,of,string,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,string,get,string,parameters,servlet,request,request,string,name,try,return,get,required,string,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,string,0
ServletRequestUtils -> public static String[] getStringParameters(ServletRequest request, String name);1356735495;Get an array of String parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static String[] getStringParameters(ServletRequest request, String name) {_		try {_			return getRequiredStringParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new String[0]__		}_	};get,an,array,of,string,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,string,get,string,parameters,servlet,request,request,string,name,try,return,get,required,string,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,string,0
ServletRequestUtils -> public static String[] getStringParameters(ServletRequest request, String name);1495868221;Get an array of String parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static String[] getStringParameters(ServletRequest request, String name) {_		try {_			return getRequiredStringParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new String[0]__		}_	};get,an,array,of,string,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,string,get,string,parameters,servlet,request,request,string,name,try,return,get,required,string,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,string,0
ServletRequestUtils -> public static String[] getStringParameters(ServletRequest request, String name);1496837955;Get an array of String parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static String[] getStringParameters(ServletRequest request, String name) {_		try {_			return getRequiredStringParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new String[0]__		}_	};get,an,array,of,string,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,string,get,string,parameters,servlet,request,request,string,name,try,return,get,required,string,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,string,0
ServletRequestUtils -> public static Double getDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a Double parameter, or <code>null</code> if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Double value, or <code>null</code> if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Double getDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredDoubleParameter(request, name)__	};get,a,double,parameter,or,code,null,code,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,double,value,or,code,null,code,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,double,parameter,request,name
ServletRequestUtils -> public static Double getDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a Double parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Double value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Double getDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredDoubleParameter(request, name)__	};get,a,double,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,double,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,double,get,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,double,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Double getDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1495868221;Get a Double parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Double value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Double getDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredDoubleParameter(request, name)__	};get,a,double,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,double,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,double,get,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,double,parameter,request,name
ServletRequestUtils -> @Nullable 	public static Double getDoubleParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1496837955;Get a Double parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a number._@param request current HTTP request_@param name the name of the parameter_@return the Double value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;@Nullable_	public static Double getDoubleParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return getRequiredDoubleParameter(request, name)__	};get,a,double,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,number,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,double,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;nullable,public,static,double,get,double,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,double,parameter,request,name
ServletRequestUtils -> public static boolean[] getBooleanParameters(ServletRequest request, String name);1328020251;Get an array of boolean parameters, return an empty array if not found._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static boolean[] getBooleanParameters(ServletRequest request, String name) {_		try {_			return getRequiredBooleanParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new boolean[0]__		}_	};get,an,array,of,boolean,parameters,return,an,empty,array,if,not,found,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,boolean,get,boolean,parameters,servlet,request,request,string,name,try,return,get,required,boolean,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,boolean,0
ServletRequestUtils -> public static boolean[] getBooleanParameters(ServletRequest request, String name);1356735495;Get an array of boolean parameters, return an empty array if not found._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static boolean[] getBooleanParameters(ServletRequest request, String name) {_		try {_			return getRequiredBooleanParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new boolean[0]__		}_	};get,an,array,of,boolean,parameters,return,an,empty,array,if,not,found,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,boolean,get,boolean,parameters,servlet,request,request,string,name,try,return,get,required,boolean,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,boolean,0
ServletRequestUtils -> public static boolean[] getBooleanParameters(ServletRequest request, String name);1495868221;Get an array of boolean parameters, return an empty array if not found._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static boolean[] getBooleanParameters(ServletRequest request, String name) {_		try {_			return getRequiredBooleanParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new boolean[0]__		}_	};get,an,array,of,boolean,parameters,return,an,empty,array,if,not,found,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,boolean,get,boolean,parameters,servlet,request,request,string,name,try,return,get,required,boolean,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,boolean,0
ServletRequestUtils -> public static boolean[] getBooleanParameters(ServletRequest request, String name);1496837955;Get an array of boolean parameters, return an empty array if not found._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static boolean[] getBooleanParameters(ServletRequest request, String name) {_		try {_			return getRequiredBooleanParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new boolean[0]__		}_	};get,an,array,of,boolean,parameters,return,an,empty,array,if,not,found,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,boolean,get,boolean,parameters,servlet,request,request,string,name,try,return,get,required,boolean,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,boolean,0
ServletRequestUtils -> public static Boolean getBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1328020251;Get a Boolean parameter, or <code>null</code> if not present._Throws an exception if it the parameter value isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@return the Boolean value, or <code>null</code> if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Boolean getBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return (getRequiredBooleanParameter(request, name))__	};get,a,boolean,parameter,or,code,null,code,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,boolean,value,or,code,null,code,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,boolean,parameter,request,name
ServletRequestUtils -> public static Boolean getBooleanParameter(ServletRequest request, String name) 			throws ServletRequestBindingException;1356735495;Get a Boolean parameter, or {@code null} if not present._Throws an exception if it the parameter value isn't a boolean._<p>Accepts "true", "on", "yes" (any case) and "1" as values for true__treats every other non-empty value as false (i.e. parses leniently)._@param request current HTTP request_@param name the name of the parameter_@return the Boolean value, or {@code null} if not present_@throws ServletRequestBindingException a subclass of ServletException,_so it doesn't need to be caught;public static Boolean getBooleanParameter(ServletRequest request, String name)_			throws ServletRequestBindingException {__		if (request.getParameter(name) == null) {_			return null__		}_		return (getRequiredBooleanParameter(request, name))__	};get,a,boolean,parameter,or,code,null,if,not,present,throws,an,exception,if,it,the,parameter,value,isn,t,a,boolean,p,accepts,true,on,yes,any,case,and,1,as,values,for,true,treats,every,other,non,empty,value,as,false,i,e,parses,leniently,param,request,current,http,request,param,name,the,name,of,the,parameter,return,the,boolean,value,or,code,null,if,not,present,throws,servlet,request,binding,exception,a,subclass,of,servlet,exception,so,it,doesn,t,need,to,be,caught;public,static,boolean,get,boolean,parameter,servlet,request,request,string,name,throws,servlet,request,binding,exception,if,request,get,parameter,name,null,return,null,return,get,required,boolean,parameter,request,name
ServletRequestUtils -> public static float[] getFloatParameters(ServletRequest request, String name);1328020251;Get an array of float parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static float[] getFloatParameters(ServletRequest request, String name) {_		try {_			return getRequiredFloatParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new float[0]__		}_	};get,an,array,of,float,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,float,get,float,parameters,servlet,request,request,string,name,try,return,get,required,float,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,float,0
ServletRequestUtils -> public static float[] getFloatParameters(ServletRequest request, String name);1356735495;Get an array of float parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static float[] getFloatParameters(ServletRequest request, String name) {_		try {_			return getRequiredFloatParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new float[0]__		}_	};get,an,array,of,float,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,float,get,float,parameters,servlet,request,request,string,name,try,return,get,required,float,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,float,0
ServletRequestUtils -> public static float[] getFloatParameters(ServletRequest request, String name);1495868221;Get an array of float parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static float[] getFloatParameters(ServletRequest request, String name) {_		try {_			return getRequiredFloatParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new float[0]__		}_	};get,an,array,of,float,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,float,get,float,parameters,servlet,request,request,string,name,try,return,get,required,float,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,float,0
ServletRequestUtils -> public static float[] getFloatParameters(ServletRequest request, String name);1496837955;Get an array of float parameters, return an empty array if not found._@param request current HTTP request_@param name the name of the parameter with multiple possible values;public static float[] getFloatParameters(ServletRequest request, String name) {_		try {_			return getRequiredFloatParameters(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return new float[0]__		}_	};get,an,array,of,float,parameters,return,an,empty,array,if,not,found,param,request,current,http,request,param,name,the,name,of,the,parameter,with,multiple,possible,values;public,static,float,get,float,parameters,servlet,request,request,string,name,try,return,get,required,float,parameters,request,name,catch,servlet,request,binding,exception,ex,return,new,float,0
ServletRequestUtils -> public static float getFloatParameter(ServletRequest request, String name, float defaultVal);1328020251;Get a float parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static float getFloatParameter(ServletRequest request, String name, float defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredFloatParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,float,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,float,get,float,parameter,servlet,request,request,string,name,float,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,float,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static float getFloatParameter(ServletRequest request, String name, float defaultVal);1356735495;Get a float parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static float getFloatParameter(ServletRequest request, String name, float defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredFloatParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,float,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,float,get,float,parameter,servlet,request,request,string,name,float,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,float,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static float getFloatParameter(ServletRequest request, String name, float defaultVal);1495868221;Get a float parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static float getFloatParameter(ServletRequest request, String name, float defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredFloatParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,float,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,float,get,float,parameter,servlet,request,request,string,name,float,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,float,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static float getFloatParameter(ServletRequest request, String name, float defaultVal);1496837955;Get a float parameter, with a fallback value. Never throws an exception._Can pass a distinguished value as default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static float getFloatParameter(ServletRequest request, String name, float defaultVal) {_		if (request.getParameter(name) == null) {_			return defaultVal__		}_		try {_			return getRequiredFloatParameter(request, name)__		}_		catch (ServletRequestBindingException ex) {_			return defaultVal__		}_	};get,a,float,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,as,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,float,get,float,parameter,servlet,request,request,string,name,float,default,val,if,request,get,parameter,name,null,return,default,val,try,return,get,required,float,parameter,request,name,catch,servlet,request,binding,exception,ex,return,default,val
ServletRequestUtils -> public static String getStringParameter(ServletRequest request, String name, String defaultVal);1328020251;Get a String parameter, with a fallback value. Never throws an exception._Can pass a distinguished value to default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static String getStringParameter(ServletRequest request, String name, String defaultVal) {_		String val = request.getParameter(name)__		return (val != null ? val : defaultVal)__	};get,a,string,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,to,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,string,get,string,parameter,servlet,request,request,string,name,string,default,val,string,val,request,get,parameter,name,return,val,null,val,default,val
ServletRequestUtils -> public static String getStringParameter(ServletRequest request, String name, String defaultVal);1356735495;Get a String parameter, with a fallback value. Never throws an exception._Can pass a distinguished value to default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static String getStringParameter(ServletRequest request, String name, String defaultVal) {_		String val = request.getParameter(name)__		return (val != null ? val : defaultVal)__	};get,a,string,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,to,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,string,get,string,parameter,servlet,request,request,string,name,string,default,val,string,val,request,get,parameter,name,return,val,null,val,default,val
ServletRequestUtils -> public static String getStringParameter(ServletRequest request, String name, String defaultVal);1495868221;Get a String parameter, with a fallback value. Never throws an exception._Can pass a distinguished value to default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static String getStringParameter(ServletRequest request, String name, String defaultVal) {_		String val = request.getParameter(name)__		return (val != null ? val : defaultVal)__	};get,a,string,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,to,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,string,get,string,parameter,servlet,request,request,string,name,string,default,val,string,val,request,get,parameter,name,return,val,null,val,default,val
ServletRequestUtils -> public static String getStringParameter(ServletRequest request, String name, String defaultVal);1496837955;Get a String parameter, with a fallback value. Never throws an exception._Can pass a distinguished value to default to enable checks of whether it was supplied._@param request current HTTP request_@param name the name of the parameter_@param defaultVal the default value to use as fallback;public static String getStringParameter(ServletRequest request, String name, String defaultVal) {_		String val = request.getParameter(name)__		return (val != null ? val : defaultVal)__	};get,a,string,parameter,with,a,fallback,value,never,throws,an,exception,can,pass,a,distinguished,value,to,default,to,enable,checks,of,whether,it,was,supplied,param,request,current,http,request,param,name,the,name,of,the,parameter,param,default,val,the,default,value,to,use,as,fallback;public,static,string,get,string,parameter,servlet,request,request,string,name,string,default,val,string,val,request,get,parameter,name,return,val,null,val,default,val
