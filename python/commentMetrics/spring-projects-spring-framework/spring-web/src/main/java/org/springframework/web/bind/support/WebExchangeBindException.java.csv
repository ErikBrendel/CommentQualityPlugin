commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the BindingResult that this BindException wraps.  * Will typically be a BeanPropertyBindingResult.  * @see BeanPropertyBindingResult  */ ;/**  * Return the BindingResult that this BindException wraps.  * Will typically be a BeanPropertyBindingResult.  * @see BeanPropertyBindingResult  */ public final BindingResult getBindingResult() {     return this.bindingResult. }
false;public;0;4;;@Override public String getObjectName() {     return this.bindingResult.getObjectName(). }
false;public;1;4;;@Override public void setNestedPath(String nestedPath) {     this.bindingResult.setNestedPath(nestedPath). }
false;public;0;4;;@Override public String getNestedPath() {     return this.bindingResult.getNestedPath(). }
false;public;1;4;;@Override public void pushNestedPath(String subPath) {     this.bindingResult.pushNestedPath(subPath). }
false;public;0;4;;@Override public void popNestedPath() throws IllegalStateException {     this.bindingResult.popNestedPath(). }
false;public;1;4;;@Override public void reject(String errorCode) {     this.bindingResult.reject(errorCode). }
false;public;2;4;;@Override public void reject(String errorCode, String defaultMessage) {     this.bindingResult.reject(errorCode, defaultMessage). }
false;public;3;4;;@Override public void reject(String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {     this.bindingResult.reject(errorCode, errorArgs, defaultMessage). }
false;public;2;4;;@Override public void rejectValue(@Nullable String field, String errorCode) {     this.bindingResult.rejectValue(field, errorCode). }
false;public;3;4;;@Override public void rejectValue(@Nullable String field, String errorCode, String defaultMessage) {     this.bindingResult.rejectValue(field, errorCode, defaultMessage). }
false;public;4;6;;@Override public void rejectValue(@Nullable String field, String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage) {     this.bindingResult.rejectValue(field, errorCode, errorArgs, defaultMessage). }
false;public;1;4;;@Override public void addAllErrors(Errors errors) {     this.bindingResult.addAllErrors(errors). }
false;public;0;4;;@Override public boolean hasErrors() {     return this.bindingResult.hasErrors(). }
false;public;0;4;;@Override public int getErrorCount() {     return this.bindingResult.getErrorCount(). }
false;public;0;4;;@Override public List<ObjectError> getAllErrors() {     return this.bindingResult.getAllErrors(). }
false;public;0;4;;@Override public boolean hasGlobalErrors() {     return this.bindingResult.hasGlobalErrors(). }
false;public;0;4;;@Override public int getGlobalErrorCount() {     return this.bindingResult.getGlobalErrorCount(). }
false;public;0;4;;@Override public List<ObjectError> getGlobalErrors() {     return this.bindingResult.getGlobalErrors(). }
false;public;0;5;;@Override @Nullable public ObjectError getGlobalError() {     return this.bindingResult.getGlobalError(). }
false;public;0;4;;@Override public boolean hasFieldErrors() {     return this.bindingResult.hasFieldErrors(). }
false;public;0;4;;@Override public int getFieldErrorCount() {     return this.bindingResult.getFieldErrorCount(). }
false;public;0;4;;@Override public List<FieldError> getFieldErrors() {     return this.bindingResult.getFieldErrors(). }
false;public;0;5;;@Override @Nullable public FieldError getFieldError() {     return this.bindingResult.getFieldError(). }
false;public;1;4;;@Override public boolean hasFieldErrors(String field) {     return this.bindingResult.hasFieldErrors(field). }
false;public;1;4;;@Override public int getFieldErrorCount(String field) {     return this.bindingResult.getFieldErrorCount(field). }
false;public;1;4;;@Override public List<FieldError> getFieldErrors(String field) {     return this.bindingResult.getFieldErrors(field). }
false;public;1;5;;@Override @Nullable public FieldError getFieldError(String field) {     return this.bindingResult.getFieldError(field). }
false;public;1;5;;@Override @Nullable public Object getFieldValue(String field) {     return this.bindingResult.getFieldValue(field). }
false;public;1;5;;@Override @Nullable public Class<?> getFieldType(String field) {     return this.bindingResult.getFieldType(field). }
false;public;0;4;;@Override public Object getTarget() {     return this.bindingResult.getTarget(). }
false;public;0;4;;@Override public Map<String, Object> getModel() {     return this.bindingResult.getModel(). }
false;public;1;5;;@Override @Nullable public Object getRawFieldValue(String field) {     return this.bindingResult.getRawFieldValue(field). }
false;public;2;6;;@Override @SuppressWarnings("rawtypes") @Nullable public PropertyEditor findEditor(@Nullable String field, @Nullable Class valueType) {     return this.bindingResult.findEditor(field, valueType). }
false;public;0;5;;@Override @Nullable public PropertyEditorRegistry getPropertyEditorRegistry() {     return this.bindingResult.getPropertyEditorRegistry(). }
false;public;1;4;;@Override public String[] resolveMessageCodes(String errorCode) {     return this.bindingResult.resolveMessageCodes(errorCode). }
false;public;2;4;;@Override public String[] resolveMessageCodes(String errorCode, String field) {     return this.bindingResult.resolveMessageCodes(errorCode, field). }
false;public;1;4;;@Override public void addError(ObjectError error) {     this.bindingResult.addError(error). }
false;public;3;4;;@Override public void recordFieldValue(String field, Class<?> type, @Nullable Object value) {     this.bindingResult.recordFieldValue(field, type, value). }
false;public;1;4;;@Override public void recordSuppressedField(String field) {     this.bindingResult.recordSuppressedField(field). }
false;public;0;4;;@Override public String[] getSuppressedFields() {     return this.bindingResult.getSuppressedFields(). }
true;public;0;13;/**  * Returns diagnostic information about the errors held in this object.  */ ;/**  * Returns diagnostic information about the errors held in this object.  */ @Override public String getMessage() {     MethodParameter parameter = getMethodParameter().     Assert.state(parameter != null, "No MethodParameter").     StringBuilder sb = new StringBuilder("Validation failed for argument at index ").append(parameter.getParameterIndex()).append(" in method: ").append(parameter.getExecutable().toGenericString()).append(", with ").append(this.bindingResult.getErrorCount()).append(" error(s): ").     for (ObjectError error : this.bindingResult.getAllErrors()) {         sb.append("[").append(error).append("] ").     }     return sb.toString(). }
false;public;1;4;;@Override public boolean equals(Object other) {     return (this == other || this.bindingResult.equals(other)). }
false;public;0;4;;@Override public int hashCode() {     return this.bindingResult.hashCode(). }
