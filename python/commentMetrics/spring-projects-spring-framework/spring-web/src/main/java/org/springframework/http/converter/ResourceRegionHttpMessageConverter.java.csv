commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;15;;@Override @SuppressWarnings("unchecked") protected MediaType getDefaultContentType(Object object) {     Resource resource = null.     if (object instanceof ResourceRegion) {         resource = ((ResourceRegion) object).getResource().     } else {         Collection<ResourceRegion> regions = (Collection<ResourceRegion>) object.         if (!regions.isEmpty()) {             resource = regions.iterator().next().getResource().         }     }     return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM). }
false;public;2;4;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     return false. }
false;public;3;4;;@Override public boolean canRead(Type type, @Nullable Class<?> contextClass, @Nullable MediaType mediaType) {     return false. }
false;public;3;6;;@Override public Object read(Type type, @Nullable Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     throw new UnsupportedOperationException(). }
false;protected;2;6;;@Override protected ResourceRegion readInternal(Class<?> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     return canWrite(clazz, null, mediaType). }
false;public;3;25;;@Override public boolean canWrite(@Nullable Type type, @Nullable Class<?> clazz, @Nullable MediaType mediaType) {     if (!(type instanceof ParameterizedType)) {         return (type instanceof Class && ResourceRegion.class.isAssignableFrom((Class<?>) type)).     }     ParameterizedType parameterizedType = (ParameterizedType) type.     if (!(parameterizedType.getRawType() instanceof Class)) {         return false.     }     Class<?> rawType = (Class<?>) parameterizedType.getRawType().     if (!(Collection.class.isAssignableFrom(rawType))) {         return false.     }     if (parameterizedType.getActualTypeArguments().length != 1) {         return false.     }     Type typeArgument = parameterizedType.getActualTypeArguments()[0].     if (!(typeArgument instanceof Class)) {         return false.     }     Class<?> typeArgumentClass = (Class<?>) typeArgument.     return ResourceRegion.class.isAssignableFrom(typeArgumentClass). }
false;protected;3;18;;@Override @SuppressWarnings("unchecked") protected void writeInternal(Object object, @Nullable Type type, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     if (object instanceof ResourceRegion) {         writeResourceRegion((ResourceRegion) object, outputMessage).     } else {         Collection<ResourceRegion> regions = (Collection<ResourceRegion>) object.         if (regions.size() == 1) {             writeResourceRegion(regions.iterator().next(), outputMessage).         } else {             writeResourceRegionCollection((Collection<ResourceRegion>) object, outputMessage).         }     } }
false;protected;2;25;;protected void writeResourceRegion(ResourceRegion region, HttpOutputMessage outputMessage) throws IOException {     Assert.notNull(region, "ResourceRegion must not be null").     HttpHeaders responseHeaders = outputMessage.getHeaders().     long start = region.getPosition().     long end = start + region.getCount() - 1.     Long resourceLength = region.getResource().contentLength().     end = Math.min(end, resourceLength - 1).     long rangeLength = end - start + 1.     responseHeaders.add("Content-Range", "bytes " + start + '-' + end + '/' + resourceLength).     responseHeaders.setContentLength(rangeLength).     InputStream in = region.getResource().getInputStream().     try {         StreamUtils.copyRange(in, outputMessage.getBody(), start, end).     } finally {         try {             in.close().         } catch (IOException ex) {         // ignore         }     } }
false;private;2;45;;private void writeResourceRegionCollection(Collection<ResourceRegion> resourceRegions, HttpOutputMessage outputMessage) throws IOException {     Assert.notNull(resourceRegions, "Collection of ResourceRegion should not be null").     HttpHeaders responseHeaders = outputMessage.getHeaders().     MediaType contentType = responseHeaders.getContentType().     String boundaryString = MimeTypeUtils.generateMultipartBoundaryString().     responseHeaders.set(HttpHeaders.CONTENT_TYPE, "multipart/byteranges. boundary=" + boundaryString).     OutputStream out = outputMessage.getBody().     for (ResourceRegion region : resourceRegions) {         long start = region.getPosition().         long end = start + region.getCount() - 1.         InputStream in = region.getResource().getInputStream().         try {             // Writing MIME header.             println(out).             print(out, "--" + boundaryString).             println(out).             if (contentType != null) {                 print(out, "Content-Type: " + contentType.toString()).                 println(out).             }             Long resourceLength = region.getResource().contentLength().             end = Math.min(end, resourceLength - 1).             print(out, "Content-Range: bytes " + start + '-' + end + '/' + resourceLength).             println(out).             println(out).             // Printing content             StreamUtils.copyRange(in, out, start, end).         } finally {             try {                 in.close().             } catch (IOException ex) {             // ignore             }         }     }     println(out).     print(out, "--" + boundaryString + "--"). }
false;private,static;1;4;;private static void println(OutputStream os) throws IOException {     os.write('\r').     os.write('\n'). }
false;private,static;2;3;;private static void print(OutputStream os, String buf) throws IOException {     os.write(buf.getBytes(StandardCharsets.US_ASCII)). }
