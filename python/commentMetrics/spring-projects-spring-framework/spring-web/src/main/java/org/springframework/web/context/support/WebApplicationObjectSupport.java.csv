commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;7;;@Override public final void setServletContext(ServletContext servletContext) {     if (servletContext != this.servletContext) {         this.servletContext = servletContext.         initServletContext(servletContext).     } }
true;protected;0;4;/**  * Overrides the base class behavior to enforce running in an ApplicationContext.  * All accessors will throw IllegalStateException if not running in a context.  * @see #getApplicationContext()  * @see #getMessageSourceAccessor()  * @see #getWebApplicationContext()  * @see #getServletContext()  * @see #getTempDir()  */ ;/**  * Overrides the base class behavior to enforce running in an ApplicationContext.  * All accessors will throw IllegalStateException if not running in a context.  * @see #getApplicationContext()  * @see #getMessageSourceAccessor()  * @see #getWebApplicationContext()  * @see #getServletContext()  * @see #getTempDir()  */ @Override protected boolean isContextRequired() {     return true. }
true;protected;1;10;/**  * Calls {@link #initServletContext(javax.servlet.ServletContext)} if the  * given ApplicationContext is a {@link WebApplicationContext}.  */ ;/**  * Calls {@link #initServletContext(javax.servlet.ServletContext)} if the  * given ApplicationContext is a {@link WebApplicationContext}.  */ @Override protected void initApplicationContext(ApplicationContext context) {     super.initApplicationContext(context).     if (this.servletContext == null && context instanceof WebApplicationContext) {         this.servletContext = ((WebApplicationContext) context).getServletContext().         if (this.servletContext != null) {             initServletContext(this.servletContext).         }     } }
true;protected;1;2;/**  * Subclasses may override this for custom initialization based  * on the ServletContext that this application object runs in.  * <p>The default implementation is empty. Called by  * {@link #initApplicationContext(org.springframework.context.ApplicationContext)}  * as well as {@link #setServletContext(javax.servlet.ServletContext)}.  * @param servletContext the ServletContext that this application object runs in  * (never {@code null})  */ ;/**  * Subclasses may override this for custom initialization based  * on the ServletContext that this application object runs in.  * <p>The default implementation is empty. Called by  * {@link #initApplicationContext(org.springframework.context.ApplicationContext)}  * as well as {@link #setServletContext(javax.servlet.ServletContext)}.  * @param servletContext the ServletContext that this application object runs in  * (never {@code null})  */ protected void initServletContext(ServletContext servletContext) { }
true;protected,final;0;14;/**  * Return the current application context as WebApplicationContext.  * <p><b>NOTE:</b> Only use this if you actually need to access  * WebApplicationContext-specific functionality. Preferably use  * {@code getApplicationContext()} or {@code getServletContext()}  * else, to be able to run in non-WebApplicationContext environments as well.  * @throws IllegalStateException if not running in a WebApplicationContext  * @see #getApplicationContext()  */ ;/**  * Return the current application context as WebApplicationContext.  * <p><b>NOTE:</b> Only use this if you actually need to access  * WebApplicationContext-specific functionality. Preferably use  * {@code getApplicationContext()} or {@code getServletContext()}  * else, to be able to run in non-WebApplicationContext environments as well.  * @throws IllegalStateException if not running in a WebApplicationContext  * @see #getApplicationContext()  */ @Nullable protected final WebApplicationContext getWebApplicationContext() throws IllegalStateException {     ApplicationContext ctx = getApplicationContext().     if (ctx instanceof WebApplicationContext) {         return (WebApplicationContext) getApplicationContext().     } else if (isContextRequired()) {         throw new IllegalStateException("WebApplicationObjectSupport instance [" + this + "] does not run in a WebApplicationContext but in: " + ctx).     } else {         return null.     } }
true;protected,final;0;16;/**  * Return the current ServletContext.  * @throws IllegalStateException if not running within a required ServletContext  * @see #isContextRequired()  */ ;/**  * Return the current ServletContext.  * @throws IllegalStateException if not running within a required ServletContext  * @see #isContextRequired()  */ @Nullable protected final ServletContext getServletContext() throws IllegalStateException {     if (this.servletContext != null) {         return this.servletContext.     }     ServletContext servletContext = null.     WebApplicationContext wac = getWebApplicationContext().     if (wac != null) {         servletContext = wac.getServletContext().     }     if (servletContext == null && isContextRequired()) {         throw new IllegalStateException("WebApplicationObjectSupport instance [" + this + "] does not run within a ServletContext. Make sure the object is fully configured!").     }     return servletContext. }
true;protected,final;0;5;/**  * Return the temporary directory for the current web application,  * as provided by the servlet container.  * @return the File representing the temporary directory  * @throws IllegalStateException if not running within a ServletContext  * @see org.springframework.web.util.WebUtils#getTempDir(javax.servlet.ServletContext)  */ ;/**  * Return the temporary directory for the current web application,  * as provided by the servlet container.  * @return the File representing the temporary directory  * @throws IllegalStateException if not running within a ServletContext  * @see org.springframework.web.util.WebUtils#getTempDir(javax.servlet.ServletContext)  */ protected final File getTempDir() throws IllegalStateException {     ServletContext servletContext = getServletContext().     Assert.state(servletContext != null, "ServletContext is required").     return WebUtils.getTempDir(servletContext). }
