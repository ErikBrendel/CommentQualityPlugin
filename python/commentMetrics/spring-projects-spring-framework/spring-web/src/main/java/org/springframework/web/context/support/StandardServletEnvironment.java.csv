# id;timestamp;commentText;codeText;commentWords;codeWords
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1328020251;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_WebApplicationContextUtils#initServletPropertySources fully initialized} once the_actual {@link ServletConfig} and {@link ServletContext} objects become available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see WebApplicationContextUtils#initServletPropertySources;@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,web,application,context,utils,init,servlet,property,sources,fully,initialized,once,the,actual,link,servlet,config,and,link,servlet,context,objects,become,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,web,application,context,utils,init,servlet,property,sources;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1338032393;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_#initPropertySources(ServletContext) fully initialized} once the actual_{@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1355313310;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_#initPropertySources(ServletContext, ServletConfig) fully initialized} once the actual_{@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1356735495;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_#initPropertySources(ServletContext, ServletConfig) fully initialized} once the actual_{@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1357119239;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_#initPropertySources(ServletContext, ServletConfig) fully initialized} once the actual_{@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1368482696;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_#initPropertySources(ServletContext, ServletConfig) fully initialized} once the actual_{@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1389822826;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as {@link_StubPropertySource stubs} at this stage, and will be {@linkplain_#initPropertySources(ServletContext, ServletConfig) fully initialized} once the actual_{@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1390432589;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as_{@link StubPropertySource stubs} at this stage, and will be_{@linkplain #initPropertySources(ServletContext, ServletConfig) fully initialized}_once the actual {@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1496242568;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as_{@link StubPropertySource stubs} at this stage, and will be_{@linkplain #initPropertySources(ServletContext, ServletConfig) fully initialized}_once the actual {@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
StandardServletEnvironment -> @Override 	protected void customizePropertySources(MutablePropertySources propertySources);1530174524;Customize the set of property sources with those contributed by superclasses as_well as those appropriate for standard servlet-based environments:_<ul>_<li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}_<li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}_<li>{@value #JNDI_PROPERTY_SOURCE_NAME}_</ul>_<p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will_take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and_properties found in either of the above take precedence over those found in_{@value #JNDI_PROPERTY_SOURCE_NAME}._<p>Properties in any of the above will take precedence over system properties and_environment variables contributed by the {@link StandardEnvironment} superclass._<p>The {@code Servlet}-related property sources are added as_{@link StubPropertySource stubs} at this stage, and will be_{@linkplain #initPropertySources(ServletContext, ServletConfig) fully initialized}_once the actual {@link ServletContext} object becomes available._@see StandardEnvironment#customizePropertySources_@see org.springframework.core.env.AbstractEnvironment#customizePropertySources_@see ServletConfigPropertySource_@see ServletContextPropertySource_@see org.springframework.jndi.JndiPropertySource_@see org.springframework.context.support.AbstractApplicationContext#initPropertySources_@see #initPropertySources(ServletContext, ServletConfig);@Override_	protected void customizePropertySources(MutablePropertySources propertySources) {_		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME))__		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))__		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {_			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME))__		}_		super.customizePropertySources(propertySources)__	};customize,the,set,of,property,sources,with,those,contributed,by,superclasses,as,well,as,those,appropriate,for,standard,servlet,based,environments,ul,li,value,li,value,li,value,ul,p,properties,present,in,value,will,take,precedence,over,those,in,value,and,properties,found,in,either,of,the,above,take,precedence,over,those,found,in,value,p,properties,in,any,of,the,above,will,take,precedence,over,system,properties,and,environment,variables,contributed,by,the,link,standard,environment,superclass,p,the,code,servlet,related,property,sources,are,added,as,link,stub,property,source,stubs,at,this,stage,and,will,be,linkplain,init,property,sources,servlet,context,servlet,config,fully,initialized,once,the,actual,link,servlet,context,object,becomes,available,see,standard,environment,customize,property,sources,see,org,springframework,core,env,abstract,environment,customize,property,sources,see,servlet,config,property,source,see,servlet,context,property,source,see,org,springframework,jndi,jndi,property,source,see,org,springframework,context,support,abstract,application,context,init,property,sources,see,init,property,sources,servlet,context,servlet,config;override,protected,void,customize,property,sources,mutable,property,sources,property,sources,property,sources,add,last,new,stub,property,source,property,sources,add,last,new,stub,property,source,if,jndi,locator,delegate,is,default,jndi,environment,available,property,sources,add,last,new,jndi,property,source,super,customize,property,sources,property,sources
