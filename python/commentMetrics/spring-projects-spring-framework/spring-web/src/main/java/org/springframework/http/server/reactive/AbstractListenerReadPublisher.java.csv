# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractListenerReadPublisher -> public void onAllDataRead();1481741495;Called via a listener interface to indicate that all data has been read._@see ReadListener#onAllDataRead()_@see org.xnio.ChannelListener#handleEvent(Channel);public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};called,via,a,listener,interface,to,indicate,that,all,data,has,been,read,see,read,listener,on,all,data,read,see,org,xnio,channel,listener,handle,event,channel;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1481755387;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1485785645;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1485788600;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1485810955;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1491331500;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1495868221;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1498780456;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1501795808;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1506113799;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1510845355;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1511293325;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1511293441;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1511293486;Listeners can call this to notify when all data has been read.;public void onAllDataRead() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onAllDataRead")__		}_		this.state.get().onAllDataRead(this)__	};listeners,can,call,this,to,notify,when,all,data,has,been,read;public,void,on,all,data,read,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1511450555;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		this.logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,this,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1519859718;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		this.logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,this,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1521580893;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		this.logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,this,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1523887174;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		this.logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,this,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1523887367;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		this.logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,this,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1530174524;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		this.logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,this,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1530174524;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		logger.trace("I/O event onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,logger,trace,i,o,event,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1530906258;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		logger.trace(getLogPrefix() + "onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,logger,trace,get,log,prefix,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1530912796;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		rsReadLogger.trace(getLogPrefix() + "onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,rs,read,logger,trace,get,log,prefix,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1531942370;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		rsReadLogger.trace(getLogPrefix() + "onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,rs,read,logger,trace,get,log,prefix,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1532436274;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		rsReadLogger.trace(getLogPrefix() + "onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,rs,read,logger,trace,get,log,prefix,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1539999914;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		rsReadLogger.trace(getLogPrefix() + "onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,rs,read,logger,trace,get,log,prefix,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> public void onAllDataRead();1545067161;Sub-classes can call this method to delegate a contain notification when_all data has been read.;public void onAllDataRead() {_		rsReadLogger.trace(getLogPrefix() + "onAllDataRead")__		this.state.get().onAllDataRead(this)__	};sub,classes,can,call,this,method,to,delegate,a,contain,notification,when,all,data,has,been,read;public,void,on,all,data,read,rs,read,logger,trace,get,log,prefix,on,all,data,read,this,state,get,on,all,data,read,this
AbstractListenerReadPublisher -> private static long getAndSub(AtomicLong sequence, long toSub);1481583450;Concurrent substraction bound to 0 and Long.MAX_VALUE._Any concurrent write will "happen" before this operation.__@param sequence current atomic to update_@param toSub    delta to sub_@return value before subscription, 0 or Long.MAX_VALUE;private static long getAndSub(AtomicLong sequence, long toSub) {_		long r__		long u__		do {_			r = sequence.get()__			if (r == 0 || r == Long.MAX_VALUE) {_				return r__			}_			u = Operators.subOrZero(r, toSub)__		} while (!sequence.compareAndSet(r, u))___		return r__	};concurrent,substraction,bound,to,0,and,long,any,concurrent,write,will,happen,before,this,operation,param,sequence,current,atomic,to,update,param,to,sub,delta,to,sub,return,value,before,subscription,0,or,long;private,static,long,get,and,sub,atomic,long,sequence,long,to,sub,long,r,long,u,do,r,sequence,get,if,r,0,r,long,return,r,u,operators,sub,or,zero,r,to,sub,while,sequence,compare,and,set,r,u,return,r
AbstractListenerReadPublisher -> private static long getAndSub(AtomicLong sequence, long toSub);1481741495;Concurrent substraction bound to 0 and Long.MAX_VALUE._Any concurrent write will "happen" before this operation.__@param sequence current atomic to update_@param toSub    delta to sub_@return value before subscription, 0 or Long.MAX_VALUE;private static long getAndSub(AtomicLong sequence, long toSub) {_		long r__		long u__		do {_			r = sequence.get()__			if (r == 0 || r == Long.MAX_VALUE) {_				return r__			}_			u = Operators.subOrZero(r, toSub)__		} while (!sequence.compareAndSet(r, u))___		return r__	};concurrent,substraction,bound,to,0,and,long,any,concurrent,write,will,happen,before,this,operation,param,sequence,current,atomic,to,update,param,to,sub,delta,to,sub,return,value,before,subscription,0,or,long;private,static,long,get,and,sub,atomic,long,sequence,long,to,sub,long,r,long,u,do,r,sequence,get,if,r,0,r,long,return,r,u,operators,sub,or,zero,r,to,sub,while,sequence,compare,and,set,r,u,return,r
AbstractListenerReadPublisher -> private static long getAndSub(AtomicLong sequence, long toSub);1481755387;Concurrent subscription bound to 0 and Long.MAX_VALUE._Any concurrent write will "happen" before this operation._@param sequence current atomic to update_@param toSub delta to sub_@return value before subscription, 0 or Long.MAX_VALUE;private static long getAndSub(AtomicLong sequence, long toSub) {_		long r__		long u__		do {_			r = sequence.get()__			if (r == 0 || r == Long.MAX_VALUE) {_				return r__			}_			u = Operators.subOrZero(r, toSub)__		} while (!sequence.compareAndSet(r, u))___		return r__	};concurrent,subscription,bound,to,0,and,long,any,concurrent,write,will,happen,before,this,operation,param,sequence,current,atomic,to,update,param,to,sub,delta,to,sub,return,value,before,subscription,0,or,long;private,static,long,get,and,sub,atomic,long,sequence,long,to,sub,long,r,long,u,do,r,sequence,get,if,r,0,r,long,return,r,u,operators,sub,or,zero,r,to,sub,while,sequence,compare,and,set,r,u,return,r
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1481583450;Reads a data from the input, if possible. Returns {@code null} if a data_could not be read._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,returns,code,null,if,a,data,could,not,be,read,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1481741495;Reads a data from the input, if possible. Returns {@code null} if a data_could not be read._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,returns,code,null,if,a,data,could,not,be,read,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1481755387;Reads a data from the input, if possible._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1485785645;Reads a data from the input, if possible._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1485788600;Reads a data from the input, if possible._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1485810955;Reads a data from the input, if possible._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected abstract T read() throws IOException_;1491331500;Reads a data from the input, if possible._@return the data that was read_ or {@code null};protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> protected void suspendReading();1510845355;Suspend reading. Defaults to no-op.;protected void suspendReading() {_	};suspend,reading,defaults,to,no,op;protected,void,suspend,reading
AbstractListenerReadPublisher -> protected void suspendReading();1511293325;Suspend reading. Defaults to no-op.;protected void suspendReading() {_	};suspend,reading,defaults,to,no,op;protected,void,suspend,reading
AbstractListenerReadPublisher -> protected void suspendReading();1511293441;Suspend reading. Defaults to no-op.;protected void suspendReading() {_	};suspend,reading,defaults,to,no,op;protected,void,suspend,reading
AbstractListenerReadPublisher -> protected void suspendReading();1511293486;Suspend reading. Defaults to no-op.;protected void suspendReading() {_	};suspend,reading,defaults,to,no,op;protected,void,suspend,reading
AbstractListenerReadPublisher -> protected void suspendReading();1511318790;Suspend reading. Defaults to no-op.;protected void suspendReading() {_	};suspend,reading,defaults,to,no,op;protected,void,suspend,reading
AbstractListenerReadPublisher -> protected void suspendReading();1511323035;Suspend reading. Defaults to no-op.;protected void suspendReading() {_	};suspend,reading,defaults,to,no,op;protected,void,suspend,reading
AbstractListenerReadPublisher -> public AbstractListenerReadPublisher(String logPrefix);1530906258;Create an instance with the given log prefix._@since 5.1;public AbstractListenerReadPublisher(String logPrefix) {_		this.logPrefix = logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,read,publisher,string,log,prefix,this,log,prefix,log,prefix
AbstractListenerReadPublisher -> public AbstractListenerReadPublisher(String logPrefix);1530912796;Create an instance with the given log prefix._@since 5.1;public AbstractListenerReadPublisher(String logPrefix) {_		this.logPrefix = logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,read,publisher,string,log,prefix,this,log,prefix,log,prefix
AbstractListenerReadPublisher -> public AbstractListenerReadPublisher(String logPrefix);1531942370;Create an instance with the given log prefix._@since 5.1;public AbstractListenerReadPublisher(String logPrefix) {_		this.logPrefix = logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,read,publisher,string,log,prefix,this,log,prefix,log,prefix
AbstractListenerReadPublisher -> public AbstractListenerReadPublisher(String logPrefix);1532436274;Create an instance with the given log prefix._@since 5.1;public AbstractListenerReadPublisher(String logPrefix) {_		this.logPrefix = logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,read,publisher,string,log,prefix,this,log,prefix,log,prefix
AbstractListenerReadPublisher -> public AbstractListenerReadPublisher(String logPrefix);1539999914;Create an instance with the given log prefix._@since 5.1;public AbstractListenerReadPublisher(String logPrefix) {_		this.logPrefix = logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,read,publisher,string,log,prefix,this,log,prefix,log,prefix
AbstractListenerReadPublisher -> public AbstractListenerReadPublisher(String logPrefix);1545067161;Create an instance with the given log prefix._@since 5.1;public AbstractListenerReadPublisher(String logPrefix) {_		this.logPrefix = logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,read,publisher,string,log,prefix,this,log,prefix,log,prefix
AbstractListenerReadPublisher -> public String getLogPrefix();1530906258;Return the configured log message prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};return,the,configured,log,message,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerReadPublisher -> public String getLogPrefix();1530912796;Return the configured log message prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};return,the,configured,log,message,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerReadPublisher -> public String getLogPrefix();1531942370;Return the configured log message prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};return,the,configured,log,message,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerReadPublisher -> public String getLogPrefix();1532436274;Return the configured log message prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};return,the,configured,log,message,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerReadPublisher -> public String getLogPrefix();1539999914;Return the configured log message prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};return,the,configured,log,message,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerReadPublisher -> public String getLogPrefix();1545067161;Return the configured log message prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};return,the,configured,log,message,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1511450555;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,this,logger,is,trace,enabled,this,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1519859718;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,this,logger,is,trace,enabled,this,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1521580893;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,this,logger,is,trace,enabled,this,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1523887174;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,this,logger,is,trace,enabled,this,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1523887367;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,this,logger,is,trace,enabled,this,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1530174524;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,this,logger,is,trace,enabled,this,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1530174524;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("I/O event onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,i,o,event,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1530906258;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace(getLogPrefix() + "Connection error: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,get,log,prefix,connection,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1530912796;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (rsReadLogger.isTraceEnabled()) {_			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,connection,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1531942370;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (rsReadLogger.isTraceEnabled()) {_			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,connection,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1532436274;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (rsReadLogger.isTraceEnabled()) {_			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,connection,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1539999914;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (rsReadLogger.isTraceEnabled()) {_			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,connection,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable ex);1545067161;Sub-classes can call this to delegate container error notifications.;public final void onError(Throwable ex) {_		if (rsReadLogger.isTraceEnabled()) {_			rsReadLogger.trace(getLogPrefix() + "Connection error: " + ex)__		}_		this.state.get().onError(this, ex)__	};sub,classes,can,call,this,to,delegate,container,error,notifications;public,final,void,on,error,throwable,ex,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,connection,error,ex,this,state,get,on,error,this,ex
AbstractListenerReadPublisher -> public final void onError(Throwable t);1481583450;Called by a listener interface to indicate that as error has occurred._@param t the error_@see ReadListener#onError(Throwable);public final void onError(Throwable t) {_		if (this.logger.isErrorEnabled()) {_			this.logger.error(this.state + " onError: " + t, t)__		}_		this.state.get().onError(this, t)__	};called,by,a,listener,interface,to,indicate,that,as,error,has,occurred,param,t,the,error,see,read,listener,on,error,throwable;public,final,void,on,error,throwable,t,if,this,logger,is,error,enabled,this,logger,error,this,state,on,error,t,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1481741495;Called by a listener interface to indicate that as error has occurred._@param t the error_@see ReadListener#onError(Throwable);public final void onError(Throwable t) {_		if (this.logger.isErrorEnabled()) {_			this.logger.error(this.state + " onError: " + t, t)__		}_		this.state.get().onError(this, t)__	};called,by,a,listener,interface,to,indicate,that,as,error,has,occurred,param,t,the,error,see,read,listener,on,error,throwable;public,final,void,on,error,throwable,t,if,this,logger,is,error,enabled,this,logger,error,this,state,on,error,t,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1481755387;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isErrorEnabled()) {_			this.logger.error(this.state + " onError: " + t, t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,error,enabled,this,logger,error,this,state,on,error,t,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1485785645;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isErrorEnabled()) {_			this.logger.error(this.state + " onError: " + t, t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,error,enabled,this,logger,error,this,state,on,error,t,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1485788600;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isErrorEnabled()) {_			this.logger.error(this.state + " onError: " + t, t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,error,enabled,this,logger,error,this,state,on,error,t,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1485810955;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isErrorEnabled()) {_			this.logger.error(this.state + " onError: " + t, t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,error,enabled,this,logger,error,this,state,on,error,t,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1491331500;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1495868221;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1498780456;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1501795808;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1506113799;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1510845355;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1511293325;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1511293441;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> public final void onError(Throwable t);1511293486;Listeners can call this to notify when a read error has occurred.;public final void onError(Throwable t) {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onError: " + t)__		}_		this.state.get().onError(this, t)__	};listeners,can,call,this,to,notify,when,a,read,error,has,occurred;public,final,void,on,error,throwable,t,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,error,t,this,state,get,on,error,this,t
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1481583450;Reads and publishes data from the input. Continues till either there is no_more demand, or till there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		while (hasDemand()) {_			T data = read()__			if (data != null) {_				getAndSub(this.demand, 1L)__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};reads,and,publishes,data,from,the,input,continues,till,either,there,is,no,more,demand,or,till,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,while,has,demand,t,data,read,if,data,null,get,and,sub,this,demand,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1481741495;Reads and publishes data from the input. Continues till either there is no_more demand, or till there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		while (hasDemand()) {_			T data = read()__			if (data != null) {_				getAndSub(this.demand, 1L)__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};reads,and,publishes,data,from,the,input,continues,till,either,there,is,no,more,demand,or,till,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,while,has,demand,t,data,read,if,data,null,get,and,sub,this,demand,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1481755387;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		while (hasDemand()) {_			T data = read()__			if (data != null) {_				getAndSub(this.demand, 1L)__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,while,has,demand,t,data,read,if,data,null,get,and,sub,this,demand,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1485785645;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		while (hasDemand()) {_			T data = read()__			if (data != null) {_				Operators.addAndGet(DEMAND_FIELD_UPDATER, this, -1L)__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,while,has,demand,t,data,read,if,data,null,operators,add,and,get,this,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1485788600;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1485810955;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1491331500;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1495868221;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1498780456;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1501795808;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1506113799;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1510845355;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511293325;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511293441;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511293486;Read and publish data from the input. Continue till there is no more_demand or there is no more data to be read._@return {@code true} if there is more demand_ {@code false} otherwise;private boolean readAndPublish() throws IOException {_		long r__		while ((r = demand) > 0 && !publisherCompleted) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,from,the,input,continue,till,there,is,no,more,demand,or,there,is,no,more,data,to,be,read,return,code,true,if,there,is,more,demand,code,false,otherwise;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,demand,0,publisher,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511318790;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511323035;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511324413;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511390883;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Assert.state(this.subscriber != null, "No subscriber")__				this.subscriber.onNext(data)__			}_			else {_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,assert,state,this,subscriber,null,no,subscriber,this,subscriber,on,next,data,else,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511411136;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1511450555;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1519859718;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1521580893;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1523887174;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1523887367;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1530174524;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1530174524;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace("Data item read, publishing..")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,data,item,read,publishing,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1530906258;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (logger.isTraceEnabled()) {_					logger.trace(getLogPrefix() + "Publishing data read")__				}_				subscriber.onNext(data)__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace(getLogPrefix() + "No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,logger,is,trace,enabled,logger,trace,get,log,prefix,publishing,data,read,subscriber,on,next,data,else,if,logger,is,trace,enabled,logger,trace,get,log,prefix,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1530912796;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "Publishing data read")__				}_				subscriber.onNext(data)__			}_			else {_				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,publishing,data,read,subscriber,on,next,data,else,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1531942370;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "Publishing data read")__				}_				subscriber.onNext(data)__			}_			else {_				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,publishing,data,read,subscriber,on,next,data,else,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1532436274;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "Publishing data read")__				}_				subscriber.onNext(data)__			}_			else {_				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,publishing,data,read,subscriber,on,next,data,else,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1539999914;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "Publishing data read")__				}_				subscriber.onNext(data)__			}_			else {_				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,publishing,data,read,subscriber,on,next,data,else,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> private boolean readAndPublish() throws IOException;1545067161;Read and publish data one at a time until there is no more data, no more_demand, or perhaps we completed in the mean time._@return {@code true} if there is more demand_ {@code false} if there is_no more demand or we have completed.;private boolean readAndPublish() throws IOException {_		long r__		while ((r = this.demand) > 0 && !this.state.get().equals(State.COMPLETED)) {_			T data = read()__			if (data != null) {_				if (r != Long.MAX_VALUE) {_					DEMAND_FIELD_UPDATER.addAndGet(this, -1L)__				}_				Subscriber<? super T> subscriber = this.subscriber__				Assert.state(subscriber != null, "No subscriber")__				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "Publishing data read")__				}_				subscriber.onNext(data)__			}_			else {_				if (rsReadLogger.isTraceEnabled()) {_					rsReadLogger.trace(getLogPrefix() + "No more data to read")__				}_				return true__			}_		}_		return false__	};read,and,publish,data,one,at,a,time,until,there,is,no,more,data,no,more,demand,or,perhaps,we,completed,in,the,mean,time,return,code,true,if,there,is,more,demand,code,false,if,there,is,no,more,demand,or,we,have,completed;private,boolean,read,and,publish,throws,ioexception,long,r,while,r,this,demand,0,this,state,get,equals,state,completed,t,data,read,if,data,null,if,r,long,add,and,get,this,1l,subscriber,super,t,subscriber,this,subscriber,assert,state,subscriber,null,no,subscriber,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,publishing,data,read,subscriber,on,next,data,else,if,rs,read,logger,is,trace,enabled,rs,read,logger,trace,get,log,prefix,no,more,data,to,read,return,true,return,false
AbstractListenerReadPublisher -> protected abstract void discardData()_;1539999914;Invoked after an I/O read error from the underlying server or after a_cancellation signal from the downstream consumer to allow sub-classes_to discard any current cached data they might have._@since 5.1.2;protected abstract void discardData()_;invoked,after,an,i,o,read,error,from,the,underlying,server,or,after,a,cancellation,signal,from,the,downstream,consumer,to,allow,sub,classes,to,discard,any,current,cached,data,they,might,have,since,5,1,2;protected,abstract,void,discard,data
AbstractListenerReadPublisher -> protected abstract void discardData()_;1545067161;Invoked after an I/O read error from the underlying server or after a_cancellation signal from the downstream consumer to allow sub-classes_to discard any current cached data they might have._@since 5.0.11;protected abstract void discardData()_;invoked,after,an,i,o,read,error,from,the,underlying,server,or,after,a,cancellation,signal,from,the,downstream,consumer,to,allow,sub,classes,to,discard,any,current,cached,data,they,might,have,since,5,0,11;protected,abstract,void,discard,data
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1495868221;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1498780456;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1501795808;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1506113799;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1510845355;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511293325;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511293441;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511293486;Reads a data from the input, if possible._@return the data that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;reads,a,data,from,the,input,if,possible,return,the,data,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511318790;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511323035;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511324413;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511390883;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511411136;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1511450555;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1519859718;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1521580893;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1523887174;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1523887367;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1530174524;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1530174524;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1530906258;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1530912796;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1531942370;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1532436274;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1539999914;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> @Nullable 	protected abstract T read() throws IOException_;1545067161;Read once from the input, if possible._@return the item that was read_ or {@code null};@Nullable_	protected abstract T read() throws IOException_;read,once,from,the,input,if,possible,return,the,item,that,was,read,or,code,null;nullable,protected,abstract,t,read,throws,ioexception
AbstractListenerReadPublisher -> public final void onDataAvailable();1481583450;Called via a listener interface to indicate that reading is possible._@see ReadListener#onDataAvailable()_@see org.xnio.ChannelListener#handleEvent(Channel);public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};called,via,a,listener,interface,to,indicate,that,reading,is,possible,see,read,listener,on,data,available,see,org,xnio,channel,listener,handle,event,channel;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1481741495;Called via a listener interface to indicate that reading is possible._@see ReadListener#onDataAvailable()_@see org.xnio.ChannelListener#handleEvent(Channel);public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};called,via,a,listener,interface,to,indicate,that,reading,is,possible,see,read,listener,on,data,available,see,org,xnio,channel,listener,handle,event,channel;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1481755387;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1485785645;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1485788600;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1485810955;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1491331500;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1495868221;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1498780456;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1501795808;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1506113799;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1510845355;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1511293325;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1511293441;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1511293486;Listeners can call this to notify when reading is possible.;public final void onDataAvailable() {_		if (this.logger.isTraceEnabled()) {_			this.logger.trace(this.state + " onDataAvailable")__		}_		this.state.get().onDataAvailable(this)__	};listeners,can,call,this,to,notify,when,reading,is,possible;public,final,void,on,data,available,if,this,logger,is,trace,enabled,this,logger,trace,this,state,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1511450555;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		this.logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,this,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1519859718;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		this.logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,this,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1521580893;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		this.logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,this,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1523887174;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		this.logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,this,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1523887367;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		this.logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,this,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1530174524;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		this.logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,this,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1530174524;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		logger.trace("I/O event onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,logger,trace,i,o,event,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1530906258;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		logger.trace(getLogPrefix() + "onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,logger,trace,get,log,prefix,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1530912796;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		rsReadLogger.trace(getLogPrefix() + "onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,rs,read,logger,trace,get,log,prefix,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1531942370;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		rsReadLogger.trace(getLogPrefix() + "onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,rs,read,logger,trace,get,log,prefix,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1532436274;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		rsReadLogger.trace(getLogPrefix() + "onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,rs,read,logger,trace,get,log,prefix,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1539999914;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		rsReadLogger.trace(getLogPrefix() + "onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,rs,read,logger,trace,get,log,prefix,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> public final void onDataAvailable();1545067161;Invoked when reading is possible, either in the same thread after a check_via {@link #checkOnDataAvailable()}, or as a callback from the underlying_container.;public final void onDataAvailable() {_		rsReadLogger.trace(getLogPrefix() + "onDataAvailable")__		this.state.get().onDataAvailable(this)__	};invoked,when,reading,is,possible,either,in,the,same,thread,after,a,check,via,link,check,on,data,available,or,as,a,callback,from,the,underlying,container;public,final,void,on,data,available,rs,read,logger,trace,get,log,prefix,on,data,available,this,state,get,on,data,available,this
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1511390883;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1511411136;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1511450555;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1519859718;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1521580893;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1523887174;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1523887367;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1530174524;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1530174524;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1530906258;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1530912796;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1531942370;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1532436274;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1539999914;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> protected abstract void readingPaused()_;1545067161;Invoked when reading is paused due to a lack of demand._<p><strong>Note:</strong> This method is guaranteed not to compete with_{@link #checkOnDataAvailable()} so it can be used to safely suspend_reading, if the underlying API supports it, i.e. without competing with_an implicit call to resume via {@code checkOnDataAvailable()}._@since 5.0.2;protected abstract void readingPaused()_;invoked,when,reading,is,paused,due,to,a,lack,of,demand,p,strong,note,strong,this,method,is,guaranteed,not,to,compete,with,link,check,on,data,available,so,it,can,be,used,to,safely,suspend,reading,if,the,underlying,api,supports,it,i,e,without,competing,with,an,implicit,call,to,resume,via,code,check,on,data,available,since,5,0,2;protected,abstract,void,reading,paused
AbstractListenerReadPublisher -> State -> null -> <T> boolean read(AbstractListenerReadPublisher<T> publisher);1511318790;@return whether to exit the read loop_ false means stop trying_to read, true means check demand one more time.;<T> boolean read(AbstractListenerReadPublisher<T> publisher) {_				if (publisher.changeState(this, READING)) {_					try {_						boolean demandAvailable = publisher.readAndPublish()__						if (demandAvailable) {_							if (publisher.changeState(READING, DEMAND)) {_								publisher.checkOnDataAvailable()__							}_						}_						else if (publisher.changeState(READING, NO_DEMAND)) {_							publisher.suspendReading()__							return true__						}_					}_					catch (IOException ex) {_						publisher.onError(ex)__					}_				}_				_				_				return false__			};return,whether,to,exit,the,read,loop,false,means,stop,trying,to,read,true,means,check,demand,one,more,time;t,boolean,read,abstract,listener,read,publisher,t,publisher,if,publisher,change,state,this,reading,try,boolean,demand,available,publisher,read,and,publish,if,demand,available,if,publisher,change,state,reading,demand,publisher,check,on,data,available,else,if,publisher,change,state,reading,publisher,suspend,reading,return,true,catch,ioexception,ex,publisher,on,error,ex,return,false
AbstractListenerReadPublisher -> State -> null -> <T> boolean read(AbstractListenerReadPublisher<T> publisher);1511323035;@return whether to exit the read loop_ false means stop trying_to read, true means check demand one more time.;<T> boolean read(AbstractListenerReadPublisher<T> publisher) {_				if (publisher.changeState(this, READING)) {_					try {_						boolean demandAvailable = publisher.readAndPublish()__						if (demandAvailable) {_							if (publisher.changeState(READING, DEMAND)) {_								publisher.checkOnDataAvailable()__							}_						}_						else if (publisher.changeState(READING, NO_DEMAND)) {_							publisher.suspendReading()__							return true__						}_					}_					catch (IOException ex) {_						publisher.onError(ex)__					}_				}_				_				_				return false__			};return,whether,to,exit,the,read,loop,false,means,stop,trying,to,read,true,means,check,demand,one,more,time;t,boolean,read,abstract,listener,read,publisher,t,publisher,if,publisher,change,state,this,reading,try,boolean,demand,available,publisher,read,and,publish,if,demand,available,if,publisher,change,state,reading,demand,publisher,check,on,data,available,else,if,publisher,change,state,reading,publisher,suspend,reading,return,true,catch,ioexception,ex,publisher,on,error,ex,return,false
AbstractListenerReadPublisher -> State -> null -> <T> boolean read(AbstractListenerReadPublisher<T> publisher);1511324413;@return whether to exit the read loop_ false means stop trying_to read, true means check demand one more time.;<T> boolean read(AbstractListenerReadPublisher<T> publisher) {_				if (publisher.changeState(this, READING)) {_					try {_						boolean demandAvailable = publisher.readAndPublish()__						if (demandAvailable) {_							if (publisher.changeState(READING, DEMAND)) {_								publisher.checkOnDataAvailable()__							}_						}_						else if (publisher.changeState(READING, NO_DEMAND)) {_							publisher.suspendReading()__							return true__						}_					}_					catch (IOException ex) {_						publisher.onError(ex)__					}_				}_				_				_				return false__			};return,whether,to,exit,the,read,loop,false,means,stop,trying,to,read,true,means,check,demand,one,more,time;t,boolean,read,abstract,listener,read,publisher,t,publisher,if,publisher,change,state,this,reading,try,boolean,demand,available,publisher,read,and,publish,if,demand,available,if,publisher,change,state,reading,demand,publisher,check,on,data,available,else,if,publisher,change,state,reading,publisher,suspend,reading,return,true,catch,ioexception,ex,publisher,on,error,ex,return,false
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1511318790;Check if data is available, calling {@link #onDataAvailable()} either_immediately or later when reading is possible.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,calling,link,on,data,available,either,immediately,or,later,when,reading,is,possible;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1511323035;Check if data is available, calling {@link #onDataAvailable()} either_immediately or later when reading is possible.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,calling,link,on,data,available,either,immediately,or,later,when,reading,is,possible;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1511324413;Check if data is available, calling {@link #onDataAvailable()} either_immediately or later when reading is possible.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,calling,link,on,data,available,either,immediately,or,later,when,reading,is,possible;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1511390883;Check if data is available, calling {@link #onDataAvailable()} either_immediately or later when reading is possible.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,calling,link,on,data,available,either,immediately,or,later,when,reading,is,possible;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1511411136;Check if data is available, calling {@link #onDataAvailable()} either_immediately or later when reading is possible.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,calling,link,on,data,available,either,immediately,or,later,when,reading,is,possible;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1511450555;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1519859718;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1521580893;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1523887174;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1523887367;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1530174524;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1530174524;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1530906258;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1530912796;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1531942370;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1532436274;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1539999914;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
AbstractListenerReadPublisher -> protected abstract void checkOnDataAvailable()_;1545067161;Check if data is available and either call {@link #onDataAvailable()}_immediately or schedule a notification.;protected abstract void checkOnDataAvailable()_;check,if,data,is,available,and,either,call,link,on,data,available,immediately,or,schedule,a,notification;protected,abstract,void,check,on,data,available
