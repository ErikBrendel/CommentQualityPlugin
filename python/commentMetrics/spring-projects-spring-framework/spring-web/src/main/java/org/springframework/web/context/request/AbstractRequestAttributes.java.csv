commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Signal that the request has been completed.  * <p>Executes all request destruction callbacks and updates the  * session attributes that have been accessed during request processing.  */ ;/**  * Signal that the request has been completed.  * <p>Executes all request destruction callbacks and updates the  * session attributes that have been accessed during request processing.  */ public void requestCompleted() {     executeRequestDestructionCallbacks().     updateAccessedSessionAttributes().     this.requestActive = false. }
true;protected,final;0;3;/**  * Determine whether the original request is still active.  * @see #requestCompleted()  */ ;/**  * Determine whether the original request is still active.  * @see #requestCompleted()  */ protected final boolean isRequestActive() {     return this.requestActive. }
true;protected,final;2;7;/**  * Register the given callback as to be executed after request completion.  * @param name the name of the attribute to register the callback for  * @param callback the callback to be executed for destruction  */ ;/**  * Register the given callback as to be executed after request completion.  * @param name the name of the attribute to register the callback for  * @param callback the callback to be executed for destruction  */ protected final void registerRequestDestructionCallback(String name, Runnable callback) {     Assert.notNull(name, "Name must not be null").     Assert.notNull(callback, "Callback must not be null").     synchronized (this.requestDestructionCallbacks) {         this.requestDestructionCallbacks.put(name, callback).     } }
true;protected,final;1;6;/**  * Remove the request destruction callback for the specified attribute, if any.  * @param name the name of the attribute to remove the callback for  */ ;/**  * Remove the request destruction callback for the specified attribute, if any.  * @param name the name of the attribute to remove the callback for  */ protected final void removeRequestDestructionCallback(String name) {     Assert.notNull(name, "Name must not be null").     synchronized (this.requestDestructionCallbacks) {         this.requestDestructionCallbacks.remove(name).     } }
true;private;0;8;/**  * Execute all callbacks that have been registered for execution  * after request completion.  */ ;/**  * Execute all callbacks that have been registered for execution  * after request completion.  */ private void executeRequestDestructionCallbacks() {     synchronized (this.requestDestructionCallbacks) {         for (Runnable runnable : this.requestDestructionCallbacks.values()) {             runnable.run().         }         this.requestDestructionCallbacks.clear().     } }
true;protected,abstract;0;1;/**  * Update all session attributes that have been accessed during request processing,  * to expose their potentially updated state to the underlying session manager.  */ ;/**  * Update all session attributes that have been accessed during request processing,  * to expose their potentially updated state to the underlying session manager.  */ protected abstract void updateAccessedSessionAttributes().
