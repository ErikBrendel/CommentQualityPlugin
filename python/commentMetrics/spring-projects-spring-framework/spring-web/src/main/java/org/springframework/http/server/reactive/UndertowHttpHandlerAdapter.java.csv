commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void setDataBufferFactory(DataBufferFactory bufferFactory) {     Assert.notNull(bufferFactory, "DataBufferFactory must not be null").     this.bufferFactory = bufferFactory. }
false;public;0;3;;public DataBufferFactory getDataBufferFactory() {     return this.bufferFactory. }
false;public;1;22;;@Override public void handleRequest(HttpServerExchange exchange) {     UndertowServerHttpRequest request = null.     try {         request = new UndertowServerHttpRequest(exchange, getDataBufferFactory()).     } catch (URISyntaxException ex) {         if (logger.isWarnEnabled()) {             logger.debug("Failed to get request URI: " + ex.getMessage()).         }         exchange.setStatusCode(400).         return.     }     ServerHttpResponse response = new UndertowServerHttpResponse(exchange, getDataBufferFactory(), request).     if (request.getMethod() == HttpMethod.HEAD) {         response = new HttpHeadResponseDecorator(response).     }     HandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(exchange, request).     this.httpHandler.handle(request, response).subscribe(resultSubscriber). }
false;public;1;4;;@Override public void onSubscribe(Subscription subscription) {     subscription.request(Long.MAX_VALUE). }
false;public;1;4;;@Override public void onNext(Void aVoid) { // no-op }
false;public;1;18;;@Override public void onError(Throwable ex) {     logger.trace(this.logPrefix + "Failed to complete: " + ex.getMessage()).     if (this.exchange.isResponseStarted()) {         try {             logger.debug(this.logPrefix + "Closing connection").             this.exchange.getConnection().close().         } catch (IOException ex2) {         // ignore         }     } else {         logger.debug(this.logPrefix + "Setting HttpServerExchange status to 500 Server Error").         this.exchange.setStatusCode(500).         this.exchange.endExchange().     } }
false;public;0;5;;@Override public void onComplete() {     logger.trace(this.logPrefix + "Handling completed").     this.exchange.endExchange(). }
