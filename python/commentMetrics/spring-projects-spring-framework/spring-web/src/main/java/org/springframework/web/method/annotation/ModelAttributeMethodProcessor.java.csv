# id;timestamp;commentText;codeText;commentWords;codeWords
ModelAttributeMethodProcessor -> public boolean supportsReturnType(MethodParameter returnType);1328020251;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> public boolean supportsReturnType(MethodParameter returnType);1336680074;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> public boolean supportsReturnType(MethodParameter returnType);1345574045;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> public boolean supportsReturnType(MethodParameter returnType);1357119239;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1328020251;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation annot : annotations) {_			if (annot.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(annot)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,annot,annotations,if,annot,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,annot,binder,validate,hints,instanceof,object,object,hints,new,object,hints
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1336680074;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation annot : annotations) {_			if (annot.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(annot)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,annot,annotations,if,annot,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,annot,binder,validate,hints,instanceof,object,object,hints,new,object,hints
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1345574045;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation annot : annotations) {_			if (annot.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(annot)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,annot,annotations,if,annot,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,annot,binder,validate,hints,instanceof,object,object,hints,new,object,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1356735495;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation annot : annotations) {_			if (annot.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(annot)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,annot,annotations,if,annot,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,annot,binder,validate,hints,instanceof,object,object,hints,new,object,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1357119239;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation annot : annotations) {_			if (annot.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(annot)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,annot,annotations,if,annot,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,annot,binder,validate,hints,instanceof,object,object,hints,new,object,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1368482696;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation annot : annotations) {_			if (annot.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(annot)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,annot,annotations,if,annot,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,annot,binder,validate,hints,instanceof,object,object,hints,new,object,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1411657236;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			if (ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = AnnotationUtils.getValue(ann)__				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,if,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,annotation,utils,get,value,ann,binder,validate,hints,instanceof,object,object,hints,new,object,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1416868464;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid}._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1423592910;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1490354145;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1496837955;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1498780456;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1500540246;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1502960560;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1502974979;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1503071946;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1506551472;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1508322682;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1517567636;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1531839694;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration_@see WebDataBinder#validate(Object...)_@see SmartValidator#validate(Object, Errors, Object...);protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Object[] validationHints = determineValidationHints(ann)__			if (validationHints != null) {_				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration,see,web,data,binder,validate,object,see,smart,validator,validate,object,errors,object;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,for,annotation,ann,parameter,get,parameter,annotations,object,validation,hints,determine,validation,hints,ann,if,validation,hints,null,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1531916836;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration_@see WebDataBinder#validate(Object...)_@see SmartValidator#validate(Object, Errors, Object...);protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Object[] validationHints = determineValidationHints(ann)__			if (validationHints != null) {_				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration,see,web,data,binder,validate,object,see,smart,validator,validate,object,errors,object;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,for,annotation,ann,parameter,get,parameter,annotations,object,validation,hints,determine,validation,hints,ann,if,validation,hints,null,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1502960560;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1502974979;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1503071946;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1506551472;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1508322682;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1517567636;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1531839694;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(MethodParameter parameter);1531916836;Whether to raise a fatal bind exception on validation errors._@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@since 5.0;protected boolean isBindExceptionRequired(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,since,5,0;protected,boolean,is,bind,exception,required,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1328020251;Whether to raise a {@link BindException} on bind or validation errors._The default implementation returns {@code true} if the next method_argument is not of type {@link Errors}._@param binder the data binder used to perform data binding_@param parameter the method argument;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,bind,or,validation,errors,the,default,implementation,returns,code,true,if,the,next,method,argument,is,not,of,type,link,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1336680074;Whether to raise a {@link BindException} on bind or validation errors._The default implementation returns {@code true} if the next method_argument is not of type {@link Errors}._@param binder the data binder used to perform data binding_@param parameter the method argument;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,bind,or,validation,errors,the,default,implementation,returns,code,true,if,the,next,method,argument,is,not,of,type,link,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1345574045;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1356735495;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1357119239;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1368482696;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1411657236;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1416868464;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1423592910;Whether to raise a {@link BindException} on validation errors._@param binder the data binder used to perform data binding_@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}.;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))___		return !hasBindingResult__	};whether,to,raise,a,link,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1490354145;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1496837955;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1498780456;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1500540246;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1502960560;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1502974979;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1503071946;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1506551472;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1508322682;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1517567636;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1531839694;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1531916836;Whether to raise a fatal bind exception on validation errors._<p>The default implementation delegates to {@link #isBindExceptionRequired(MethodParameter)}._@param binder the data binder used to perform data binding_@param parameter the method parameter declaration_@return {@code true} if the next method parameter is not of type {@link Errors}_@see #isBindExceptionRequired(MethodParameter);protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		return isBindExceptionRequired(parameter)__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,p,the,default,implementation,delegates,to,link,is,bind,exception,required,method,parameter,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,declaration,return,code,true,if,the,next,method,parameter,is,not,of,type,link,errors,see,is,bind,exception,required,method,parameter;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,return,is,bind,exception,required,parameter
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1356735495;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1368482696;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1411657236;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1416868464;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1423592910;Returns {@code true} if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode, and also if it is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,and,also,if,it,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1424385427;Returns {@code true} if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode, and also if it is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,and,also,if,it,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1453868458;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1453870278;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1458754760;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1467677340;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1487362018;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1490354145;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1496837955;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1498780456;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1500540246;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1502960560;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1502974979;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1503071946;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1506551472;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1508322682;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1517567636;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1531839694;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsParameter(MethodParameter parameter);1531916836;Returns {@code true} if the parameter is annotated with_{@link ModelAttribute} or, if in default resolution mode, for any_method parameter that is not a simple type.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		return (parameter.hasParameterAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())))__	};returns,code,true,if,the,parameter,is,annotated,with,link,model,attribute,or,if,in,default,resolution,mode,for,any,method,parameter,that,is,not,a,simple,type;override,public,boolean,supports,parameter,method,parameter,parameter,return,parameter,has,parameter,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1356735495;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;override,public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1368482696;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;override,public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1411657236;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;override,public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1416868464;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;override,public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1423592910;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;override,public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1424385427;Return {@code true} if there is a method-level {@code @ModelAttribute}_or if it is a non-simple type when {@code annotationNotRequired=true}.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		if (returnType.getMethodAnnotation(ModelAttribute.class) != null) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(returnType.getParameterType())__		}_		else {_			return false__		}_	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,if,it,is,a,non,simple,type,when,code,annotation,not,required,true;override,public,boolean,supports,return,type,method,parameter,return,type,if,return,type,get,method,annotation,model,attribute,class,null,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,return,type,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1453868458;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.getMethodAnnotation(ModelAttribute.class) != null ||_				this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType()))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,get,method,annotation,model,attribute,class,null,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1453870278;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.getMethodAnnotation(ModelAttribute.class) != null ||_				this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType()))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,get,method,annotation,model,attribute,class,null,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1458754760;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1467677340;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1487362018;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1490354145;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1496837955;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1498780456;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1500540246;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1502960560;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1502974979;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1503071946;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1506551472;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1508322682;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1517567636;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1531839694;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public boolean supportsReturnType(MethodParameter returnType);1531916836;Return {@code true} if there is a method-level {@code @ModelAttribute}_or, in default resolution mode, for any return value type that is not_a simple type.;@Override_	public boolean supportsReturnType(MethodParameter returnType) {_		return (returnType.hasMethodAnnotation(ModelAttribute.class) ||_				(this.annotationNotRequired && !BeanUtils.isSimpleProperty(returnType.getParameterType())))__	};return,code,true,if,there,is,a,method,level,code,model,attribute,or,in,default,resolution,mode,for,any,return,value,type,that,is,not,a,simple,type;override,public,boolean,supports,return,type,method,parameter,return,type,return,return,type,has,method,annotation,model,attribute,class,this,annotation,not,required,bean,utils,is,simple,property,return,type,get,parameter,type
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1328020251;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1336680074;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1345574045;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1356735495;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1357119239;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1368482696;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1411657236;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1416868464;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1423592910;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1424385427;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1453868458;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1453870278;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1458754760;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1467677340;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1487362018;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1490354145;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1496837955;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1498780456;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1500540246;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1502960560;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1502974979;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1503071946;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1506551472;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1508322682;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1517567636;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1531839694;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request);1531916836;Extension point to bind the request to the target object._@param binder the data binder instance to use for the binding_@param request the current request;protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {_		((WebRequestDataBinder) binder).bind(request)__	};extension,point,to,bind,the,request,to,the,target,object,param,binder,the,data,binder,instance,to,use,for,the,binding,param,request,the,current,request;protected,void,bind,request,parameters,web,data,binder,binder,native,web,request,request,web,request,data,binder,binder,bind,request
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1411657236;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1416868464;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1423592910;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1424385427;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1453868458;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1453870278;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1458754760;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1467677340;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1487362018;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1490354145;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1502974979;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1503071946;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1506551472;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1508322682;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		if (ann != null) {_			mavContainer.setBinding(name, ann.binding())__		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,mav,container,set,binding,name,ann,binding,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1517567636;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		if (ann != null) {_			mavContainer.setBinding(name, ann.binding())__		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,mav,container,set,binding,name,ann,binding,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1531839694;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		if (ann != null) {_			mavContainer.setBinding(name, ann.binding())__		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,mav,container,set,binding,name,ann,binding,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> @Override 	@Nullable 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1531916836;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	@Nullable_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		if (ann != null) {_			mavContainer.setBinding(name, ann.binding())__		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,nullable,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,mav,container,set,binding,name,ann,binding,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1328020251;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1336680074;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1345574045;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1356735495;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1357119239;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1368482696;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1411657236;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1416868464;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1423592910;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1424385427;@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1453868458;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1453870278;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1458754760;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1467677340;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1487362018;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation.;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1490354145;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1496837955;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1498780456;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1500540246;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1502960560;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1502974979;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1503071946;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1506551472;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1508322682;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1517567636;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1531839694;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> public ModelAttributeMethodProcessor(boolean annotationNotRequired);1531916836;Class constructor._@param annotationNotRequired if "true", non-simple method arguments and_return values are considered model attributes with or without a_{@code @ModelAttribute} annotation;public ModelAttributeMethodProcessor(boolean annotationNotRequired) {_		this.annotationNotRequired = annotationNotRequired__	};class,constructor,param,annotation,not,required,if,true,non,simple,method,arguments,and,return,values,are,considered,model,attributes,with,or,without,a,code,model,attribute,annotation;public,model,attribute,method,processor,boolean,annotation,not,required,this,annotation,not,required,annotation,not,required
ModelAttributeMethodProcessor -> protected void validateValueIfApplicable(WebDataBinder binder, MethodParameter parameter, 			Class<?> targetType, String fieldName, @Nullable Object value);1531839694;Validate the specified candidate value if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration_@param targetType the target type_@param fieldName the name of the field_@param value the candidate value_@since 5.1_@see #validateIfApplicable(WebDataBinder, MethodParameter)_@see SmartValidator#validateValue(Class, String, Object, Errors, Object...);protected void validateValueIfApplicable(WebDataBinder binder, MethodParameter parameter,_			Class<?> targetType, String fieldName, @Nullable Object value) {__		for (Annotation ann : parameter.getParameterAnnotations()) {_			Object[] validationHints = determineValidationHints(ann)__			if (validationHints != null) {_				for (Validator validator : binder.getValidators()) {_					if (validator instanceof SmartValidator) {_						try {_							((SmartValidator) validator).validateValue(targetType, fieldName, value,_									binder.getBindingResult(), validationHints)__						}_						catch (IllegalArgumentException ex) {_							_						}_					}_				}_				break__			}_		}_	};validate,the,specified,candidate,value,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration,param,target,type,the,target,type,param,field,name,the,name,of,the,field,param,value,the,candidate,value,since,5,1,see,validate,if,applicable,web,data,binder,method,parameter,see,smart,validator,validate,value,class,string,object,errors,object;protected,void,validate,value,if,applicable,web,data,binder,binder,method,parameter,parameter,class,target,type,string,field,name,nullable,object,value,for,annotation,ann,parameter,get,parameter,annotations,object,validation,hints,determine,validation,hints,ann,if,validation,hints,null,for,validator,validator,binder,get,validators,if,validator,instanceof,smart,validator,try,smart,validator,validator,validate,value,target,type,field,name,value,binder,get,binding,result,validation,hints,catch,illegal,argument,exception,ex,break
ModelAttributeMethodProcessor -> protected void validateValueIfApplicable(WebDataBinder binder, MethodParameter parameter, 			Class<?> targetType, String fieldName, @Nullable Object value);1531916836;Validate the specified candidate value if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter declaration_@param targetType the target type_@param fieldName the name of the field_@param value the candidate value_@since 5.1_@see #validateIfApplicable(WebDataBinder, MethodParameter)_@see SmartValidator#validateValue(Class, String, Object, Errors, Object...);protected void validateValueIfApplicable(WebDataBinder binder, MethodParameter parameter,_			Class<?> targetType, String fieldName, @Nullable Object value) {__		for (Annotation ann : parameter.getParameterAnnotations()) {_			Object[] validationHints = determineValidationHints(ann)__			if (validationHints != null) {_				for (Validator validator : binder.getValidators()) {_					if (validator instanceof SmartValidator) {_						try {_							((SmartValidator) validator).validateValue(targetType, fieldName, value,_									binder.getBindingResult(), validationHints)__						}_						catch (IllegalArgumentException ex) {_							_						}_					}_				}_				break__			}_		}_	};validate,the,specified,candidate,value,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,declaration,param,target,type,the,target,type,param,field,name,the,name,of,the,field,param,value,the,candidate,value,since,5,1,see,validate,if,applicable,web,data,binder,method,parameter,see,smart,validator,validate,value,class,string,object,errors,object;protected,void,validate,value,if,applicable,web,data,binder,binder,method,parameter,parameter,class,target,type,string,field,name,nullable,object,value,for,annotation,ann,parameter,get,parameter,annotations,object,validation,hints,determine,validation,hints,ann,if,validation,hints,null,for,validator,validator,binder,get,validators,if,validator,instanceof,smart,validator,try,smart,validator,validator,validate,value,target,type,field,name,value,binder,get,binding,result,validation,hints,catch,illegal,argument,exception,ex,break
ModelAttributeMethodProcessor -> public final Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest request, WebDataBinderFactory binderFactory) 			throws Exception;1328020251;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;public final Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest request, WebDataBinderFactory binderFactory)_			throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object target = (mavContainer.containsAttribute(name)) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, request)___		WebDataBinder binder = binderFactory.createBinder(request, target, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, request)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		mavContainer.addAllAttributes(binder.getBindingResult().getModel())__		return binder.getTarget()__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,target,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,request,web,data,binder,binder,binder,factory,create,binder,request,target,name,if,binder,get,target,null,bind,request,parameters,binder,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,mav,container,add,all,attributes,binder,get,binding,result,get,model,return,binder,get,target
ModelAttributeMethodProcessor -> public final Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest request, WebDataBinderFactory binderFactory) 			throws Exception;1336680074;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;public final Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest request, WebDataBinderFactory binderFactory)_			throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name)) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, request)___		WebDataBinder binder = binderFactory.createBinder(request, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, request)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.getTarget()__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,request,web,data,binder,binder,binder,factory,create,binder,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,get,target
ModelAttributeMethodProcessor -> public final Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest request, WebDataBinderFactory binderFactory) 			throws Exception;1345574045;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;public final Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest request, WebDataBinderFactory binderFactory)_			throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name)) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, request)___		WebDataBinder binder = binderFactory.createBinder(request, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, request)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.getTarget()__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,request,web,data,binder,binder,binder,factory,create,binder,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,get,target
ModelAttributeMethodProcessor -> public final Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest request, WebDataBinderFactory binderFactory) 			throws Exception;1357119239;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;public final Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest request, WebDataBinderFactory binderFactory)_			throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name)) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, request)___		WebDataBinder binder = binderFactory.createBinder(request, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, request)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.getTarget()__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,request,web,data,binder,binder,binder,factory,create,binder,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,get,target
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1498780456;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return (parameter.getParameterType().isInstance(attribute) ? attribute :_				binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter))__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1500540246;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return (parameter.getParameterType().isInstance(attribute) ? attribute :_				binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter))__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1502960560;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer")__		Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory")___		String name = ModelFactory.getNameForParameter(parameter)__		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		Object attribute = null__		BindingResult bindingResult = null___		if (mavContainer.containsAttribute(name)) {_			attribute = mavContainer.getModel().get(name)__		}_		else {_			_			try {_				attribute = createAttribute(name, parameter, binderFactory, webRequest)__			}_			catch (BindException ex) {_				if (isBindExceptionRequired(parameter)) {_					_					throw ex__				}_				_				if (parameter.getParameterType() == Optional.class) {_					attribute = Optional.empty()__				}_				bindingResult = ex.getBindingResult()__			}_		}__		if (bindingResult == null) {_			_			_			WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__			if (binder.getTarget() != null) {_				if (!mavContainer.isBindingDisabled(name)) {_					bindRequestParameters(binder, webRequest)__				}_				validateIfApplicable(binder, parameter)__				if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_			_			if (!parameter.getParameterType().isInstance(attribute)) {_				attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__			}_			bindingResult = binder.getBindingResult()__		}__		_		Map<String, Object> bindingResultModel = bindingResult.getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return attribute__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,assert,state,mav,container,null,model,attribute,method,processor,requires,model,and,view,container,assert,state,binder,factory,null,model,attribute,method,processor,requires,web,data,binder,factory,string,name,model,factory,get,name,for,parameter,parameter,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,object,attribute,null,binding,result,binding,result,null,if,mav,container,contains,attribute,name,attribute,mav,container,get,model,get,name,else,try,attribute,create,attribute,name,parameter,binder,factory,web,request,catch,bind,exception,ex,if,is,bind,exception,required,parameter,throw,ex,if,parameter,get,parameter,type,optional,class,attribute,optional,empty,binding,result,ex,get,binding,result,if,binding,result,null,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,if,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter,binding,result,binder,get,binding,result,map,string,object,binding,result,model,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,attribute
ModelAttributeMethodProcessor -> public boolean supportsParameter(MethodParameter parameter);1328020251;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> public boolean supportsParameter(MethodParameter parameter);1336680074;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> public boolean supportsParameter(MethodParameter parameter);1345574045;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> public boolean supportsParameter(MethodParameter parameter);1357119239;@return true if the parameter is annotated with {@link ModelAttribute}_or in default resolution mode also if it is not a simple type.;public boolean supportsParameter(MethodParameter parameter) {_		if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_			return true__		}_		else if (this.annotationNotRequired) {_			return !BeanUtils.isSimpleProperty(parameter.getParameterType())__		}_		else {_			return false__		}_	};return,true,if,the,parameter,is,annotated,with,link,model,attribute,or,in,default,resolution,mode,also,if,it,is,not,a,simple,type;public,boolean,supports,parameter,method,parameter,parameter,if,parameter,has,parameter,annotation,model,attribute,class,return,true,else,if,this,annotation,not,required,return,bean,utils,is,simple,property,parameter,get,parameter,type,else,return,false
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1490354145;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation uses the unique public no-arg constructor, if any,_which may have arguments: It understands the JavaBeans {@link ConstructorProperties}_annotation as well as runtime-retained parameter names in the bytecode,_associating request parameters with constructor arguments by name. If no such_constructor is found, the default constructor will be used (even if not public),_assuming subsequent bean property bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		Constructor<?>[] ctors = parameter.getParameterType().getConstructors()__		if (ctors.length != 1) {_			_			_			return BeanUtils.instantiateClass(parameter.getParameterType())__		}_		Constructor<?> ctor = ctors[0]__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)__		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		for (int i = 0_ i < paramNames.length_ i++) {_			args[i] = binder.convertIfNecessary(_					webRequest.getParameterValues(paramNames[i]), paramTypes[i], new MethodParameter(ctor, i))__		}_		return BeanUtils.instantiateClass(ctor, args)__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,uses,the,unique,public,no,arg,constructor,if,any,which,may,have,arguments,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,constructor,ctors,parameter,get,parameter,type,get,constructors,if,ctors,length,1,return,bean,utils,instantiate,class,parameter,get,parameter,type,constructor,ctor,ctors,0,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,for,int,i,0,i,param,names,length,i,args,i,binder,convert,if,necessary,web,request,get,parameter,values,param,names,i,param,types,i,new,method,parameter,ctor,i,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1496837955;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation uses the unique public no-arg constructor, if any,_which may have arguments: It understands the JavaBeans {@link ConstructorProperties}_annotation as well as runtime-retained parameter names in the bytecode,_associating request parameters with constructor arguments by name. If no such_constructor is found, the default constructor will be used (even if not public),_assuming subsequent bean property bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		Constructor<?>[] ctors = parameter.getParameterType().getConstructors()__		if (ctors.length != 1) {_			_			_			return BeanUtils.instantiateClass(parameter.getParameterType())__		}_		Constructor<?> ctor = ctors[0]__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)__		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		for (int i = 0_ i < paramNames.length_ i++) {_			args[i] = binder.convertIfNecessary(_					webRequest.getParameterValues(paramNames[i]), paramTypes[i], new MethodParameter(ctor, i))__		}_		return BeanUtils.instantiateClass(ctor, args)__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,uses,the,unique,public,no,arg,constructor,if,any,which,may,have,arguments,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,constructor,ctors,parameter,get,parameter,type,get,constructors,if,ctors,length,1,return,bean,utils,instantiate,class,parameter,get,parameter,type,constructor,ctor,ctors,0,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,for,int,i,0,i,param,names,length,i,args,i,binder,convert,if,necessary,web,request,get,parameter,values,param,names,i,param,types,i,new,method,parameter,ctor,i,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1498780456;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation uses the unique public no-arg constructor, if any,_which may have arguments: It understands the JavaBeans {@link ConstructorProperties}_annotation as well as runtime-retained parameter names in the bytecode,_associating request parameters with constructor arguments by name. If no such_constructor is found, the default constructor will be used (even if not public),_assuming subsequent bean property bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		Constructor<?>[] ctors = parameter.getParameterType().getConstructors()__		if (ctors.length != 1) {_			_			_			return BeanUtils.instantiateClass(parameter.getParameterType())__		}_		Constructor<?> ctor = ctors[0]__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)__		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		for (int i = 0_ i < paramNames.length_ i++) {_			args[i] = binder.convertIfNecessary(_					webRequest.getParameterValues(paramNames[i]), paramTypes[i], new MethodParameter(ctor, i))__		}_		return BeanUtils.instantiateClass(ctor, args)__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,uses,the,unique,public,no,arg,constructor,if,any,which,may,have,arguments,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,constructor,ctors,parameter,get,parameter,type,get,constructors,if,ctors,length,1,return,bean,utils,instantiate,class,parameter,get,parameter,type,constructor,ctor,ctors,0,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,for,int,i,0,i,param,names,length,i,args,i,binder,convert,if,necessary,web,request,get,parameter,values,param,names,i,param,types,i,new,method,parameter,ctor,i,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1500540246;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation uses the unique public no-arg constructor, if any,_which may have arguments: It understands the JavaBeans {@link ConstructorProperties}_annotation as well as runtime-retained parameter names in the bytecode,_associating request parameters with constructor arguments by name. If no such_constructor is found, the default constructor will be used (even if not public),_assuming subsequent bean property bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		Class<?> type = parameter.getParameterType()__		_		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(type)__		if (ctor == null) {_			throw new IllegalStateException("No primary constructor found for " + type.getName())__		}__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)__		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		for (int i = 0_ i < paramNames.length_ i++) {_			String[] parameterValues = webRequest.getParameterValues(paramNames[i])__			args[i] = (parameterValues != null ? binder.convertIfNecessary(parameterValues, paramTypes[i],_					new MethodParameter(ctor, i)) : null)__		}_		return BeanUtils.instantiateClass(ctor, args)__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,uses,the,unique,public,no,arg,constructor,if,any,which,may,have,arguments,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,class,type,parameter,get,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,type,if,ctor,null,throw,new,illegal,state,exception,no,primary,constructor,found,for,type,get,name,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,for,int,i,0,i,param,names,length,i,string,parameter,values,web,request,get,parameter,values,param,names,i,args,i,parameter,values,null,binder,convert,if,necessary,parameter,values,param,types,i,new,method,parameter,ctor,i,null,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1502960560;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> type = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(type)__		if (ctor == null) {_			throw new IllegalStateException("No primary constructor found for " + type.getName())__		}__		Object attribute = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,type,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,type,if,ctor,null,throw,new,illegal,state,exception,no,primary,constructor,found,for,type,get,name,object,attribute,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1502974979;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> type = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(type)__		if (ctor == null) {_			throw new IllegalStateException("No primary constructor found for " + type.getName())__		}__		Object attribute = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,type,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,type,if,ctor,null,throw,new,illegal,state,exception,no,primary,constructor,found,for,type,get,name,object,attribute,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1503071946;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> type = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(type)__		if (ctor == null) {_			throw new IllegalStateException("No primary constructor found for " + type.getName())__		}__		Object attribute = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,type,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,type,if,ctor,null,throw,new,illegal,state,exception,no,primary,constructor,found,for,type,get,name,object,attribute,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1506551472;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> clazz = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(clazz)__		if (ctor == null) {_			Constructor<?>[] ctors = clazz.getConstructors()__			if (ctors.length == 1) {_				ctor = ctors[0]__			}_			else {_				try {_					ctor = clazz.getDeclaredConstructor()__				}_				catch (NoSuchMethodException ex) {_					throw new IllegalStateException("No primary or default constructor found for " + clazz, ex)__				}_			}_		}__		Object attribute = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,clazz,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,clazz,if,ctor,null,constructor,ctors,clazz,get,constructors,if,ctors,length,1,ctor,ctors,0,else,try,ctor,clazz,get,declared,constructor,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,no,primary,or,default,constructor,found,for,clazz,ex,object,attribute,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1508322682;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> clazz = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(clazz)__		if (ctor == null) {_			Constructor<?>[] ctors = clazz.getConstructors()__			if (ctors.length == 1) {_				ctor = ctors[0]__			}_			else {_				try {_					ctor = clazz.getDeclaredConstructor()__				}_				catch (NoSuchMethodException ex) {_					throw new IllegalStateException("No primary or default constructor found for " + clazz, ex)__				}_			}_		}__		Object attribute = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,clazz,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,clazz,if,ctor,null,constructor,ctors,clazz,get,constructors,if,ctors,length,1,ctor,ctors,0,else,try,ctor,clazz,get,declared,constructor,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,no,primary,or,default,constructor,found,for,clazz,ex,object,attribute,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1517567636;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> clazz = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(clazz)__		if (ctor == null) {_			Constructor<?>[] ctors = clazz.getConstructors()__			if (ctors.length == 1) {_				ctor = ctors[0]__			}_			else {_				try {_					ctor = clazz.getDeclaredConstructor()__				}_				catch (NoSuchMethodException ex) {_					throw new IllegalStateException("No primary or default constructor found for " + clazz, ex)__				}_			}_		}__		Object attribute = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,clazz,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,clazz,if,ctor,null,constructor,ctors,clazz,get,constructors,if,ctors,length,1,ctor,ctors,0,else,try,ctor,clazz,get,declared,constructor,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,no,primary,or,default,constructor,found,for,clazz,ex,object,attribute,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1531839694;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, MethodParameter, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> clazz = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(clazz)__		if (ctor == null) {_			Constructor<?>[] ctors = clazz.getConstructors()__			if (ctors.length == 1) {_				ctor = ctors[0]__			}_			else {_				try {_					ctor = clazz.getDeclaredConstructor()__				}_				catch (NoSuchMethodException ex) {_					throw new IllegalStateException("No primary or default constructor found for " + clazz, ex)__				}_			}_		}__		Object attribute = constructAttribute(ctor, attributeName, parameter, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,method,parameter,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,clazz,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,clazz,if,ctor,null,constructor,ctors,clazz,get,constructors,if,ctors,length,1,ctor,ctors,0,else,try,ctor,clazz,get,declared,constructor,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,no,primary,or,default,constructor,found,for,clazz,ex,object,attribute,construct,attribute,ctor,attribute,name,parameter,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1531916836;Extension point to create the model attribute if not found in the model,_with subsequent parameter binding through bean properties (unless suppressed)._<p>The default implementation typically uses the unique public no-arg constructor_if available but also handles a "primary constructor" approach for data classes:_It understands the JavaBeans {@link ConstructorProperties} annotation as well as_runtime-retained parameter names in the bytecode, associating request parameters_with constructor arguments by name. If no such constructor is found, the default_constructor will be used (even if not public), assuming subsequent bean property_bindings through setter methods._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter declaration_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@see #constructAttribute(Constructor, String, MethodParameter, WebDataBinderFactory, NativeWebRequest)_@see BeanUtils#findPrimaryConstructor(Class);protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		MethodParameter nestedParameter = parameter.nestedIfOptional()__		Class<?> clazz = nestedParameter.getNestedParameterType()___		Constructor<?> ctor = BeanUtils.findPrimaryConstructor(clazz)__		if (ctor == null) {_			Constructor<?>[] ctors = clazz.getConstructors()__			if (ctors.length == 1) {_				ctor = ctors[0]__			}_			else {_				try {_					ctor = clazz.getDeclaredConstructor()__				}_				catch (NoSuchMethodException ex) {_					throw new IllegalStateException("No primary or default constructor found for " + clazz, ex)__				}_			}_		}__		Object attribute = constructAttribute(ctor, attributeName, parameter, binderFactory, webRequest)__		if (parameter != nestedParameter) {_			attribute = Optional.of(attribute)__		}_		return attribute__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,with,subsequent,parameter,binding,through,bean,properties,unless,suppressed,p,the,default,implementation,typically,uses,the,unique,public,no,arg,constructor,if,available,but,also,handles,a,primary,constructor,approach,for,data,classes,it,understands,the,java,beans,link,constructor,properties,annotation,as,well,as,runtime,retained,parameter,names,in,the,bytecode,associating,request,parameters,with,constructor,arguments,by,name,if,no,such,constructor,is,found,the,default,constructor,will,be,used,even,if,not,public,assuming,subsequent,bean,property,bindings,through,setter,methods,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,declaration,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,see,construct,attribute,constructor,string,method,parameter,web,data,binder,factory,native,web,request,see,bean,utils,find,primary,constructor,class;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,method,parameter,nested,parameter,parameter,nested,if,optional,class,clazz,nested,parameter,get,nested,parameter,type,constructor,ctor,bean,utils,find,primary,constructor,clazz,if,ctor,null,constructor,ctors,clazz,get,constructors,if,ctors,length,1,ctor,ctors,0,else,try,ctor,clazz,get,declared,constructor,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,no,primary,or,default,constructor,found,for,clazz,ex,object,attribute,construct,attribute,ctor,attribute,name,parameter,binder,factory,web,request,if,parameter,nested,parameter,attribute,optional,of,attribute,return,attribute
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1424385427;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1453868458;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1453870278;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1458754760;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1467677340;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1487362018;Validate the model attribute if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,model,attribute,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
ModelAttributeMethodProcessor -> @Nullable 	private Object[] determineValidationHints(Annotation ann);1531839694;Determine any validation triggered by the given annotation._@param ann the annotation (potentially a validation annotation)_@return the validation hints to apply (possibly an empty array),_or {@code null} if this annotation does not trigger any validation_@since 5.1;@Nullable_	private Object[] determineValidationHints(Annotation ann) {_		Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__		if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_			Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__			return (hints instanceof Object[] ? (Object[]) hints : new Object[]{hints})__		}_		return null__	};determine,any,validation,triggered,by,the,given,annotation,param,ann,the,annotation,potentially,a,validation,annotation,return,the,validation,hints,to,apply,possibly,an,empty,array,or,code,null,if,this,annotation,does,not,trigger,any,validation,since,5,1;nullable,private,object,determine,validation,hints,annotation,ann,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
ModelAttributeMethodProcessor -> @Nullable 	private Object[] determineValidationHints(Annotation ann);1531916836;Determine any validation triggered by the given annotation._@param ann the annotation (potentially a validation annotation)_@return the validation hints to apply (possibly an empty array),_or {@code null} if this annotation does not trigger any validation_@since 5.1;@Nullable_	private Object[] determineValidationHints(Annotation ann) {_		Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__		if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_			Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__			if (hints == null) {_				return new Object[0]__			}_			return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__		}_		return null__	};determine,any,validation,triggered,by,the,given,annotation,param,ann,the,annotation,potentially,a,validation,annotation,return,the,validation,hints,to,apply,possibly,an,empty,array,or,code,null,if,this,annotation,does,not,trigger,any,validation,since,5,1;nullable,private,object,determine,validation,hints,annotation,ann,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,if,hints,null,return,new,object,0,return,hints,instanceof,object,object,hints,new,object,hints,return,null
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1328020251;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute, never {@code null}_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute, never {@code null};protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1336680074;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute, never {@code null}_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute, never {@code null};protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1345574045;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute, never {@code null}_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute, never {@code null};protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1356735495;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute, never {@code null}_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute, never {@code null};protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1357119239;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute, never {@code null}_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute, never {@code null};protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1368482696;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute, never {@code null}_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute, never {@code null};protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1411657236;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1416868464;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception;1423592910;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param parameter the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory,  NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(parameter.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,parameter,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,parameter,get,parameter,type
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue( 			Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) 			throws Exception;1356735495;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(_			Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)_			throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue( 			Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) 			throws Exception;1368482696;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(_			Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)_			throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Deprecated 	@Nullable 	protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1531839694;Construct a new attribute instance with the given constructor._@since 5.0_@deprecated as of 5.1, in favor of_{@link #constructAttribute(Constructor, String, MethodParameter, WebDataBinderFactory, NativeWebRequest)};@Deprecated_	@Nullable_	protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		return null__	};construct,a,new,attribute,instance,with,the,given,constructor,since,5,0,deprecated,as,of,5,1,in,favor,of,link,construct,attribute,constructor,string,method,parameter,web,data,binder,factory,native,web,request;deprecated,nullable,protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,return,null
ModelAttributeMethodProcessor -> @Deprecated 	@Nullable 	protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1531916836;Construct a new attribute instance with the given constructor._@since 5.0_@deprecated as of 5.1, in favor of_{@link #constructAttribute(Constructor, String, MethodParameter, WebDataBinderFactory, NativeWebRequest)};@Deprecated_	@Nullable_	protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		return null__	};construct,a,new,attribute,instance,with,the,given,constructor,since,5,0,deprecated,as,of,5,1,in,favor,of,link,construct,attribute,constructor,string,method,parameter,web,data,binder,factory,native,web,request;deprecated,nullable,protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,return,null
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest request, WebDataBinderFactory binderFactory) 			throws Exception;1356735495;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest request, WebDataBinderFactory binderFactory)_			throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name)) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, request)___		WebDataBinder binder = binderFactory.createBinder(request, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, request)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.getTarget()__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,request,web,data,binder,binder,binder,factory,create,binder,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,get,target
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest request, WebDataBinderFactory binderFactory) 			throws Exception;1368482696;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest request, WebDataBinderFactory binderFactory)_			throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name)) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, request)___		WebDataBinder binder = binderFactory.createBinder(request, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, request)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.getTarget()__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,request,web,data,binder,binder,binder,factory,create,binder,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,get,target
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1496837955;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1498780456;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1500540246;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1502960560;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1502974979;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1503071946;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1506551472;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1508322682;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1517567636;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1531839694;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @Override 	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;1531916836;Add non-null return values to the {@link ModelAndViewContainer}.;@Override_	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;override,public,void,handle,return,value,nullable,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> @SuppressWarnings("deprecation") 	protected Object constructAttribute(Constructor<?> ctor, String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1531839694;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.1;@SuppressWarnings("deprecation")_	protected Object constructAttribute(Constructor<?> ctor, String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		Object constructed = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (constructed != null) {_			return constructed__		}__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)___		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		String fieldDefaultPrefix = binder.getFieldDefaultPrefix()__		String fieldMarkerPrefix = binder.getFieldMarkerPrefix()__		boolean bindingFailure = false__		Set<String> failedParams = new HashSet<>(4)___		for (int i = 0_ i < paramNames.length_ i++) {_			String paramName = paramNames[i]__			Class<?> paramType = paramTypes[i]__			Object value = webRequest.getParameterValues(paramName)__			if (value == null) {_				if (fieldDefaultPrefix != null) {_					value = webRequest.getParameter(fieldDefaultPrefix + paramName)__				}_				if (value == null && fieldMarkerPrefix != null) {_					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {_						value = binder.getEmptyValue(paramType)__					}_				}_			}_			try {_				MethodParameter methodParam = new FieldAwareConstructorParameter(ctor, i, paramName)__				if (value == null && methodParam.isOptional()) {_					args[i] = (methodParam.getParameterType() == Optional.class ? Optional.empty() : null)__				}_				else {_					args[i] = binder.convertIfNecessary(value, paramType, methodParam)__				}_			}_			catch (TypeMismatchException ex) {_				ex.initPropertyName(paramName)__				args[i] = value__				failedParams.add(paramName)__				binder.getBindingResult().recordFieldValue(paramName, paramType, value)__				binder.getBindingErrorProcessor().processPropertyAccessException(ex, binder.getBindingResult())__				bindingFailure = true__			}_		}__		if (bindingFailure) {_			BindingResult result = binder.getBindingResult()__			for (int i = 0_ i < paramNames.length_ i++) {_				String paramName = paramNames[i]__				if (!failedParams.contains(paramName)) {_					result.recordFieldValue(paramName, paramTypes[i], args[i])__					validateValueIfApplicable(binder, parameter, ctor.getDeclaringClass(), paramName, args[i])__				}_			}_			throw new BindException(result)__		}__		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,1;suppress,warnings,deprecation,protected,object,construct,attribute,constructor,ctor,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,object,constructed,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,constructed,null,return,constructed,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,string,field,default,prefix,binder,get,field,default,prefix,string,field,marker,prefix,binder,get,field,marker,prefix,boolean,binding,failure,false,set,string,failed,params,new,hash,set,4,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,class,param,type,param,types,i,object,value,web,request,get,parameter,values,param,name,if,value,null,if,field,default,prefix,null,value,web,request,get,parameter,field,default,prefix,param,name,if,value,null,field,marker,prefix,null,if,web,request,get,parameter,field,marker,prefix,param,name,null,value,binder,get,empty,value,param,type,try,method,parameter,method,param,new,field,aware,constructor,parameter,ctor,i,param,name,if,value,null,method,param,is,optional,args,i,method,param,get,parameter,type,optional,class,optional,empty,null,else,args,i,binder,convert,if,necessary,value,param,type,method,param,catch,type,mismatch,exception,ex,ex,init,property,name,param,name,args,i,value,failed,params,add,param,name,binder,get,binding,result,record,field,value,param,name,param,type,value,binder,get,binding,error,processor,process,property,access,exception,ex,binder,get,binding,result,binding,failure,true,if,binding,failure,binding,result,result,binder,get,binding,result,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,if,failed,params,contains,param,name,result,record,field,value,param,name,param,types,i,args,i,validate,value,if,applicable,binder,parameter,ctor,get,declaring,class,param,name,args,i,throw,new,bind,exception,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> @SuppressWarnings("deprecation") 	protected Object constructAttribute(Constructor<?> ctor, String attributeName, MethodParameter parameter, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1531916836;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.1;@SuppressWarnings("deprecation")_	protected Object constructAttribute(Constructor<?> ctor, String attributeName, MethodParameter parameter,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		Object constructed = constructAttribute(ctor, attributeName, binderFactory, webRequest)__		if (constructed != null) {_			return constructed__		}__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)___		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		String fieldDefaultPrefix = binder.getFieldDefaultPrefix()__		String fieldMarkerPrefix = binder.getFieldMarkerPrefix()__		boolean bindingFailure = false__		Set<String> failedParams = new HashSet<>(4)___		for (int i = 0_ i < paramNames.length_ i++) {_			String paramName = paramNames[i]__			Class<?> paramType = paramTypes[i]__			Object value = webRequest.getParameterValues(paramName)__			if (value == null) {_				if (fieldDefaultPrefix != null) {_					value = webRequest.getParameter(fieldDefaultPrefix + paramName)__				}_				if (value == null && fieldMarkerPrefix != null) {_					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {_						value = binder.getEmptyValue(paramType)__					}_				}_			}_			try {_				MethodParameter methodParam = new FieldAwareConstructorParameter(ctor, i, paramName)__				if (value == null && methodParam.isOptional()) {_					args[i] = (methodParam.getParameterType() == Optional.class ? Optional.empty() : null)__				}_				else {_					args[i] = binder.convertIfNecessary(value, paramType, methodParam)__				}_			}_			catch (TypeMismatchException ex) {_				ex.initPropertyName(paramName)__				args[i] = value__				failedParams.add(paramName)__				binder.getBindingResult().recordFieldValue(paramName, paramType, value)__				binder.getBindingErrorProcessor().processPropertyAccessException(ex, binder.getBindingResult())__				bindingFailure = true__			}_		}__		if (bindingFailure) {_			BindingResult result = binder.getBindingResult()__			for (int i = 0_ i < paramNames.length_ i++) {_				String paramName = paramNames[i]__				if (!failedParams.contains(paramName)) {_					Object value = args[i]__					result.recordFieldValue(paramName, paramTypes[i], value)__					validateValueIfApplicable(binder, parameter, ctor.getDeclaringClass(), paramName, value)__				}_			}_			throw new BindException(result)__		}__		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,1;suppress,warnings,deprecation,protected,object,construct,attribute,constructor,ctor,string,attribute,name,method,parameter,parameter,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,object,constructed,construct,attribute,ctor,attribute,name,binder,factory,web,request,if,constructed,null,return,constructed,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,string,field,default,prefix,binder,get,field,default,prefix,string,field,marker,prefix,binder,get,field,marker,prefix,boolean,binding,failure,false,set,string,failed,params,new,hash,set,4,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,class,param,type,param,types,i,object,value,web,request,get,parameter,values,param,name,if,value,null,if,field,default,prefix,null,value,web,request,get,parameter,field,default,prefix,param,name,if,value,null,field,marker,prefix,null,if,web,request,get,parameter,field,marker,prefix,param,name,null,value,binder,get,empty,value,param,type,try,method,parameter,method,param,new,field,aware,constructor,parameter,ctor,i,param,name,if,value,null,method,param,is,optional,args,i,method,param,get,parameter,type,optional,class,optional,empty,null,else,args,i,binder,convert,if,necessary,value,param,type,method,param,catch,type,mismatch,exception,ex,ex,init,property,name,param,name,args,i,value,failed,params,add,param,name,binder,get,binding,result,record,field,value,param,name,param,type,value,binder,get,binding,error,processor,process,property,access,exception,ex,binder,get,binding,result,binding,failure,true,if,binding,failure,binding,result,result,binder,get,binding,result,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,if,failed,params,contains,param,name,object,value,args,i,result,record,field,value,param,name,param,types,i,value,validate,value,if,applicable,binder,parameter,ctor,get,declaring,class,param,name,value,throw,new,bind,exception,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter methodParam, 			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception;1424385427;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param methodParam the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter methodParam,_			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(methodParam.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,method,param,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,method,param,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,method,param,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter methodParam, 			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception;1453868458;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param methodParam the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter methodParam,_			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(methodParam.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,method,param,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,method,param,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,method,param,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter methodParam, 			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception;1453870278;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param methodParam the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter methodParam,_			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(methodParam.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,method,param,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,method,param,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,method,param,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter methodParam, 			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception;1458754760;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param methodParam the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter methodParam,_			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(methodParam.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,method,param,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,method,param,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,method,param,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter methodParam, 			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception;1467677340;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param methodParam the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter methodParam,_			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(methodParam.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,method,param,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,method,param,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,method,param,get,parameter,type
ModelAttributeMethodProcessor -> protected Object createAttribute(String attributeName, MethodParameter methodParam, 			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception;1487362018;Extension point to create the model attribute if not found in the model._The default implementation uses the default constructor._@param attributeName the name of the attribute (never {@code null})_@param methodParam the method parameter_@param binderFactory for creating WebDataBinder instance_@param request the current request_@return the created model attribute (never {@code null});protected Object createAttribute(String attributeName, MethodParameter methodParam,_			WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {__		return BeanUtils.instantiateClass(methodParam.getParameterType())__	};extension,point,to,create,the,model,attribute,if,not,found,in,the,model,the,default,implementation,uses,the,default,constructor,param,attribute,name,the,name,of,the,attribute,never,code,null,param,method,param,the,method,parameter,param,binder,factory,for,creating,web,data,binder,instance,param,request,the,current,request,return,the,created,model,attribute,never,code,null;protected,object,create,attribute,string,attribute,name,method,parameter,method,param,web,data,binder,factory,binder,factory,native,web,request,request,throws,exception,return,bean,utils,instantiate,class,method,param,get,parameter,type
ModelAttributeMethodProcessor -> protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1502960560;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.0;protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)__		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		boolean bindingFailure = false__		for (int i = 0_ i < paramNames.length_ i++) {_			String[] paramValues = webRequest.getParameterValues(paramNames[i])__			try {_				args[i] = (paramValues != null ?_						binder.convertIfNecessary(paramValues, paramTypes[i], new MethodParameter(ctor, i)) : null)__			}_			catch (TypeMismatchException ex) {_				bindingFailure = true__				binder.getBindingResult().addError(new FieldError(_						binder.getObjectName(), paramNames[i], ex.getValue(), true,_						new String[] {ex.getErrorCode()}, null, ex.getLocalizedMessage()))__			}_		}_		if (bindingFailure) {_			throw new BindException(binder.getBindingResult())__		}_		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,0;protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,boolean,binding,failure,false,for,int,i,0,i,param,names,length,i,string,param,values,web,request,get,parameter,values,param,names,i,try,args,i,param,values,null,binder,convert,if,necessary,param,values,param,types,i,new,method,parameter,ctor,i,null,catch,type,mismatch,exception,ex,binding,failure,true,binder,get,binding,result,add,error,new,field,error,binder,get,object,name,param,names,i,ex,get,value,true,new,string,ex,get,error,code,null,ex,get,localized,message,if,binding,failure,throw,new,bind,exception,binder,get,binding,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1502974979;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.0;protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)__		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		boolean bindingFailure = false__		for (int i = 0_ i < paramNames.length_ i++) {_			String[] paramValues = webRequest.getParameterValues(paramNames[i])__			try {_				args[i] = (paramValues != null ?_						binder.convertIfNecessary(paramValues, paramTypes[i], new MethodParameter(ctor, i)) : null)__			}_			catch (TypeMismatchException ex) {_				bindingFailure = true__				binder.getBindingResult().addError(new FieldError(_						binder.getObjectName(), paramNames[i], ex.getValue(), true,_						new String[] {ex.getErrorCode()}, null, ex.getLocalizedMessage()))__			}_		}_		if (bindingFailure) {_			throw new BindException(binder.getBindingResult())__		}_		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,0;protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,boolean,binding,failure,false,for,int,i,0,i,param,names,length,i,string,param,values,web,request,get,parameter,values,param,names,i,try,args,i,param,values,null,binder,convert,if,necessary,param,values,param,types,i,new,method,parameter,ctor,i,null,catch,type,mismatch,exception,ex,binding,failure,true,binder,get,binding,result,add,error,new,field,error,binder,get,object,name,param,names,i,ex,get,value,true,new,string,ex,get,error,code,null,ex,get,localized,message,if,binding,failure,throw,new,bind,exception,binder,get,binding,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1503071946;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.0;protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)___		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		String fieldDefaultPrefix = binder.getFieldDefaultPrefix()__		String fieldMarkerPrefix = binder.getFieldMarkerPrefix()__		boolean bindingFailure = false___		for (int i = 0_ i < paramNames.length_ i++) {_			String paramName = paramNames[i]__			Class<?> paramType = paramTypes[i]__			Object value = webRequest.getParameterValues(paramName)__			if (value == null) {_				if (fieldDefaultPrefix != null) {_					value = webRequest.getParameter(fieldDefaultPrefix + paramName)__				}_				if (value == null && fieldMarkerPrefix != null) {_					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {_						value = binder.getEmptyValue(paramType)__					}_				}_			}_			try {_				args[i] = (value != null ?_						binder.convertIfNecessary(value, paramType, new MethodParameter(ctor, i)) : null)__			}_			catch (TypeMismatchException ex) {_				bindingFailure = true__				binder.getBindingResult().addError(new FieldError(_						binder.getObjectName(), paramNames[i], ex.getValue(), true,_						new String[] {ex.getErrorCode()}, null, ex.getLocalizedMessage()))__			}_		}__		if (bindingFailure) {_			throw new BindException(binder.getBindingResult())__		}_		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,0;protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,string,field,default,prefix,binder,get,field,default,prefix,string,field,marker,prefix,binder,get,field,marker,prefix,boolean,binding,failure,false,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,class,param,type,param,types,i,object,value,web,request,get,parameter,values,param,name,if,value,null,if,field,default,prefix,null,value,web,request,get,parameter,field,default,prefix,param,name,if,value,null,field,marker,prefix,null,if,web,request,get,parameter,field,marker,prefix,param,name,null,value,binder,get,empty,value,param,type,try,args,i,value,null,binder,convert,if,necessary,value,param,type,new,method,parameter,ctor,i,null,catch,type,mismatch,exception,ex,binding,failure,true,binder,get,binding,result,add,error,new,field,error,binder,get,object,name,param,names,i,ex,get,value,true,new,string,ex,get,error,code,null,ex,get,localized,message,if,binding,failure,throw,new,bind,exception,binder,get,binding,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1506551472;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.0;protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)___		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		String fieldDefaultPrefix = binder.getFieldDefaultPrefix()__		String fieldMarkerPrefix = binder.getFieldMarkerPrefix()__		boolean bindingFailure = false___		for (int i = 0_ i < paramNames.length_ i++) {_			String paramName = paramNames[i]__			Class<?> paramType = paramTypes[i]__			Object value = webRequest.getParameterValues(paramName)__			if (value == null) {_				if (fieldDefaultPrefix != null) {_					value = webRequest.getParameter(fieldDefaultPrefix + paramName)__				}_				if (value == null && fieldMarkerPrefix != null) {_					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {_						value = binder.getEmptyValue(paramType)__					}_				}_			}_			try {_				MethodParameter methodParam = new MethodParameter(ctor, i)__				if (value == null && methodParam.isOptional()) {_					args[i] = (methodParam.getParameterType() == Optional.class ? Optional.empty() : null)__				}_				else {_					args[i] = binder.convertIfNecessary(value, paramType, methodParam)__				}_			}_			catch (TypeMismatchException ex) {_				bindingFailure = true__				binder.getBindingResult().addError(new FieldError(_						binder.getObjectName(), paramNames[i], ex.getValue(), true,_						new String[] {ex.getErrorCode()}, null, ex.getLocalizedMessage()))__			}_		}__		if (bindingFailure) {_			throw new BindException(binder.getBindingResult())__		}_		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,0;protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,string,field,default,prefix,binder,get,field,default,prefix,string,field,marker,prefix,binder,get,field,marker,prefix,boolean,binding,failure,false,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,class,param,type,param,types,i,object,value,web,request,get,parameter,values,param,name,if,value,null,if,field,default,prefix,null,value,web,request,get,parameter,field,default,prefix,param,name,if,value,null,field,marker,prefix,null,if,web,request,get,parameter,field,marker,prefix,param,name,null,value,binder,get,empty,value,param,type,try,method,parameter,method,param,new,method,parameter,ctor,i,if,value,null,method,param,is,optional,args,i,method,param,get,parameter,type,optional,class,optional,empty,null,else,args,i,binder,convert,if,necessary,value,param,type,method,param,catch,type,mismatch,exception,ex,binding,failure,true,binder,get,binding,result,add,error,new,field,error,binder,get,object,name,param,names,i,ex,get,value,true,new,string,ex,get,error,code,null,ex,get,localized,message,if,binding,failure,throw,new,bind,exception,binder,get,binding,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1508322682;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.0;protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)___		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		String fieldDefaultPrefix = binder.getFieldDefaultPrefix()__		String fieldMarkerPrefix = binder.getFieldMarkerPrefix()__		boolean bindingFailure = false___		for (int i = 0_ i < paramNames.length_ i++) {_			String paramName = paramNames[i]__			Class<?> paramType = paramTypes[i]__			Object value = webRequest.getParameterValues(paramName)__			if (value == null) {_				if (fieldDefaultPrefix != null) {_					value = webRequest.getParameter(fieldDefaultPrefix + paramName)__				}_				if (value == null && fieldMarkerPrefix != null) {_					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {_						value = binder.getEmptyValue(paramType)__					}_				}_			}_			try {_				MethodParameter methodParam = new MethodParameter(ctor, i)__				if (value == null && methodParam.isOptional()) {_					args[i] = (methodParam.getParameterType() == Optional.class ? Optional.empty() : null)__				}_				else {_					args[i] = binder.convertIfNecessary(value, paramType, methodParam)__				}_			}_			catch (TypeMismatchException ex) {_				bindingFailure = true__				binder.getBindingResult().addError(new FieldError(_						binder.getObjectName(), paramNames[i], ex.getValue(), true,_						new String[] {ex.getErrorCode()}, null, ex.getLocalizedMessage()))__			}_		}__		if (bindingFailure) {_			throw new BindException(binder.getBindingResult())__		}_		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,0;protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,string,field,default,prefix,binder,get,field,default,prefix,string,field,marker,prefix,binder,get,field,marker,prefix,boolean,binding,failure,false,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,class,param,type,param,types,i,object,value,web,request,get,parameter,values,param,name,if,value,null,if,field,default,prefix,null,value,web,request,get,parameter,field,default,prefix,param,name,if,value,null,field,marker,prefix,null,if,web,request,get,parameter,field,marker,prefix,param,name,null,value,binder,get,empty,value,param,type,try,method,parameter,method,param,new,method,parameter,ctor,i,if,value,null,method,param,is,optional,args,i,method,param,get,parameter,type,optional,class,optional,empty,null,else,args,i,binder,convert,if,necessary,value,param,type,method,param,catch,type,mismatch,exception,ex,binding,failure,true,binder,get,binding,result,add,error,new,field,error,binder,get,object,name,param,names,i,ex,get,value,true,new,string,ex,get,error,code,null,ex,get,localized,message,if,binding,failure,throw,new,bind,exception,binder,get,binding,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> protected Object constructAttribute(Constructor<?> ctor, String attributeName, 			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception;1517567636;Construct a new attribute instance with the given constructor._<p>Called from_{@link #createAttribute(String, MethodParameter, WebDataBinderFactory, NativeWebRequest)}_after constructor resolution._@param ctor the constructor to use_@param attributeName the name of the attribute (never {@code null})_@param binderFactory for creating WebDataBinder instance_@param webRequest the current request_@return the created model attribute (never {@code null})_@throws BindException in case of constructor argument binding failure_@throws Exception in case of constructor invocation failure_@since 5.0;protected Object constructAttribute(Constructor<?> ctor, String attributeName,_			WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception {__		if (ctor.getParameterCount() == 0) {_			_			return BeanUtils.instantiateClass(ctor)__		}__		_		ConstructorProperties cp = ctor.getAnnotation(ConstructorProperties.class)__		String[] paramNames = (cp != null ? cp.value() : parameterNameDiscoverer.getParameterNames(ctor))__		Assert.state(paramNames != null, () -> "Cannot resolve parameter names for constructor " + ctor)__		Class<?>[] paramTypes = ctor.getParameterTypes()__		Assert.state(paramNames.length == paramTypes.length,_				() -> "Invalid number of parameter names: " + paramNames.length + " for constructor " + ctor)___		Object[] args = new Object[paramTypes.length]__		WebDataBinder binder = binderFactory.createBinder(webRequest, null, attributeName)__		String fieldDefaultPrefix = binder.getFieldDefaultPrefix()__		String fieldMarkerPrefix = binder.getFieldMarkerPrefix()__		boolean bindingFailure = false___		for (int i = 0_ i < paramNames.length_ i++) {_			String paramName = paramNames[i]__			Class<?> paramType = paramTypes[i]__			Object value = webRequest.getParameterValues(paramName)__			if (value == null) {_				if (fieldDefaultPrefix != null) {_					value = webRequest.getParameter(fieldDefaultPrefix + paramName)__				}_				if (value == null && fieldMarkerPrefix != null) {_					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {_						value = binder.getEmptyValue(paramType)__					}_				}_			}_			try {_				MethodParameter methodParam = new MethodParameter(ctor, i)__				if (value == null && methodParam.isOptional()) {_					args[i] = (methodParam.getParameterType() == Optional.class ? Optional.empty() : null)__				}_				else {_					args[i] = binder.convertIfNecessary(value, paramType, methodParam)__				}_			}_			catch (TypeMismatchException ex) {_				ex.initPropertyName(paramName)__				binder.getBindingErrorProcessor().processPropertyAccessException(ex, binder.getBindingResult())__				bindingFailure = true__				args[i] = value__			}_		}__		if (bindingFailure) {_			if (binder.getBindingResult() instanceof AbstractBindingResult) {_				AbstractBindingResult result = (AbstractBindingResult) binder.getBindingResult()__				for (int i = 0_ i < paramNames.length_ i++) {_					result.recordFieldValue(paramNames[i], paramTypes[i], args[i])__				}_			}_			throw new BindException(binder.getBindingResult())__		}__		return BeanUtils.instantiateClass(ctor, args)__	};construct,a,new,attribute,instance,with,the,given,constructor,p,called,from,link,create,attribute,string,method,parameter,web,data,binder,factory,native,web,request,after,constructor,resolution,param,ctor,the,constructor,to,use,param,attribute,name,the,name,of,the,attribute,never,code,null,param,binder,factory,for,creating,web,data,binder,instance,param,web,request,the,current,request,return,the,created,model,attribute,never,code,null,throws,bind,exception,in,case,of,constructor,argument,binding,failure,throws,exception,in,case,of,constructor,invocation,failure,since,5,0;protected,object,construct,attribute,constructor,ctor,string,attribute,name,web,data,binder,factory,binder,factory,native,web,request,web,request,throws,exception,if,ctor,get,parameter,count,0,return,bean,utils,instantiate,class,ctor,constructor,properties,cp,ctor,get,annotation,constructor,properties,class,string,param,names,cp,null,cp,value,parameter,name,discoverer,get,parameter,names,ctor,assert,state,param,names,null,cannot,resolve,parameter,names,for,constructor,ctor,class,param,types,ctor,get,parameter,types,assert,state,param,names,length,param,types,length,invalid,number,of,parameter,names,param,names,length,for,constructor,ctor,object,args,new,object,param,types,length,web,data,binder,binder,binder,factory,create,binder,web,request,null,attribute,name,string,field,default,prefix,binder,get,field,default,prefix,string,field,marker,prefix,binder,get,field,marker,prefix,boolean,binding,failure,false,for,int,i,0,i,param,names,length,i,string,param,name,param,names,i,class,param,type,param,types,i,object,value,web,request,get,parameter,values,param,name,if,value,null,if,field,default,prefix,null,value,web,request,get,parameter,field,default,prefix,param,name,if,value,null,field,marker,prefix,null,if,web,request,get,parameter,field,marker,prefix,param,name,null,value,binder,get,empty,value,param,type,try,method,parameter,method,param,new,method,parameter,ctor,i,if,value,null,method,param,is,optional,args,i,method,param,get,parameter,type,optional,class,optional,empty,null,else,args,i,binder,convert,if,necessary,value,param,type,method,param,catch,type,mismatch,exception,ex,ex,init,property,name,param,name,binder,get,binding,error,processor,process,property,access,exception,ex,binder,get,binding,result,binding,failure,true,args,i,value,if,binding,failure,if,binder,get,binding,result,instanceof,abstract,binding,result,abstract,binding,result,result,abstract,binding,result,binder,get,binding,result,for,int,i,0,i,param,names,length,i,result,record,field,value,param,names,i,param,types,i,args,i,throw,new,bind,exception,binder,get,binding,result,return,bean,utils,instantiate,class,ctor,args
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1411657236;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, webRequest))___		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, webRequest)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1416868464;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, webRequest))___		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, webRequest)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1423592910;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, webRequest))___		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, webRequest)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors()) {_				if (isBindExceptionRequired(binder, parameter)) {_					throw new BindException(binder.getBindingResult())__				}_			}_		}__		__		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,if,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1424385427;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ?_				mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, webRequest))___		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, webRequest)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1453868458;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			bindRequestParameters(binder, webRequest)__			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1453870278;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute annotation = parameter.getParameterAnnotation(ModelAttribute.class)__			if (annotation != null && !annotation.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,annotation,parameter,get,parameter,annotation,model,attribute,class,if,annotation,null,annotation,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1458754760;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1467677340;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1487362018;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}._@throws Exception if WebDataBinder initialization fails.;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter)__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1490354145;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return (parameter.getParameterType().isInstance(attribute) ? attribute :_				binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter))__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> @Override 	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1496837955;Resolve the argument from the model or if not found instantiate it with_its default if it is available. The model attribute is then populated_with request values via data binding and optionally validated_if {@code @java.validation.Valid} is present on the argument._@throws BindException if data binding and validation result in an error_and the next method parameter is not of type {@link Errors}_@throws Exception if WebDataBinder initialization fails;@Override_	public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		String name = ModelFactory.getNameForParameter(parameter)__		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :_				createAttribute(name, parameter, binderFactory, webRequest))___		if (!mavContainer.isBindingDisabled(name)) {_			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__			if (ann != null && !ann.binding()) {_				mavContainer.setBindingDisabled(name)__			}_		}__		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)__		if (binder.getTarget() != null) {_			if (!mavContainer.isBindingDisabled(name)) {_				bindRequestParameters(binder, webRequest)__			}_			validateIfApplicable(binder, parameter)__			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {_				throw new BindException(binder.getBindingResult())__			}_		}__		_		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel()__		mavContainer.removeAttributes(bindingResultModel)__		mavContainer.addAllAttributes(bindingResultModel)___		return (parameter.getParameterType().isInstance(attribute) ? attribute :_				binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter))__	};resolve,the,argument,from,the,model,or,if,not,found,instantiate,it,with,its,default,if,it,is,available,the,model,attribute,is,then,populated,with,request,values,via,data,binding,and,optionally,validated,if,code,java,validation,valid,is,present,on,the,argument,throws,bind,exception,if,data,binding,and,validation,result,in,an,error,and,the,next,method,parameter,is,not,of,type,link,errors,throws,exception,if,web,data,binder,initialization,fails;override,public,final,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,string,name,model,factory,get,name,for,parameter,parameter,object,attribute,mav,container,contains,attribute,name,mav,container,get,model,get,name,create,attribute,name,parameter,binder,factory,web,request,if,mav,container,is,binding,disabled,name,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,if,ann,null,ann,binding,mav,container,set,binding,disabled,name,web,data,binder,binder,binder,factory,create,binder,web,request,attribute,name,if,binder,get,target,null,if,mav,container,is,binding,disabled,name,bind,request,parameters,binder,web,request,validate,if,applicable,binder,parameter,if,binder,get,binding,result,has,errors,is,bind,exception,required,binder,parameter,throw,new,bind,exception,binder,get,binding,result,map,string,object,binding,result,model,binder,get,binding,result,get,model,mav,container,remove,attributes,binding,result,model,mav,container,add,all,attributes,binding,result,model,return,parameter,get,parameter,type,is,instance,attribute,attribute,binder,convert,if,necessary,binder,get,target,parameter,get,parameter,type,parameter
ModelAttributeMethodProcessor -> public void handleReturnValue( 			Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) 			throws Exception;1328020251;Add non-null return values to the {@link ModelAndViewContainer}.;public void handleReturnValue(_			Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)_			throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> public void handleReturnValue( 			Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) 			throws Exception;1336680074;Add non-null return values to the {@link ModelAndViewContainer}.;public void handleReturnValue(_			Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)_			throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> public void handleReturnValue( 			Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) 			throws Exception;1345574045;Add non-null return values to the {@link ModelAndViewContainer}.;public void handleReturnValue(_			Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)_			throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> public void handleReturnValue( 			Object returnValue, MethodParameter returnType, 			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) 			throws Exception;1357119239;Add non-null return values to the {@link ModelAndViewContainer}.;public void handleReturnValue(_			Object returnValue, MethodParameter returnType,_			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)_			throws Exception {__		if (returnValue != null) {_			String name = ModelFactory.getNameForReturnValue(returnValue, returnType)__			mavContainer.addAttribute(name, returnValue)__		}_	};add,non,null,return,values,to,the,link,model,and,view,container;public,void,handle,return,value,object,return,value,method,parameter,return,type,model,and,view,container,mav,container,native,web,request,web,request,throws,exception,if,return,value,null,string,name,model,factory,get,name,for,return,value,return,value,return,type,mav,container,add,attribute,name,return,value
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1424385427;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1453868458;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1453870278;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1458754760;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1467677340;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
ModelAttributeMethodProcessor -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1487362018;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors};protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
