commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Indicates whether the {@code Accept-Charset} should be written to any outgoing request.  * <p>Default is {@code true}.  */ ;/**  * Indicates whether the {@code Accept-Charset} should be written to any outgoing request.  * <p>Default is {@code true}.  */ public void setWriteAcceptCharset(boolean writeAcceptCharset) {     this.stringHttpMessageConverter.setWriteAcceptCharset(writeAcceptCharset). }
false;public;2;4;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     return canRead(mediaType) && this.conversionService.canConvert(String.class, clazz). }
false;public;2;4;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     return canWrite(mediaType) && this.conversionService.canConvert(clazz, String.class). }
false;protected;1;5;;@Override protected boolean supports(Class<?> clazz) {     // should not be called, since we override canRead/Write     throw new UnsupportedOperationException(). }
false;protected;2;13;;@Override protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     String value = this.stringHttpMessageConverter.readInternal(String.class, inputMessage).     Object result = this.conversionService.convert(value, clazz).     if (result == null) {         throw new HttpMessageNotReadableException("Unexpected null conversion result for '" + value + "' to " + clazz, inputMessage).     }     return result. }
false;protected;2;7;;@Override protected void writeInternal(Object obj, HttpOutputMessage outputMessage) throws IOException {     String value = this.conversionService.convert(obj, String.class).     if (value != null) {         this.stringHttpMessageConverter.writeInternal(value, outputMessage).     } }
false;protected;2;8;;@Override protected Long getContentLength(Object obj, @Nullable MediaType contentType) {     String value = this.conversionService.convert(obj, String.class).     if (value == null) {         return 0L.     }     return this.stringHttpMessageConverter.getContentLength(value, contentType). }
