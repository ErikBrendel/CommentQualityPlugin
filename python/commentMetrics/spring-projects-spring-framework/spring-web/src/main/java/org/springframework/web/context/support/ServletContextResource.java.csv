# id;timestamp;commentText;codeText;commentWords;codeWords
ServletContextResource -> @Override 	public File getFile() throws IOException;1328020251;This implementation resolves "file:" URLs or alternatively delegates to_<code>ServletContext.getRealPath</code>, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,code,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1329142650;This implementation resolves "file:" URLs or alternatively delegates to_<code>ServletContext.getRealPath</code>, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,code,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1338192520;This implementation resolves "file:" URLs or alternatively delegates to_<code>ServletContext.getRealPath</code>, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,code,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1356735495;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1357119239;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1368482696;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1468947211;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1495868221;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1502974979;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1530174524;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public File getFile() throws IOException;1530190293;This implementation resolves "file:" URLs or alternatively delegates to_{@code ServletContext.getRealPath}, throwing a FileNotFoundException_if not found or not resolvable._@see javax.servlet.ServletContext#getResource(String)_@see javax.servlet.ServletContext#getRealPath(String);@Override_	public File getFile() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url != null && ResourceUtils.isFileURL(url)) {_			_			return super.getFile()__		}_		else {_			String realPath = WebUtils.getRealPath(this.servletContext, this.path)__			return new File(realPath)__		}_	};this,implementation,resolves,file,urls,or,alternatively,delegates,to,code,servlet,context,get,real,path,throwing,a,file,not,found,exception,if,not,found,or,not,resolvable,see,javax,servlet,servlet,context,get,resource,string,see,javax,servlet,servlet,context,get,real,path,string;override,public,file,get,file,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,resource,utils,is,file,url,url,return,super,get,file,else,string,real,path,web,utils,get,real,path,this,servlet,context,this,path,return,new,file,real,path
ServletContextResource -> @Override 	public String getFilename();1328020251;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1329142650;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1338192520;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1356735495;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1357119239;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1368482696;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1468947211;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public String getFilename();1495868221;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1328020251;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1329142650;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1338192520;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1356735495;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1357119239;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1368482696;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1468947211;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1495868221;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1502974979;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1530174524;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	public Resource createRelative(String relativePath);1530190293;This implementation creates a ServletContextResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ServletContextResource(this.servletContext, pathToUse)__	};this,implementation,creates,a,servlet,context,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,servlet,context,resource,this,servlet,context,path,to,use
ServletContextResource -> @Override 	@Nullable 	public String getFilename();1502974979;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	@Nullable 	public String getFilename();1530174524;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	@Nullable 	public String getFilename();1530190293;This implementation returns the name of the file that this ServletContext_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,servlet,context,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ServletContextResource -> @Override 	public URL getURL() throws IOException;1328020251;This implementation delegates to <code>ServletContext.getResource</code>,_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,code,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1329142650;This implementation delegates to <code>ServletContext.getResource</code>,_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,code,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1338192520;This implementation delegates to <code>ServletContext.getResource</code>,_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,code,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1356735495;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1357119239;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1368482696;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1468947211;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1495868221;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1502974979;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1530174524;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public URL getURL() throws IOException;1530190293;This implementation delegates to {@code ServletContext.getResource},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = this.servletContext.getResource(this.path)__		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,delegates,to,code,servlet,context,get,resource,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,this,servlet,context,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ServletContextResource -> @Override 	public boolean equals(Object obj);1328020251;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1329142650;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1338192520;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1356735495;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1357119239;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1368482696;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1468947211;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1495868221;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1502974979;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> @Override 	public boolean equals(Object obj);1530174524;This implementation compares the underlying ServletContext resource locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ServletContextResource) {_			ServletContextResource otherRes = (ServletContextResource) obj__			return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path))__		}_		return false__	};this,implementation,compares,the,underlying,servlet,context,resource,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,servlet,context,resource,servlet,context,resource,other,res,servlet,context,resource,obj,return,this,servlet,context,equals,other,res,servlet,context,this,path,equals,other,res,path,return,false
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1328020251;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1329142650;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1338192520;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1356735495;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1357119239;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1368482696;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1468947211;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1495868221;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1502974979;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1530174524;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public ServletContextResource(ServletContext servletContext, String path);1530190293;Create a new ServletContextResource._<p>The Servlet spec requires that resource paths start with a slash,_even if many containers accept paths without leading slash too._Consequently, the given path will be prepended with a slash if it_doesn't already start with one._@param servletContext the ServletContext to load from_@param path the path of the resource;public ServletContextResource(ServletContext servletContext, String path) {_		_		Assert.notNull(servletContext, "Cannot resolve ServletContextResource without ServletContext")__		this.servletContext = servletContext___		_		Assert.notNull(path, "Path is required")__		String pathToUse = StringUtils.cleanPath(path)__		if (!pathToUse.startsWith("/")) {_			pathToUse = "/" + pathToUse__		}_		this.path = pathToUse__	};create,a,new,servlet,context,resource,p,the,servlet,spec,requires,that,resource,paths,start,with,a,slash,even,if,many,containers,accept,paths,without,leading,slash,too,consequently,the,given,path,will,be,prepended,with,a,slash,if,it,doesn,t,already,start,with,one,param,servlet,context,the,servlet,context,to,load,from,param,path,the,path,of,the,resource;public,servlet,context,resource,servlet,context,servlet,context,string,path,assert,not,null,servlet,context,cannot,resolve,servlet,context,resource,without,servlet,context,this,servlet,context,servlet,context,assert,not,null,path,path,is,required,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,this,path,path,to,use
ServletContextResource -> public String getDescription();1328020251;This implementation returns a description that includes the ServletContext_resource location.;public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> public String getDescription();1329142650;This implementation returns a description that includes the ServletContext_resource location.;public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> public String getDescription();1338192520;This implementation returns a description that includes the ServletContext_resource location.;public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> public String getDescription();1357119239;This implementation returns a description that includes the ServletContext_resource location.;public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public boolean isReadable();1329142650;This implementation delegates to <code>ServletContext.getResourceAsStream</code>,_which returns <code>null</code> in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,code,which,returns,code,null,code,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1338192520;This implementation delegates to <code>ServletContext.getResourceAsStream</code>,_which returns <code>null</code> in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,code,which,returns,code,null,code,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1356735495;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1357119239;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1368482696;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1468947211;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1495868221;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1502974979;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1530174524;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> @Override 	public boolean isReadable();1530190293;This implementation delegates to {@code ServletContext.getResourceAsStream},_which returns {@code null} in case of a non-readable resource (e.g. a directory)._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public boolean isReadable() {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is != null) {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_			return true__		}_		else {_			return false__		}_	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,which,returns,code,null,in,case,of,a,non,readable,resource,e,g,a,directory,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,boolean,is,readable,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,try,is,close,catch,ioexception,ex,return,true,else,return,false
ServletContextResource -> public InputStream getInputStream() throws IOException;1328020251;This implementation delegates to <code>ServletContext.getResourceAsStream</code>,_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,code,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> public InputStream getInputStream() throws IOException;1329142650;This implementation delegates to <code>ServletContext.getResourceAsStream</code>,_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,code,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> public InputStream getInputStream() throws IOException;1338192520;This implementation delegates to <code>ServletContext.getResourceAsStream</code>,_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,code,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> public InputStream getInputStream() throws IOException;1357119239;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public String getDescription();1356735495;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public String getDescription();1368482696;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public String getDescription();1468947211;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public String getDescription();1495868221;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public String getDescription();1502974979;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public String getDescription();1530174524;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> @Override 	public String getDescription();1530190293;This implementation returns a description that includes the ServletContext_resource location.;@Override_	public String getDescription() {_		return "ServletContext resource [" + this.path + "]"__	};this,implementation,returns,a,description,that,includes,the,servlet,context,resource,location;override,public,string,get,description,return,servlet,context,resource,this,path
ServletContextResource -> public final ServletContext getServletContext();1328020251;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1329142650;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1338192520;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1356735495;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1357119239;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1368482696;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1468947211;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1495868221;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1502974979;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1530174524;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final ServletContext getServletContext();1530190293;Return the ServletContext for this resource.;public final ServletContext getServletContext() {_		return this.servletContext__	};return,the,servlet,context,for,this,resource;public,final,servlet,context,get,servlet,context,return,this,servlet,context
ServletContextResource -> public final String getPath();1328020251;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1329142650;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1338192520;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1356735495;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1357119239;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1368482696;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1468947211;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1495868221;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1502974979;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1530174524;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> public final String getPath();1530190293;Return the path for this resource.;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource;public,final,string,get,path,return,this,path
ServletContextResource -> @Override 	public boolean exists();1328020251;This implementation checks <code>ServletContext.getResource</code>._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,code,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1329142650;This implementation checks <code>ServletContext.getResource</code>._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,code,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1338192520;This implementation checks <code>ServletContext.getResource</code>._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,code,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1356735495;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1357119239;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1368482696;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1468947211;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1495868221;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1502974979;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1530174524;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public boolean exists();1530190293;This implementation checks {@code ServletContext.getResource}._@see javax.servlet.ServletContext#getResource(String);@Override_	public boolean exists() {_		try {_			URL url = this.servletContext.getResource(this.path)__			return (url != null)__		}_		catch (MalformedURLException ex) {_			return false__		}_	};this,implementation,checks,code,servlet,context,get,resource,see,javax,servlet,servlet,context,get,resource,string;override,public,boolean,exists,try,url,url,this,servlet,context,get,resource,this,path,return,url,null,catch,malformed,urlexception,ex,return,false
ServletContextResource -> @Override 	public int hashCode();1328020251;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1329142650;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1338192520;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1356735495;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1357119239;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1368482696;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1468947211;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1495868221;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1502974979;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1530174524;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public int hashCode();1530190293;This implementation returns the hash code of the underlying_ServletContext resource location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,servlet,context,resource,location;override,public,int,hash,code,return,this,path,hash,code
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1356735495;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1368482696;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1468947211;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1495868221;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1502974979;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1530174524;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
ServletContextResource -> @Override 	public InputStream getInputStream() throws IOException;1530190293;This implementation delegates to {@code ServletContext.getResourceAsStream},_but throws a FileNotFoundException if no resource found._@see javax.servlet.ServletContext#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is = this.servletContext.getResourceAsStream(this.path)__		if (is == null) {_			throw new FileNotFoundException("Could not open " + getDescription())__		}_		return is__	};this,implementation,delegates,to,code,servlet,context,get,resource,as,stream,but,throws,a,file,not,found,exception,if,no,resource,found,see,javax,servlet,servlet,context,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,this,servlet,context,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,could,not,open,get,description,return,is
