commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the ServletContext for this resource.  */ ;/**  * Return the ServletContext for this resource.  */ public final ServletContext getServletContext() {     return this.servletContext. }
true;public,final;0;3;/**  * Return the path for this resource.  */ ;/**  * Return the path for this resource.  */ public final String getPath() {     return this.path. }
true;public;0;10;/**  * This implementation checks {@code ServletContext.getResource}.  * @see javax.servlet.ServletContext#getResource(String)  */ ;/**  * This implementation checks {@code ServletContext.getResource}.  * @see javax.servlet.ServletContext#getResource(String)  */ @Override public boolean exists() {     try {         URL url = this.servletContext.getResource(this.path).         return (url != null).     } catch (MalformedURLException ex) {         return false.     } }
true;public;0;16;/**  * This implementation delegates to {@code ServletContext.getResourceAsStream},  * which returns {@code null} in case of a non-readable resource (e.g. a directory).  * @see javax.servlet.ServletContext#getResourceAsStream(String)  */ ;/**  * This implementation delegates to {@code ServletContext.getResourceAsStream},  * which returns {@code null} in case of a non-readable resource (e.g. a directory).  * @see javax.servlet.ServletContext#getResourceAsStream(String)  */ @Override public boolean isReadable() {     InputStream is = this.servletContext.getResourceAsStream(this.path).     if (is != null) {         try {             is.close().         } catch (IOException ex) {         // ignore         }         return true.     } else {         return false.     } }
false;public;0;15;;@Override public boolean isFile() {     try {         URL url = this.servletContext.getResource(this.path).         if (url != null && ResourceUtils.isFileURL(url)) {             return true.         } else {             return (this.servletContext.getRealPath(this.path) != null).         }     } catch (MalformedURLException ex) {         return false.     } }
true;public;0;8;/**  * This implementation delegates to {@code ServletContext.getResourceAsStream},  * but throws a FileNotFoundException if no resource found.  * @see javax.servlet.ServletContext#getResourceAsStream(String)  */ ;/**  * This implementation delegates to {@code ServletContext.getResourceAsStream},  * but throws a FileNotFoundException if no resource found.  * @see javax.servlet.ServletContext#getResourceAsStream(String)  */ @Override public InputStream getInputStream() throws IOException {     InputStream is = this.servletContext.getResourceAsStream(this.path).     if (is == null) {         throw new FileNotFoundException("Could not open " + getDescription()).     }     return is. }
true;public;0;9;/**  * This implementation delegates to {@code ServletContext.getResource},  * but throws a FileNotFoundException if no resource found.  * @see javax.servlet.ServletContext#getResource(String)  */ ;/**  * This implementation delegates to {@code ServletContext.getResource},  * but throws a FileNotFoundException if no resource found.  * @see javax.servlet.ServletContext#getResource(String)  */ @Override public URL getURL() throws IOException {     URL url = this.servletContext.getResource(this.path).     if (url == null) {         throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist").     }     return url. }
true;public;0;12;/**  * This implementation resolves "file:" URLs or alternatively delegates to  * {@code ServletContext.getRealPath}, throwing a FileNotFoundException  * if not found or not resolvable.  * @see javax.servlet.ServletContext#getResource(String)  * @see javax.servlet.ServletContext#getRealPath(String)  */ ;/**  * This implementation resolves "file:" URLs or alternatively delegates to  * {@code ServletContext.getRealPath}, throwing a FileNotFoundException  * if not found or not resolvable.  * @see javax.servlet.ServletContext#getResource(String)  * @see javax.servlet.ServletContext#getRealPath(String)  */ @Override public File getFile() throws IOException {     URL url = this.servletContext.getResource(this.path).     if (url != null && ResourceUtils.isFileURL(url)) {         // Proceed with file system resolution...         return super.getFile().     } else {         String realPath = WebUtils.getRealPath(this.servletContext, this.path).         return new File(realPath).     } }
true;public;1;5;/**  * This implementation creates a ServletContextResource, applying the given path  * relative to the path of the underlying file of this resource descriptor.  * @see org.springframework.util.StringUtils#applyRelativePath(String, String)  */ ;/**  * This implementation creates a ServletContextResource, applying the given path  * relative to the path of the underlying file of this resource descriptor.  * @see org.springframework.util.StringUtils#applyRelativePath(String, String)  */ @Override public Resource createRelative(String relativePath) {     String pathToUse = StringUtils.applyRelativePath(this.path, relativePath).     return new ServletContextResource(this.servletContext, pathToUse). }
true;public;0;5;/**  * This implementation returns the name of the file that this ServletContext  * resource refers to.  * @see org.springframework.util.StringUtils#getFilename(String)  */ ;/**  * This implementation returns the name of the file that this ServletContext  * resource refers to.  * @see org.springframework.util.StringUtils#getFilename(String)  */ @Override @Nullable public String getFilename() {     return StringUtils.getFilename(this.path). }
true;public;0;4;/**  * This implementation returns a description that includes the ServletContext  * resource location.  */ ;/**  * This implementation returns a description that includes the ServletContext  * resource location.  */ @Override public String getDescription() {     return "ServletContext resource [" + this.path + "]". }
false;public;0;4;;@Override public String getPathWithinContext() {     return this.path. }
true;public;1;11;/**  * This implementation compares the underlying ServletContext resource locations.  */ ;/**  * This implementation compares the underlying ServletContext resource locations.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ServletContextResource)) {         return false.     }     ServletContextResource otherRes = (ServletContextResource) other.     return (this.servletContext.equals(otherRes.servletContext) && this.path.equals(otherRes.path)). }
true;public;0;4;/**  * This implementation returns the hash code of the underlying  * ServletContext resource location.  */ ;/**  * This implementation returns the hash code of the underlying  * ServletContext resource location.  */ @Override public int hashCode() {     return this.path.hashCode(). }
