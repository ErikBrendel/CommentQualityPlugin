# id;timestamp;commentText;codeText;commentWords;codeWords
ClientHttpRequestInterceptor -> ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) 			throws IOException_;1328020251;Intercept the given request, and return a response. The given {@link ClientHttpRequestExecution} allows_the interceptor to pass on the request and response to the next entity in the chain.__<p>A typical implementation of this method would follow the following pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li><strong>Either</strong>_<ul>_<li>execute the request using {@link ClientHttpRequestExecution#execute(org.springframework.http.HttpRequest, byte[])},</li>_<strong>or</strong>_<li>do not execute the request to block the execution altogether.</li>_</ul>_<li>Optionally wrap the response to filter HTTP attributes.</li>_</ol>__@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response_@throws IOException in case of I/O errors;ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)_			throws IOException_;intercept,the,given,request,and,return,a,response,the,given,link,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,and,response,to,the,next,entity,in,the,chain,p,a,typical,implementation,of,this,method,would,follow,the,following,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,strong,either,strong,ul,li,execute,the,request,using,link,client,http,request,execution,execute,org,springframework,http,http,request,byte,li,strong,or,strong,li,do,not,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,wrap,the,response,to,filter,http,attributes,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,throws,ioexception,in,case,of,i,o,errors;client,http,response,intercept,http,request,request,byte,body,client,http,request,execution,execution,throws,ioexception
ClientHttpRequestInterceptor -> ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) 			throws IOException_;1335774711;Intercept the given request, and return a response. The given {@link ClientHttpRequestExecution} allows_the interceptor to pass on the request and response to the next entity in the chain.__<p>A typical implementation of this method would follow the following pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li><strong>Either</strong>_<ul>_<li>execute the request using {@link ClientHttpRequestExecution#execute(org.springframework.http.HttpRequest, byte[])},</li>_<strong>or</strong>_<li>do not execute the request to block the execution altogether.</li>_</ul>_<li>Optionally wrap the response to filter HTTP attributes.</li>_</ol>__@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response_@throws IOException in case of I/O errors;ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)_			throws IOException_;intercept,the,given,request,and,return,a,response,the,given,link,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,and,response,to,the,next,entity,in,the,chain,p,a,typical,implementation,of,this,method,would,follow,the,following,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,strong,either,strong,ul,li,execute,the,request,using,link,client,http,request,execution,execute,org,springframework,http,http,request,byte,li,strong,or,strong,li,do,not,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,wrap,the,response,to,filter,http,attributes,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,throws,ioexception,in,case,of,i,o,errors;client,http,response,intercept,http,request,request,byte,body,client,http,request,execution,execution,throws,ioexception
ClientHttpRequestInterceptor -> ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) 			throws IOException_;1467808333;Intercept the given request, and return a response. The given {@link ClientHttpRequestExecution} allows_the interceptor to pass on the request and response to the next entity in the chain.__<p>A typical implementation of this method would follow the following pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li><strong>Either</strong>_<ul>_<li>execute the request using {@link ClientHttpRequestExecution#execute(org.springframework.http.HttpRequest, byte[])},</li>_<strong>or</strong>_<li>do not execute the request to block the execution altogether.</li>_</ul>_<li>Optionally wrap the response to filter HTTP attributes.</li>_</ol>__@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response_@throws IOException in case of I/O errors;ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)_			throws IOException_;intercept,the,given,request,and,return,a,response,the,given,link,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,and,response,to,the,next,entity,in,the,chain,p,a,typical,implementation,of,this,method,would,follow,the,following,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,strong,either,strong,ul,li,execute,the,request,using,link,client,http,request,execution,execute,org,springframework,http,http,request,byte,li,strong,or,strong,li,do,not,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,wrap,the,response,to,filter,http,attributes,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,throws,ioexception,in,case,of,i,o,errors;client,http,response,intercept,http,request,request,byte,body,client,http,request,execution,execution,throws,ioexception
ClientHttpRequestInterceptor -> ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) 			throws IOException_;1508532146;Intercept the given request, and return a response. The given_{@link ClientHttpRequestExecution} allows the interceptor to pass on the_request and response to the next entity in the chain.__<p>A typical implementation of this method would follow the following pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper_wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li><strong>Either</strong>_<ul>_<li>execute the request using_{@link ClientHttpRequestExecution#execute(org.springframework.http.HttpRequest, byte[])},</li>_<strong>or</strong>_<li>do not execute the request to block the execution altogether.</li>_</ul>_<li>Optionally wrap the response to filter HTTP attributes.</li>_</ol>__@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response_@throws IOException in case of I/O errors;ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)_			throws IOException_;intercept,the,given,request,and,return,a,response,the,given,link,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,and,response,to,the,next,entity,in,the,chain,p,a,typical,implementation,of,this,method,would,follow,the,following,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,strong,either,strong,ul,li,execute,the,request,using,link,client,http,request,execution,execute,org,springframework,http,http,request,byte,li,strong,or,strong,li,do,not,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,wrap,the,response,to,filter,http,attributes,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,throws,ioexception,in,case,of,i,o,errors;client,http,response,intercept,http,request,request,byte,body,client,http,request,execution,execution,throws,ioexception
ClientHttpRequestInterceptor -> ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) 			throws IOException_;1520890308;Intercept the given request, and return a response. The given_{@link ClientHttpRequestExecution} allows the interceptor to pass on the_request and response to the next entity in the chain._<p>A typical implementation of this method would follow the following pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper_wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li><strong>Either</strong>_<ul>_<li>execute the request using_{@link ClientHttpRequestExecution#execute(org.springframework.http.HttpRequest, byte[])},</li>_<strong>or</strong>_<li>do not execute the request to block the execution altogether.</li>_</ul>_<li>Optionally wrap the response to filter HTTP attributes.</li>_</ol>_@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response_@throws IOException in case of I/O errors;ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)_			throws IOException_;intercept,the,given,request,and,return,a,response,the,given,link,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,and,response,to,the,next,entity,in,the,chain,p,a,typical,implementation,of,this,method,would,follow,the,following,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,strong,either,strong,ul,li,execute,the,request,using,link,client,http,request,execution,execute,org,springframework,http,http,request,byte,li,strong,or,strong,li,do,not,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,wrap,the,response,to,filter,http,attributes,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,throws,ioexception,in,case,of,i,o,errors;client,http,response,intercept,http,request,request,byte,body,client,http,request,execution,execution,throws,ioexception
