commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the names of the variables in the template, in order.  * @return the template variable names  */ ;/**  * Return the names of the variables in the template, in order.  * @return the template variable names  */ public List<String> getVariableNames() {     return this.variableNames. }
true;public;1;5;/**  * Given the Map of variables, expands this template into a URI. The Map keys represent variable names,  * the Map values variable values. The order of variables is not significant.  * <p>Example:  * <pre class="code">  * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}").  * Map&lt.String, String&gt. uriVariables = new HashMap&lt.String, String&gt.().  * uriVariables.put("booking", "42").  * uriVariables.put("hotel", "Rest & Relax").  * System.out.println(template.expand(uriVariables)).  * </pre>  * will print: <blockquote>{@code http://example.com/hotels/Rest%20%26%20Relax/bookings/42}</blockquote>  * @param uriVariables the map of URI variables  * @return the expanded URI  * @throws IllegalArgumentException if {@code uriVariables} is {@code null}.  * or if it does not contain values for all the variable names  */ ;/**  * Given the Map of variables, expands this template into a URI. The Map keys represent variable names,  * the Map values variable values. The order of variables is not significant.  * <p>Example:  * <pre class="code">  * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}").  * Map&lt.String, String&gt. uriVariables = new HashMap&lt.String, String&gt.().  * uriVariables.put("booking", "42").  * uriVariables.put("hotel", "Rest & Relax").  * System.out.println(template.expand(uriVariables)).  * </pre>  * will print: <blockquote>{@code http://example.com/hotels/Rest%20%26%20Relax/bookings/42}</blockquote>  * @param uriVariables the map of URI variables  * @return the expanded URI  * @throws IllegalArgumentException if {@code uriVariables} is {@code null}.  * or if it does not contain values for all the variable names  */ public URI expand(Map<String, ?> uriVariables) {     UriComponents expandedComponents = this.uriComponents.expand(uriVariables).     UriComponents encodedComponents = expandedComponents.encode().     return encodedComponents.toUri(). }
true;public;1;5;/**  * Given an array of variables, expand this template into a full URI. The array represent variable values.  * The order of variables is significant.  * <p>Example:  * <pre class="code">  * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}").  * System.out.println(template.expand("Rest & Relax", 42)).  * </pre>  * will print: <blockquote>{@code http://example.com/hotels/Rest%20%26%20Relax/bookings/42}</blockquote>  * @param uriVariableValues the array of URI variables  * @return the expanded URI  * @throws IllegalArgumentException if {@code uriVariables} is {@code null}  * or if it does not contain sufficient variables  */ ;/**  * Given an array of variables, expand this template into a full URI. The array represent variable values.  * The order of variables is significant.  * <p>Example:  * <pre class="code">  * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}").  * System.out.println(template.expand("Rest & Relax", 42)).  * </pre>  * will print: <blockquote>{@code http://example.com/hotels/Rest%20%26%20Relax/bookings/42}</blockquote>  * @param uriVariableValues the array of URI variables  * @return the expanded URI  * @throws IllegalArgumentException if {@code uriVariables} is {@code null}  * or if it does not contain sufficient variables  */ public URI expand(Object... uriVariableValues) {     UriComponents expandedComponents = this.uriComponents.expand(uriVariableValues).     UriComponents encodedComponents = expandedComponents.encode().     return encodedComponents.toUri(). }
true;public;1;7;/**  * Indicate whether the given URI matches this template.  * @param uri the URI to match to  * @return {@code true} if it matches. {@code false} otherwise  */ ;/**  * Indicate whether the given URI matches this template.  * @param uri the URI to match to  * @return {@code true} if it matches. {@code false} otherwise  */ public boolean matches(@Nullable String uri) {     if (uri == null) {         return false.     }     Matcher matcher = this.matchPattern.matcher(uri).     return matcher.matches(). }
true;public;1;13;/**  * Match the given URI to a map of variable values. Keys in the returned map are variable names,  * values are variable values, as occurred in the given URI.  * <p>Example:  * <pre class="code">  * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}").  * System.out.println(template.match("http://example.com/hotels/1/bookings/42")).  * </pre>  * will print: <blockquote>{@code {hotel=1, booking=42}}</blockquote>  * @param uri the URI to match to  * @return a map of variable values  */ ;/**  * Match the given URI to a map of variable values. Keys in the returned map are variable names,  * values are variable values, as occurred in the given URI.  * <p>Example:  * <pre class="code">  * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}").  * System.out.println(template.match("http://example.com/hotels/1/bookings/42")).  * </pre>  * will print: <blockquote>{@code {hotel=1, booking=42}}</blockquote>  * @param uri the URI to match to  * @return a map of variable values  */ public Map<String, String> match(String uri) {     Assert.notNull(uri, "'uri' must not be null").     Map<String, String> result = new LinkedHashMap<>(this.variableNames.size()).     Matcher matcher = this.matchPattern.matcher(uri).     if (matcher.find()) {         for (int i = 1. i <= matcher.groupCount(). i++) {             String name = this.variableNames.get(i - 1).             String value = matcher.group(i).             result.put(name, value).         }     }     return result. }
false;public;0;4;;@Override public String toString() {     return this.uriTemplate. }
false;public;0;3;;public List<String> getVariableNames() {     return this.variableNames. }
false;public;0;3;;public Pattern getMatchPattern() {     return this.pattern. }
false;public,static;1;48;;public static TemplateInfo parse(String uriTemplate) {     int level = 0.     List<String> variableNames = new ArrayList<>().     StringBuilder pattern = new StringBuilder().     StringBuilder builder = new StringBuilder().     for (int i = 0. i < uriTemplate.length(). i++) {         char c = uriTemplate.charAt(i).         if (c == '{') {             level++.             if (level == 1) {                 // start of URI variable                 pattern.append(quote(builder)).                 builder = new StringBuilder().                 continue.             }         } else if (c == '}') {             level--.             if (level == 0) {                 // end of URI variable                 String variable = builder.toString().                 int idx = variable.indexOf(':').                 if (idx == -1) {                     pattern.append("([^/]*)").                     variableNames.add(variable).                 } else {                     if (idx + 1 == variable.length()) {                         throw new IllegalArgumentException("No custom regular expression specified after ':' in \"" + variable + "\"").                     }                     String regex = variable.substring(idx + 1, variable.length()).                     pattern.append('(').                     pattern.append(regex).                     pattern.append(')').                     variableNames.add(variable.substring(0, idx)).                 }                 builder = new StringBuilder().                 continue.             }         }         builder.append(c).     }     if (builder.length() > 0) {         pattern.append(quote(builder)).     }     return new TemplateInfo(variableNames, Pattern.compile(pattern.toString())). }
false;private,static;1;3;;private static String quote(StringBuilder builder) {     return (builder.length() > 0 ? Pattern.quote(builder.toString()) : ""). }
