# id;timestamp;commentText;codeText;commentWords;codeWords
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1387386512;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1399404473;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1413848647;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1435615322;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1467730834;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1495868221;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1496837955;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1497341594;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1520529117;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(UriComponentsContributor... contributors);1530174524;Create an instance from a collection of {@link UriComponentsContributor UriComponentsContributors} or_{@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.;public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {_		Collections.addAll(this.contributors, contributors)__		this.conversionService = new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,uri,components,contributors,or,link,handler,method,argument,resolver,handler,method,argument,resolvers,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,handler,method,argument,resolvers;public,composite,uri,components,contributor,uri,components,contributor,contributors,collections,add,all,this,contributors,contributors,this,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1382754578;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter} and_provide that to this constructor.__@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1385507478;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter} and_provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1387386512;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1399404473;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1413848647;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1435615322;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1467730834;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1495868221;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1496837955;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1497341594;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1520529117;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors);1530174524;Create an instance from a collection of {@link UriComponentsContributor UriComponentsContributors} or_{@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}_and provide that to this constructor._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.;public CompositeUriComponentsContributor(Collection<?> contributors) {_		this(contributors, null)__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,uri,components,contributors,or,link,handler,method,argument,resolver,handler,method,argument,resolvers,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,handler,method,argument,resolvers;public,composite,uri,components,contributor,collection,contributors,this,contributors,null
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs);1399404473;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs) {_		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")__		this.contributors.addAll(contributors)__		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,cs,assert,not,null,contributors,uri,components,contributors,must,not,be,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs);1413848647;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs) {_		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")__		this.contributors.addAll(contributors)__		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,cs,assert,not,null,contributors,uri,components,contributors,must,not,be,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs);1435615322;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs) {_		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")__		this.contributors.addAll(contributors)__		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,cs,assert,not,null,contributors,uri,components,contributors,must,not,be,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs);1467730834;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs) {_		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")__		this.contributors.addAll(contributors)__		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,cs,assert,not,null,contributors,uri,components,contributors,must,not,be,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService conversionService);1382754578;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>_If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default.__@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param conversionService a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService conversionService) {__		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")___		for (Object contributor : contributors) {_			if (contributor instanceof UriComponentsContributor) {_				this.contributors.add((UriComponentsContributor) contributor)__			}_		}__		this.conversionService = (conversionService != null) ?_				conversionService : new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,conversion,service,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,conversion,service,assert,not,null,contributors,uri,components,contributors,must,not,be,null,for,object,contributor,contributors,if,contributor,instanceof,uri,components,contributor,this,contributors,add,uri,components,contributor,contributor,this,conversion,service,conversion,service,null,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService conversionService);1385507478;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param conversionService a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService conversionService) {__		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")___		for (Object contributor : contributors) {_			if (contributor instanceof UriComponentsContributor) {_				this.contributors.add((UriComponentsContributor) contributor)__			}_		}__		this.conversionService = (conversionService != null) ?_				conversionService : new DefaultFormattingConversionService()__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,conversion,service,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,conversion,service,assert,not,null,contributors,uri,components,contributors,must,not,be,null,for,object,contributor,contributors,if,contributor,instanceof,uri,components,contributor,this,contributors,add,uri,components,contributor,contributor,this,conversion,service,conversion,service,null,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService conversionService);1387386512;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param conversionService a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService conversionService) {_		Assert.notNull(contributors, "'uriComponentsContributors' must not be null")__		for (Object contributor : contributors) {_			if (contributor instanceof UriComponentsContributor) {_				this.contributors.add((UriComponentsContributor) contributor)__			}_		}_		this.conversionService =_				(conversionService != null ? conversionService : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,conversion,service,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,collection,contributors,conversion,service,conversion,service,assert,not,null,contributors,uri,components,contributors,must,not,be,null,for,object,contributor,contributors,if,contributor,instanceof,uri,components,contributor,this,contributors,add,uri,components,contributor,contributor,this,conversion,service,conversion,service,null,conversion,service,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1382754578;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1385507478;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1387386512;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1399404473;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1413848647;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1435615322;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1467730834;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1495868221;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1496837955;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1497341594;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1520529117;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, 			Map<String, Object> uriVariables);1530174524;An overloaded method that uses the ConversionService created at construction.;public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,_			Map<String, Object> uriVariables) {__		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService)__	};an,overloaded,method,that,uses,the,conversion,service,created,at,construction;public,void,contribute,method,argument,method,parameter,parameter,object,value,uri,components,builder,builder,map,string,object,uri,variables,this,contribute,method,argument,parameter,value,builder,uri,variables,this,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs);1496837955;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs) {_		if (contributors != null) {_			this.contributors.addAll(contributors)__		}_		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,nullable,collection,contributors,nullable,conversion,service,cs,if,contributors,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs);1497341594;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs) {_		if (contributors != null) {_			this.contributors.addAll(contributors)__		}_		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,nullable,collection,contributors,nullable,conversion,service,cs,if,contributors,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs);1520529117;Create an instance from a collection of {@link UriComponentsContributor}s or_{@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver}s._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs) {_		if (contributors != null) {_			this.contributors.addAll(contributors)__		}_		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,s,or,link,handler,method,argument,resolver,s,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,s,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,nullable,collection,contributors,nullable,conversion,service,cs,if,contributors,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
CompositeUriComponentsContributor -> public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs);1530174524;Create an instance from a collection of {@link UriComponentsContributor UriComponentsContributors} or_{@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}. Since both of these tend to be implemented_by the same class, the most convenient option is to obtain the configured_{@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}_and provide that to this constructor._<p>If the {@link ConversionService} argument is {@code null},_{@link org.springframework.format.support.DefaultFormattingConversionService}_will be used by default._@param contributors a collection of {@link UriComponentsContributor}_or {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}._@param cs a ConversionService to use when method argument values_need to be formatted as Strings before being added to the URI;public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs) {_		if (contributors != null) {_			this.contributors.addAll(contributors)__		}_		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService())__	};create,an,instance,from,a,collection,of,link,uri,components,contributor,uri,components,contributors,or,link,handler,method,argument,resolver,handler,method,argument,resolvers,since,both,of,these,tend,to,be,implemented,by,the,same,class,the,most,convenient,option,is,to,obtain,the,configured,code,handler,method,argument,resolvers,in,the,code,request,mapping,handler,adapter,and,provide,that,to,this,constructor,p,if,the,link,conversion,service,argument,is,code,null,link,org,springframework,format,support,default,formatting,conversion,service,will,be,used,by,default,param,contributors,a,collection,of,link,uri,components,contributor,or,link,handler,method,argument,resolver,handler,method,argument,resolvers,param,cs,a,conversion,service,to,use,when,method,argument,values,need,to,be,formatted,as,strings,before,being,added,to,the,uri;public,composite,uri,components,contributor,nullable,collection,contributors,nullable,conversion,service,cs,if,contributors,null,this,contributors,add,all,contributors,this,conversion,service,cs,null,cs,new,default,formatting,conversion,service
