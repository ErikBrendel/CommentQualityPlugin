commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean hasContributors() {     return this.contributors.isEmpty(). }
false;public;1;16;;@Override public boolean supportsParameter(MethodParameter parameter) {     for (Object contributor : this.contributors) {         if (contributor instanceof UriComponentsContributor) {             if (((UriComponentsContributor) contributor).supportsParameter(parameter)) {                 return true.             }         } else if (contributor instanceof HandlerMethodArgumentResolver) {             if (((HandlerMethodArgumentResolver) contributor).supportsParameter(parameter)) {                 return false.             }         }     }     return false. }
false;public;5;19;;@Override public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {     for (Object contributor : this.contributors) {         if (contributor instanceof UriComponentsContributor) {             UriComponentsContributor ucc = (UriComponentsContributor) contributor.             if (ucc.supportsParameter(parameter)) {                 ucc.contributeMethodArgument(parameter, value, builder, uriVariables, conversionService).                 break.             }         } else if (contributor instanceof HandlerMethodArgumentResolver) {             if (((HandlerMethodArgumentResolver) contributor).supportsParameter(parameter)) {                 break.             }         }     } }
true;public;4;5;/**  * An overloaded method that uses the ConversionService created at construction.  */ ;/**  * An overloaded method that uses the ConversionService created at construction.  */ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables) {     this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService). }
