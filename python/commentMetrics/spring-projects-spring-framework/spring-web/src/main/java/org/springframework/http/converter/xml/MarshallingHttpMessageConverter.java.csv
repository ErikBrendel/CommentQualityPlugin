commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link Marshaller} to be used by this message converter.  */ ;/**  * Set the {@link Marshaller} to be used by this message converter.  */ public void setMarshaller(Marshaller marshaller) {     this.marshaller = marshaller. }
true;public;1;3;/**  * Set the {@link Unmarshaller} to be used by this message converter.  */ ;/**  * Set the {@link Unmarshaller} to be used by this message converter.  */ public void setUnmarshaller(Unmarshaller unmarshaller) {     this.unmarshaller = unmarshaller. }
false;public;2;4;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     return (canRead(mediaType) && this.unmarshaller != null && this.unmarshaller.supports(clazz)). }
false;public;2;4;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     return (canWrite(mediaType) && this.marshaller != null && this.marshaller.supports(clazz)). }
false;protected;1;5;;@Override protected boolean supports(Class<?> clazz) {     // should not be called, since we override canRead()/canWrite()     throw new UnsupportedOperationException(). }
false;protected;3;9;;@Override protected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source source) throws Exception {     Assert.notNull(this.unmarshaller, "Property 'unmarshaller' is required").     Object result = this.unmarshaller.unmarshal(source).     if (!clazz.isInstance(result)) {         throw new TypeMismatchException(result, clazz).     }     return result. }
false;protected;3;5;;@Override protected void writeToResult(Object o, HttpHeaders headers, Result result) throws Exception {     Assert.notNull(this.marshaller, "Property 'marshaller' is required").     this.marshaller.marshal(o, result). }
