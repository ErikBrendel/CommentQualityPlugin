# id;timestamp;commentText;codeText;commentWords;codeWords
MediaTypeFactory -> public static Optional<MediaType> getMediaType(String filename);1490260483;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(String filename) {_		List<MediaType> mediaTypes = getMediaTypes(filename)__		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty())__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,string,filename,list,media,type,media,types,get,media,types,filename,return,media,types,is,empty,optional,of,media,types,get,0,optional,empty
MediaTypeFactory -> public static Optional<MediaType> getMediaType(String filename);1490285806;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(String filename) {_		return getMediaTypes(filename).stream().findFirst()__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,string,filename,return,get,media,types,filename,stream,find,first
MediaTypeFactory -> public static Optional<MediaType> getMediaType(String filename);1492013234;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(String filename) {_		return getMediaTypes(filename).stream().findFirst()__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,string,filename,return,get,media,types,filename,stream,find,first
MediaTypeFactory -> public static List<MediaType> getMediaTypes(@Nullable String filename);1495868221;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(@Nullable String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,nullable,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static List<MediaType> getMediaTypes(@Nullable String filename);1518167602;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(@Nullable String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,nullable,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static List<MediaType> getMediaTypes(@Nullable String filename);1518167818;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(@Nullable String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,nullable,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static List<MediaType> getMediaTypes(@Nullable String filename);1530174524;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(@Nullable String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,nullable,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static MediaType getMediaType(String filename);1468947211;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static MediaType getMediaType(String filename) {_		String mediaType = fileTypeMap.getContentType(filename)__		return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null)__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,media,type,get,media,type,string,filename,string,media,type,file,type,map,get,content,type,filename,return,string,utils,has,text,media,type,media,type,parse,media,type,media,type,null
MediaTypeFactory -> public static MediaType getMediaType(String filename);1490104706;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static MediaType getMediaType(String filename) {_		List<MediaType> mediaTypes = getMediaTypes(filename)__		return (!mediaTypes.isEmpty() ? mediaTypes.get(0) : null)__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,media,type,get,media,type,string,filename,list,media,type,media,types,get,media,types,filename,return,media,types,is,empty,media,types,get,0,null
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1490104706;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		InputStream is = null__		try {_			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)__			BufferedReader reader =_					new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))___			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])___				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_		finally {_			if (is != null) {_				try {_					is.close()__				}_				catch (IOException ignore) {_				}_			}_		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,input,stream,is,null,try,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex,finally,if,is,null,try,is,close,catch,ioexception,ignore
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1490260483;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		InputStream is = null__		try {_			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)__			BufferedReader reader =_					new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))___			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])___				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_		finally {_			if (is != null) {_				try {_					is.close()__				}_				catch (IOException ignore) {_				}_			}_		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,input,stream,is,null,try,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex,finally,if,is,null,try,is,close,catch,ioexception,ignore
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1490285806;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		InputStream is = null__		try {_			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)__			BufferedReader reader =_					new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))___			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])___				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_		finally {_			if (is != null) {_				try {_					is.close()__				}_				catch (IOException ignore) {_				}_			}_		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,input,stream,is,null,try,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex,finally,if,is,null,try,is,close,catch,ioexception,ignore
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1492013234;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		InputStream is = null__		try {_			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)__			BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))__			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])__				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_		finally {_			if (is != null) {_				try {_					is.close()__				}_				catch (IOException ignore) {_				}_			}_		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,input,stream,is,null,try,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex,finally,if,is,null,try,is,close,catch,ioexception,ignore
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1495868221;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		InputStream is = null__		try {_			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)__			BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))__			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])__				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_		finally {_			if (is != null) {_				try {_					is.close()__				}_				catch (IOException ignore) {_				}_			}_		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,input,stream,is,null,try,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex,finally,if,is,null,try,is,close,catch,ioexception,ignore
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1518167602;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		try (InputStream is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)) {_			BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))__			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])__				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,try,input,stream,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1518167818;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		try (InputStream is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)) {_			BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))__			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])__				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,try,input,stream,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex
MediaTypeFactory -> private static MultiValueMap<String, MediaType> parseMimeTypes();1530174524;Parse the {@code mime.types} file found in the resources. Format is:_<code>_# comments begin with a '#'<br>_# the format is &lt_mime type> &lt_space separated file extensions><br>_# for example:<br>_text/plain    txt text<br>_# this would map file.txt and file.text to<br>_# the mime type "text/plain"<br>_</code>_@return a multi-value map, mapping media types to file extensions.;private static MultiValueMap<String, MediaType> parseMimeTypes() {_		try (InputStream is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME)) {_			BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII))__			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>()__			String line__			while ((line = reader.readLine()) != null) {_				if (line.isEmpty() || line.charAt(0) == '#') {_					continue__				}_				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f")__				MediaType mediaType = MediaType.parseMediaType(tokens[0])__				for (int i = 1_ i < tokens.length_ i++) {_					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH)__					result.add(fileExtension, mediaType)__				}_			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex)__		}_	};parse,the,code,mime,types,file,found,in,the,resources,format,is,code,comments,begin,with,a,br,the,format,is,lt,mime,type,lt,space,separated,file,extensions,br,for,example,br,text,plain,txt,text,br,this,would,map,file,txt,and,file,text,to,br,the,mime,type,text,plain,br,code,return,a,multi,value,map,mapping,media,types,to,file,extensions;private,static,multi,value,map,string,media,type,parse,mime,types,try,input,stream,is,media,type,factory,class,get,resource,as,stream,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,is,standard,charsets,multi,value,map,string,media,type,result,new,linked,multi,value,map,string,line,while,line,reader,read,line,null,if,line,is,empty,line,char,at,0,continue,string,tokens,string,utils,tokenize,to,string,array,line,t,n,r,f,media,type,media,type,media,type,parse,media,type,tokens,0,for,int,i,1,i,tokens,length,i,string,file,extension,tokens,i,to,lower,case,locale,english,result,add,file,extension,media,type,return,result,catch,ioexception,ex,throw,new,illegal,state,exception,could,not,load,ex
MediaTypeFactory -> public static List<MediaType> getMediaTypes(String filename);1490104706;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static List<MediaType> getMediaTypes(String filename);1490260483;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static List<MediaType> getMediaTypes(String filename);1490285806;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static List<MediaType> getMediaTypes(String filename);1492013234;Determine the media types for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media types, or an empty list if none found;public static List<MediaType> getMediaTypes(String filename) {_		return Optional.ofNullable(StringUtils.getFilenameExtension(filename))_				.map(s -> s.toLowerCase(Locale.ENGLISH))_				.map(fileExtensionToMediaTypes::get)_				.orElse(Collections.emptyList())__	};determine,the,media,types,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,types,or,an,empty,list,if,none,found;public,static,list,media,type,get,media,types,string,filename,return,optional,of,nullable,string,utils,get,filename,extension,filename,map,s,s,to,lower,case,locale,english,map,file,extension,to,media,types,get,or,else,collections,empty,list
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable Resource resource);1495868221;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable Resource resource) {_		return Optional.ofNullable(resource)_				.map(Resource::getFilename)_				.flatMap(MediaTypeFactory::getMediaType)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,resource,resource,return,optional,of,nullable,resource,map,resource,get,filename,flat,map,media,type,factory,get,media,type
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable Resource resource);1518167602;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable Resource resource) {_		return Optional.ofNullable(resource)_				.map(Resource::getFilename)_				.flatMap(MediaTypeFactory::getMediaType)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,resource,resource,return,optional,of,nullable,resource,map,resource,get,filename,flat,map,media,type,factory,get,media,type
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable Resource resource);1518167818;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable Resource resource) {_		return Optional.ofNullable(resource)_				.map(Resource::getFilename)_				.flatMap(MediaTypeFactory::getMediaType)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,resource,resource,return,optional,of,nullable,resource,map,resource,get,filename,flat,map,media,type,factory,get,media,type
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable Resource resource);1530174524;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable Resource resource) {_		return Optional.ofNullable(resource)_				.map(Resource::getFilename)_				.flatMap(MediaTypeFactory::getMediaType)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,resource,resource,return,optional,of,nullable,resource,map,resource,get,filename,flat,map,media,type,factory,get,media,type
MediaTypeFactory -> public static MediaType getMediaType(Resource resource);1468947211;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static MediaType getMediaType(Resource resource) {_		String filename = resource.getFilename()__		return (filename != null ? getMediaType(filename) : null)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,media,type,get,media,type,resource,resource,string,filename,resource,get,filename,return,filename,null,get,media,type,filename,null
MediaTypeFactory -> public static MediaType getMediaType(Resource resource);1490104706;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static MediaType getMediaType(Resource resource) {_		String filename = resource.getFilename()__		return (filename != null ? getMediaType(filename) : null)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,media,type,get,media,type,resource,resource,string,filename,resource,get,filename,return,filename,null,get,media,type,filename,null
MediaTypeFactory -> public static Optional<MediaType> getMediaType(Resource resource);1490260483;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(Resource resource) {_		if (resource == null) {_			return Optional.empty()__		}_		String filename = resource.getFilename()__		return (filename != null ? getMediaType(filename) : Optional.empty())__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,resource,resource,if,resource,null,return,optional,empty,string,filename,resource,get,filename,return,filename,null,get,media,type,filename,optional,empty
MediaTypeFactory -> public static Optional<MediaType> getMediaType(Resource resource);1490285806;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(Resource resource) {_		return Optional.ofNullable(resource)_				.map(Resource::getFilename)_				.flatMap(MediaTypeFactory::getMediaType)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,resource,resource,return,optional,of,nullable,resource,map,resource,get,filename,flat,map,media,type,factory,get,media,type
MediaTypeFactory -> public static Optional<MediaType> getMediaType(Resource resource);1492013234;Determine a media type for the given resource, if possible._@param resource the resource to introspect_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(Resource resource) {_		return Optional.ofNullable(resource)_				.map(Resource::getFilename)_				.flatMap(MediaTypeFactory::getMediaType)__	};determine,a,media,type,for,the,given,resource,if,possible,param,resource,the,resource,to,introspect,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,resource,resource,return,optional,of,nullable,resource,map,resource,get,filename,flat,map,media,type,factory,get,media,type
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable String filename);1495868221;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable String filename) {_		return getMediaTypes(filename).stream().findFirst()__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,string,filename,return,get,media,types,filename,stream,find,first
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable String filename);1518167602;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable String filename) {_		return getMediaTypes(filename).stream().findFirst()__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,string,filename,return,get,media,types,filename,stream,find,first
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable String filename);1518167818;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable String filename) {_		return getMediaTypes(filename).stream().findFirst()__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,string,filename,return,get,media,types,filename,stream,find,first
MediaTypeFactory -> public static Optional<MediaType> getMediaType(@Nullable String filename);1530174524;Determine a media type for the given file name, if possible._@param filename the file name plus extension_@return the corresponding media type, or {@code null} if none found;public static Optional<MediaType> getMediaType(@Nullable String filename) {_		return getMediaTypes(filename).stream().findFirst()__	};determine,a,media,type,for,the,given,file,name,if,possible,param,filename,the,file,name,plus,extension,return,the,corresponding,media,type,or,code,null,if,none,found;public,static,optional,media,type,get,media,type,nullable,string,filename,return,get,media,types,filename,stream,find,first
