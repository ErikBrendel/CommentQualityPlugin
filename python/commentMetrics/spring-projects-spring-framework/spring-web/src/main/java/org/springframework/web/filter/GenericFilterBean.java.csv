commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Stores the bean name as defined in the Spring bean factory.  * <p>Only relevant in case of initialization as bean, to have a name as  * fallback to the filter name usually provided by a FilterConfig instance.  * @see org.springframework.beans.factory.BeanNameAware  * @see #getFilterName()  */ ;/**  * Stores the bean name as defined in the Spring bean factory.  * <p>Only relevant in case of initialization as bean, to have a name as  * fallback to the filter name usually provided by a FilterConfig instance.  * @see org.springframework.beans.factory.BeanNameAware  * @see #getFilterName()  */ @Override public void setBeanName(String beanName) {     this.beanName = beanName. }
true;public;1;4;/**  * Set the {@code Environment} that this filter runs in.  * <p>Any environment set here overrides the {@link StandardServletEnvironment}  * provided by default.  * <p>This {@code Environment} object is used only for resolving placeholders in  * resource paths passed into init-parameters for this filter. If no init-params are  * used, this {@code Environment} can be essentially ignored.  */ ;/**  * Set the {@code Environment} that this filter runs in.  * <p>Any environment set here overrides the {@link StandardServletEnvironment}  * provided by default.  * <p>This {@code Environment} object is used only for resolving placeholders in  * resource paths passed into init-parameters for this filter. If no init-params are  * used, this {@code Environment} can be essentially ignored.  */ @Override public void setEnvironment(Environment environment) {     this.environment = environment. }
true;public;0;7;/**  * Return the {@link Environment} associated with this filter.  * <p>If none specified, a default environment will be initialized via  * {@link #createEnvironment()}.  * @since 4.3.9  */ ;/**  * Return the {@link Environment} associated with this filter.  * <p>If none specified, a default environment will be initialized via  * {@link #createEnvironment()}.  * @since 4.3.9  */ @Override public Environment getEnvironment() {     if (this.environment == null) {         this.environment = createEnvironment().     }     return this.environment. }
true;protected;0;3;/**  * Create and return a new {@link StandardServletEnvironment}.  * <p>Subclasses may override this in order to configure the environment or  * specialize the environment type returned.  * @since 4.3.9  */ ;/**  * Create and return a new {@link StandardServletEnvironment}.  * <p>Subclasses may override this in order to configure the environment or  * specialize the environment type returned.  * @since 4.3.9  */ protected Environment createEnvironment() {     return new StandardServletEnvironment(). }
true;public;1;4;/**  * Stores the ServletContext that the bean factory runs in.  * <p>Only relevant in case of initialization as bean, to have a ServletContext  * as fallback to the context usually provided by a FilterConfig instance.  * @see org.springframework.web.context.ServletContextAware  * @see #getServletContext()  */ ;/**  * Stores the ServletContext that the bean factory runs in.  * <p>Only relevant in case of initialization as bean, to have a ServletContext  * as fallback to the context usually provided by a FilterConfig instance.  * @see org.springframework.web.context.ServletContextAware  * @see #getServletContext()  */ @Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
true;public;0;4;/**  * Calls the {@code initFilterBean()} method that might  * contain custom initialization of a subclass.  * <p>Only relevant in case of initialization as bean, where the  * standard {@code init(FilterConfig)} method won't be called.  * @see #initFilterBean()  * @see #init(javax.servlet.FilterConfig)  */ ;/**  * Calls the {@code initFilterBean()} method that might  * contain custom initialization of a subclass.  * <p>Only relevant in case of initialization as bean, where the  * standard {@code init(FilterConfig)} method won't be called.  * @see #initFilterBean()  * @see #init(javax.servlet.FilterConfig)  */ @Override public void afterPropertiesSet() throws ServletException {     initFilterBean(). }
true;public;0;3;/**  * Subclasses may override this to perform custom filter shutdown.  * <p>Note: This method will be called from standard filter destruction  * as well as filter bean destruction in a Spring application context.  * <p>This default implementation is empty.  */ ;/**  * Subclasses may override this to perform custom filter shutdown.  * <p>Note: This method will be called from standard filter destruction  * as well as filter bean destruction in a Spring application context.  * <p>This default implementation is empty.  */ @Override public void destroy() { }
true;protected,final;1;3;/**  * Subclasses can invoke this method to specify that this property  * (which must match a JavaBean property they expose) is mandatory,  * and must be supplied as a config parameter. This should be called  * from the constructor of a subclass.  * <p>This method is only relevant in case of traditional initialization  * driven by a FilterConfig instance.  * @param property name of the required property  */ ;/**  * Subclasses can invoke this method to specify that this property  * (which must match a JavaBean property they expose) is mandatory,  * and must be supplied as a config parameter. This should be called  * from the constructor of a subclass.  * <p>This method is only relevant in case of traditional initialization  * driven by a FilterConfig instance.  * @param property name of the required property  */ protected final void addRequiredProperty(String property) {     this.requiredProperties.add(property). }
true;public,final;1;35;/**  * Standard way of initializing this filter.  * Map config parameters onto bean properties of this filter, and  * invoke subclass initialization.  * @param filterConfig the configuration for this filter  * @throws ServletException if bean properties are invalid (or required  * properties are missing), or if subclass initialization fails.  * @see #initFilterBean  */ ;/**  * Standard way of initializing this filter.  * Map config parameters onto bean properties of this filter, and  * invoke subclass initialization.  * @param filterConfig the configuration for this filter  * @throws ServletException if bean properties are invalid (or required  * properties are missing), or if subclass initialization fails.  * @see #initFilterBean  */ @Override public final void init(FilterConfig filterConfig) throws ServletException {     Assert.notNull(filterConfig, "FilterConfig must not be null").     this.filterConfig = filterConfig.     // Set bean properties from init parameters.     PropertyValues pvs = new FilterConfigPropertyValues(filterConfig, this.requiredProperties).     if (!pvs.isEmpty()) {         try {             BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this).             ResourceLoader resourceLoader = new ServletContextResourceLoader(filterConfig.getServletContext()).             Environment env = this.environment.             if (env == null) {                 env = new StandardServletEnvironment().             }             bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, env)).             initBeanWrapper(bw).             bw.setPropertyValues(pvs, true).         } catch (BeansException ex) {             String msg = "Failed to set bean properties on filter '" + filterConfig.getFilterName() + "': " + ex.getMessage().             logger.error(msg, ex).             throw new NestedServletException(msg, ex).         }     }     // Let subclasses do whatever initialization they like.     initFilterBean().     if (logger.isDebugEnabled()) {         logger.debug("Filter '" + filterConfig.getFilterName() + "' configured for use").     } }
true;protected;1;2;/**  * Initialize the BeanWrapper for this GenericFilterBean,  * possibly with custom editors.  * <p>This default implementation is empty.  * @param bw the BeanWrapper to initialize  * @throws BeansException if thrown by BeanWrapper methods  * @see org.springframework.beans.BeanWrapper#registerCustomEditor  */ ;/**  * Initialize the BeanWrapper for this GenericFilterBean,  * possibly with custom editors.  * <p>This default implementation is empty.  * @param bw the BeanWrapper to initialize  * @throws BeansException if thrown by BeanWrapper methods  * @see org.springframework.beans.BeanWrapper#registerCustomEditor  */ protected void initBeanWrapper(BeanWrapper bw) throws BeansException { }
true;protected;0;2;/**  * Subclasses may override this to perform custom initialization.  * All bean properties of this filter will have been set before this  * method is invoked.  * <p>Note: This method will be called from standard filter initialization  * as well as filter bean initialization in a Spring application context.  * Filter name and ServletContext will be available in both cases.  * <p>This default implementation is empty.  * @throws ServletException if subclass initialization fails  * @see #getFilterName()  * @see #getServletContext()  */ ;/**  * Subclasses may override this to perform custom initialization.  * All bean properties of this filter will have been set before this  * method is invoked.  * <p>Note: This method will be called from standard filter initialization  * as well as filter bean initialization in a Spring application context.  * Filter name and ServletContext will be available in both cases.  * <p>This default implementation is empty.  * @throws ServletException if subclass initialization fails  * @see #getFilterName()  * @see #getServletContext()  */ protected void initFilterBean() throws ServletException { }
true;public;0;4;/**  * Make the FilterConfig of this filter available, if any.  * Analogous to GenericServlet's {@code getServletConfig()}.  * <p>Public to resemble the {@code getFilterConfig()} method  * of the Servlet Filter version that shipped with WebLogic 6.1.  * @return the FilterConfig instance, or {@code null} if none available  * @see javax.servlet.GenericServlet#getServletConfig()  */ ;/**  * Make the FilterConfig of this filter available, if any.  * Analogous to GenericServlet's {@code getServletConfig()}.  * <p>Public to resemble the {@code getFilterConfig()} method  * of the Servlet Filter version that shipped with WebLogic 6.1.  * @return the FilterConfig instance, or {@code null} if none available  * @see javax.servlet.GenericServlet#getServletConfig()  */ @Nullable public FilterConfig getFilterConfig() {     return this.filterConfig. }
true;protected;0;4;/**  * Make the name of this filter available to subclasses.  * Analogous to GenericServlet's {@code getServletName()}.  * <p>Takes the FilterConfig's filter name by default.  * If initialized as bean in a Spring application context,  * it falls back to the bean name as defined in the bean factory.  * @return the filter name, or {@code null} if none available  * @see javax.servlet.GenericServlet#getServletName()  * @see javax.servlet.FilterConfig#getFilterName()  * @see #setBeanName  */ ;/**  * Make the name of this filter available to subclasses.  * Analogous to GenericServlet's {@code getServletName()}.  * <p>Takes the FilterConfig's filter name by default.  * If initialized as bean in a Spring application context,  * it falls back to the bean name as defined in the bean factory.  * @return the filter name, or {@code null} if none available  * @see javax.servlet.GenericServlet#getServletName()  * @see javax.servlet.FilterConfig#getFilterName()  * @see #setBeanName  */ @Nullable protected String getFilterName() {     return (this.filterConfig != null ? this.filterConfig.getFilterName() : this.beanName). }
true;protected;0;11;/**  * Make the ServletContext of this filter available to subclasses.  * Analogous to GenericServlet's {@code getServletContext()}.  * <p>Takes the FilterConfig's ServletContext by default.  * If initialized as bean in a Spring application context,  * it falls back to the ServletContext that the bean factory runs in.  * @return the ServletContext instance  * @throws IllegalStateException if no ServletContext is available  * @see javax.servlet.GenericServlet#getServletContext()  * @see javax.servlet.FilterConfig#getServletContext()  * @see #setServletContext  */ ;/**  * Make the ServletContext of this filter available to subclasses.  * Analogous to GenericServlet's {@code getServletContext()}.  * <p>Takes the FilterConfig's ServletContext by default.  * If initialized as bean in a Spring application context,  * it falls back to the ServletContext that the bean factory runs in.  * @return the ServletContext instance  * @throws IllegalStateException if no ServletContext is available  * @see javax.servlet.GenericServlet#getServletContext()  * @see javax.servlet.FilterConfig#getServletContext()  * @see #setServletContext  */ protected ServletContext getServletContext() {     if (this.filterConfig != null) {         return this.filterConfig.getServletContext().     } else if (this.servletContext != null) {         return this.servletContext.     } else {         throw new IllegalStateException("No ServletContext").     } }
