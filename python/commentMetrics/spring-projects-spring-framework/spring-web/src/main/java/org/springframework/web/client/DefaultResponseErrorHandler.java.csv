commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Delegates to {@link #hasError(HttpStatus)} (for a standard status enum value) or  * {@link #hasError(int)} (for an unknown status code) with the response status code.  * @see ClientHttpResponse#getRawStatusCode()  * @see #hasError(HttpStatus)  * @see #hasError(int)  */ ;/**  * Delegates to {@link #hasError(HttpStatus)} (for a standard status enum value) or  * {@link #hasError(int)} (for an unknown status code) with the response status code.  * @see ClientHttpResponse#getRawStatusCode()  * @see #hasError(HttpStatus)  * @see #hasError(int)  */ @Override public boolean hasError(ClientHttpResponse response) throws IOException {     int rawStatusCode = response.getRawStatusCode().     HttpStatus statusCode = HttpStatus.resolve(rawStatusCode).     return (statusCode != null ? hasError(statusCode) : hasError(rawStatusCode)). }
true;protected;1;3;/**  * Template method called from {@link #hasError(ClientHttpResponse)}.  * <p>The default implementation checks {@link HttpStatus#isError()}.  * Can be overridden in subclasses.  * @param statusCode the HTTP status code as enum value  * @return {@code true} if the response indicates an error. {@code false} otherwise  * @see HttpStatus#isError()  */ ;/**  * Template method called from {@link #hasError(ClientHttpResponse)}.  * <p>The default implementation checks {@link HttpStatus#isError()}.  * Can be overridden in subclasses.  * @param statusCode the HTTP status code as enum value  * @return {@code true} if the response indicates an error. {@code false} otherwise  * @see HttpStatus#isError()  */ protected boolean hasError(HttpStatus statusCode) {     return statusCode.isError(). }
true;protected;1;4;/**  * Template method called from {@link #hasError(ClientHttpResponse)}.  * <p>The default implementation checks if the given status code is  * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR} or  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR}.  * Can be overridden in subclasses.  * @param unknownStatusCode the HTTP status code as raw value  * @return {@code true} if the response indicates an error. {@code false} otherwise  * @since 4.3.21  * @see org.springframework.http.HttpStatus.Series#CLIENT_ERROR  * @see org.springframework.http.HttpStatus.Series#SERVER_ERROR  */ ;/**  * Template method called from {@link #hasError(ClientHttpResponse)}.  * <p>The default implementation checks if the given status code is  * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR} or  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR}.  * Can be overridden in subclasses.  * @param unknownStatusCode the HTTP status code as raw value  * @return {@code true} if the response indicates an error. {@code false} otherwise  * @since 4.3.21  * @see org.springframework.http.HttpStatus.Series#CLIENT_ERROR  * @see org.springframework.http.HttpStatus.Series#SERVER_ERROR  */ protected boolean hasError(int unknownStatusCode) {     HttpStatus.Series series = HttpStatus.Series.resolve(unknownStatusCode).     return (series == HttpStatus.Series.CLIENT_ERROR || series == HttpStatus.Series.SERVER_ERROR). }
true;public;1;9;/**  * Delegates to {@link #handleError(ClientHttpResponse, HttpStatus)} with the  * response status code.  * @throws UnknownHttpStatusCodeException in case of an unresolvable status code  * @see #handleError(ClientHttpResponse, HttpStatus)  */ ;/**  * Delegates to {@link #handleError(ClientHttpResponse, HttpStatus)} with the  * response status code.  * @throws UnknownHttpStatusCodeException in case of an unresolvable status code  * @see #handleError(ClientHttpResponse, HttpStatus)  */ @Override public void handleError(ClientHttpResponse response) throws IOException {     HttpStatus statusCode = HttpStatus.resolve(response.getRawStatusCode()).     if (statusCode == null) {         throw new UnknownHttpStatusCodeException(response.getRawStatusCode(), response.getStatusText(), response.getHeaders(), getResponseBody(response), getCharset(response)).     }     handleError(response, statusCode). }
true;protected;2;14;/**  * Handle the error in the given response with the given resolved status code.  * <p>The default implementation throws an {@link HttpClientErrorException}  * if the status code is {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR  * CLIENT_ERROR}, an {@link HttpServerErrorException} if it is  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR},  * or an {@link UnknownHttpStatusCodeException} in other cases.  * @since 5.0  * @see HttpClientErrorException#create  * @see HttpServerErrorException#create  */ ;/**  * Handle the error in the given response with the given resolved status code.  * <p>The default implementation throws an {@link HttpClientErrorException}  * if the status code is {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR  * CLIENT_ERROR}, an {@link HttpServerErrorException} if it is  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR},  * or an {@link UnknownHttpStatusCodeException} in other cases.  * @since 5.0  * @see HttpClientErrorException#create  * @see HttpServerErrorException#create  */ protected void handleError(ClientHttpResponse response, HttpStatus statusCode) throws IOException {     String statusText = response.getStatusText().     HttpHeaders headers = response.getHeaders().     byte[] body = getResponseBody(response).     Charset charset = getCharset(response).     switch(statusCode.series()) {         case CLIENT_ERROR:             throw HttpClientErrorException.create(statusCode, statusText, headers, body, charset).         case SERVER_ERROR:             throw HttpServerErrorException.create(statusCode, statusText, headers, body, charset).         default:             throw new UnknownHttpStatusCodeException(statusCode.value(), statusText, headers, body, charset).     } }
true;protected;1;9;/**  * Determine the HTTP status of the given response.  * @param response the response to inspect  * @return the associated HTTP status  * @throws IOException in case of I/O errors  * @throws UnknownHttpStatusCodeException in case of an unknown status code  * that cannot be represented with the {@link HttpStatus} enum  * @since 4.3.8  * @deprecated as of 5.0, in favor of {@link #handleError(ClientHttpResponse, HttpStatus)}  */ ;/**  * Determine the HTTP status of the given response.  * @param response the response to inspect  * @return the associated HTTP status  * @throws IOException in case of I/O errors  * @throws UnknownHttpStatusCodeException in case of an unknown status code  * that cannot be represented with the {@link HttpStatus} enum  * @since 4.3.8  * @deprecated as of 5.0, in favor of {@link #handleError(ClientHttpResponse, HttpStatus)}  */ @Deprecated protected HttpStatus getHttpStatusCode(ClientHttpResponse response) throws IOException {     HttpStatus statusCode = HttpStatus.resolve(response.getRawStatusCode()).     if (statusCode == null) {         throw new UnknownHttpStatusCodeException(response.getRawStatusCode(), response.getStatusText(), response.getHeaders(), getResponseBody(response), getCharset(response)).     }     return statusCode. }
true;protected;1;9;/**  * Read the body of the given response (for inclusion in a status exception).  * @param response the response to inspect  * @return the response body as a byte array,  * or an empty byte array if the body could not be read  * @since 4.3.8  */ ;/**  * Read the body of the given response (for inclusion in a status exception).  * @param response the response to inspect  * @return the response body as a byte array,  * or an empty byte array if the body could not be read  * @since 4.3.8  */ protected byte[] getResponseBody(ClientHttpResponse response) {     try {         return FileCopyUtils.copyToByteArray(response.getBody()).     } catch (IOException ex) {     // ignore     }     return new byte[0]. }
true;protected;1;6;/**  * Determine the charset of the response (for inclusion in a status exception).  * @param response the response to inspect  * @return the associated charset, or {@code null} if none  * @since 4.3.8  */ ;/**  * Determine the charset of the response (for inclusion in a status exception).  * @param response the response to inspect  * @return the associated charset, or {@code null} if none  * @since 4.3.8  */ @Nullable protected Charset getCharset(ClientHttpResponse response) {     HttpHeaders headers = response.getHeaders().     MediaType contentType = headers.getContentType().     return (contentType != null ? contentType.getCharset() : null). }
