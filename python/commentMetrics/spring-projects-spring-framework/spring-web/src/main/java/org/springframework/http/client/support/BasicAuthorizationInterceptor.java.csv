# id;timestamp;commentText;codeText;commentWords;codeWords
BasicAuthorizationInterceptor -> public BasicAuthorizationInterceptor(@Nullable String username, @Nullable String password);1509634754;Create a new interceptor which adds a BASIC authorization header_for the given username and password._@param username the username to use_@param password the password to use;public BasicAuthorizationInterceptor(@Nullable String username, @Nullable String password) {_		Assert.doesNotContain(username, ":", "Username must not contain a colon")__		this.username = (username != null ? username : "")__		this.password = (password != null ? password : "")__	};create,a,new,interceptor,which,adds,a,basic,authorization,header,for,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use;public,basic,authorization,interceptor,nullable,string,username,nullable,string,password,assert,does,not,contain,username,username,must,not,contain,a,colon,this,username,username,null,username,this,password,password,null,password
BasicAuthorizationInterceptor -> public BasicAuthorizationInterceptor(@Nullable String username, @Nullable String password);1539119626;Create a new interceptor which adds a BASIC authorization header_for the given username and password._@param username the username to use_@param password the password to use;public BasicAuthorizationInterceptor(@Nullable String username, @Nullable String password) {_		Assert.doesNotContain(username, ":", "Username must not contain a colon")__		this.username = (username != null ? username : "")__		this.password = (password != null ? password : "")__	};create,a,new,interceptor,which,adds,a,basic,authorization,header,for,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use;public,basic,authorization,interceptor,nullable,string,username,nullable,string,password,assert,does,not,contain,username,username,must,not,contain,a,colon,this,username,username,null,username,this,password,password,null,password
BasicAuthorizationInterceptor -> public BasicAuthorizationInterceptor(String username, String password);1467189678;Create a new interceptor which adds a BASIC authorization header_for the given username and password._@param username the username to use_@param password the password to use;public BasicAuthorizationInterceptor(String username, String password) {_		Assert.hasLength(username, "Username must not be empty")__		this.username = username__		this.password = (password != null ? password : "")__	};create,a,new,interceptor,which,adds,a,basic,authorization,header,for,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use;public,basic,authorization,interceptor,string,username,string,password,assert,has,length,username,username,must,not,be,empty,this,username,username,this,password,password,null,password
BasicAuthorizationInterceptor -> public BasicAuthorizationInterceptor(String username, String password);1468964586;Create a new interceptor which adds a BASIC authorization header_for the given username and password._@param username the username to use_@param password the password to use;public BasicAuthorizationInterceptor(String username, String password) {_		Assert.hasLength(username, "Username must not be empty")__		this.username = username__		this.password = (password != null ? password : "")__	};create,a,new,interceptor,which,adds,a,basic,authorization,header,for,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use;public,basic,authorization,interceptor,string,username,string,password,assert,has,length,username,username,must,not,be,empty,this,username,username,this,password,password,null,password
