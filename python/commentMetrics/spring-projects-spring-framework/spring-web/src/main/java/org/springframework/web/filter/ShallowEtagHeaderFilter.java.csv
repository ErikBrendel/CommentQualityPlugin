commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether the ETag value written to the response should be weak, as per RFC 7232.  * <p>Should be configured using an {@code <init-param>} for parameter name  * "writeWeakETag" in the filter definition in {@code web.xml}.  * @since 4.3  * @see <a href="https://tools.ietf.org/html/rfc7232#section-2.3">RFC 7232 section 2.3</a>  */ ;/**  * Set whether the ETag value written to the response should be weak, as per RFC 7232.  * <p>Should be configured using an {@code <init-param>} for parameter name  * "writeWeakETag" in the filter definition in {@code web.xml}.  * @since 4.3  * @see <a href="https://tools.ietf.org/html/rfc7232#section-2.3">RFC 7232 section 2.3</a>  */ public void setWriteWeakETag(boolean writeWeakETag) {     this.writeWeakETag = writeWeakETag. }
true;public;0;3;/**  * Return whether the ETag value written to the response should be weak, as per RFC 7232.  * @since 4.3  */ ;/**  * Return whether the ETag value written to the response should be weak, as per RFC 7232.  * @since 4.3  */ public boolean isWriteWeakETag() {     return this.writeWeakETag. }
true;protected;0;4;/**  * The default value is {@code false} so that the filter may delay the generation  * of an ETag until the last asynchronously dispatched thread.  */ ;/**  * The default value is {@code false} so that the filter may delay the generation  * of an ETag until the last asynchronously dispatched thread.  */ @Override protected boolean shouldNotFilterAsyncDispatch() {     return false. }
false;protected;3;15;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     HttpServletResponse responseToUse = response.     if (!isAsyncDispatch(request) && !(response instanceof ContentCachingResponseWrapper)) {         responseToUse = new HttpStreamingAwareContentCachingResponseWrapper(response, request).     }     filterChain.doFilter(request, responseToUse).     if (!isAsyncStarted(request) && !isContentCachingDisabled(request)) {         updateResponse(request, responseToUse).     } }
false;private;2;25;;private void updateResponse(HttpServletRequest request, HttpServletResponse response) throws IOException {     ContentCachingResponseWrapper responseWrapper = WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class).     Assert.notNull(responseWrapper, "ContentCachingResponseWrapper not found").     HttpServletResponse rawResponse = (HttpServletResponse) responseWrapper.getResponse().     int statusCode = responseWrapper.getStatusCode().     if (rawResponse.isCommitted()) {         responseWrapper.copyBodyToResponse().     } else if (isEligibleForEtag(request, responseWrapper, statusCode, responseWrapper.getContentInputStream())) {         String responseETag = generateETagHeaderValue(responseWrapper.getContentInputStream(), this.writeWeakETag).         rawResponse.setHeader(HEADER_ETAG, responseETag).         String requestETag = request.getHeader(HEADER_IF_NONE_MATCH).         if (requestETag != null && ("*".equals(requestETag) || compareETagHeaderValue(requestETag, responseETag))) {             rawResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED).         } else {             responseWrapper.copyBodyToResponse().         }     } else {         responseWrapper.copyBodyToResponse().     } }
true;protected;4;10;/**  * Indicates whether the given request and response are eligible for ETag generation.  * <p>The default implementation returns {@code true} if all conditions match:  * <ul>  * <li>response status codes in the {@code 2xx} series</li>  * <li>request method is a GET</li>  * <li>response Cache-Control header is not set or does not contain a "no-store" directive</li>  * </ul>  * @param request the HTTP request  * @param response the HTTP response  * @param responseStatusCode the HTTP response status code  * @param inputStream the response body  * @return {@code true} if eligible for ETag generation, {@code false} otherwise  */ ;/**  * Indicates whether the given request and response are eligible for ETag generation.  * <p>The default implementation returns {@code true} if all conditions match:  * <ul>  * <li>response status codes in the {@code 2xx} series</li>  * <li>request method is a GET</li>  * <li>response Cache-Control header is not set or does not contain a "no-store" directive</li>  * </ul>  * @param request the HTTP request  * @param response the HTTP response  * @param responseStatusCode the HTTP response status code  * @param inputStream the response body  * @return {@code true} if eligible for ETag generation, {@code false} otherwise  */ protected boolean isEligibleForEtag(HttpServletRequest request, HttpServletResponse response, int responseStatusCode, InputStream inputStream) {     String method = request.getMethod().     if (responseStatusCode >= 200 && responseStatusCode < 300 && HttpMethod.GET.matches(method)) {         String cacheControl = response.getHeader(HEADER_CACHE_CONTROL).         return (cacheControl == null || !cacheControl.contains(DIRECTIVE_NO_STORE)).     }     return false. }
true;protected;2;11;/**  * Generate the ETag header value from the given response body byte array.  * <p>The default implementation generates an MD5 hash.  * @param inputStream the response body as an InputStream  * @param isWeak whether the generated ETag should be weak  * @return the ETag header value  * @see org.springframework.util.DigestUtils  */ ;/**  * Generate the ETag header value from the given response body byte array.  * <p>The default implementation generates an MD5 hash.  * @param inputStream the response body as an InputStream  * @param isWeak whether the generated ETag should be weak  * @return the ETag header value  * @see org.springframework.util.DigestUtils  */ protected String generateETagHeaderValue(InputStream inputStream, boolean isWeak) throws IOException {     // length of W/ + " + 0 + 32bits md5 hash + "     StringBuilder builder = new StringBuilder(37).     if (isWeak) {         builder.append("W/").     }     builder.append("\"0").     DigestUtils.appendMd5DigestAsHex(inputStream, builder).     builder.append('"').     return builder.toString(). }
false;private;2;9;;private boolean compareETagHeaderValue(String requestETag, String responseETag) {     if (requestETag.startsWith("W/")) {         requestETag = requestETag.substring(2).     }     if (responseETag.startsWith("W/")) {         responseETag = responseETag.substring(2).     }     return requestETag.equals(responseETag). }
true;public,static;1;4;/**  * This method can be used to disable the content caching response wrapper  * of the ShallowEtagHeaderFilter. This can be done before the start of HTTP  * streaming for example where the response will be written to asynchronously  * and not in the context of a Servlet container thread.  * @since 4.2  */ ;/**  * This method can be used to disable the content caching response wrapper  * of the ShallowEtagHeaderFilter. This can be done before the start of HTTP  * streaming for example where the response will be written to asynchronously  * and not in the context of a Servlet container thread.  * @since 4.2  */ public static void disableContentCaching(ServletRequest request) {     Assert.notNull(request, "ServletRequest must not be null").     request.setAttribute(STREAMING_ATTRIBUTE, true). }
false;private,static;1;3;;private static boolean isContentCachingDisabled(HttpServletRequest request) {     return (request.getAttribute(STREAMING_ATTRIBUTE) != null). }
false;public;0;4;;@Override public ServletOutputStream getOutputStream() throws IOException {     return (useRawResponse() ? getResponse().getOutputStream() : super.getOutputStream()). }
false;public;0;4;;@Override public PrintWriter getWriter() throws IOException {     return (useRawResponse() ? getResponse().getWriter() : super.getWriter()). }
false;private;0;3;;private boolean useRawResponse() {     return isContentCachingDisabled(this.request). }
