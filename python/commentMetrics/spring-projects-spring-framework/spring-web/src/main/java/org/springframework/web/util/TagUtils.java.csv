# id;timestamp;commentText;codeText;commentWords;codeWords
TagUtils -> public static void assertHasAncestorOfType(Tag tag, Class ancestorTagClass, String tagName, String ancestorTagName);1328020251;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type, throwing an {@link IllegalStateException}_if not._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@param tagName the name of the <code>tag</code>_ for example '<code>option</code>'_@param ancestorTagName the name of the ancestor <code>tag</code>_ for example '<code>select</code>'_@throws IllegalStateException if the supplied <code>tag</code> does not_have a tag of the supplied <code>parentTagClass</code> as an ancestor_@throws IllegalArgumentException if any of the supplied arguments is <code>null</code>,_or in the case of the {@link String}-typed arguments, is composed wholly_of whitespace_ or if the supplied <code>ancestorTagClass</code> is not_type-assignable to the {@link Tag} class_@see #hasAncestorOfType(javax.servlet.jsp.tagext.Tag, Class);public static void assertHasAncestorOfType(Tag tag, Class ancestorTagClass, String tagName, String ancestorTagName) {_		Assert.hasText(tagName, "'tagName' must not be empty")__		Assert.hasText(ancestorTagName, "'ancestorTagName' must not be empty")__		if (!TagUtils.hasAncestorOfType(tag, ancestorTagClass)) {_			throw new IllegalStateException("The '" + tagName + "' tag can only be used inside a valid '" + ancestorTagName + "' tag.")__		}_	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throwing,an,link,illegal,state,exception,if,not,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,param,tag,name,the,name,of,the,code,tag,code,for,example,code,option,code,param,ancestor,tag,name,the,name,of,the,ancestor,code,tag,code,for,example,code,select,code,throws,illegal,state,exception,if,the,supplied,code,tag,code,does,not,have,a,tag,of,the,supplied,code,parent,tag,class,code,as,an,ancestor,throws,illegal,argument,exception,if,any,of,the,supplied,arguments,is,code,null,code,or,in,the,case,of,the,link,string,typed,arguments,is,composed,wholly,of,whitespace,or,if,the,supplied,code,ancestor,tag,class,code,is,not,type,assignable,to,the,link,tag,class,see,has,ancestor,of,type,javax,servlet,jsp,tagext,tag,class;public,static,void,assert,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,string,tag,name,string,ancestor,tag,name,assert,has,text,tag,name,tag,name,must,not,be,empty,assert,has,text,ancestor,tag,name,ancestor,tag,name,must,not,be,empty,if,tag,utils,has,ancestor,of,type,tag,ancestor,tag,class,throw,new,illegal,state,exception,the,tag,name,tag,can,only,be,used,inside,a,valid,ancestor,tag,name,tag
TagUtils -> public static void assertHasAncestorOfType(Tag tag, Class ancestorTagClass, String tagName, String ancestorTagName);1356735495;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type, throwing an {@link IllegalStateException}_if not._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@param tagName the name of the {@code tag}_ for example '{@code option}'_@param ancestorTagName the name of the ancestor {@code tag}_ for example '{@code select}'_@throws IllegalStateException if the supplied {@code tag} does not_have a tag of the supplied {@code parentTagClass} as an ancestor_@throws IllegalArgumentException if any of the supplied arguments is {@code null},_or in the case of the {@link String}-typed arguments, is composed wholly_of whitespace_ or if the supplied {@code ancestorTagClass} is not_type-assignable to the {@link Tag} class_@see #hasAncestorOfType(javax.servlet.jsp.tagext.Tag, Class);public static void assertHasAncestorOfType(Tag tag, Class ancestorTagClass, String tagName, String ancestorTagName) {_		Assert.hasText(tagName, "'tagName' must not be empty")__		Assert.hasText(ancestorTagName, "'ancestorTagName' must not be empty")__		if (!TagUtils.hasAncestorOfType(tag, ancestorTagClass)) {_			throw new IllegalStateException("The '" + tagName + "' tag can only be used inside a valid '" + ancestorTagName + "' tag.")__		}_	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throwing,an,link,illegal,state,exception,if,not,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,param,tag,name,the,name,of,the,code,tag,for,example,code,option,param,ancestor,tag,name,the,name,of,the,ancestor,code,tag,for,example,code,select,throws,illegal,state,exception,if,the,supplied,code,tag,does,not,have,a,tag,of,the,supplied,code,parent,tag,class,as,an,ancestor,throws,illegal,argument,exception,if,any,of,the,supplied,arguments,is,code,null,or,in,the,case,of,the,link,string,typed,arguments,is,composed,wholly,of,whitespace,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class,see,has,ancestor,of,type,javax,servlet,jsp,tagext,tag,class;public,static,void,assert,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,string,tag,name,string,ancestor,tag,name,assert,has,text,tag,name,tag,name,must,not,be,empty,assert,has,text,ancestor,tag,name,ancestor,tag,name,must,not,be,empty,if,tag,utils,has,ancestor,of,type,tag,ancestor,tag,class,throw,new,illegal,state,exception,the,tag,name,tag,can,only,be,used,inside,a,valid,ancestor,tag,name,tag
TagUtils -> public static void assertHasAncestorOfType(Tag tag, Class<?> ancestorTagClass, String tagName, 			String ancestorTagName);1508532146;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type, throwing an {@link IllegalStateException}_if not._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@param tagName the name of the {@code tag}_ for example '{@code option}'_@param ancestorTagName the name of the ancestor {@code tag}_ for example '{@code select}'_@throws IllegalStateException if the supplied {@code tag} does not_have a tag of the supplied {@code parentTagClass} as an ancestor_@throws IllegalArgumentException if any of the supplied arguments is {@code null},_or in the case of the {@link String}-typed arguments, is composed wholly_of whitespace_ or if the supplied {@code ancestorTagClass} is not_type-assignable to the {@link Tag} class_@see #hasAncestorOfType(javax.servlet.jsp.tagext.Tag, Class);public static void assertHasAncestorOfType(Tag tag, Class<?> ancestorTagClass, String tagName,_			String ancestorTagName) {__		Assert.hasText(tagName, "'tagName' must not be empty")__		Assert.hasText(ancestorTagName, "'ancestorTagName' must not be empty")__		if (!TagUtils.hasAncestorOfType(tag, ancestorTagClass)) {_			throw new IllegalStateException("The '" + tagName +_					"' tag can only be used inside a valid '" + ancestorTagName + "' tag.")__		}_	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throwing,an,link,illegal,state,exception,if,not,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,param,tag,name,the,name,of,the,code,tag,for,example,code,option,param,ancestor,tag,name,the,name,of,the,ancestor,code,tag,for,example,code,select,throws,illegal,state,exception,if,the,supplied,code,tag,does,not,have,a,tag,of,the,supplied,code,parent,tag,class,as,an,ancestor,throws,illegal,argument,exception,if,any,of,the,supplied,arguments,is,code,null,or,in,the,case,of,the,link,string,typed,arguments,is,composed,wholly,of,whitespace,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class,see,has,ancestor,of,type,javax,servlet,jsp,tagext,tag,class;public,static,void,assert,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,string,tag,name,string,ancestor,tag,name,assert,has,text,tag,name,tag,name,must,not,be,empty,assert,has,text,ancestor,tag,name,ancestor,tag,name,must,not,be,empty,if,tag,utils,has,ancestor,of,type,tag,ancestor,tag,class,throw,new,illegal,state,exception,the,tag,name,tag,can,only,be,used,inside,a,valid,ancestor,tag,name,tag
TagUtils -> public static void assertHasAncestorOfType(Tag tag, Class<?> ancestorTagClass, String tagName, 			String ancestorTagName);1530174524;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type, throwing an {@link IllegalStateException}_if not._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@param tagName the name of the {@code tag}_ for example '{@code option}'_@param ancestorTagName the name of the ancestor {@code tag}_ for example '{@code select}'_@throws IllegalStateException if the supplied {@code tag} does not_have a tag of the supplied {@code parentTagClass} as an ancestor_@throws IllegalArgumentException if any of the supplied arguments is {@code null},_or in the case of the {@link String}-typed arguments, is composed wholly_of whitespace_ or if the supplied {@code ancestorTagClass} is not_type-assignable to the {@link Tag} class_@see #hasAncestorOfType(javax.servlet.jsp.tagext.Tag, Class);public static void assertHasAncestorOfType(Tag tag, Class<?> ancestorTagClass, String tagName,_			String ancestorTagName) {__		Assert.hasText(tagName, "'tagName' must not be empty")__		Assert.hasText(ancestorTagName, "'ancestorTagName' must not be empty")__		if (!TagUtils.hasAncestorOfType(tag, ancestorTagClass)) {_			throw new IllegalStateException("The '" + tagName +_					"' tag can only be used inside a valid '" + ancestorTagName + "' tag.")__		}_	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throwing,an,link,illegal,state,exception,if,not,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,param,tag,name,the,name,of,the,code,tag,for,example,code,option,param,ancestor,tag,name,the,name,of,the,ancestor,code,tag,for,example,code,select,throws,illegal,state,exception,if,the,supplied,code,tag,does,not,have,a,tag,of,the,supplied,code,parent,tag,class,as,an,ancestor,throws,illegal,argument,exception,if,any,of,the,supplied,arguments,is,code,null,or,in,the,case,of,the,link,string,typed,arguments,is,composed,wholly,of,whitespace,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class,see,has,ancestor,of,type,javax,servlet,jsp,tagext,tag,class;public,static,void,assert,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,string,tag,name,string,ancestor,tag,name,assert,has,text,tag,name,tag,name,must,not,be,empty,assert,has,text,ancestor,tag,name,ancestor,tag,name,must,not,be,empty,if,tag,utils,has,ancestor,of,type,tag,ancestor,tag,class,throw,new,illegal,state,exception,the,tag,name,tag,can,only,be,used,inside,a,valid,ancestor,tag,name,tag
TagUtils -> public static int getScope(String scope);1328020251;Determines the scope for a given input <code>String</code>._<p>If the <code>String</code> does not match 'request', 'session',_'page' or 'application', the method will return {@link PageContext#PAGE_SCOPE}._@param scope the <code>String</code> to inspect_@return the scope found, or {@link PageContext#PAGE_SCOPE} if no scope matched_@throws IllegalArgumentException if the supplied <code>scope</code> is <code>null</code>;public static int getScope(String scope) {_		Assert.notNull(scope, "Scope to search for cannot be null")__		if (scope.equals(SCOPE_REQUEST)) {_			return PageContext.REQUEST_SCOPE__		}_		else if (scope.equals(SCOPE_SESSION)) {_			return PageContext.SESSION_SCOPE__		}_		else if (scope.equals(SCOPE_APPLICATION)) {_			return PageContext.APPLICATION_SCOPE__		}_		else {_			return PageContext.PAGE_SCOPE__		}_	};determines,the,scope,for,a,given,input,code,string,code,p,if,the,code,string,code,does,not,match,request,session,page,or,application,the,method,will,return,link,page,context,param,scope,the,code,string,code,to,inspect,return,the,scope,found,or,link,page,context,if,no,scope,matched,throws,illegal,argument,exception,if,the,supplied,code,scope,code,is,code,null,code;public,static,int,get,scope,string,scope,assert,not,null,scope,scope,to,search,for,cannot,be,null,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,return,page,context
TagUtils -> public static int getScope(String scope);1356735495;Determines the scope for a given input {@code String}._<p>If the {@code String} does not match 'request', 'session',_'page' or 'application', the method will return {@link PageContext#PAGE_SCOPE}._@param scope the {@code String} to inspect_@return the scope found, or {@link PageContext#PAGE_SCOPE} if no scope matched_@throws IllegalArgumentException if the supplied {@code scope} is {@code null};public static int getScope(String scope) {_		Assert.notNull(scope, "Scope to search for cannot be null")__		if (scope.equals(SCOPE_REQUEST)) {_			return PageContext.REQUEST_SCOPE__		}_		else if (scope.equals(SCOPE_SESSION)) {_			return PageContext.SESSION_SCOPE__		}_		else if (scope.equals(SCOPE_APPLICATION)) {_			return PageContext.APPLICATION_SCOPE__		}_		else {_			return PageContext.PAGE_SCOPE__		}_	};determines,the,scope,for,a,given,input,code,string,p,if,the,code,string,does,not,match,request,session,page,or,application,the,method,will,return,link,page,context,param,scope,the,code,string,to,inspect,return,the,scope,found,or,link,page,context,if,no,scope,matched,throws,illegal,argument,exception,if,the,supplied,code,scope,is,code,null;public,static,int,get,scope,string,scope,assert,not,null,scope,scope,to,search,for,cannot,be,null,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,return,page,context
TagUtils -> public static int getScope(String scope);1385412762;Determines the scope for a given input {@code String}._<p>If the {@code String} does not match 'request', 'session',_'page' or 'application', the method will return {@link PageContext#PAGE_SCOPE}._@param scope the {@code String} to inspect_@return the scope found, or {@link PageContext#PAGE_SCOPE} if no scope matched_@throws IllegalArgumentException if the supplied {@code scope} is {@code null};public static int getScope(String scope) {_		Assert.notNull(scope, "Scope to search for cannot be null")__		if (scope.equals(SCOPE_REQUEST)) {_			return PageContext.REQUEST_SCOPE__		}_		else if (scope.equals(SCOPE_SESSION)) {_			return PageContext.SESSION_SCOPE__		}_		else if (scope.equals(SCOPE_APPLICATION)) {_			return PageContext.APPLICATION_SCOPE__		}_		else {_			return PageContext.PAGE_SCOPE__		}_	};determines,the,scope,for,a,given,input,code,string,p,if,the,code,string,does,not,match,request,session,page,or,application,the,method,will,return,link,page,context,param,scope,the,code,string,to,inspect,return,the,scope,found,or,link,page,context,if,no,scope,matched,throws,illegal,argument,exception,if,the,supplied,code,scope,is,code,null;public,static,int,get,scope,string,scope,assert,not,null,scope,scope,to,search,for,cannot,be,null,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,return,page,context
TagUtils -> public static int getScope(String scope);1508532146;Determines the scope for a given input {@code String}._<p>If the {@code String} does not match 'request', 'session',_'page' or 'application', the method will return {@link PageContext#PAGE_SCOPE}._@param scope the {@code String} to inspect_@return the scope found, or {@link PageContext#PAGE_SCOPE} if no scope matched_@throws IllegalArgumentException if the supplied {@code scope} is {@code null};public static int getScope(String scope) {_		Assert.notNull(scope, "Scope to search for cannot be null")__		if (scope.equals(SCOPE_REQUEST)) {_			return PageContext.REQUEST_SCOPE__		}_		else if (scope.equals(SCOPE_SESSION)) {_			return PageContext.SESSION_SCOPE__		}_		else if (scope.equals(SCOPE_APPLICATION)) {_			return PageContext.APPLICATION_SCOPE__		}_		else {_			return PageContext.PAGE_SCOPE__		}_	};determines,the,scope,for,a,given,input,code,string,p,if,the,code,string,does,not,match,request,session,page,or,application,the,method,will,return,link,page,context,param,scope,the,code,string,to,inspect,return,the,scope,found,or,link,page,context,if,no,scope,matched,throws,illegal,argument,exception,if,the,supplied,code,scope,is,code,null;public,static,int,get,scope,string,scope,assert,not,null,scope,scope,to,search,for,cannot,be,null,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,return,page,context
TagUtils -> public static int getScope(String scope);1530174524;Determines the scope for a given input {@code String}._<p>If the {@code String} does not match 'request', 'session',_'page' or 'application', the method will return {@link PageContext#PAGE_SCOPE}._@param scope the {@code String} to inspect_@return the scope found, or {@link PageContext#PAGE_SCOPE} if no scope matched_@throws IllegalArgumentException if the supplied {@code scope} is {@code null};public static int getScope(String scope) {_		Assert.notNull(scope, "Scope to search for cannot be null")__		if (scope.equals(SCOPE_REQUEST)) {_			return PageContext.REQUEST_SCOPE__		}_		else if (scope.equals(SCOPE_SESSION)) {_			return PageContext.SESSION_SCOPE__		}_		else if (scope.equals(SCOPE_APPLICATION)) {_			return PageContext.APPLICATION_SCOPE__		}_		else {_			return PageContext.PAGE_SCOPE__		}_	};determines,the,scope,for,a,given,input,code,string,p,if,the,code,string,does,not,match,request,session,page,or,application,the,method,will,return,link,page,context,param,scope,the,code,string,to,inspect,return,the,scope,found,or,link,page,context,if,no,scope,matched,throws,illegal,argument,exception,if,the,supplied,code,scope,is,code,null;public,static,int,get,scope,string,scope,assert,not,null,scope,scope,to,search,for,cannot,be,null,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,if,scope,equals,return,page,context,else,return,page,context
TagUtils -> public static boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass);1385412762;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@return {@code true} if the supplied {@link Tag} has any ancestor tag_of the supplied type_@throws IllegalArgumentException if either of the supplied arguments is {@code null}__or if the supplied {@code ancestorTagClass} is not type-assignable to_the {@link Tag} class;public static boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass) {_		Assert.notNull(tag, "Tag cannot be null")__		Assert.notNull(ancestorTagClass, "Ancestor tag class cannot be null")__		if (!Tag.class.isAssignableFrom(ancestorTagClass)) {_			throw new IllegalArgumentException(_					"Class '" + ancestorTagClass.getName() + "' is not a valid Tag type")__		}_		Tag ancestor = tag.getParent()__		while (ancestor != null) {_			if (ancestorTagClass.isAssignableFrom(ancestor.getClass())) {_				return true__			}_			ancestor = ancestor.getParent()__		}_		return false__	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,return,code,true,if,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throws,illegal,argument,exception,if,either,of,the,supplied,arguments,is,code,null,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class;public,static,boolean,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,assert,not,null,tag,tag,cannot,be,null,assert,not,null,ancestor,tag,class,ancestor,tag,class,cannot,be,null,if,tag,class,is,assignable,from,ancestor,tag,class,throw,new,illegal,argument,exception,class,ancestor,tag,class,get,name,is,not,a,valid,tag,type,tag,ancestor,tag,get,parent,while,ancestor,null,if,ancestor,tag,class,is,assignable,from,ancestor,get,class,return,true,ancestor,ancestor,get,parent,return,false
TagUtils -> public static boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass);1508532146;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@return {@code true} if the supplied {@link Tag} has any ancestor tag_of the supplied type_@throws IllegalArgumentException if either of the supplied arguments is {@code null}__or if the supplied {@code ancestorTagClass} is not type-assignable to_the {@link Tag} class;public static boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass) {_		Assert.notNull(tag, "Tag cannot be null")__		Assert.notNull(ancestorTagClass, "Ancestor tag class cannot be null")__		if (!Tag.class.isAssignableFrom(ancestorTagClass)) {_			throw new IllegalArgumentException(_					"Class '" + ancestorTagClass.getName() + "' is not a valid Tag type")__		}_		Tag ancestor = tag.getParent()__		while (ancestor != null) {_			if (ancestorTagClass.isAssignableFrom(ancestor.getClass())) {_				return true__			}_			ancestor = ancestor.getParent()__		}_		return false__	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,return,code,true,if,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throws,illegal,argument,exception,if,either,of,the,supplied,arguments,is,code,null,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class;public,static,boolean,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,assert,not,null,tag,tag,cannot,be,null,assert,not,null,ancestor,tag,class,ancestor,tag,class,cannot,be,null,if,tag,class,is,assignable,from,ancestor,tag,class,throw,new,illegal,argument,exception,class,ancestor,tag,class,get,name,is,not,a,valid,tag,type,tag,ancestor,tag,get,parent,while,ancestor,null,if,ancestor,tag,class,is,assignable,from,ancestor,get,class,return,true,ancestor,ancestor,get,parent,return,false
TagUtils -> public static boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass);1530174524;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@return {@code true} if the supplied {@link Tag} has any ancestor tag_of the supplied type_@throws IllegalArgumentException if either of the supplied arguments is {@code null}__or if the supplied {@code ancestorTagClass} is not type-assignable to_the {@link Tag} class;public static boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass) {_		Assert.notNull(tag, "Tag cannot be null")__		Assert.notNull(ancestorTagClass, "Ancestor tag class cannot be null")__		if (!Tag.class.isAssignableFrom(ancestorTagClass)) {_			throw new IllegalArgumentException(_					"Class '" + ancestorTagClass.getName() + "' is not a valid Tag type")__		}_		Tag ancestor = tag.getParent()__		while (ancestor != null) {_			if (ancestorTagClass.isAssignableFrom(ancestor.getClass())) {_				return true__			}_			ancestor = ancestor.getParent()__		}_		return false__	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,return,code,true,if,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throws,illegal,argument,exception,if,either,of,the,supplied,arguments,is,code,null,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class;public,static,boolean,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,assert,not,null,tag,tag,cannot,be,null,assert,not,null,ancestor,tag,class,ancestor,tag,class,cannot,be,null,if,tag,class,is,assignable,from,ancestor,tag,class,throw,new,illegal,argument,exception,class,ancestor,tag,class,get,name,is,not,a,valid,tag,type,tag,ancestor,tag,get,parent,while,ancestor,null,if,ancestor,tag,class,is,assignable,from,ancestor,get,class,return,true,ancestor,ancestor,get,parent,return,false
TagUtils -> public static boolean hasAncestorOfType(Tag tag, Class ancestorTagClass);1328020251;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@return <code>true</code> if the supplied {@link Tag} has any ancestor tag_of the supplied type_@throws IllegalArgumentException if either of the supplied arguments is <code>null</code>__or if the supplied <code>ancestorTagClass</code> is not type-assignable to_the {@link Tag} class;public static boolean hasAncestorOfType(Tag tag, Class ancestorTagClass) {_		Assert.notNull(tag, "Tag cannot be null")__		Assert.notNull(ancestorTagClass, "Ancestor tag class cannot be null")__		if (!Tag.class.isAssignableFrom(ancestorTagClass)) {_			throw new IllegalArgumentException(_					"Class '" + ancestorTagClass.getName() + "' is not a valid Tag type")__		}_		Tag ancestor = tag.getParent()__		while (ancestor != null) {_			if (ancestorTagClass.isAssignableFrom(ancestor.getClass())) {_				return true__			}_			ancestor = ancestor.getParent()__		}_		return false__	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,return,code,true,code,if,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throws,illegal,argument,exception,if,either,of,the,supplied,arguments,is,code,null,code,or,if,the,supplied,code,ancestor,tag,class,code,is,not,type,assignable,to,the,link,tag,class;public,static,boolean,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,assert,not,null,tag,tag,cannot,be,null,assert,not,null,ancestor,tag,class,ancestor,tag,class,cannot,be,null,if,tag,class,is,assignable,from,ancestor,tag,class,throw,new,illegal,argument,exception,class,ancestor,tag,class,get,name,is,not,a,valid,tag,type,tag,ancestor,tag,get,parent,while,ancestor,null,if,ancestor,tag,class,is,assignable,from,ancestor,get,class,return,true,ancestor,ancestor,get,parent,return,false
TagUtils -> public static boolean hasAncestorOfType(Tag tag, Class ancestorTagClass);1356735495;Determine whether the supplied {@link Tag} has any ancestor tag_of the supplied type._@param tag the tag whose ancestors are to be checked_@param ancestorTagClass the ancestor {@link Class} being searched for_@return {@code true} if the supplied {@link Tag} has any ancestor tag_of the supplied type_@throws IllegalArgumentException if either of the supplied arguments is {@code null}__or if the supplied {@code ancestorTagClass} is not type-assignable to_the {@link Tag} class;public static boolean hasAncestorOfType(Tag tag, Class ancestorTagClass) {_		Assert.notNull(tag, "Tag cannot be null")__		Assert.notNull(ancestorTagClass, "Ancestor tag class cannot be null")__		if (!Tag.class.isAssignableFrom(ancestorTagClass)) {_			throw new IllegalArgumentException(_					"Class '" + ancestorTagClass.getName() + "' is not a valid Tag type")__		}_		Tag ancestor = tag.getParent()__		while (ancestor != null) {_			if (ancestorTagClass.isAssignableFrom(ancestor.getClass())) {_				return true__			}_			ancestor = ancestor.getParent()__		}_		return false__	};determine,whether,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,param,tag,the,tag,whose,ancestors,are,to,be,checked,param,ancestor,tag,class,the,ancestor,link,class,being,searched,for,return,code,true,if,the,supplied,link,tag,has,any,ancestor,tag,of,the,supplied,type,throws,illegal,argument,exception,if,either,of,the,supplied,arguments,is,code,null,or,if,the,supplied,code,ancestor,tag,class,is,not,type,assignable,to,the,link,tag,class;public,static,boolean,has,ancestor,of,type,tag,tag,class,ancestor,tag,class,assert,not,null,tag,tag,cannot,be,null,assert,not,null,ancestor,tag,class,ancestor,tag,class,cannot,be,null,if,tag,class,is,assignable,from,ancestor,tag,class,throw,new,illegal,argument,exception,class,ancestor,tag,class,get,name,is,not,a,valid,tag,type,tag,ancestor,tag,get,parent,while,ancestor,null,if,ancestor,tag,class,is,assignable,from,ancestor,get,class,return,true,ancestor,ancestor,get,parent,return,false
