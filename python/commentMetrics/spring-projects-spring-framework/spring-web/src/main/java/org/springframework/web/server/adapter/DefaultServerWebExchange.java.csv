commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;21;;@SuppressWarnings("unchecked") private static Mono<MultiValueMap<String, String>> initFormData(ServerHttpRequest request, ServerCodecConfigurer configurer, String logPrefix) {     try {         MediaType contentType = request.getHeaders().getContentType().         if (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType)) {             return ((HttpMessageReader<MultiValueMap<String, String>>) configurer.getReaders().stream().filter(reader -> reader.canRead(FORM_DATA_TYPE, MediaType.APPLICATION_FORM_URLENCODED)).findFirst().orElseThrow(() -> new IllegalStateException("No form data HttpMessageReader."))).readMono(FORM_DATA_TYPE, request, Hints.from(Hints.LOG_PREFIX_HINT, logPrefix)).switchIfEmpty(EMPTY_FORM_DATA).cache().         }     } catch (InvalidMediaTypeException ex) {     // Ignore     }     return EMPTY_FORM_DATA. }
false;private,static;3;21;;@SuppressWarnings("unchecked") private static Mono<MultiValueMap<String, Part>> initMultipartData(ServerHttpRequest request, ServerCodecConfigurer configurer, String logPrefix) {     try {         MediaType contentType = request.getHeaders().getContentType().         if (MediaType.MULTIPART_FORM_DATA.isCompatibleWith(contentType)) {             return ((HttpMessageReader<MultiValueMap<String, Part>>) configurer.getReaders().stream().filter(reader -> reader.canRead(MULTIPART_DATA_TYPE, MediaType.MULTIPART_FORM_DATA)).findFirst().orElseThrow(() -> new IllegalStateException("No multipart HttpMessageReader."))).readMono(MULTIPART_DATA_TYPE, request, Hints.from(Hints.LOG_PREFIX_HINT, logPrefix)).switchIfEmpty(EMPTY_MULTIPART_DATA).cache().         }     } catch (InvalidMediaTypeException ex) {     // Ignore     }     return EMPTY_MULTIPART_DATA. }
false;public;0;4;;@Override public ServerHttpRequest getRequest() {     return this.request. }
false;private;0;3;;private HttpHeaders getRequestHeaders() {     return getRequest().getHeaders(). }
false;public;0;4;;@Override public ServerHttpResponse getResponse() {     return this.response. }
false;private;0;3;;private HttpHeaders getResponseHeaders() {     return getResponse().getHeaders(). }
false;public;0;4;;@Override public Map<String, Object> getAttributes() {     return this.attributes. }
false;public;0;4;;@Override public Mono<WebSession> getSession() {     return this.sessionMono. }
false;public;0;4;;@Override public <T extends Principal> Mono<T> getPrincipal() {     return Mono.empty(). }
false;public;0;4;;@Override public Mono<MultiValueMap<String, String>> getFormData() {     return this.formDataMono. }
false;public;0;4;;@Override public Mono<MultiValueMap<String, Part>> getMultipartData() {     return this.multipartDataMono. }
false;public;0;4;;@Override public LocaleContext getLocaleContext() {     return this.localeContextResolver.resolveLocaleContext(this). }
false;public;0;5;;@Override @Nullable public ApplicationContext getApplicationContext() {     return this.applicationContext. }
false;public;0;4;;@Override public boolean isNotModified() {     return this.notModified. }
false;public;1;4;;@Override public boolean checkNotModified(Instant lastModified) {     return checkNotModified(null, lastModified). }
false;public;1;4;;@Override public boolean checkNotModified(String etag) {     return checkNotModified(etag, Instant.MIN). }
false;public;2;40;;@Override public boolean checkNotModified(@Nullable String etag, Instant lastModified) {     HttpStatus status = getResponse().getStatusCode().     if (this.notModified || (status != null && !HttpStatus.OK.equals(status))) {         return this.notModified.     }     if (validateIfUnmodifiedSince(lastModified)) {         if (this.notModified) {             getResponse().setStatusCode(HttpStatus.PRECONDITION_FAILED).         }         return this.notModified.     }     boolean validated = validateIfNoneMatch(etag).     if (!validated) {         validateIfModifiedSince(lastModified).     }     // Update response     boolean isHttpGetOrHead = SAFE_METHODS.contains(getRequest().getMethod()).     if (this.notModified) {         getResponse().setStatusCode(isHttpGetOrHead ? HttpStatus.NOT_MODIFIED : HttpStatus.PRECONDITION_FAILED).     }     if (isHttpGetOrHead) {         if (lastModified.isAfter(Instant.EPOCH) && getResponseHeaders().getLastModified() == -1) {             getResponseHeaders().setLastModified(lastModified.toEpochMilli()).         }         if (StringUtils.hasLength(etag) && getResponseHeaders().getETag() == null) {             getResponseHeaders().setETag(padEtagIfNecessary(etag)).         }     }     return this.notModified. }
false;private;1;13;;private boolean validateIfUnmodifiedSince(Instant lastModified) {     if (lastModified.isBefore(Instant.EPOCH)) {         return false.     }     long ifUnmodifiedSince = getRequestHeaders().getIfUnmodifiedSince().     if (ifUnmodifiedSince == -1) {         return false.     }     // We will perform this validation...     Instant sinceInstant = Instant.ofEpochMilli(ifUnmodifiedSince).     this.notModified = sinceInstant.isBefore(lastModified.truncatedTo(ChronoUnit.SECONDS)).     return true. }
false;private;1;33;;private boolean validateIfNoneMatch(@Nullable String etag) {     if (!StringUtils.hasLength(etag)) {         return false.     }     List<String> ifNoneMatch.     try {         ifNoneMatch = getRequestHeaders().getIfNoneMatch().     } catch (IllegalArgumentException ex) {         return false.     }     if (ifNoneMatch.isEmpty()) {         return false.     }     // We will perform this validation...     etag = padEtagIfNecessary(etag).     if (etag.startsWith("W/")) {         etag = etag.substring(2).     }     for (String clientEtag : ifNoneMatch) {         // Compare weak/strong ETags as per https://tools.ietf.org/html/rfc7232#section-2.3         if (StringUtils.hasLength(clientEtag)) {             if (clientEtag.startsWith("W/")) {                 clientEtag = clientEtag.substring(2).             }             if (clientEtag.equals(etag)) {                 this.notModified = true.                 break.             }         }     }     return true. }
false;private;1;9;;private String padEtagIfNecessary(String etag) {     if (!StringUtils.hasLength(etag)) {         return etag.     }     if ((etag.startsWith("\"") || etag.startsWith("W/\"")) && etag.endsWith("\"")) {         return etag.     }     return "\"" + etag + "\"". }
false;private;1;12;;private boolean validateIfModifiedSince(Instant lastModified) {     if (lastModified.isBefore(Instant.EPOCH)) {         return false.     }     long ifModifiedSince = getRequestHeaders().getIfModifiedSince().     if (ifModifiedSince == -1) {         return false.     }     // We will perform this validation...     this.notModified = ChronoUnit.SECONDS.between(lastModified, Instant.ofEpochMilli(ifModifiedSince)) >= 0.     return true. }
false;public;1;4;;@Override public String transformUrl(String url) {     return this.urlTransformer.apply(url). }
false;public;1;5;;@Override public void addUrlTransformer(Function<String, String> transformer) {     Assert.notNull(transformer, "'encoder' must not be null").     this.urlTransformer = this.urlTransformer.andThen(transformer). }
false;public;0;9;;@Override public String getLogPrefix() {     Object value = getAttribute(LOG_ID_ATTRIBUTE).     if (this.logId != value) {         this.logId = value.         this.logPrefix = value != null ? "[" + value + "] " : "".     }     return this.logPrefix. }
