commented;modifiers;parameterAmount;loc;comment;code
false;public,final;2;15;;@Override public final T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     try {         return readFromSource(clazz, inputMessage.getHeaders(), new StreamSource(inputMessage.getBody())).     } catch (IOException | HttpMessageConversionException ex) {         throw ex.     } catch (Exception ex) {         throw new HttpMessageNotReadableException("Could not unmarshal to [" + clazz + "]: " + ex.getMessage(), ex, inputMessage).     } }
false;protected,final;2;14;;@Override protected final void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     try {         writeToResult(t, outputMessage.getHeaders(), new StreamResult(outputMessage.getBody())).     } catch (IOException | HttpMessageConversionException ex) {         throw ex.     } catch (Exception ex) {         throw new HttpMessageNotWritableException("Could not marshal [" + t + "]: " + ex.getMessage(), ex).     } }
true;protected;2;3;/**  * Transforms the given {@code Source} to the {@code Result}.  * @param source the source to transform from  * @param result the result to transform to  * @throws TransformerException in case of transformation errors  */ ;/**  * Transforms the given {@code Source} to the {@code Result}.  * @param source the source to transform from  * @param result the result to transform to  * @throws TransformerException in case of transformation errors  */ protected void transform(Source source, Result result) throws TransformerException {     this.transformerFactory.newTransformer().transform(source, result). }
true;protected,abstract;3;1;/**  * Abstract template method called from {@link #read(Class, HttpInputMessage)}.  * @param clazz the type of object to return  * @param headers the HTTP input headers  * @param source the HTTP input body  * @return the converted object  * @throws Exception in case of I/O or conversion errors  */ ;/**  * Abstract template method called from {@link #read(Class, HttpInputMessage)}.  * @param clazz the type of object to return  * @param headers the HTTP input headers  * @param source the HTTP input body  * @return the converted object  * @throws Exception in case of I/O or conversion errors  */ protected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source) throws Exception.
true;protected,abstract;3;1;/**  * Abstract template method called from {@link #writeInternal(Object, HttpOutputMessage)}.  * @param t the object to write to the output message  * @param headers the HTTP output headers  * @param result the HTTP output body  * @throws Exception in case of I/O or conversion errors  */ ;/**  * Abstract template method called from {@link #writeInternal(Object, HttpOutputMessage)}.  * @param t the object to write to the output message  * @param headers the HTTP output headers  * @param result the HTTP output body  * @throws Exception in case of I/O or conversion errors  */ protected abstract void writeToResult(T t, HttpHeaders headers, Result result) throws Exception.
