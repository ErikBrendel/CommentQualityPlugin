# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractXmlHttpMessageConverter -> protected void transform(Source source, Result result) throws TransformerException;1328020251;Transforms the given {@code Source} to the {@code Result}._@param source the source to transform from_@param result the result to transform to_@throws TransformerException in case of transformation errors;protected void transform(Source source, Result result) throws TransformerException {_		this.transformerFactory.newTransformer().transform(source, result)__	};transforms,the,given,code,source,to,the,code,result,param,source,the,source,to,transform,from,param,result,the,result,to,transform,to,throws,transformer,exception,in,case,of,transformation,errors;protected,void,transform,source,source,result,result,throws,transformer,exception,this,transformer,factory,new,transformer,transform,source,result
AbstractXmlHttpMessageConverter -> protected void transform(Source source, Result result) throws TransformerException;1530174524;Transforms the given {@code Source} to the {@code Result}._@param source the source to transform from_@param result the result to transform to_@throws TransformerException in case of transformation errors;protected void transform(Source source, Result result) throws TransformerException {_		this.transformerFactory.newTransformer().transform(source, result)__	};transforms,the,given,code,source,to,the,code,result,param,source,the,source,to,transform,from,param,result,the,result,to,transform,to,throws,transformer,exception,in,case,of,transformation,errors;protected,void,transform,source,source,result,result,throws,transformer,exception,this,transformer,factory,new,transformer,transform,source,result
AbstractXmlHttpMessageConverter -> protected void transform(Source source, Result result) throws TransformerException;1530563849;Transforms the given {@code Source} to the {@code Result}._@param source the source to transform from_@param result the result to transform to_@throws TransformerException in case of transformation errors;protected void transform(Source source, Result result) throws TransformerException {_		this.transformerFactory.newTransformer().transform(source, result)__	};transforms,the,given,code,source,to,the,code,result,param,source,the,source,to,transform,from,param,result,the,result,to,transform,to,throws,transformer,exception,in,case,of,transformation,errors;protected,void,transform,source,source,result,result,throws,transformer,exception,this,transformer,factory,new,transformer,transform,source,result
AbstractXmlHttpMessageConverter -> protected void transform(Source source, Result result) throws TransformerException;1530737169;Transforms the given {@code Source} to the {@code Result}._@param source the source to transform from_@param result the result to transform to_@throws TransformerException in case of transformation errors;protected void transform(Source source, Result result) throws TransformerException {_		this.transformerFactory.newTransformer().transform(source, result)__	};transforms,the,given,code,source,to,the,code,result,param,source,the,source,to,transform,from,param,result,the,result,to,transform,to,throws,transformer,exception,in,case,of,transformation,errors;protected,void,transform,source,source,result,result,throws,transformer,exception,this,transformer,factory,new,transformer,transform,source,result
AbstractXmlHttpMessageConverter -> protected abstract void writeToResult(T t, HttpHeaders headers, Result result) 			throws IOException_;1328020251;Abstract template method called from {@link #writeInternal(Object, HttpOutputMessage)}._@param t the object to write to the output message_@param headers the HTTP output headers_@param result the HTTP output body_@throws IOException in case of I/O errors_@throws HttpMessageConversionException in case of conversion errors;protected abstract void writeToResult(T t, HttpHeaders headers, Result result)_			throws IOException_;abstract,template,method,called,from,link,write,internal,object,http,output,message,param,t,the,object,to,write,to,the,output,message,param,headers,the,http,output,headers,param,result,the,http,output,body,throws,ioexception,in,case,of,i,o,errors,throws,http,message,conversion,exception,in,case,of,conversion,errors;protected,abstract,void,write,to,result,t,t,http,headers,headers,result,result,throws,ioexception
AbstractXmlHttpMessageConverter -> protected abstract void writeToResult(T t, HttpHeaders headers, Result result) 			throws IOException_;1530174524;Abstract template method called from {@link #writeInternal(Object, HttpOutputMessage)}._@param t the object to write to the output message_@param headers the HTTP output headers_@param result the HTTP output body_@throws IOException in case of I/O errors_@throws HttpMessageConversionException in case of conversion errors;protected abstract void writeToResult(T t, HttpHeaders headers, Result result)_			throws IOException_;abstract,template,method,called,from,link,write,internal,object,http,output,message,param,t,the,object,to,write,to,the,output,message,param,headers,the,http,output,headers,param,result,the,http,output,body,throws,ioexception,in,case,of,i,o,errors,throws,http,message,conversion,exception,in,case,of,conversion,errors;protected,abstract,void,write,to,result,t,t,http,headers,headers,result,result,throws,ioexception
AbstractXmlHttpMessageConverter -> protected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source) 			throws IOException_;1328020251;Abstract template method called from {@link #read(Class, HttpInputMessage)}._@param clazz the type of object to return_@param headers the HTTP input headers_@param source the HTTP input body_@return the converted object_@throws IOException in case of I/O errors_@throws org.springframework.http.converter.HttpMessageConversionException in case of conversion errors;protected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source)_			throws IOException_;abstract,template,method,called,from,link,read,class,http,input,message,param,clazz,the,type,of,object,to,return,param,headers,the,http,input,headers,param,source,the,http,input,body,return,the,converted,object,throws,ioexception,in,case,of,i,o,errors,throws,org,springframework,http,converter,http,message,conversion,exception,in,case,of,conversion,errors;protected,abstract,t,read,from,source,class,extends,t,clazz,http,headers,headers,source,source,throws,ioexception
AbstractXmlHttpMessageConverter -> protected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source) 			throws IOException_;1530174524;Abstract template method called from {@link #read(Class, HttpInputMessage)}._@param clazz the type of object to return_@param headers the HTTP input headers_@param source the HTTP input body_@return the converted object_@throws IOException in case of I/O errors_@throws org.springframework.http.converter.HttpMessageConversionException in case of conversion errors;protected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source)_			throws IOException_;abstract,template,method,called,from,link,read,class,http,input,message,param,clazz,the,type,of,object,to,return,param,headers,the,http,input,headers,param,source,the,http,input,body,return,the,converted,object,throws,ioexception,in,case,of,i,o,errors,throws,org,springframework,http,converter,http,message,conversion,exception,in,case,of,conversion,errors;protected,abstract,t,read,from,source,class,extends,t,clazz,http,headers,headers,source,source,throws,ioexception
AbstractXmlHttpMessageConverter -> protected AbstractXmlHttpMessageConverter();1328020251;Protected constructor that sets the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes}_to {@code text/xml} and {@code application/xml}, and {@code application/*-xml}.;protected AbstractXmlHttpMessageConverter() {_		super(MediaType.APPLICATION_XML, MediaType.TEXT_XML, new MediaType("application", "*+xml"))__	};protected,constructor,that,sets,the,link,set,supported,media,types,java,util,list,supported,media,types,to,code,text,xml,and,code,application,xml,and,code,application,xml;protected,abstract,xml,http,message,converter,super,media,type,media,type,new,media,type,application,xml
AbstractXmlHttpMessageConverter -> protected AbstractXmlHttpMessageConverter();1530174524;Protected constructor that sets the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes}_to {@code text/xml} and {@code application/xml}, and {@code application/*-xml}.;protected AbstractXmlHttpMessageConverter() {_		super(MediaType.APPLICATION_XML, MediaType.TEXT_XML, new MediaType("application", "*+xml"))__	};protected,constructor,that,sets,the,link,set,supported,media,types,java,util,list,supported,media,types,to,code,text,xml,and,code,application,xml,and,code,application,xml;protected,abstract,xml,http,message,converter,super,media,type,media,type,new,media,type,application,xml
AbstractXmlHttpMessageConverter -> protected AbstractXmlHttpMessageConverter();1530563849;Protected constructor that sets the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes}_to {@code text/xml} and {@code application/xml}, and {@code application/*-xml}.;protected AbstractXmlHttpMessageConverter() {_		super(MediaType.APPLICATION_XML, MediaType.TEXT_XML, new MediaType("application", "*+xml"))__	};protected,constructor,that,sets,the,link,set,supported,media,types,java,util,list,supported,media,types,to,code,text,xml,and,code,application,xml,and,code,application,xml;protected,abstract,xml,http,message,converter,super,media,type,media,type,new,media,type,application,xml
AbstractXmlHttpMessageConverter -> protected AbstractXmlHttpMessageConverter();1530737169;Protected constructor that sets the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes}_to {@code text/xml} and {@code application/xml}, and {@code application/*-xml}.;protected AbstractXmlHttpMessageConverter() {_		super(MediaType.APPLICATION_XML, MediaType.TEXT_XML, new MediaType("application", "*+xml"))__	};protected,constructor,that,sets,the,link,set,supported,media,types,java,util,list,supported,media,types,to,code,text,xml,and,code,application,xml,and,code,application,xml;protected,abstract,xml,http,message,converter,super,media,type,media,type,new,media,type,application,xml
