commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a processor function to customize Marshaller instances.  * @param processor the function to use  * @since 5.1.3  */ ;/**  * Configure a processor function to customize Marshaller instances.  * @param processor the function to use  * @since 5.1.3  */ public void setMarshallerProcessor(Function<Marshaller, Marshaller> processor) {     this.marshallerProcessor = this.marshallerProcessor.andThen(processor). }
true;public;0;3;/**  * Return the configured processor for customizing Marshaller instances.  * @since 5.1.3  */ ;/**  * Return the configured processor for customizing Marshaller instances.  * @since 5.1.3  */ public Function<Marshaller, Marshaller> getMarshallerProcessor() {     return this.marshallerProcessor. }
false;public;2;11;;@Override public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {     if (super.canEncode(elementType, mimeType)) {         Class<?> outputClass = elementType.toClass().         return (outputClass.isAnnotationPresent(XmlRootElement.class) || outputClass.isAnnotationPresent(XmlType.class)).     } else {         return false.     } }
false;protected;5;35;;@Override protected Flux<DataBuffer> encode(Object value, DataBufferFactory dataBufferFactory, ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {     if (!Hints.isLoggingSuppressed(hints)) {         LogFormatUtils.traceDebug(logger, traceOn -> {             String formatted = LogFormatUtils.formatValue(value, !traceOn).             return Hints.getLogPrefix(hints) + "Encoding [" + formatted + "]".         }).     }     boolean release = true.     DataBuffer buffer = dataBufferFactory.allocateBuffer(1024).     OutputStream outputStream = buffer.asOutputStream().     Class<?> clazz = ClassUtils.getUserClass(value).     try {         Marshaller marshaller = initMarshaller(clazz).         marshaller.marshal(value, outputStream).         release = false.         return Flux.just(buffer).     } catch (MarshalException ex) {         return Flux.error(new EncodingException("Could not marshal " + value.getClass() + " to XML", ex)).     } catch (JAXBException ex) {         return Flux.error(new CodecException("Invalid JAXB configuration", ex)).     } finally {         if (release) {             DataBufferUtils.release(buffer).         }     } }
false;private;1;6;;private Marshaller initMarshaller(Class<?> clazz) throws JAXBException {     Marshaller marshaller = this.jaxbContexts.createMarshaller(clazz).     marshaller.setProperty(Marshaller.JAXB_ENCODING, StandardCharsets.UTF_8.name()).     marshaller = this.marshallerProcessor.apply(marshaller).     return marshaller. }
