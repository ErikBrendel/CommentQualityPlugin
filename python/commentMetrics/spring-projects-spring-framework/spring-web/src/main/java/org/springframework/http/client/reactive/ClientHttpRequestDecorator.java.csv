commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ClientHttpRequest getDelegate() {     return this.delegate. }
false;public;0;4;;// ClientHttpRequest delegation methods... @Override public HttpMethod getMethod() {     return this.delegate.getMethod(). }
false;public;0;4;;@Override public URI getURI() {     return this.delegate.getURI(). }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return this.delegate.getHeaders(). }
false;public;0;4;;@Override public MultiValueMap<String, HttpCookie> getCookies() {     return this.delegate.getCookies(). }
false;public;0;4;;@Override public DataBufferFactory bufferFactory() {     return this.delegate.bufferFactory(). }
false;public;1;4;;@Override public void beforeCommit(Supplier<? extends Mono<Void>> action) {     this.delegate.beforeCommit(action). }
false;public;0;4;;@Override public boolean isCommitted() {     return this.delegate.isCommitted(). }
false;public;1;4;;@Override public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {     return this.delegate.writeWith(body). }
false;public;1;4;;@Override public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {     return this.delegate.writeAndFlushWith(body). }
false;public;0;4;;@Override public Mono<Void> setComplete() {     return this.delegate.setComplete(). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + " [delegate=" + getDelegate() + "]". }
