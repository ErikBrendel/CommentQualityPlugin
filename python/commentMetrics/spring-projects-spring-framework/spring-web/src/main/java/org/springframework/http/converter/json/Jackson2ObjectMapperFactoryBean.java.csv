commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link ObjectMapper} instance to use. If not set, the {@link ObjectMapper}  * will be created using its default constructor.  */ ;/**  * Set the {@link ObjectMapper} instance to use. If not set, the {@link ObjectMapper}  * will be created using its default constructor.  */ public void setObjectMapper(ObjectMapper objectMapper) {     this.objectMapper = objectMapper. }
true;public;1;3;/**  * If set to true and no custom {@link ObjectMapper} has been set, a {@link XmlMapper}  * will be created using its default constructor.  * @since 4.1  */ ;/**  * If set to true and no custom {@link ObjectMapper} has been set, a {@link XmlMapper}  * will be created using its default constructor.  * @since 4.1  */ public void setCreateXmlMapper(boolean createXmlMapper) {     this.builder.createXmlMapper(createXmlMapper). }
true;public;1;3;/**  * Define the {@link JsonFactory} to be used to create the {@link ObjectMapper}  * instance.  * @since 5.0  */ ;/**  * Define the {@link JsonFactory} to be used to create the {@link ObjectMapper}  * instance.  * @since 5.0  */ public void setFactory(JsonFactory factory) {     this.builder.factory(factory). }
true;public;1;3;/**  * Define the format for date/time with the given {@link DateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #setSimpleDateFormat(String)  */ ;/**  * Define the format for date/time with the given {@link DateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #setSimpleDateFormat(String)  */ public void setDateFormat(DateFormat dateFormat) {     this.builder.dateFormat(dateFormat). }
true;public;1;3;/**  * Define the date/time format with a {@link SimpleDateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #setDateFormat(DateFormat)  */ ;/**  * Define the date/time format with a {@link SimpleDateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #setDateFormat(DateFormat)  */ public void setSimpleDateFormat(String format) {     this.builder.simpleDateFormat(format). }
true;public;1;3;/**  * Override the default {@link Locale} to use for formatting.  * Default value used is {@link Locale#getDefault()}.  * @since 4.1.5  */ ;/**  * Override the default {@link Locale} to use for formatting.  * Default value used is {@link Locale#getDefault()}.  * @since 4.1.5  */ public void setLocale(Locale locale) {     this.builder.locale(locale). }
true;public;1;3;/**  * Override the default {@link TimeZone} to use for formatting.  * Default value used is UTC (NOT local timezone).  * @since 4.1.5  */ ;/**  * Override the default {@link TimeZone} to use for formatting.  * Default value used is UTC (NOT local timezone).  * @since 4.1.5  */ public void setTimeZone(TimeZone timeZone) {     this.builder.timeZone(timeZone). }
true;public;1;3;/**  * Set an {@link AnnotationIntrospector} for both serialization and deserialization.  */ ;/**  * Set an {@link AnnotationIntrospector} for both serialization and deserialization.  */ public void setAnnotationIntrospector(AnnotationIntrospector annotationIntrospector) {     this.builder.annotationIntrospector(annotationIntrospector). }
true;public;1;3;/**  * Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to  * configure the {@link ObjectMapper} with.  * @since 4.0.2  */ ;/**  * Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to  * configure the {@link ObjectMapper} with.  * @since 4.0.2  */ public void setPropertyNamingStrategy(PropertyNamingStrategy propertyNamingStrategy) {     this.builder.propertyNamingStrategy(propertyNamingStrategy). }
true;public;1;3;/**  * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing.  * @since 4.2.2  */ ;/**  * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing.  * @since 4.2.2  */ public void setDefaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {     this.builder.defaultTyping(typeResolverBuilder). }
true;public;1;3;/**  * Set a custom inclusion strategy for serialization.  * @see com.fasterxml.jackson.annotation.JsonInclude.Include  */ ;/**  * Set a custom inclusion strategy for serialization.  * @see com.fasterxml.jackson.annotation.JsonInclude.Include  */ public void setSerializationInclusion(JsonInclude.Include serializationInclusion) {     this.builder.serializationInclusion(serializationInclusion). }
true;public;1;3;/**  * Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO.  * @since 4.2  * @see Jackson2ObjectMapperBuilder#filters(FilterProvider)  */ ;/**  * Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO.  * @since 4.2  * @see Jackson2ObjectMapperBuilder#filters(FilterProvider)  */ public void setFilters(FilterProvider filters) {     this.builder.filters(filters). }
true;public;1;3;/**  * Add mix-in annotations to use for augmenting specified class or interface.  * @param mixIns a Map of entries with target classes (or interface) whose annotations  * to effectively override as key and mix-in classes (or interface) whose  * annotations are to be "added" to target's annotations as value.  * @since 4.1.2  * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class)  */ ;/**  * Add mix-in annotations to use for augmenting specified class or interface.  * @param mixIns a Map of entries with target classes (or interface) whose annotations  * to effectively override as key and mix-in classes (or interface) whose  * annotations are to be "added" to target's annotations as value.  * @since 4.1.2  * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class)  */ public void setMixIns(Map<Class<?>, Class<?>> mixIns) {     this.builder.mixIns(mixIns). }
true;public;1;3;/**  * Configure custom serializers. Each serializer is registered for the type  * returned by {@link JsonSerializer#handledType()}, which must not be {@code null}.  * @see #setSerializersByType(Map)  */ ;/**  * Configure custom serializers. Each serializer is registered for the type  * returned by {@link JsonSerializer#handledType()}, which must not be {@code null}.  * @see #setSerializersByType(Map)  */ public void setSerializers(JsonSerializer<?>... serializers) {     this.builder.serializers(serializers). }
true;public;1;3;/**  * Configure custom serializers for the given types.  * @see #setSerializers(JsonSerializer...)  */ ;/**  * Configure custom serializers for the given types.  * @see #setSerializers(JsonSerializer...)  */ public void setSerializersByType(Map<Class<?>, JsonSerializer<?>> serializers) {     this.builder.serializersByType(serializers). }
true;public;1;3;/**  * Configure custom deserializers. Each deserializer is registered for the type  * returned by {@link JsonDeserializer#handledType()}, which must not be {@code null}.  * @since 4.3  * @see #setDeserializersByType(Map)  */ ;/**  * Configure custom deserializers. Each deserializer is registered for the type  * returned by {@link JsonDeserializer#handledType()}, which must not be {@code null}.  * @since 4.3  * @see #setDeserializersByType(Map)  */ public void setDeserializers(JsonDeserializer<?>... deserializers) {     this.builder.deserializers(deserializers). }
true;public;1;3;/**  * Configure custom deserializers for the given types.  */ ;/**  * Configure custom deserializers for the given types.  */ public void setDeserializersByType(Map<Class<?>, JsonDeserializer<?>> deserializers) {     this.builder.deserializersByType(deserializers). }
true;public;1;3;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_FIELDS} option.  */ ;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_FIELDS} option.  */ public void setAutoDetectFields(boolean autoDetectFields) {     this.builder.autoDetectFields(autoDetectFields). }
true;public;1;3;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_SETTERS}/  * {@link MapperFeature#AUTO_DETECT_GETTERS}/{@link MapperFeature#AUTO_DETECT_IS_GETTERS}  * options.  */ ;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_SETTERS}/  * {@link MapperFeature#AUTO_DETECT_GETTERS}/{@link MapperFeature#AUTO_DETECT_IS_GETTERS}  * options.  */ public void setAutoDetectGettersSetters(boolean autoDetectGettersSetters) {     this.builder.autoDetectGettersSetters(autoDetectGettersSetters). }
true;public;1;3;/**  * Shortcut for {@link MapperFeature#DEFAULT_VIEW_INCLUSION} option.  * @since 4.1  */ ;/**  * Shortcut for {@link MapperFeature#DEFAULT_VIEW_INCLUSION} option.  * @since 4.1  */ public void setDefaultViewInclusion(boolean defaultViewInclusion) {     this.builder.defaultViewInclusion(defaultViewInclusion). }
true;public;1;3;/**  * Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option.  * @since 4.1.1  */ ;/**  * Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option.  * @since 4.1.1  */ public void setFailOnUnknownProperties(boolean failOnUnknownProperties) {     this.builder.failOnUnknownProperties(failOnUnknownProperties). }
true;public;1;3;/**  * Shortcut for {@link SerializationFeature#FAIL_ON_EMPTY_BEANS} option.  */ ;/**  * Shortcut for {@link SerializationFeature#FAIL_ON_EMPTY_BEANS} option.  */ public void setFailOnEmptyBeans(boolean failOnEmptyBeans) {     this.builder.failOnEmptyBeans(failOnEmptyBeans). }
true;public;1;3;/**  * Shortcut for {@link SerializationFeature#INDENT_OUTPUT} option.  */ ;/**  * Shortcut for {@link SerializationFeature#INDENT_OUTPUT} option.  */ public void setIndentOutput(boolean indentOutput) {     this.builder.indentOutput(indentOutput). }
true;public;1;3;/**  * Define if a wrapper will be used for indexed (List, array) properties or not by  * default (only applies to {@link XmlMapper}).  * @since 4.3  */ ;/**  * Define if a wrapper will be used for indexed (List, array) properties or not by  * default (only applies to {@link XmlMapper}).  * @since 4.3  */ public void setDefaultUseWrapper(boolean defaultUseWrapper) {     this.builder.defaultUseWrapper(defaultUseWrapper). }
true;public;1;3;/**  * Specify features to enable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ ;/**  * Specify features to enable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ public void setFeaturesToEnable(Object... featuresToEnable) {     this.builder.featuresToEnable(featuresToEnable). }
true;public;1;3;/**  * Specify features to disable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ ;/**  * Specify features to disable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ public void setFeaturesToDisable(Object... featuresToDisable) {     this.builder.featuresToDisable(featuresToDisable). }
true;public;1;3;/**  * Set a complete list of modules to be registered with the {@link ObjectMapper}.  * <p>Note: If this is set, no finding of modules is going to happen - not by  * Jackson, and not by Spring either (see {@link #setFindModulesViaServiceLoader}).  * As a consequence, specifying an empty list here will suppress any kind of  * module detection.  * <p>Specify either this or {@link #setModulesToInstall}, not both.  * @since 4.0  * @see com.fasterxml.jackson.databind.Module  */ ;/**  * Set a complete list of modules to be registered with the {@link ObjectMapper}.  * <p>Note: If this is set, no finding of modules is going to happen - not by  * Jackson, and not by Spring either (see {@link #setFindModulesViaServiceLoader}).  * As a consequence, specifying an empty list here will suppress any kind of  * module detection.  * <p>Specify either this or {@link #setModulesToInstall}, not both.  * @since 4.0  * @see com.fasterxml.jackson.databind.Module  */ public void setModules(List<Module> modules) {     this.builder.modules(modules). }
true;public;1;4;/**  * Specify one or more modules by class (or class name in XML)  * to be registered with the {@link ObjectMapper}.  * <p>Modules specified here will be registered after  * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's  * finding of modules (see {@link #setFindModulesViaServiceLoader}),  * allowing to eventually override their configuration.  * <p>Specify either this or {@link #setModules}, not both.  * @since 4.0.1  * @see com.fasterxml.jackson.databind.Module  */ ;/**  * Specify one or more modules by class (or class name in XML)  * to be registered with the {@link ObjectMapper}.  * <p>Modules specified here will be registered after  * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's  * finding of modules (see {@link #setFindModulesViaServiceLoader}),  * allowing to eventually override their configuration.  * <p>Specify either this or {@link #setModules}, not both.  * @since 4.0.1  * @see com.fasterxml.jackson.databind.Module  */ @SuppressWarnings("unchecked") public void setModulesToInstall(Class<? extends Module>... modules) {     this.builder.modulesToInstall(modules). }
true;public;1;3;/**  * Set whether to let Jackson find available modules via the JDK ServiceLoader,  * based on META-INF metadata in the classpath. Requires Jackson 2.2 or higher.  * <p>If this mode is not set, Spring's Jackson2ObjectMapperFactoryBean itself  * will try to find the JSR-310 and Joda-Time support modules on the classpath -  * provided that Java 8 and Joda-Time themselves are available, respectively.  * @since 4.0.1  * @see com.fasterxml.jackson.databind.ObjectMapper#findModules()  */ ;/**  * Set whether to let Jackson find available modules via the JDK ServiceLoader,  * based on META-INF metadata in the classpath. Requires Jackson 2.2 or higher.  * <p>If this mode is not set, Spring's Jackson2ObjectMapperFactoryBean itself  * will try to find the JSR-310 and Joda-Time support modules on the classpath -  * provided that Java 8 and Joda-Time themselves are available, respectively.  * @since 4.0.1  * @see com.fasterxml.jackson.databind.ObjectMapper#findModules()  */ public void setFindModulesViaServiceLoader(boolean findModules) {     this.builder.findModulesViaServiceLoader(findModules). }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader beanClassLoader) {     this.builder.moduleClassLoader(beanClassLoader). }
true;public;1;3;/**  * Customize the construction of Jackson handlers  * ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer},  * {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see Jackson2ObjectMapperFactoryBean#setApplicationContext(ApplicationContext)  */ ;/**  * Customize the construction of Jackson handlers  * ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer},  * {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see Jackson2ObjectMapperFactoryBean#setApplicationContext(ApplicationContext)  */ public void setHandlerInstantiator(HandlerInstantiator handlerInstantiator) {     this.builder.handlerInstantiator(handlerInstantiator). }
true;public;1;4;/**  * Set the builder {@link ApplicationContext} in order to autowire Jackson handlers  * ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer},  * {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see Jackson2ObjectMapperBuilder#applicationContext(ApplicationContext)  * @see SpringHandlerInstantiator  */ ;/**  * Set the builder {@link ApplicationContext} in order to autowire Jackson handlers  * ({@link JsonSerializer}, {@link JsonDeserializer}, {@link KeyDeserializer},  * {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see Jackson2ObjectMapperBuilder#applicationContext(ApplicationContext)  * @see SpringHandlerInstantiator  */ @Override public void setApplicationContext(ApplicationContext applicationContext) {     this.builder.applicationContext(applicationContext). }
false;public;0;9;;@Override public void afterPropertiesSet() {     if (this.objectMapper != null) {         this.builder.configure(this.objectMapper).     } else {         this.objectMapper = this.builder.build().     } }
true;public;0;5;/**  * Return the singleton ObjectMapper.  */ ;/**  * Return the singleton ObjectMapper.  */ @Override @Nullable public ObjectMapper getObject() {     return this.objectMapper. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return (this.objectMapper != null ? this.objectMapper.getClass() : null). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
