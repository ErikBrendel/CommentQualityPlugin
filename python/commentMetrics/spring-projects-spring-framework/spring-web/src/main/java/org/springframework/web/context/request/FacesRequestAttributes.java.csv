commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;0;3;/**  * Return the JSF FacesContext that this adapter operates on.  */ ;/**  * Return the JSF FacesContext that this adapter operates on.  */ protected final FacesContext getFacesContext() {     return this.facesContext. }
true;protected,final;0;3;/**  * Return the JSF ExternalContext that this adapter operates on.  * @see javax.faces.context.FacesContext#getExternalContext()  */ ;/**  * Return the JSF ExternalContext that this adapter operates on.  * @see javax.faces.context.FacesContext#getExternalContext()  */ protected final ExternalContext getExternalContext() {     return getFacesContext().getExternalContext(). }
true;protected;1;8;/**  * Return the JSF attribute Map for the specified scope.  * @param scope constant indicating request or session scope  * @return the Map representation of the attributes in the specified scope  * @see #SCOPE_REQUEST  * @see #SCOPE_SESSION  */ ;/**  * Return the JSF attribute Map for the specified scope.  * @param scope constant indicating request or session scope  * @return the Map representation of the attributes in the specified scope  * @see #SCOPE_REQUEST  * @see #SCOPE_SESSION  */ protected Map<String, Object> getAttributeMap(int scope) {     if (scope == SCOPE_REQUEST) {         return getExternalContext().getRequestMap().     } else {         return getExternalContext().getSessionMap().     } }
false;public;2;4;;@Override public Object getAttribute(String name, int scope) {     return getAttributeMap(scope).get(name). }
false;public;3;4;;@Override public void setAttribute(String name, Object value, int scope) {     getAttributeMap(scope).put(name, value). }
false;public;2;4;;@Override public void removeAttribute(String name, int scope) {     getAttributeMap(scope).remove(name). }
false;public;1;4;;@Override public String[] getAttributeNames(int scope) {     return StringUtils.toStringArray(getAttributeMap(scope).keySet()). }
false;public;3;7;;@Override public void registerDestructionCallback(String name, Runnable callback, int scope) {     if (logger.isWarnEnabled()) {         logger.warn("Could not register destruction callback [" + callback + "] for attribute '" + name + "' because FacesRequestAttributes does not support such callbacks").     } }
false;public;1;57;;@Override public Object resolveReference(String key) {     if (REFERENCE_REQUEST.equals(key)) {         return getExternalContext().getRequest().     } else if (REFERENCE_SESSION.equals(key)) {         return getExternalContext().getSession(true).     } else if ("application".equals(key)) {         return getExternalContext().getContext().     } else if ("requestScope".equals(key)) {         return getExternalContext().getRequestMap().     } else if ("sessionScope".equals(key)) {         return getExternalContext().getSessionMap().     } else if ("applicationScope".equals(key)) {         return getExternalContext().getApplicationMap().     } else if ("facesContext".equals(key)) {         return getFacesContext().     } else if ("cookie".equals(key)) {         return getExternalContext().getRequestCookieMap().     } else if ("header".equals(key)) {         return getExternalContext().getRequestHeaderMap().     } else if ("headerValues".equals(key)) {         return getExternalContext().getRequestHeaderValuesMap().     } else if ("param".equals(key)) {         return getExternalContext().getRequestParameterMap().     } else if ("paramValues".equals(key)) {         return getExternalContext().getRequestParameterValuesMap().     } else if ("initParam".equals(key)) {         return getExternalContext().getInitParameterMap().     } else if ("view".equals(key)) {         return getFacesContext().getViewRoot().     } else if ("viewScope".equals(key)) {         return getFacesContext().getViewRoot().getViewMap().     } else if ("flash".equals(key)) {         return getExternalContext().getFlash().     } else if ("resource".equals(key)) {         return getFacesContext().getApplication().getResourceHandler().     } else {         return null.     } }
false;public;0;12;;@Override public String getSessionId() {     Object session = getExternalContext().getSession(true).     try {         // HttpSession has a getId() method.         Method getIdMethod = session.getClass().getMethod("getId").         return String.valueOf(ReflectionUtils.invokeMethod(getIdMethod, session)).     } catch (NoSuchMethodException ex) {         throw new IllegalStateException("Session object [" + session + "] does not have a getId() method").     } }
false;public;0;11;;@Override public Object getSessionMutex() {     // Enforce presence of a session first to allow listeners to create the mutex attribute     ExternalContext externalContext = getExternalContext().     Object session = externalContext.getSession(true).     Object mutex = externalContext.getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE).     if (mutex == null) {         mutex = (session != null ? session : externalContext).     }     return mutex. }
