commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;7;/**  * Returns the {@link ServletContext} to be injected or {@code null}. This method  * can be overridden by subclasses when a context is obtained after the post-processor  * has been registered.  */ ;/**  * Returns the {@link ServletContext} to be injected or {@code null}. This method  * can be overridden by subclasses when a context is obtained after the post-processor  * has been registered.  */ @Nullable protected ServletContext getServletContext() {     if (this.servletContext == null && getServletConfig() != null) {         return getServletConfig().getServletContext().     }     return this.servletContext. }
true;protected;0;4;/**  * Returns the {@link ServletConfig} to be injected or {@code null}. This method  * can be overridden by subclasses when a context is obtained after the post-processor  * has been registered.  */ ;/**  * Returns the {@link ServletConfig} to be injected or {@code null}. This method  * can be overridden by subclasses when a context is obtained after the post-processor  * has been registered.  */ @Nullable protected ServletConfig getServletConfig() {     return this.servletConfig. }
false;public;2;10;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (getServletContext() != null && bean instanceof ServletContextAware) {         ((ServletContextAware) bean).setServletContext(getServletContext()).     }     if (getServletConfig() != null && bean instanceof ServletConfigAware) {         ((ServletConfigAware) bean).setServletConfig(getServletConfig()).     }     return bean. }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     return bean. }
