commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@code HttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) synchronous execution}.  * @since 4.3.10  * @see #setHttpClient(HttpClient)  */ ;/**  * Set the {@code HttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) synchronous execution}.  * @since 4.3.10  * @see #setHttpClient(HttpClient)  */ public void setAsyncClient(HttpAsyncClient asyncClient) {     Assert.notNull(asyncClient, "HttpAsyncClient must not be null").     this.asyncClient = asyncClient. }
true;public;0;3;/**  * Return the {@code HttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) synchronous execution}.  * @since 4.3.10  * @see #getHttpClient()  */ ;/**  * Return the {@code HttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) synchronous execution}.  * @since 4.3.10  * @see #getHttpClient()  */ public HttpAsyncClient getAsyncClient() {     return this.asyncClient. }
true;public;1;4;/**  * Set the {@code CloseableHttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.  * @deprecated as of 4.3.10, in favor of {@link #setAsyncClient(HttpAsyncClient)}  */ ;/**  * Set the {@code CloseableHttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.  * @deprecated as of 4.3.10, in favor of {@link #setAsyncClient(HttpAsyncClient)}  */ @Deprecated public void setHttpAsyncClient(CloseableHttpAsyncClient asyncClient) {     this.asyncClient = asyncClient. }
true;public;0;6;/**  * Return the {@code CloseableHttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.  * @deprecated as of 4.3.10, in favor of {@link #getAsyncClient()}  */ ;/**  * Return the {@code CloseableHttpAsyncClient} used for  * {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.  * @deprecated as of 4.3.10, in favor of {@link #getAsyncClient()}  */ @Deprecated public CloseableHttpAsyncClient getHttpAsyncClient() {     Assert.state(this.asyncClient instanceof CloseableHttpAsyncClient, "No CloseableHttpAsyncClient - use getAsyncClient() instead").     return (CloseableHttpAsyncClient) this.asyncClient. }
false;public;0;4;;@Override public void afterPropertiesSet() {     startAsyncClient(). }
false;private;0;10;;private HttpAsyncClient startAsyncClient() {     HttpAsyncClient client = getAsyncClient().     if (client instanceof CloseableHttpAsyncClient) {         CloseableHttpAsyncClient closeableAsyncClient = (CloseableHttpAsyncClient) client.         if (!closeableAsyncClient.isRunning()) {             closeableAsyncClient.start().         }     }     return client. }
false;public;2;28;;@Override public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {     HttpAsyncClient client = startAsyncClient().     HttpUriRequest httpRequest = createHttpUriRequest(httpMethod, uri).     postProcessHttpRequest(httpRequest).     HttpContext context = createHttpContext(httpMethod, uri).     if (context == null) {         context = HttpClientContext.create().     }     // Request configuration not set in the context     if (context.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {         // Use request configuration given by the user, when available         RequestConfig config = null.         if (httpRequest instanceof Configurable) {             config = ((Configurable) httpRequest).getConfig().         }         if (config == null) {             config = createRequestConfig(client).         }         if (config != null) {             context.setAttribute(HttpClientContext.REQUEST_CONFIG, config).         }     }     return new HttpComponentsAsyncClientHttpRequest(client, httpRequest, context). }
false;public;0;12;;@Override public void destroy() throws Exception {     try {         super.destroy().     } finally {         HttpAsyncClient asyncClient = getAsyncClient().         if (asyncClient instanceof Closeable) {             ((Closeable) asyncClient).close().         }     } }
