# id;timestamp;commentText;codeText;commentWords;codeWords
PathPatternParser -> public PathPatternParser(char separator);1495035625;Create a path pattern parser that will use the supplied separator when_parsing patterns._@param separator the separator expected to divide pattern elements;public PathPatternParser(char separator) {_		this.separator = separator__	};create,a,path,pattern,parser,that,will,use,the,supplied,separator,when,parsing,patterns,param,separator,the,separator,expected,to,divide,pattern,elements;public,path,pattern,parser,char,separator,this,separator,separator
PathPatternParser -> public PathPatternParser(char separator);1497277038;Create a path pattern parser that will use the supplied separator when_parsing patterns._@param separator the separator expected to divide pattern elements;public PathPatternParser(char separator) {_		this.separator = separator__	};create,a,path,pattern,parser,that,will,use,the,supplied,separator,when,parsing,patterns,param,separator,the,separator,expected,to,divide,pattern,elements;public,path,pattern,parser,char,separator,this,separator,separator
PathPatternParser -> public PathPatternParser(char separator);1501619481;Create a path pattern parser that will use the supplied separator when_parsing patterns._@param separator the separator expected to divide pattern elements;public PathPatternParser(char separator) {_		this.separator = separator__	};create,a,path,pattern,parser,that,will,use,the,supplied,separator,when,parsing,patterns,param,separator,the,separator,expected,to,divide,pattern,elements;public,path,pattern,parser,char,separator,this,separator,separator
PathPatternParser -> public PathPatternParser();1495035625;Create a path pattern parser that will use the default separator '/'_when parsing patterns._@see #DEFAULT_SEPARATOR;public PathPatternParser() {_	};create,a,path,pattern,parser,that,will,use,the,default,separator,when,parsing,patterns,see;public,path,pattern,parser
PathPatternParser -> public PathPatternParser();1497277038;Create a path pattern parser that will use the default separator '/'_when parsing patterns._@see #DEFAULT_SEPARATOR;public PathPatternParser() {_	};create,a,path,pattern,parser,that,will,use,the,default,separator,when,parsing,patterns,see;public,path,pattern,parser
PathPatternParser -> public PathPatternParser();1501619481;Create a path pattern parser that will use the default separator '/'_when parsing patterns._@see #DEFAULT_SEPARATOR;public PathPatternParser() {_	};create,a,path,pattern,parser,that,will,use,the,default,separator,when,parsing,patterns,see;public,path,pattern,parser
PathPatternParser -> public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash);1495035625;Control behavior of the path patterns produced by this parser: if {@code true}_then PathPatterns without a trailing slash will match paths with or without_a trailing slash._<p>The default is {@code true} but here this flag can be set to {@code false}.;public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash) {_		this.matchOptionalTrailingSlash = matchOptionalTrailingSlash__	};control,behavior,of,the,path,patterns,produced,by,this,parser,if,code,true,then,path,patterns,without,a,trailing,slash,will,match,paths,with,or,without,a,trailing,slash,p,the,default,is,code,true,but,here,this,flag,can,be,set,to,code,false;public,void,set,match,optional,trailing,slash,boolean,match,optional,trailing,slash,this,match,optional,trailing,slash,match,optional,trailing,slash
PathPatternParser -> public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash);1497277038;Control behavior of the path patterns produced by this parser: if {@code true}_then PathPatterns without a trailing slash will match paths with or without_a trailing slash._<p>The default is {@code true} but here this flag can be set to {@code false}.;public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash) {_		this.matchOptionalTrailingSlash = matchOptionalTrailingSlash__	};control,behavior,of,the,path,patterns,produced,by,this,parser,if,code,true,then,path,patterns,without,a,trailing,slash,will,match,paths,with,or,without,a,trailing,slash,p,the,default,is,code,true,but,here,this,flag,can,be,set,to,code,false;public,void,set,match,optional,trailing,slash,boolean,match,optional,trailing,slash,this,match,optional,trailing,slash,match,optional,trailing,slash
PathPatternParser -> public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash);1501619481;Whether a {@link PathPattern} produced by this parser should should_automatically match request paths with a trailing slash.__<p>If set to {@code true} a {@code PathPattern} without a trailing slash_will also match request paths with a trailing slash. If set to_{@code false} a {@code PathPattern} will only match request paths with_a trailing slash.__<p>The default is {@code true}.;public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash) {_		this.matchOptionalTrailingSlash = matchOptionalTrailingSlash__	};whether,a,link,path,pattern,produced,by,this,parser,should,should,automatically,match,request,paths,with,a,trailing,slash,p,if,set,to,code,true,a,code,path,pattern,without,a,trailing,slash,will,also,match,request,paths,with,a,trailing,slash,if,set,to,code,false,a,code,path,pattern,will,only,match,request,paths,with,a,trailing,slash,p,the,default,is,code,true;public,void,set,match,optional,trailing,slash,boolean,match,optional,trailing,slash,this,match,optional,trailing,slash,match,optional,trailing,slash
PathPatternParser -> public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash);1501620738;Whether a {@link PathPattern} produced by this parser should should_automatically match request paths with a trailing slash.__<p>If set to {@code true} a {@code PathPattern} without a trailing slash_will also match request paths with a trailing slash. If set to_{@code false} a {@code PathPattern} will only match request paths with_a trailing slash.__<p>The default is {@code true}.;public void setMatchOptionalTrailingSlash(boolean matchOptionalTrailingSlash) {_		this.matchOptionalTrailingSlash = matchOptionalTrailingSlash__	};whether,a,link,path,pattern,produced,by,this,parser,should,should,automatically,match,request,paths,with,a,trailing,slash,p,if,set,to,code,true,a,code,path,pattern,without,a,trailing,slash,will,also,match,request,paths,with,a,trailing,slash,if,set,to,code,false,a,code,path,pattern,will,only,match,request,paths,with,a,trailing,slash,p,the,default,is,code,true;public,void,set,match,optional,trailing,slash,boolean,match,optional,trailing,slash,this,match,optional,trailing,slash,match,optional,trailing,slash
PathPatternParser -> public PathPattern parse(String pathPattern) throws PatternParseException;1495035625;Process the path pattern data, a character at a time, breaking it into_path elements around separator boundaries and verifying the structure at each_stage. Produces a PathPattern object that can be used for fast matching_against paths. Each invocation of this method delegates to a new instance of_the {@link InternalPathPatternParser} because that class is not thread-safe._@param pathPattern the input path pattern, e.g. /foo/{bar}_@return a PathPattern for quickly matching paths against the specified path pattern_@throws PatternParseException in case of parse errors;public PathPattern parse(String pathPattern) throws PatternParseException {_		InternalPathPatternParser parserDelegate =_				new InternalPathPatternParser(this.separator, this.caseSensitive, this.matchOptionalTrailingSlash)__		return parserDelegate.parse(pathPattern)__	};process,the,path,pattern,data,a,character,at,a,time,breaking,it,into,path,elements,around,separator,boundaries,and,verifying,the,structure,at,each,stage,produces,a,path,pattern,object,that,can,be,used,for,fast,matching,against,paths,each,invocation,of,this,method,delegates,to,a,new,instance,of,the,link,internal,path,pattern,parser,because,that,class,is,not,thread,safe,param,path,pattern,the,input,path,pattern,e,g,foo,bar,return,a,path,pattern,for,quickly,matching,paths,against,the,specified,path,pattern,throws,pattern,parse,exception,in,case,of,parse,errors;public,path,pattern,parse,string,path,pattern,throws,pattern,parse,exception,internal,path,pattern,parser,parser,delegate,new,internal,path,pattern,parser,this,separator,this,case,sensitive,this,match,optional,trailing,slash,return,parser,delegate,parse,path,pattern
PathPatternParser -> public PathPattern parse(String pathPattern) throws PatternParseException;1497277038;Process the path pattern data, a character at a time, breaking it into_path elements around separator boundaries and verifying the structure at each_stage. Produces a PathPattern object that can be used for fast matching_against paths. Each invocation of this method delegates to a new instance of_the {@link InternalPathPatternParser} because that class is not thread-safe._@param pathPattern the input path pattern, e.g. /foo/{bar}_@return a PathPattern for quickly matching paths against the specified path pattern_@throws PatternParseException in case of parse errors;public PathPattern parse(String pathPattern) throws PatternParseException {_		InternalPathPatternParser parserDelegate =_				new InternalPathPatternParser(this.separator, this.caseSensitive, this.matchOptionalTrailingSlash)__		return parserDelegate.parse(pathPattern)__	};process,the,path,pattern,data,a,character,at,a,time,breaking,it,into,path,elements,around,separator,boundaries,and,verifying,the,structure,at,each,stage,produces,a,path,pattern,object,that,can,be,used,for,fast,matching,against,paths,each,invocation,of,this,method,delegates,to,a,new,instance,of,the,link,internal,path,pattern,parser,because,that,class,is,not,thread,safe,param,path,pattern,the,input,path,pattern,e,g,foo,bar,return,a,path,pattern,for,quickly,matching,paths,against,the,specified,path,pattern,throws,pattern,parse,exception,in,case,of,parse,errors;public,path,pattern,parse,string,path,pattern,throws,pattern,parse,exception,internal,path,pattern,parser,parser,delegate,new,internal,path,pattern,parser,this,separator,this,case,sensitive,this,match,optional,trailing,slash,return,parser,delegate,parse,path,pattern
PathPatternParser -> public PathPattern parse(String pathPattern) throws PatternParseException;1501619481;Process the path pattern data, a character at a time, breaking it into_path elements around separator boundaries and verifying the structure at each_stage. Produces a PathPattern object that can be used for fast matching_against paths. Each invocation of this method delegates to a new instance of_the {@link InternalPathPatternParser} because that class is not thread-safe._@param pathPattern the input path pattern, e.g. /foo/{bar}_@return a PathPattern for quickly matching paths against request paths_@throws PatternParseException in case of parse errors;public PathPattern parse(String pathPattern) throws PatternParseException {_		return createDelegate().parse(pathPattern)__	};process,the,path,pattern,data,a,character,at,a,time,breaking,it,into,path,elements,around,separator,boundaries,and,verifying,the,structure,at,each,stage,produces,a,path,pattern,object,that,can,be,used,for,fast,matching,against,paths,each,invocation,of,this,method,delegates,to,a,new,instance,of,the,link,internal,path,pattern,parser,because,that,class,is,not,thread,safe,param,path,pattern,the,input,path,pattern,e,g,foo,bar,return,a,path,pattern,for,quickly,matching,paths,against,request,paths,throws,pattern,parse,exception,in,case,of,parse,errors;public,path,pattern,parse,string,path,pattern,throws,pattern,parse,exception,return,create,delegate,parse,path,pattern
PathPatternParser -> public PathPattern parse(String pathPattern) throws PatternParseException;1501620738;Process the path pattern data, a character at a time, breaking it into_path elements around separator boundaries and verifying the structure at each_stage. Produces a PathPattern object that can be used for fast matching_against paths. Each invocation of this method delegates to a new instance of_the {@link InternalPathPatternParser} because that class is not thread-safe._@param pathPattern the input path pattern, e.g. /foo/{bar}_@return a PathPattern for quickly matching paths against request paths_@throws PatternParseException in case of parse errors;public PathPattern parse(String pathPattern) throws PatternParseException {_		return new InternalPathPatternParser(this).parse(pathPattern)__	};process,the,path,pattern,data,a,character,at,a,time,breaking,it,into,path,elements,around,separator,boundaries,and,verifying,the,structure,at,each,stage,produces,a,path,pattern,object,that,can,be,used,for,fast,matching,against,paths,each,invocation,of,this,method,delegates,to,a,new,instance,of,the,link,internal,path,pattern,parser,because,that,class,is,not,thread,safe,param,path,pattern,the,input,path,pattern,e,g,foo,bar,return,a,path,pattern,for,quickly,matching,paths,against,request,paths,throws,pattern,parse,exception,in,case,of,parse,errors;public,path,pattern,parse,string,path,pattern,throws,pattern,parse,exception,return,new,internal,path,pattern,parser,this,parse,path,pattern
PathPatternParser -> public PathPattern parse(String pathPattern) throws PatternParseException;1501676476;Process the path pattern content, a character at a time, breaking it into_path elements around separator boundaries and verifying the structure at each_stage. Produces a PathPattern object that can be used for fast matching_against paths. Each invocation of this method delegates to a new instance of_the {@link InternalPathPatternParser} because that class is not thread-safe._@param pathPattern the input path pattern, e.g. /foo/{bar}_@return a PathPattern for quickly matching paths against request paths_@throws PatternParseException in case of parse errors;public PathPattern parse(String pathPattern) throws PatternParseException {_		return new InternalPathPatternParser(this).parse(pathPattern)__	};process,the,path,pattern,content,a,character,at,a,time,breaking,it,into,path,elements,around,separator,boundaries,and,verifying,the,structure,at,each,stage,produces,a,path,pattern,object,that,can,be,used,for,fast,matching,against,paths,each,invocation,of,this,method,delegates,to,a,new,instance,of,the,link,internal,path,pattern,parser,because,that,class,is,not,thread,safe,param,path,pattern,the,input,path,pattern,e,g,foo,bar,return,a,path,pattern,for,quickly,matching,paths,against,request,paths,throws,pattern,parse,exception,in,case,of,parse,errors;public,path,pattern,parse,string,path,pattern,throws,pattern,parse,exception,return,new,internal,path,pattern,parser,this,parse,path,pattern
PathPatternParser -> public void setCaseSensitive(boolean caseSensitive);1495035625;Set whether path patterns are case-sensitive._<p>The default is {@code true}.;public void setCaseSensitive(boolean caseSensitive) {_		this.caseSensitive = caseSensitive__	};set,whether,path,patterns,are,case,sensitive,p,the,default,is,code,true;public,void,set,case,sensitive,boolean,case,sensitive,this,case,sensitive,case,sensitive
PathPatternParser -> public void setCaseSensitive(boolean caseSensitive);1497277038;Set whether path patterns are case-sensitive._<p>The default is {@code true}.;public void setCaseSensitive(boolean caseSensitive) {_		this.caseSensitive = caseSensitive__	};set,whether,path,patterns,are,case,sensitive,p,the,default,is,code,true;public,void,set,case,sensitive,boolean,case,sensitive,this,case,sensitive,case,sensitive
PathPatternParser -> public void setCaseSensitive(boolean caseSensitive);1501619481;Whether path pattern matching should be case-sensitive._<p>The default is {@code true}.;public void setCaseSensitive(boolean caseSensitive) {_		this.caseSensitive = caseSensitive__	};whether,path,pattern,matching,should,be,case,sensitive,p,the,default,is,code,true;public,void,set,case,sensitive,boolean,case,sensitive,this,case,sensitive,case,sensitive
PathPatternParser -> public void setCaseSensitive(boolean caseSensitive);1501620738;Whether path pattern matching should be case-sensitive._<p>The default is {@code true}.;public void setCaseSensitive(boolean caseSensitive) {_		this.caseSensitive = caseSensitive__	};whether,path,pattern,matching,should,be,case,sensitive,p,the,default,is,code,true;public,void,set,case,sensitive,boolean,case,sensitive,this,case,sensitive,case,sensitive
PathPatternParser -> public void setCaseSensitive(boolean caseSensitive);1501676476;Whether path pattern matching should be case-sensitive._<p>The default is {@code true}.;public void setCaseSensitive(boolean caseSensitive) {_		this.caseSensitive = caseSensitive__	};whether,path,pattern,matching,should,be,case,sensitive,p,the,default,is,code,true;public,void,set,case,sensitive,boolean,case,sensitive,this,case,sensitive,case,sensitive
PathPatternParser -> public boolean isCaseSensitive();1501620738;Whether case-sensitive pattern matching is enabled.;public boolean isCaseSensitive() {_		return this.caseSensitive__	};whether,case,sensitive,pattern,matching,is,enabled;public,boolean,is,case,sensitive,return,this,case,sensitive
PathPatternParser -> public boolean isCaseSensitive();1501676476;Whether case-sensitive pattern matching is enabled.;public boolean isCaseSensitive() {_		return this.caseSensitive__	};whether,case,sensitive,pattern,matching,is,enabled;public,boolean,is,case,sensitive,return,this,case,sensitive
