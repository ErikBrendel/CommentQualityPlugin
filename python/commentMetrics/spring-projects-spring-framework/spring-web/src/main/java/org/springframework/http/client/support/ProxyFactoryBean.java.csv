commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the proxy type.  * <p>Defaults to {@link java.net.Proxy.Type#HTTP}.  */ ;/**  * Set the proxy type.  * <p>Defaults to {@link java.net.Proxy.Type#HTTP}.  */ public void setType(Proxy.Type type) {     this.type = type. }
true;public;1;3;/**  * Set the proxy host name.  */ ;/**  * Set the proxy host name.  */ public void setHostname(String hostname) {     this.hostname = hostname. }
true;public;1;3;/**  * Set the proxy port.  */ ;/**  * Set the proxy port.  */ public void setPort(int port) {     this.port = port. }
false;public;0;11;;@Override public void afterPropertiesSet() throws IllegalArgumentException {     Assert.notNull(this.type, "Property 'type' is required").     Assert.notNull(this.hostname, "Property 'hostname' is required").     if (this.port < 0 || this.port > 65535) {         throw new IllegalArgumentException("Property 'port' value out of range: " + this.port).     }     SocketAddress socketAddress = new InetSocketAddress(this.hostname, this.port).     this.proxy = new Proxy(this.type, socketAddress). }
false;public;0;5;;@Override @Nullable public Proxy getObject() {     return this.proxy. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Proxy.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
