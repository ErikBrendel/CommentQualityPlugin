commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getMethodValue() {     return this.httpRequest.getMethod(). }
false;public;0;4;;@Override public URI getURI() {     return this.httpRequest.getURI(). }
false;;0;3;;HttpContext getHttpContext() {     return this.httpContext. }
false;protected;2;12;;@Override protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {     addHeaders(this.httpRequest, headers).     if (this.httpRequest instanceof HttpEntityEnclosingRequest) {         HttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) this.httpRequest.         HttpEntity requestEntity = new ByteArrayEntity(bufferedOutput).         entityEnclosingRequest.setEntity(requestEntity).     }     HttpResponse httpResponse = this.httpClient.execute(this.httpRequest, this.httpContext).     return new HttpComponentsClientHttpResponse(httpResponse). }
true;static;2;14;/**  * Add the given headers to the given HTTP request.  * @param httpRequest the request to add the headers to  * @param headers the headers to add  */ ;/**  * Add the given headers to the given HTTP request.  * @param httpRequest the request to add the headers to  * @param headers the headers to add  */ static void addHeaders(HttpUriRequest httpRequest, HttpHeaders headers) {     headers.forEach((headerName, headerValues) -> {         if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {             // RFC 6265             String headerValue = StringUtils.collectionToDelimitedString(headerValues, ". ").             httpRequest.addHeader(headerName, headerValue).         } else if (!HTTP.CONTENT_LEN.equalsIgnoreCase(headerName) && !HTTP.TRANSFER_ENCODING.equalsIgnoreCase(headerName)) {             for (String headerValue : headerValues) {                 httpRequest.addHeader(headerName, headerValue).             }         }     }). }
