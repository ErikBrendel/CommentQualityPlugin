commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public String getMessage() {     StringBuilder sb = new StringBuilder("Parameter conditions ").     int i = 0.     for (String[] conditions : this.paramConditions) {         if (i > 0) {             sb.append(" OR ").         }         sb.append("\"").         sb.append(StringUtils.arrayToDelimitedString(conditions, ", ")).         sb.append("\"").         i++.     }     sb.append(" not met for actual request parameters: ").     sb.append(requestParameterMapToString(this.actualParams)).     return sb.toString(). }
true;public,final;0;3;/**  * Return the parameter conditions that have been violated or the first group  * in case of multiple groups.  * @see org.springframework.web.bind.annotation.RequestMapping#params()  */ ;/**  * Return the parameter conditions that have been violated or the first group  * in case of multiple groups.  * @see org.springframework.web.bind.annotation.RequestMapping#params()  */ public final String[] getParamConditions() {     return this.paramConditions.get(0). }
true;public,final;0;3;/**  * Return all parameter condition groups that have been violated.  * @since 4.2  * @see org.springframework.web.bind.annotation.RequestMapping#params()  */ ;/**  * Return all parameter condition groups that have been violated.  * @since 4.2  * @see org.springframework.web.bind.annotation.RequestMapping#params()  */ public final List<String[]> getParamConditionGroups() {     return this.paramConditions. }
true;public,final;0;3;/**  * Return the actual parameter Map associated with the ServletRequest.  * @see javax.servlet.ServletRequest#getParameterMap()  */ ;/**  * Return the actual parameter Map associated with the ServletRequest.  * @see javax.servlet.ServletRequest#getParameterMap()  */ public final Map<String, String[]> getActualParams() {     return this.actualParams. }
false;private,static;1;11;;private static String requestParameterMapToString(Map<String, String[]> actualParams) {     StringBuilder result = new StringBuilder().     for (Iterator<Map.Entry<String, String[]>> it = actualParams.entrySet().iterator(). it.hasNext(). ) {         Map.Entry<String, String[]> entry = it.next().         result.append(entry.getKey()).append('=').append(ObjectUtils.nullSafeToString(entry.getValue())).         if (it.hasNext()) {             result.append(", ").         }     }     return result.toString(). }
