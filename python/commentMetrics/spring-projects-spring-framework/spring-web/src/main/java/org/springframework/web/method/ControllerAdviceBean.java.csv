commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns the order value extracted from the {@link ControllerAdvice}  * annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.  */ ;/**  * Returns the order value extracted from the {@link ControllerAdvice}  * annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.  */ @Override public int getOrder() {     return this.order. }
true;public;0;6;/**  * Return the type of the contained bean.  * <p>If the bean type is a CGLIB-generated class, the original  * user-defined class is returned.  */ ;/**  * Return the type of the contained bean.  * <p>If the bean type is a CGLIB-generated class, the original  * user-defined class is returned.  */ @Nullable public Class<?> getBeanType() {     Class<?> beanType = (this.bean instanceof String ? obtainBeanFactory().getType((String) this.bean) : this.bean.getClass()).     return (beanType != null ? ClassUtils.getUserClass(beanType) : null). }
true;public;0;3;/**  * Return a bean instance if necessary resolving the bean name through the BeanFactory.  */ ;/**  * Return a bean instance if necessary resolving the bean name through the BeanFactory.  */ public Object resolveBean() {     return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean). }
false;private;0;4;;private BeanFactory obtainBeanFactory() {     Assert.state(this.beanFactory != null, "No BeanFactory set").     return this.beanFactory. }
true;public;1;3;/**  * Check whether the given bean type should be assisted by this  * {@code @ControllerAdvice} instance.  * @param beanType the type of the bean to check  * @since 4.0  * @see org.springframework.web.bind.annotation.ControllerAdvice  */ ;/**  * Check whether the given bean type should be assisted by this  * {@code @ControllerAdvice} instance.  * @param beanType the type of the bean to check  * @since 4.0  * @see org.springframework.web.bind.annotation.ControllerAdvice  */ public boolean isApplicableToBeanType(@Nullable Class<?> beanType) {     return this.beanTypePredicate.test(beanType). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ControllerAdviceBean)) {         return false.     }     ControllerAdviceBean otherAdvice = (ControllerAdviceBean) other.     return (this.bean.equals(otherAdvice.bean) && this.beanFactory == otherAdvice.beanFactory). }
false;public;0;4;;@Override public int hashCode() {     return this.bean.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.bean.toString(). }
true;public,static;1;6;/**  * Find the names of beans annotated with  * {@linkplain ControllerAdvice @ControllerAdvice} in the given  * ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.  */ ;/**  * Find the names of beans annotated with  * {@linkplain ControllerAdvice @ControllerAdvice} in the given  * ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.  */ public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context) {     return Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context, Object.class)).filter(name -> context.findAnnotationOnBean(name, ControllerAdvice.class) != null).map(name -> new ControllerAdviceBean(name, context)).collect(Collectors.toList()). }
false;private,static;1;3;;private static int initOrderFromBean(Object bean) {     return (bean instanceof Ordered ? ((Ordered) bean).getOrder() : initOrderFromBeanType(bean.getClass())). }
false;private,static;1;7;;private static int initOrderFromBeanType(@Nullable Class<?> beanType) {     Integer order = null.     if (beanType != null) {         order = OrderUtils.getOrder(beanType).     }     return (order != null ? order : Ordered.LOWEST_PRECEDENCE). }
