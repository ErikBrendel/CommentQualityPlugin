# id;timestamp;commentText;codeText;commentWords;codeWords
ControllerAdviceBean -> public int getOrder();1347070489;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;public,int,get,order,return,this,order
ControllerAdviceBean -> public int getOrder();1357119239;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;public,int,get,order,return,this,order
ControllerAdviceBean -> public Object resolveBean();1347070489;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1356735495;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1357119239;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1368482696;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1382113594;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1385507478;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1395178190;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1396355447;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1405696918;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String) ? this.beanFactory.getBean((String) this.bean) : this.bean__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1406626957;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1417712161;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1417782348;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1432246071;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1449230580;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1450818694;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1458754769;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1467730834;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1496837955;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? this.beanFactory.getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,this,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1498780456;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,obtain,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1528409922;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,obtain,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Object resolveBean();1530174524;Return a bean instance if necessary resolving the bean name through the BeanFactory.;public Object resolveBean() {_		return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean)__	};return,a,bean,instance,if,necessary,resolving,the,bean,name,through,the,bean,factory;public,object,resolve,bean,return,this,bean,instanceof,string,obtain,bean,factory,get,bean,string,this,bean,this,bean
ControllerAdviceBean -> public Class<?> getBeanType();1347070489;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String)_				? this.beanFactory.getType((String) this.bean) : this.bean.getClass()___		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1356735495;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String)_				? this.beanFactory.getType((String) this.bean) : this.bean.getClass()___		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1357119239;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String)_				? this.beanFactory.getType((String) this.bean) : this.bean.getClass()___		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1368482696;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String)_				? this.beanFactory.getType((String) this.bean) : this.bean.getClass()___		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1382113594;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String)_				? this.beanFactory.getType((String) this.bean) : this.bean.getClass()___		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1385507478;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String)_				? this.beanFactory.getType((String) this.bean) : this.bean.getClass()___		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1395178190;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1396355447;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1405696918;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1406626957;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1417712161;Returns the type of the contained bean._If the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,contained,bean,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1417782348;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1432246071;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1449230580;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1450818694;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1458754769;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> public Class<?> getBeanType();1467730834;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
ControllerAdviceBean -> @Nullable 	public Class<?> getBeanType();1496837955;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;@Nullable_	public Class<?> getBeanType() {_		Class<?> beanType = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return (beanType != null ? ClassUtils.getUserClass(beanType) : null)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;nullable,public,class,get,bean,type,class,bean,type,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,bean,type,null,class,utils,get,user,class,bean,type,null
ControllerAdviceBean -> @Nullable 	public Class<?> getBeanType();1498780456;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;@Nullable_	public Class<?> getBeanType() {_		Class<?> beanType = (this.bean instanceof String ?_				obtainBeanFactory().getType((String) this.bean) : this.bean.getClass())__		return (beanType != null ? ClassUtils.getUserClass(beanType) : null)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;nullable,public,class,get,bean,type,class,bean,type,this,bean,instanceof,string,obtain,bean,factory,get,type,string,this,bean,this,bean,get,class,return,bean,type,null,class,utils,get,user,class,bean,type,null
ControllerAdviceBean -> @Nullable 	public Class<?> getBeanType();1528409922;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;@Nullable_	public Class<?> getBeanType() {_		Class<?> beanType = (this.bean instanceof String ?_				obtainBeanFactory().getType((String) this.bean) : this.bean.getClass())__		return (beanType != null ? ClassUtils.getUserClass(beanType) : null)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;nullable,public,class,get,bean,type,class,bean,type,this,bean,instanceof,string,obtain,bean,factory,get,type,string,this,bean,this,bean,get,class,return,bean,type,null,class,utils,get,user,class,bean,type,null
ControllerAdviceBean -> @Nullable 	public Class<?> getBeanType();1530174524;Return the type of the contained bean._<p>If the bean type is a CGLIB-generated class, the original_user-defined class is returned.;@Nullable_	public Class<?> getBeanType() {_		Class<?> beanType = (this.bean instanceof String ?_				obtainBeanFactory().getType((String) this.bean) : this.bean.getClass())__		return (beanType != null ? ClassUtils.getUserClass(beanType) : null)__	};return,the,type,of,the,contained,bean,p,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;nullable,public,class,get,bean,type,class,bean,type,this,bean,instanceof,string,obtain,bean,factory,get,type,string,this,bean,this,bean,get,class,return,bean,type,null,class,utils,get,user,class,bean,type,null
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1347070489;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "'beanName' must not be null")__		Assert.notNull(beanFactory, "'beanFactory' must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean " + "with name [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.order = initOrderFromBeanType(this.beanFactory.getType(beanName))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,order,init,order,from,bean,type,this,bean,factory,get,type,bean,name
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1356735495;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "'beanName' must not be null")__		Assert.notNull(beanFactory, "'beanFactory' must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean " + "with name [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.order = initOrderFromBeanType(this.beanFactory.getType(beanName))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,order,init,order,from,bean,type,this,bean,factory,get,type,bean,name
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1357119239;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "'beanName' must not be null")__		Assert.notNull(beanFactory, "'beanFactory' must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean " + "with name [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.order = initOrderFromBeanType(this.beanFactory.getType(beanName))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,order,init,order,from,bean,type,this,bean,factory,get,type,bean,name
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1368482696;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "'beanName' must not be null")__		Assert.notNull(beanFactory, "'beanFactory' must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean " + "with name [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.order = initOrderFromBeanType(this.beanFactory.getType(beanName))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,order,init,order,from,bean,type,this,bean,factory,get,type,bean,name
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1382113594;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "'beanName' must not be null")__		Assert.notNull(beanFactory, "'beanFactory' must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean " + "with name [" + beanName + "]")___		this.bean = beanName__		this.beanFactory = beanFactory___		Class<?> beanType = this.beanFactory.getType(beanName)__		this.order = initOrderFromBeanType(beanType)___		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,this,bean,factory,get,type,bean,name,this,order,init,order,from,bean,type,bean,type,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1385507478;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "'beanName' must not be null")__		Assert.notNull(beanFactory, "'beanFactory' must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean " + "with name [" + beanName + "]")___		this.bean = beanName__		this.beanFactory = beanFactory___		Class<?> beanType = this.beanFactory.getType(beanName)__		this.order = initOrderFromBeanType(beanType)___		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,this,bean,factory,get,type,bean,name,this,order,init,order,from,bean,type,bean,type,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1395178190;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "Bean name must not be null")__		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"BeanFactory [" + beanFactory + "] does not contain bean with name '" + beanName + "'")___		this.bean = beanName__		this.beanFactory = beanFactory___		Class<?> beanType = this.beanFactory.getType(beanName)__		this.order = initOrderFromBeanType(beanType)___		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,this,bean,factory,get,type,bean,name,this,order,init,order,from,bean,type,bean,type,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1396355447;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "Bean name must not be null")__		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"BeanFactory [" + beanFactory + "] does not contain bean with name '" + beanName + "'")___		this.bean = beanName__		this.beanFactory = beanFactory___		Class<?> beanType = this.beanFactory.getType(beanName)__		this.order = initOrderFromBeanType(beanType)___		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,this,bean,factory,get,type,bean,name,this,order,init,order,from,bean,type,bean,type,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1405696918;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "Bean name must not be null")__		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"BeanFactory [" + beanFactory + "] does not contain bean with name '" + beanName + "'")___		this.bean = beanName__		this.beanFactory = beanFactory___		Class<?> beanType = this.beanFactory.getType(beanName)__		this.order = initOrderFromBeanType(beanType)___		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,this,bean,factory,get,type,bean,name,this,order,init,order,from,bean,type,bean,type,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1406626957;Create an instance using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		Assert.hasText(beanName, "Bean name must not be null")__		Assert.notNull(beanFactory, "BeanFactory must not be null")___		if (!beanFactory.containsBean(beanName)) {_			throw new IllegalArgumentException(_					"BeanFactory [" + beanFactory + "] does not contain bean with name '" + beanName + "'")__		}__		this.bean = beanName__		this.beanFactory = beanFactory___		Class<?> beanType = this.beanFactory.getType(beanName)__		this.order = initOrderFromBeanType(beanType)___		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__	};create,an,instance,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,if,bean,factory,contains,bean,bean,name,throw,new,illegal,argument,exception,bean,factory,bean,factory,does,not,contain,bean,with,name,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,this,bean,factory,get,type,bean,name,this,order,init,order,from,bean,type,bean,type,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1417712161;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1417782348;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1432246071;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1449230580;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1450818694;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1458754769;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, BeanFactory beanFactory);1467730834;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> @Override 	public int getOrder();1356735495;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1368482696;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1382113594;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1385507478;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1395178190;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1396355447;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1405696918;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1406626957;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1417712161;Returns the order value extracted from the {@link ControllerAdvice}_annotation or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1417782348;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1432246071;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1449230580;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1450818694;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1458754769;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1467730834;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1496837955;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1498780456;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1528409922;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> @Override 	public int getOrder();1530174524;Returns the order value extracted from the {@link ControllerAdvice}_annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise.;@Override_	public int getOrder() {_		return this.order__	};returns,the,order,value,extracted,from,the,link,controller,advice,annotation,or,link,ordered,otherwise;override,public,int,get,order,return,this,order
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory);1496837955;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,nullable,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory);1498780456;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,nullable,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory);1528409922;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,nullable,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory);1530174524;Create a {@code ControllerAdviceBean} using the given bean name._@param beanName the name of the bean_@param beanFactory a BeanFactory that can be used later to resolve the bean;public ControllerAdviceBean(String beanName, @Nullable BeanFactory beanFactory) {_		this((Object) beanName, beanFactory)__	};create,a,code,controller,advice,bean,using,the,given,bean,name,param,bean,name,the,name,of,the,bean,param,bean,factory,a,bean,factory,that,can,be,used,later,to,resolve,the,bean;public,controller,advice,bean,string,bean,name,nullable,bean,factory,bean,factory,this,object,bean,name,bean,factory
ControllerAdviceBean -> public boolean isApplicableToBeanType(@Nullable Class<?> beanType);1496837955;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(@Nullable Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,nullable,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(@Nullable Class<?> beanType);1498780456;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(@Nullable Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,nullable,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(@Nullable Class<?> beanType);1528409922;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(@Nullable Class<?> beanType) {_		return this.beanTypePredicate.test(beanType)__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,nullable,class,bean,type,return,this,bean,type,predicate,test,bean,type
ControllerAdviceBean -> public boolean isApplicableToBeanType(@Nullable Class<?> beanType);1530174524;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@since 4.0_@see org.springframework.web.bind.annotation.ControllerAdvice;public boolean isApplicableToBeanType(@Nullable Class<?> beanType) {_		return this.beanTypePredicate.test(beanType)__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,since,4,0,see,org,springframework,web,bind,annotation,controller,advice;public,boolean,is,applicable,to,bean,type,nullable,class,bean,type,return,this,bean,type,predicate,test,bean,type
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1347070489;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : applicationContext.getBeanDefinitionNames()) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,application,context,get,bean,definition,names,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1356735495;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : applicationContext.getBeanDefinitionNames()) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,application,context,get,bean,definition,names,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1357119239;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : applicationContext.getBeanDefinitionNames()) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,application,context,get,bean,definition,names,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1368482696;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : applicationContext.getBeanDefinitionNames()) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,application,context,get,bean,definition,names,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1382113594;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : applicationContext.getBeanDefinitionNames()) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,application,context,get,bean,definition,names,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1385507478;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : applicationContext.getBeanDefinitionNames()) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,application,context,get,bean,definition,names,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1395178190;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1396355447;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1405696918;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1406626957;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1417712161;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1417782348;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1432246071;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1449230580;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1450818694;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1458754769;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,controller,advice,bean,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1467730834;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1496837955;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext);1498780456;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {_		List<ControllerAdviceBean> beans = new ArrayList<>()__		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {_			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {_				beans.add(new ControllerAdviceBean(name, applicationContext))__			}_		}_		return beans__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,application,context,list,controller,advice,bean,beans,new,array,list,for,string,name,bean,factory,utils,bean,names,for,type,including,ancestors,application,context,object,class,if,application,context,find,annotation,on,bean,name,controller,advice,class,null,beans,add,new,controller,advice,bean,name,application,context,return,beans
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1382113594;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance.__@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if(!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (Class<?> clazz : this.assignableTypes) {_				if(ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if(AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_			String packageName = beanType.getPackage().getName()__			for (Package basePackage : this.basePackages) {_				if(packageName.startsWith(basePackage.getName())) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,string,package,name,bean,type,get,package,get,name,for,package,base,package,this,base,packages,if,package,name,starts,with,base,package,get,name,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1385507478;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if(!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (Class<?> clazz : this.assignableTypes) {_				if(ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if(AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_			String packageName = beanType.getPackage().getName()__			for (Package basePackage : this.basePackages) {_				if(packageName.startsWith(basePackage.getName())) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,string,package,name,bean,type,get,package,get,name,for,package,base,package,this,base,packages,if,package,name,starts,with,base,package,get,name,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1395178190;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if(!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (Class<?> clazz : this.assignableTypes) {_				if(ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if(AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_			String packageName = beanType.getPackage().getName()__			for (Package basePackage : this.basePackages) {_				if(packageName.startsWith(basePackage.getName())) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,string,package,name,bean,type,get,package,get,name,for,package,base,package,this,base,packages,if,package,name,starts,with,base,package,get,name,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1396355447;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if(!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (Class<?> clazz : this.assignableTypes) {_				if(ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if(AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_			String packageName = beanType.getPackage().getName()__			for (Package basePackage : this.basePackages) {_				if(packageName.startsWith(basePackage.getName())) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,string,package,name,bean,type,get,package,get,name,for,package,base,package,this,base,packages,if,package,name,starts,with,base,package,get,name,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1405696918;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_			String packageName = beanType.getPackage().getName()__			for (Package basePackage : this.basePackages) {_				if (packageName.startsWith(basePackage.getName())) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,string,package,name,bean,type,get,package,get,name,for,package,base,package,this,base,packages,if,package,name,starts,with,base,package,get,name,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1406626957;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_			String packageName = beanType.getPackage().getName()__			for (Package basePackage : this.basePackages) {_				if (packageName.startsWith(basePackage.getName())) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,string,package,name,bean,type,get,package,get,name,for,package,base,package,this,base,packages,if,package,name,starts,with,base,package,get,name,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1417712161;Checks whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (ClassUtils.getPackageName(beanType).startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};checks,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,class,utils,get,package,name,bean,type,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1417782348;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1432246071;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1449230580;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1450818694;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1458754769;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public boolean isApplicableToBeanType(Class<?> beanType);1467730834;Check whether the given bean type should be assisted by this_{@code @ControllerAdvice} instance._@param beanType the type of the bean to check_@see org.springframework.web.bind.annotation.ControllerAdvice_@since 4.0;public boolean isApplicableToBeanType(Class<?> beanType) {_		if (!hasSelectors()) {_			return true__		}_		else if (beanType != null) {_			for (String basePackage : this.basePackages) {_				if (beanType.getName().startsWith(basePackage)) {_					return true__				}_			}_			for (Class<?> clazz : this.assignableTypes) {_				if (ClassUtils.isAssignable(clazz, beanType)) {_					return true__				}_			}_			for (Class<? extends Annotation> annotationClass : this.annotations) {_				if (AnnotationUtils.findAnnotation(beanType, annotationClass) != null) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,bean,type,should,be,assisted,by,this,code,controller,advice,instance,param,bean,type,the,type,of,the,bean,to,check,see,org,springframework,web,bind,annotation,controller,advice,since,4,0;public,boolean,is,applicable,to,bean,type,class,bean,type,if,has,selectors,return,true,else,if,bean,type,null,for,string,base,package,this,base,packages,if,bean,type,get,name,starts,with,base,package,return,true,for,class,clazz,this,assignable,types,if,class,utils,is,assignable,clazz,bean,type,return,true,for,class,extends,annotation,annotation,class,this,annotations,if,annotation,utils,find,annotation,bean,type,annotation,class,null,return,true,return,false
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1347070489;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "'bean' must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1356735495;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "'bean' must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1357119239;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "'bean' must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1368482696;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "'bean' must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1382113594;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "'bean' must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)___		Class<? extends Object> beanType = bean.getClass()__		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,class,extends,object,bean,type,bean,get,class,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1385507478;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "'bean' must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)___		Class<? extends Object> beanType = bean.getClass()__		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,class,extends,object,bean,type,bean,get,class,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1395178190;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "Bean must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)___		Class<?> beanType = bean.getClass()__		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "Bean type [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,class,bean,type,bean,get,class,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1396355447;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "Bean must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)___		Class<?> beanType = bean.getClass()__		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "Bean type [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,class,bean,type,bean,get,class,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1405696918;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "Bean must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)___		Class<?> beanType = bean.getClass()__		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "Bean type [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,class,bean,type,bean,get,class,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1406626957;Create an instance using the given bean instance._@param bean the bean;public ControllerAdviceBean(Object bean) {_		Assert.notNull(bean, "Bean must not be null")__		this.bean = bean__		this.order = initOrderFromBean(bean)___		Class<?> beanType = bean.getClass()__		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class)__		Assert.notNull(annotation, "Bean type [" + beanType.getName() + "] is not annotated @ControllerAdvice")___		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation))__		this.annotations.addAll(Arrays.asList(annotation.annotations()))__		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()))__		this.beanFactory = null__	};create,an,instance,using,the,given,bean,instance,param,bean,the,bean;public,controller,advice,bean,object,bean,assert,not,null,bean,bean,must,not,be,null,this,bean,bean,this,order,init,order,from,bean,bean,class,bean,type,bean,get,class,controller,advice,annotation,annotation,utils,find,annotation,bean,type,controller,advice,class,assert,not,null,annotation,bean,type,bean,type,get,name,is,not,annotated,controller,advice,this,base,packages,add,all,init,base,packages,from,bean,type,bean,type,annotation,this,annotations,add,all,arrays,as,list,annotation,annotations,this,assignable,types,add,all,arrays,as,list,annotation,assignable,types,this,bean,factory,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1417712161;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1417782348;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1432246071;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1449230580;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1450818694;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1458754769;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1467730834;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1496837955;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1498780456;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1528409922;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public ControllerAdviceBean(Object bean);1530174524;Create a {@code ControllerAdviceBean} using the given bean instance._@param bean the bean instance;public ControllerAdviceBean(Object bean) {_		this(bean, null)__	};create,a,code,controller,advice,bean,using,the,given,bean,instance,param,bean,the,bean,instance;public,controller,advice,bean,object,bean,this,bean,null
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context);1528409922;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context) {_		return Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context, Object.class))_				.filter(name -> context.findAnnotationOnBean(name, ControllerAdvice.class) != null)_				.map(name -> new ControllerAdviceBean(name, context))_				.collect(Collectors.toList())__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,context,return,arrays,stream,bean,factory,utils,bean,names,for,type,including,ancestors,context,object,class,filter,name,context,find,annotation,on,bean,name,controller,advice,class,null,map,name,new,controller,advice,bean,name,context,collect,collectors,to,list
ControllerAdviceBean -> public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context);1530174524;Find the names of beans annotated with_{@linkplain ControllerAdvice @ControllerAdvice} in the given_ApplicationContext and wrap them as {@code ControllerAdviceBean} instances.;public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context) {_		return Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context, Object.class))_				.filter(name -> context.findAnnotationOnBean(name, ControllerAdvice.class) != null)_				.map(name -> new ControllerAdviceBean(name, context))_				.collect(Collectors.toList())__	};find,the,names,of,beans,annotated,with,linkplain,controller,advice,controller,advice,in,the,given,application,context,and,wrap,them,as,code,controller,advice,bean,instances;public,static,list,controller,advice,bean,find,annotated,beans,application,context,context,return,arrays,stream,bean,factory,utils,bean,names,for,type,including,ancestors,context,object,class,filter,name,context,find,annotation,on,bean,name,controller,advice,class,null,map,name,new,controller,advice,bean,name,context,collect,collectors,to,list
