commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getMethodValue() {     return this.connection.getRequestMethod(). }
false;public;0;9;;@Override public URI getURI() {     try {         return this.connection.getURL().toURI().     } catch (URISyntaxException ex) {         throw new IllegalStateException("Could not get HttpURLConnection URI: " + ex.getMessage(), ex).     } }
false;protected;1;18;;@Override protected OutputStream getBodyInternal(HttpHeaders headers) throws IOException {     if (this.body == null) {         if (this.outputStreaming) {             long contentLength = headers.getContentLength().             if (contentLength >= 0) {                 this.connection.setFixedLengthStreamingMode(contentLength).             } else {                 this.connection.setChunkedStreamingMode(this.chunkSize).             }         }         SimpleBufferingClientHttpRequest.addHeaders(this.connection, headers).         this.connection.connect().         this.body = this.connection.getOutputStream().     }     return StreamUtils.nonClosing(this.body). }
false;protected;1;18;;@Override protected ClientHttpResponse executeInternal(HttpHeaders headers) throws IOException {     try {         if (this.body != null) {             this.body.close().         } else {             SimpleBufferingClientHttpRequest.addHeaders(this.connection, headers).             this.connection.connect().             // Immediately trigger the request in a no-output scenario as well             this.connection.getResponseCode().         }     } catch (IOException ex) {     // ignore     }     return new SimpleClientHttpResponse(this.connection). }
