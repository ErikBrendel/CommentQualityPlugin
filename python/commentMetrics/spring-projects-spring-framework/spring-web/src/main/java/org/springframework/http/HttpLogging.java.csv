commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Create a primary logger for the given class and wrap it with a composite  * that delegates to it or to the fallback logger  * "org.springframework.web.HttpLogging", if the primary is not enabled.  * @param primaryLoggerClass the class for the name of the primary logger  * @return the resulting composite logger  */ ;/**  * Create a primary logger for the given class and wrap it with a composite  * that delegates to it or to the fallback logger  * "org.springframework.web.HttpLogging", if the primary is not enabled.  * @param primaryLoggerClass the class for the name of the primary logger  * @return the resulting composite logger  */ public static Log forLogName(Class<?> primaryLoggerClass) {     Log primaryLogger = LogFactory.getLog(primaryLoggerClass).     return forLog(primaryLogger). }
true;public,static;1;3;/**  * Wrap the given primary logger with a composite logger that delegates to  * it or to the fallback logger "org.springframework.web.HttpLogging",  * if the primary is not enabled.  * @param primaryLogger the primary logger to use  * @return the resulting composite logger  */ ;/**  * Wrap the given primary logger with a composite logger that delegates to  * it or to the fallback logger "org.springframework.web.HttpLogging",  * if the primary is not enabled.  * @param primaryLogger the primary logger to use  * @return the resulting composite logger  */ public static Log forLog(Log primaryLogger) {     return LogDelegateFactory.getCompositeLog(primaryLogger, fallbackLogger). }
