commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Whether to Base64-encode {@code byte[]} properties when reading and  * writing JSON.  * <p>When set to {@code true}, a custom {@link com.google.gson.TypeAdapter} will be  * registered via {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}  * which serializes a {@code byte[]} property to and from a Base64-encoded String  * instead of a JSON array.  * @see GsonBuilderUtils#gsonBuilderWithBase64EncodedByteArrays()  */ ;/**  * Whether to Base64-encode {@code byte[]} properties when reading and  * writing JSON.  * <p>When set to {@code true}, a custom {@link com.google.gson.TypeAdapter} will be  * registered via {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}  * which serializes a {@code byte[]} property to and from a Base64-encoded String  * instead of a JSON array.  * @see GsonBuilderUtils#gsonBuilderWithBase64EncodedByteArrays()  */ public void setBase64EncodeByteArrays(boolean base64EncodeByteArrays) {     this.base64EncodeByteArrays = base64EncodeByteArrays. }
true;public;1;3;/**  * Whether to use the {@link GsonBuilder#serializeNulls()} option when writing  * JSON. This is a shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().serializeNulls().create().  * </pre>  */ ;/**  * Whether to use the {@link GsonBuilder#serializeNulls()} option when writing  * JSON. This is a shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().serializeNulls().create().  * </pre>  */ public void setSerializeNulls(boolean serializeNulls) {     this.serializeNulls = serializeNulls. }
true;public;1;3;/**  * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing  * JSON. This is a shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().setPrettyPrinting().create().  * </pre>  */ ;/**  * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing  * JSON. This is a shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().setPrettyPrinting().create().  * </pre>  */ public void setPrettyPrinting(boolean prettyPrinting) {     this.prettyPrinting = prettyPrinting. }
true;public;1;3;/**  * Whether to use the {@link GsonBuilder#disableHtmlEscaping()} when writing  * JSON. Set to {@code true} to disable HTML escaping in JSON. This is a  * shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().disableHtmlEscaping().create().  * </pre>  */ ;/**  * Whether to use the {@link GsonBuilder#disableHtmlEscaping()} when writing  * JSON. Set to {@code true} to disable HTML escaping in JSON. This is a  * shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().disableHtmlEscaping().create().  * </pre>  */ public void setDisableHtmlEscaping(boolean disableHtmlEscaping) {     this.disableHtmlEscaping = disableHtmlEscaping. }
true;public;1;3;/**  * Define the date/time format with a {@link SimpleDateFormat}-style pattern.  * This is a shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().setDateFormat(dateFormatPattern).create().  * </pre>  */ ;/**  * Define the date/time format with a {@link SimpleDateFormat}-style pattern.  * This is a shortcut for setting up a {@code Gson} as follows:  * <pre class="code">  * new GsonBuilder().setDateFormat(dateFormatPattern).create().  * </pre>  */ public void setDateFormatPattern(String dateFormatPattern) {     this.dateFormatPattern = dateFormatPattern. }
false;public;0;18;;@Override public void afterPropertiesSet() {     GsonBuilder builder = (this.base64EncodeByteArrays ? GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays() : new GsonBuilder()).     if (this.serializeNulls) {         builder.serializeNulls().     }     if (this.prettyPrinting) {         builder.setPrettyPrinting().     }     if (this.disableHtmlEscaping) {         builder.disableHtmlEscaping().     }     if (this.dateFormatPattern != null) {         builder.setDateFormat(this.dateFormatPattern).     }     this.gson = builder.create(). }
true;public;0;5;/**  * Return the created Gson instance.  */ ;/**  * Return the created Gson instance.  */ @Override @Nullable public Gson getObject() {     return this.gson. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Gson.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
