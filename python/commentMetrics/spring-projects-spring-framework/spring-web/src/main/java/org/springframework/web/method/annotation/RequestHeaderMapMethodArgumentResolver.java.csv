commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public boolean supportsParameter(MethodParameter parameter) {     return (parameter.hasParameterAnnotation(RequestHeader.class) && Map.class.isAssignableFrom(parameter.getParameterType())). }
false;public;4;36;;@Override public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     Class<?> paramType = parameter.getParameterType().     if (MultiValueMap.class.isAssignableFrom(paramType)) {         MultiValueMap<String, String> result.         if (HttpHeaders.class.isAssignableFrom(paramType)) {             result = new HttpHeaders().         } else {             result = new LinkedMultiValueMap<>().         }         for (Iterator<String> iterator = webRequest.getHeaderNames(). iterator.hasNext(). ) {             String headerName = iterator.next().             String[] headerValues = webRequest.getHeaderValues(headerName).             if (headerValues != null) {                 for (String headerValue : headerValues) {                     result.add(headerName, headerValue).                 }             }         }         return result.     } else {         Map<String, String> result = new LinkedHashMap<>().         for (Iterator<String> iterator = webRequest.getHeaderNames(). iterator.hasNext(). ) {             String headerName = iterator.next().             String headerValue = webRequest.getHeader(headerName).             if (headerValue != null) {                 result.put(headerName, headerValue).             }         }         return result.     } }
