commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the name of the form parameter with the HTTP method to use.  * <p>By default this is set to {@code "_method"}.  */ ;/**  * Set the name of the form parameter with the HTTP method to use.  * <p>By default this is set to {@code "_method"}.  */ public void setMethodParamName(String methodParamName) {     Assert.hasText(methodParamName, "'methodParamName' must not be empty").     this.methodParamName = methodParamName. }
true;public;2;14;/**  * Transform an HTTP POST into another method based on {@code methodParamName}.  * @param exchange the current server exchange  * @param chain provides a way to delegate to the next filter  * @return {@code Mono<Void>} to indicate when request processing is complete  */ ;/**  * Transform an HTTP POST into another method based on {@code methodParamName}.  * @param exchange the current server exchange  * @param chain provides a way to delegate to the next filter  * @return {@code Mono<Void>} to indicate when request processing is complete  */ @Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     if (exchange.getRequest().getMethod() != HttpMethod.POST) {         return chain.filter(exchange).     }     return exchange.getFormData().map(formData -> {         String method = formData.getFirst(this.methodParamName).         return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange.     }).flatMap(chain::filter). }
false;private;2;10;;private ServerWebExchange mapExchange(ServerWebExchange exchange, String methodParamValue) {     HttpMethod httpMethod = HttpMethod.resolve(methodParamValue.toUpperCase(Locale.ENGLISH)).     Assert.notNull(httpMethod, () -> "HttpMethod '" + methodParamValue + "' not supported").     if (ALLOWED_METHODS.contains(httpMethod)) {         return exchange.mutate().request(builder -> builder.method(httpMethod)).build().     } else {         return exchange.     } }
