# id;timestamp;commentText;codeText;commentWords;codeWords
HiddenHttpMethodFilter -> public void setMethodParam(String methodParam);1486676157;Set the parameter name to look for HTTP methods._@see #DEFAULT_METHOD_PARAM;public void setMethodParam(String methodParam) {_		Assert.hasText(methodParam, "'methodParam' must not be empty")__		this.methodParam = methodParam__	};set,the,parameter,name,to,look,for,http,methods,see;public,void,set,method,param,string,method,param,assert,has,text,method,param,method,param,must,not,be,empty,this,method,param,method,param
HiddenHttpMethodFilter -> public void setMethodParam(String methodParam);1486676188;Set the parameter name to look for HTTP methods._@see #DEFAULT_METHOD_PARAM;public void setMethodParam(String methodParam) {_		Assert.hasText(methodParam, "'methodParam' must not be empty")__		this.methodParam = methodParam__	};set,the,parameter,name,to,look,for,http,methods,see;public,void,set,method,param,string,method,param,assert,has,text,method,param,method,param,must,not,be,empty,this,method,param,method,param
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1486676157;Transform an HTTP POST into another method based on {@code methodParam}__@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() == HttpMethod.POST) {_			return exchange.getFormData()_				.map(map -> Optional.ofNullable(map.getFirst(methodParam)))_				.map(method -> convertedRequest(exchange, method))_				.then(convertedExchange -> chain.filter(convertedExchange))__		} else {_			return chain.filter(exchange)__		}_	};transform,an,http,post,into,another,method,based,on,code,method,param,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,exchange,get,form,data,map,map,optional,of,nullable,map,get,first,method,param,map,method,converted,request,exchange,method,then,converted,exchange,chain,filter,converted,exchange,else,return,chain,filter,exchange
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1486676188;Transform an HTTP POST into another method based on {@code methodParam}__@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return {@code Mono<Void>} to indicate when request processing is complete;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() == HttpMethod.POST) {_			return exchange.getFormData()_					.map(formData -> {_						String method = formData.getFirst(methodParam)__						if (StringUtils.hasLength(method)) {_							return convertedRequest(exchange, method)__						}_						else {_							return exchange__						}_					})_					.then(convertedExchange -> chain.filter(convertedExchange))__		}_		else {_			return chain.filter(exchange)__		}_	};transform,an,http,post,into,another,method,based,on,code,method,param,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return,code,mono,void,to,indicate,when,request,processing,is,complete;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,exchange,get,form,data,map,form,data,string,method,form,data,get,first,method,param,if,string,utils,has,length,method,return,converted,request,exchange,method,else,return,exchange,then,converted,exchange,chain,filter,converted,exchange,else,return,chain,filter,exchange
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1489690883;Transform an HTTP POST into another method based on {@code methodParamName}__@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return {@code Mono<Void>} to indicate when request processing is complete;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() != HttpMethod.POST) {_			return chain.filter(exchange)__		}__		return exchange.getFormData()_				.map(formData -> {_					String method = formData.getFirst(this.methodParamName)__					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange__				})_				.then((exchange1) -> chain.filter(exchange1))__	};transform,an,http,post,into,another,method,based,on,code,method,param,name,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return,code,mono,void,to,indicate,when,request,processing,is,complete;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,chain,filter,exchange,return,exchange,get,form,data,map,form,data,string,method,form,data,get,first,this,method,param,name,return,string,utils,has,length,method,map,exchange,exchange,method,exchange,then,exchange1,chain,filter,exchange1
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1491927184;Transform an HTTP POST into another method based on {@code methodParamName}__@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return {@code Mono<Void>} to indicate when request processing is complete;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() != HttpMethod.POST) {_			return chain.filter(exchange)__		}__		return exchange.getFormData()_				.map(formData -> {_					String method = formData.getFirst(this.methodParamName)__					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange__				})_				.flatMap((exchange1) -> chain.filter(exchange1))__	};transform,an,http,post,into,another,method,based,on,code,method,param,name,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return,code,mono,void,to,indicate,when,request,processing,is,complete;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,chain,filter,exchange,return,exchange,get,form,data,map,form,data,string,method,form,data,get,first,this,method,param,name,return,string,utils,has,length,method,map,exchange,exchange,method,exchange,flat,map,exchange1,chain,filter,exchange1
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1505399232;Transform an HTTP POST into another method based on {@code methodParamName}__@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return {@code Mono<Void>} to indicate when request processing is complete;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() != HttpMethod.POST) {_			return chain.filter(exchange)__		}__		return exchange.getFormData()_				.map(formData -> {_					String method = formData.getFirst(this.methodParamName)__					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange__				})_				.flatMap(chain::filter)__	};transform,an,http,post,into,another,method,based,on,code,method,param,name,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return,code,mono,void,to,indicate,when,request,processing,is,complete;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,chain,filter,exchange,return,exchange,get,form,data,map,form,data,string,method,form,data,get,first,this,method,param,name,return,string,utils,has,length,method,map,exchange,exchange,method,exchange,flat,map,chain,filter
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1528736003;Transform an HTTP POST into another method based on {@code methodParamName}__@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return {@code Mono<Void>} to indicate when request processing is complete;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() != HttpMethod.POST) {_			return chain.filter(exchange)__		}__		return exchange.getFormData()_				.map(formData -> {_					String method = formData.getFirst(this.methodParamName)__					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange__				})_				.flatMap(chain::filter)__	};transform,an,http,post,into,another,method,based,on,code,method,param,name,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return,code,mono,void,to,indicate,when,request,processing,is,complete;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,chain,filter,exchange,return,exchange,get,form,data,map,form,data,string,method,form,data,get,first,this,method,param,name,return,string,utils,has,length,method,map,exchange,exchange,method,exchange,flat,map,chain,filter
HiddenHttpMethodFilter -> @Override 	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain);1530174524;Transform an HTTP POST into another method based on {@code methodParamName}._@param exchange the current server exchange_@param chain provides a way to delegate to the next filter_@return {@code Mono<Void>} to indicate when request processing is complete;@Override_	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {__		if (exchange.getRequest().getMethod() != HttpMethod.POST) {_			return chain.filter(exchange)__		}__		return exchange.getFormData()_				.map(formData -> {_					String method = formData.getFirst(this.methodParamName)__					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange__				})_				.flatMap(chain::filter)__	};transform,an,http,post,into,another,method,based,on,code,method,param,name,param,exchange,the,current,server,exchange,param,chain,provides,a,way,to,delegate,to,the,next,filter,return,code,mono,void,to,indicate,when,request,processing,is,complete;override,public,mono,void,filter,server,web,exchange,exchange,web,filter,chain,chain,if,exchange,get,request,get,method,http,method,post,return,chain,filter,exchange,return,exchange,get,form,data,map,form,data,string,method,form,data,get,first,this,method,param,name,return,string,utils,has,length,method,map,exchange,exchange,method,exchange,flat,map,chain,filter
HiddenHttpMethodFilter -> public void setMethodParamName(String methodParamName);1489690883;Set the name of the form parameter with the HTTP method to use._<p>By default this is set to {@code "_method"}.;public void setMethodParamName(String methodParamName) {_		Assert.hasText(methodParamName, "'methodParamName' must not be empty")__		this.methodParamName = methodParamName__	};set,the,name,of,the,form,parameter,with,the,http,method,to,use,p,by,default,this,is,set,to,code;public,void,set,method,param,name,string,method,param,name,assert,has,text,method,param,name,method,param,name,must,not,be,empty,this,method,param,name,method,param,name
HiddenHttpMethodFilter -> public void setMethodParamName(String methodParamName);1491927184;Set the name of the form parameter with the HTTP method to use._<p>By default this is set to {@code "_method"}.;public void setMethodParamName(String methodParamName) {_		Assert.hasText(methodParamName, "'methodParamName' must not be empty")__		this.methodParamName = methodParamName__	};set,the,name,of,the,form,parameter,with,the,http,method,to,use,p,by,default,this,is,set,to,code;public,void,set,method,param,name,string,method,param,name,assert,has,text,method,param,name,method,param,name,must,not,be,empty,this,method,param,name,method,param,name
HiddenHttpMethodFilter -> public void setMethodParamName(String methodParamName);1505399232;Set the name of the form parameter with the HTTP method to use._<p>By default this is set to {@code "_method"}.;public void setMethodParamName(String methodParamName) {_		Assert.hasText(methodParamName, "'methodParamName' must not be empty")__		this.methodParamName = methodParamName__	};set,the,name,of,the,form,parameter,with,the,http,method,to,use,p,by,default,this,is,set,to,code;public,void,set,method,param,name,string,method,param,name,assert,has,text,method,param,name,method,param,name,must,not,be,empty,this,method,param,name,method,param,name
HiddenHttpMethodFilter -> public void setMethodParamName(String methodParamName);1528736003;Set the name of the form parameter with the HTTP method to use._<p>By default this is set to {@code "_method"}.;public void setMethodParamName(String methodParamName) {_		Assert.hasText(methodParamName, "'methodParamName' must not be empty")__		this.methodParamName = methodParamName__	};set,the,name,of,the,form,parameter,with,the,http,method,to,use,p,by,default,this,is,set,to,code;public,void,set,method,param,name,string,method,param,name,assert,has,text,method,param,name,method,param,name,must,not,be,empty,this,method,param,name,method,param,name
HiddenHttpMethodFilter -> public void setMethodParamName(String methodParamName);1530174524;Set the name of the form parameter with the HTTP method to use._<p>By default this is set to {@code "_method"}.;public void setMethodParamName(String methodParamName) {_		Assert.hasText(methodParamName, "'methodParamName' must not be empty")__		this.methodParamName = methodParamName__	};set,the,name,of,the,form,parameter,with,the,http,method,to,use,p,by,default,this,is,set,to,code;public,void,set,method,param,name,string,method,param,name,assert,has,text,method,param,name,method,param,name,must,not,be,empty,this,method,param,name,method,param,name
