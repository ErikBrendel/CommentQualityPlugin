commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpStatus getStatusCode() {     return HttpStatus.valueOf(getRawStatusCode()). }
false;public;0;4;;@Override public int getRawStatusCode() {     return this.reactiveResponse.getStatus(). }
false;public;0;19;;@Override public MultiValueMap<String, ResponseCookie> getCookies() {     MultiValueMap<String, ResponseCookie> result = new LinkedMultiValueMap<>().     List<String> cookieHeader = getHeaders().get(HttpHeaders.SET_COOKIE).     if (cookieHeader != null) {         cookieHeader.forEach(header -> {             HttpCookie.parse(header).forEach(cookie -> result.add(cookie.getName(), ResponseCookie.from(cookie.getName(), cookie.getValue()).domain(cookie.getDomain()).path(cookie.getPath()).maxAge(cookie.getMaxAge()).secure(cookie.getSecure()).httpOnly(cookie.isHttpOnly()).build())).         }).     }     return CollectionUtils.unmodifiableMultiValueMap(result). }
false;public;0;4;;@Override public Flux<DataBuffer> getBody() {     return this.content. }
false;public;0;7;;@Override public HttpHeaders getHeaders() {     HttpHeaders headers = new HttpHeaders().     this.reactiveResponse.getHeaders().stream().forEach(field -> headers.add(field.getName(), field.getValue())).     return headers. }
