# id;timestamp;commentText;codeText;commentWords;codeWords
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1496837955;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1501582137;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1506097334;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1508532146;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1515504834;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1515504834;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1516361410;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1519560860;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1522332352;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1522354261;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1526045499;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1530174524;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext);1533723582;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;@Nullable_	public static Boolean getResponseEncodedHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;nullable,public,static,boolean,get,response,encoded,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1328020251;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1346174472;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1356735495;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1363700001;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1380920029;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1385412762;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1394572186;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1414144427;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1419948111;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1419949603;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1424248215;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1424278772;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1424361118;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1424361139;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1430734105;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1432404288;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1432412650;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1436200220;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1436777959;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1444898007;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1458830024;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1467726769;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1467730834;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1468613531;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1468948866;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1468963833;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1495868221;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1496837955;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1501582137;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1506097334;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1508532146;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1515504834;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1515504834;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1516361410;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1519560860;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1522332352;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1522354261;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1526045499;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1530174524;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value);1533723582;Expose the specified request attribute if not already present._@param request current servlet request_@param name the name of the attribute_@param value the suggested value of the attribute;private static void exposeRequestAttributeIfNotPresent(ServletRequest request, String name, Object value) {_		if (request.getAttribute(name) == null) {_			request.setAttribute(name, value)__		}_	};expose,the,specified,request,attribute,if,not,already,present,param,request,current,servlet,request,param,name,the,name,of,the,attribute,param,value,the,suggested,value,of,the,attribute;private,static,void,expose,request,attribute,if,not,present,servlet,request,request,string,name,object,value,if,request,get,attribute,name,null,request,set,attribute,name,value
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1328020251;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1346174472;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1356735495;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1363700001;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1380920029;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1385412762;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1394572186;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1414144427;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1419948111;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1419949603;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1424248215;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1424278772;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1424361118;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1424361139;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1430734105;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1432404288;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1432412650;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1436200220;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1436777959;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1444898007;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1458830024;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1467726769;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1467730834;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1468613531;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1468948866;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1468963833;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1495868221;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1496837955;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1501582137;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1506097334;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1508532146;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1515504834;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1515504834;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1516361410;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1519560860;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1522332352;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1522354261;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1526045499;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1530174524;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isIncludeRequest(ServletRequest request);1533723582;Determine whether the given request is an include request,_that is, not a top-level HTTP request coming in from the outside._<p>Checks the presence of the "javax.servlet.include.request_uri"_request attribute. Could check any request attribute that is only_present in an include request._@param request current servlet request_@return whether the given request is an include request;public static boolean isIncludeRequest(ServletRequest request) {_		return (request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE) != null)__	};determine,whether,the,given,request,is,an,include,request,that,is,not,a,top,level,http,request,coming,in,from,the,outside,p,checks,the,presence,of,the,javax,servlet,include,request,attribute,could,check,any,request,attribute,that,is,only,present,in,an,include,request,param,request,current,servlet,request,return,whether,the,given,request,is,an,include,request;public,static,boolean,is,include,request,servlet,request,request,return,request,get,attribute,null
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1328020251;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in <code>web.xml</code>_(if any). Falls back to <code>false</code> in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,code,if,any,falls,back,to,code,false,code,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1346174472;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in <code>web.xml</code>_(if any). Falls back to <code>false</code> in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,code,if,any,falls,back,to,code,false,code,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1356735495;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1363700001;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1380920029;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1385412762;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> public static boolean isDefaultHtmlEscape(ServletContext servletContext);1394572186;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false);public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false;public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1496837955;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1501582137;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1506097334;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1508532146;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1515504834;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1515504834;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1516361410;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1519560860;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1522332352;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1522354261;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1526045499;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1530174524;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType);1533723582;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeRequest(ServletRequest request, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,request,servlet,request,request,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> public static void exposeForwardRequestAttributes(HttpServletRequest request);1328020251;Expose the current request URI and paths as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.4 specification,_for containers that implement 2.3 or an earlier version of the Servlet API:_<code>javax.servlet.forward.request_uri</code>,_<code>javax.servlet.forward.context_path</code>,_<code>javax.servlet.forward.servlet_path</code>,_<code>javax.servlet.forward.path_info</code>,_<code>javax.servlet.forward.query_string</code>._<p>Does not override values if already present, to not cause conflicts_with the attributes exposed by Servlet 2.4+ containers themselves._@param request current servlet request;public static void exposeForwardRequestAttributes(HttpServletRequest request) {_		exposeRequestAttributeIfNotPresent(request, FORWARD_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, FORWARD_CONTEXT_PATH_ATTRIBUTE, request.getContextPath())__		exposeRequestAttributeIfNotPresent(request, FORWARD_SERVLET_PATH_ATTRIBUTE, request.getServletPath())__		exposeRequestAttributeIfNotPresent(request, FORWARD_PATH_INFO_ATTRIBUTE, request.getPathInfo())__		exposeRequestAttributeIfNotPresent(request, FORWARD_QUERY_STRING_ATTRIBUTE, request.getQueryString())__	};expose,the,current,request,uri,and,paths,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,4,specification,for,containers,that,implement,2,3,or,an,earlier,version,of,the,servlet,api,code,javax,servlet,forward,code,code,javax,servlet,forward,code,code,javax,servlet,forward,code,code,javax,servlet,forward,code,code,javax,servlet,forward,code,p,does,not,override,values,if,already,present,to,not,cause,conflicts,with,the,attributes,exposed,by,servlet,2,4,containers,themselves,param,request,current,servlet,request;public,static,void,expose,forward,request,attributes,http,servlet,request,request,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,request,get,context,path,expose,request,attribute,if,not,present,request,request,get,servlet,path,expose,request,attribute,if,not,present,request,request,get,path,info,expose,request,attribute,if,not,present,request,request,get,query,string
WebUtils -> public static void exposeForwardRequestAttributes(HttpServletRequest request);1346174472;Expose the current request URI and paths as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.4 specification,_for containers that implement 2.3 or an earlier version of the Servlet API:_<code>javax.servlet.forward.request_uri</code>,_<code>javax.servlet.forward.context_path</code>,_<code>javax.servlet.forward.servlet_path</code>,_<code>javax.servlet.forward.path_info</code>,_<code>javax.servlet.forward.query_string</code>._<p>Does not override values if already present, to not cause conflicts_with the attributes exposed by Servlet 2.4+ containers themselves._@param request current servlet request;public static void exposeForwardRequestAttributes(HttpServletRequest request) {_		exposeRequestAttributeIfNotPresent(request, FORWARD_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, FORWARD_CONTEXT_PATH_ATTRIBUTE, request.getContextPath())__		exposeRequestAttributeIfNotPresent(request, FORWARD_SERVLET_PATH_ATTRIBUTE, request.getServletPath())__		exposeRequestAttributeIfNotPresent(request, FORWARD_PATH_INFO_ATTRIBUTE, request.getPathInfo())__		exposeRequestAttributeIfNotPresent(request, FORWARD_QUERY_STRING_ATTRIBUTE, request.getQueryString())__	};expose,the,current,request,uri,and,paths,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,4,specification,for,containers,that,implement,2,3,or,an,earlier,version,of,the,servlet,api,code,javax,servlet,forward,code,code,javax,servlet,forward,code,code,javax,servlet,forward,code,code,javax,servlet,forward,code,code,javax,servlet,forward,code,p,does,not,override,values,if,already,present,to,not,cause,conflicts,with,the,attributes,exposed,by,servlet,2,4,containers,themselves,param,request,current,servlet,request;public,static,void,expose,forward,request,attributes,http,servlet,request,request,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,request,get,context,path,expose,request,attribute,if,not,present,request,request,get,servlet,path,expose,request,attribute,if,not,present,request,request,get,path,info,expose,request,attribute,if,not,present,request,request,get,query,string
WebUtils -> public static void exposeForwardRequestAttributes(HttpServletRequest request);1356735495;Expose the current request URI and paths as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.4 specification,_for containers that implement 2.3 or an earlier version of the Servlet API:_{@code javax.servlet.forward.request_uri},_{@code javax.servlet.forward.context_path},_{@code javax.servlet.forward.servlet_path},_{@code javax.servlet.forward.path_info},_{@code javax.servlet.forward.query_string}._<p>Does not override values if already present, to not cause conflicts_with the attributes exposed by Servlet 2.4+ containers themselves._@param request current servlet request;public static void exposeForwardRequestAttributes(HttpServletRequest request) {_		exposeRequestAttributeIfNotPresent(request, FORWARD_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, FORWARD_CONTEXT_PATH_ATTRIBUTE, request.getContextPath())__		exposeRequestAttributeIfNotPresent(request, FORWARD_SERVLET_PATH_ATTRIBUTE, request.getServletPath())__		exposeRequestAttributeIfNotPresent(request, FORWARD_PATH_INFO_ATTRIBUTE, request.getPathInfo())__		exposeRequestAttributeIfNotPresent(request, FORWARD_QUERY_STRING_ATTRIBUTE, request.getQueryString())__	};expose,the,current,request,uri,and,paths,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,4,specification,for,containers,that,implement,2,3,or,an,earlier,version,of,the,servlet,api,code,javax,servlet,forward,code,javax,servlet,forward,code,javax,servlet,forward,code,javax,servlet,forward,code,javax,servlet,forward,p,does,not,override,values,if,already,present,to,not,cause,conflicts,with,the,attributes,exposed,by,servlet,2,4,containers,themselves,param,request,current,servlet,request;public,static,void,expose,forward,request,attributes,http,servlet,request,request,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,request,get,context,path,expose,request,attribute,if,not,present,request,request,get,servlet,path,expose,request,attribute,if,not,present,request,request,get,path,info,expose,request,attribute,if,not,present,request,request,get,query,string
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 		throws IllegalStateException;1356735495;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_		throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 		throws IllegalStateException;1363700001;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_		throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 		throws IllegalStateException;1380920029;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_		throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 		throws IllegalStateException;1385412762;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_		throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1414144427;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default);public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1419948111;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default);public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1419949603;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1424248215;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1424278772;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1424361118;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1424361139;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1430734105;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is used for HTML escaping (null = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,used,for,html,escaping,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1432404288;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1432412650;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1436200220;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1436777959;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1444898007;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1458830024;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1467726769;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1467730834;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1468613531;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1468948866;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext);1468963833;Return whether response encoding should be used when HTML escaping characters,_thus only escaping XML markup significant characters with UTF-* encodings._This option is enabled for the web application with a ServletContext param,_i.e. the value of the "responseEncodedHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether response encoding is to be used for HTML escaping_({@code null} = no explicit default)_@since 4.1.2;public static Boolean getResponseEncodedHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(RESPONSE_ENCODED_HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,response,encoding,should,be,used,when,html,escaping,characters,thus,only,escaping,xml,markup,significant,characters,with,utf,encodings,this,option,is,enabled,for,the,web,application,with,a,servlet,context,param,i,e,the,value,of,the,response,encoded,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,response,encoding,is,to,be,used,for,html,escaping,code,null,no,explicit,default,since,4,1,2;public,static,boolean,get,response,encoded,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1328020251;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1346174472;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1356735495;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1363700001;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1380920029;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1385412762;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1394572186;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1414144427;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1419948111;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1419949603;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1424248215;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1424278772;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1424361118;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1424361139;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1430734105;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1432404288;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1432412650;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1436200220;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1436777959;Extract the full URL filename (including file extension) from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('_')__		if (end == -1) {_			end = urlPath.indexOf('?')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1444898007;Extract the full URL filename (including file extension) from the given_request URL path. Correctly resolve nested paths such as_"/products/view.html" and remove any path and or query parameters._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('?')__		if (end == -1) {_			end = urlPath.indexOf('#')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		int paramIndex = urlPath.indexOf('_', begin)__		end = (paramIndex != -1 && paramIndex < end ? paramIndex : end)__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolve,nested,paths,such,as,products,view,html,and,remove,any,path,and,or,query,parameters,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,int,param,index,url,path,index,of,begin,end,param,index,1,param,index,end,param,index,end,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1458830024;Extract the full URL filename (including file extension) from the given_request URL path. Correctly resolve nested paths such as_"/products/view.html" and remove any path and or query parameters._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('?')__		if (end == -1) {_			end = urlPath.indexOf('#')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		int paramIndex = urlPath.indexOf('_', begin)__		end = (paramIndex != -1 && paramIndex < end ? paramIndex : end)__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolve,nested,paths,such,as,products,view,html,and,remove,any,path,and,or,query,parameters,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,int,param,index,url,path,index,of,begin,end,param,index,1,param,index,end,param,index,end,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1467726769;Extract the full URL filename (including file extension) from the given_request URL path. Correctly resolve nested paths such as_"/products/view.html" and remove any path and or query parameters._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('?')__		if (end == -1) {_			end = urlPath.indexOf('#')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		int paramIndex = urlPath.indexOf('_', begin)__		end = (paramIndex != -1 && paramIndex < end ? paramIndex : end)__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolve,nested,paths,such,as,products,view,html,and,remove,any,path,and,or,query,parameters,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,int,param,index,url,path,index,of,begin,end,param,index,1,param,index,end,param,index,end,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1467730834;Extract the full URL filename (including file extension) from the given_request URL path. Correctly resolve nested paths such as_"/products/view.html" and remove any path and or query parameters._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('?')__		if (end == -1) {_			end = urlPath.indexOf('#')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		int paramIndex = urlPath.indexOf('_', begin)__		end = (paramIndex != -1 && paramIndex < end ? paramIndex : end)__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolve,nested,paths,such,as,products,view,html,and,remove,any,path,and,or,query,parameters,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,int,param,index,url,path,index,of,begin,end,param,index,1,param,index,end,param,index,end,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1468613531;Extract the full URL filename (including file extension) from the given_request URL path. Correctly resolve nested paths such as_"/products/view.html" and remove any path and or query parameters._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('?')__		if (end == -1) {_			end = urlPath.indexOf('#')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		int paramIndex = urlPath.indexOf('_', begin)__		end = (paramIndex != -1 && paramIndex < end ? paramIndex : end)__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolve,nested,paths,such,as,products,view,html,and,remove,any,path,and,or,query,parameters,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,int,param,index,url,path,index,of,begin,end,param,index,1,param,index,end,param,index,end,return,url,path,substring,begin,end
WebUtils -> public static String extractFullFilenameFromUrlPath(String urlPath);1468948866;Extract the full URL filename (including file extension) from the given_request URL path. Correctly resolve nested paths such as_"/products/view.html" and remove any path and or query parameters._@param urlPath the request URL path (e.g. "/products/index.html")_@return the extracted URI filename (e.g. "index.html");public static String extractFullFilenameFromUrlPath(String urlPath) {_		int end = urlPath.indexOf('?')__		if (end == -1) {_			end = urlPath.indexOf('#')__			if (end == -1) {_				end = urlPath.length()__			}_		}_		int begin = urlPath.lastIndexOf('/', end) + 1__		int paramIndex = urlPath.indexOf('_', begin)__		end = (paramIndex != -1 && paramIndex < end ? paramIndex : end)__		return urlPath.substring(begin, end)__	};extract,the,full,url,filename,including,file,extension,from,the,given,request,url,path,correctly,resolve,nested,paths,such,as,products,view,html,and,remove,any,path,and,or,query,parameters,param,url,path,the,request,url,path,e,g,products,index,html,return,the,extracted,uri,filename,e,g,index,html;public,static,string,extract,full,filename,from,url,path,string,url,path,int,end,url,path,index,of,if,end,1,end,url,path,index,of,if,end,1,end,url,path,length,int,begin,url,path,last,index,of,end,1,int,param,index,url,path,index,of,begin,end,param,index,1,param,index,end,param,index,end,return,url,path,substring,begin,end
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1414144427;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1419948111;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1419949603;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1424248215;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1424278772;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1424361118;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1424361139;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1430734105;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is false)_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1432404288;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is {@code false})_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,code,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1432412650;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is {@code false})_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,code,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1436200220;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is {@code false})_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,code,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1436777959;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is {@code false})_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,code,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1444898007;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is {@code false})_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,code,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @Deprecated 	public static boolean isDefaultHtmlEscape(ServletContext servletContext);1458830024;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any). Falls back to {@code false} in case of no explicit default given._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (default is {@code false})_@deprecated as of Spring 4.1, in favor of {@link #getDefaultHtmlEscape};@Deprecated_	public static boolean isDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return false__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return Boolean.valueOf(param)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,falls,back,to,code,false,in,case,of,no,explicit,default,given,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,default,is,code,false,deprecated,as,of,spring,4,1,in,favor,of,link,get,default,html,escape;deprecated,public,static,boolean,is,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,false,string,param,servlet,context,get,init,parameter,return,boolean,value,of,param
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1328020251;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or <code>null</code> if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,code,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1346174472;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or <code>null</code> if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,code,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1356735495;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1363700001;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1380920029;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1385412762;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1394572186;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1414144427;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1419948111;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1419949603;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1424248215;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1424278772;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1424361118;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1424361139;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1430734105;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1432404288;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1432412650;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1436200220;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1436777959;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1444898007;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1458830024;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1467726769;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1467730834;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1468613531;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1468948866;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType);1468963833;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeResponse(ServletResponse response, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,response,servlet,response,response,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1424278772;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return true if the request origin is valid, false otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (allowedOrigins.isEmpty()) {_			UriComponents originComponents = UriComponentsBuilder.fromHttpUrl(origin).build()__			UriComponents requestComponents = UriComponentsBuilder.fromHttpRequest(request).build()__			int originPort = getPort(originComponents)__			int requestPort = getPort(requestComponents)__			return (originComponents.getHost().equals(requestComponents.getHost()) && originPort == requestPort)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,true,if,the,request,origin,is,valid,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,allowed,origins,is,empty,uri,components,origin,components,uri,components,builder,from,http,url,origin,build,uri,components,request,components,uri,components,builder,from,http,request,request,build,int,origin,port,get,port,origin,components,int,request,port,get,port,request,components,return,origin,components,get,host,equals,request,components,get,host,origin,port,request,port,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1424361118;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return true if the request origin is valid, false otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (allowedOrigins.isEmpty()) {_			UriComponents originComponents__			try {_				originComponents = UriComponentsBuilder.fromHttpUrl(origin).build()__			}_			catch (IllegalArgumentException ex) {_				logger.error("Failed to parse Origin header value [" + origin + "]")__				return false__			}_			UriComponents requestComponents = UriComponentsBuilder.fromHttpRequest(request).build()__			int originPort = getPort(originComponents)__			int requestPort = getPort(requestComponents)__			return (originComponents.getHost().equals(requestComponents.getHost()) && originPort == requestPort)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,true,if,the,request,origin,is,valid,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,allowed,origins,is,empty,uri,components,origin,components,try,origin,components,uri,components,builder,from,http,url,origin,build,catch,illegal,argument,exception,ex,logger,error,failed,to,parse,origin,header,value,origin,return,false,uri,components,request,components,uri,components,builder,from,http,request,request,build,int,origin,port,get,port,origin,components,int,request,port,get,port,request,components,return,origin,components,get,host,equals,request,components,get,host,origin,port,request,port,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1424361139;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return true if the request origin is valid, false otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (allowedOrigins.isEmpty()) {_			UriComponents originComponents__			try {_				originComponents = UriComponentsBuilder.fromHttpUrl(origin).build()__			}_			catch (IllegalArgumentException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Failed to parse Origin header value [" + origin + "]")__				}_				return false__			}_			UriComponents requestComponents = UriComponentsBuilder.fromHttpRequest(request).build()__			int originPort = getPort(originComponents)__			int requestPort = getPort(requestComponents)__			return (originComponents.getHost().equals(requestComponents.getHost()) && originPort == requestPort)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,true,if,the,request,origin,is,valid,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,allowed,origins,is,empty,uri,components,origin,components,try,origin,components,uri,components,builder,from,http,url,origin,build,catch,illegal,argument,exception,ex,if,logger,is,warn,enabled,logger,warn,failed,to,parse,origin,header,value,origin,return,false,uri,components,request,components,uri,components,builder,from,http,request,request,build,int,origin,port,get,port,origin,components,int,request,port,get,port,request,components,return,origin,components,get,host,equals,request,components,get,host,origin,port,request,port,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1430734105;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return true if the request origin is valid, false otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__			return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,true,if,the,request,origin,is,valid,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,uri,components,actual,url,uri,components,builder,from,http,request,request,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1432404288;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return true if the request origin is valid, false otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__			return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,true,if,the,request,origin,is,valid,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,uri,components,actual,url,uri,components,builder,from,http,request,request,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1432412650;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__			return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,uri,components,actual,url,uri,components,builder,from,http,request,request,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1436200220;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__			return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,uri,components,actual,url,uri,components,builder,from,http,request,request,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1436777959;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1444898007;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1458830024;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1467726769;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1467730834;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1468613531;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1468948866;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1468963833;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1495868221;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1496837955;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1501582137;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1506097334;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1508532146;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1515504834;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1515504834;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1516361410;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1519560860;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1522332352;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1522354261;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed._<p><strong>Note:</strong> this method may use values from "Forwarded"_(<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>),_"X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" headers,_if present, in order to reflect the client-originated address._Consider using the {@code ForwardedHeaderFilter} in order to choose from a_central place whether to extract and use, or to discard such headers._See the Spring Framework reference for more on this filter._@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,p,strong,note,strong,this,method,may,use,values,from,forwarded,a,href,http,tools,ietf,org,html,rfc7239,rfc,7239,a,x,forwarded,host,x,forwarded,port,and,x,forwarded,proto,headers,if,present,in,order,to,reflect,the,client,originated,address,consider,using,the,code,forwarded,header,filter,in,order,to,choose,from,a,central,place,whether,to,extract,and,use,or,to,discard,such,headers,see,the,spring,framework,reference,for,more,on,this,filter,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1526045499;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1530174524;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins);1533723582;Check the given request origin against a list of allowed origins._A list containing "*" means that all origins are allowed._An empty list means only same origin is allowed.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request origin is valid, {@code false} otherwise_@since 4.1.5_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>;public static boolean isValidOrigin(HttpRequest request, Collection<String> allowedOrigins) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(allowedOrigins, "Allowed origins must not be null")___		String origin = request.getHeaders().getOrigin()__		if (origin == null || allowedOrigins.contains("*")) {_			return true__		}_		else if (CollectionUtils.isEmpty(allowedOrigins)) {_			return isSameOrigin(request)__		}_		else {_			return allowedOrigins.contains(origin)__		}_	};check,the,given,request,origin,against,a,list,of,allowed,origins,a,list,containing,means,that,all,origins,are,allowed,an,empty,list,means,only,same,origin,is,allowed,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,origin,is,valid,code,false,otherwise,since,4,1,5,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a;public,static,boolean,is,valid,origin,http,request,request,collection,string,allowed,origins,assert,not,null,request,request,must,not,be,null,assert,not,null,allowed,origins,allowed,origins,must,not,be,null,string,origin,request,get,headers,get,origin,if,origin,null,allowed,origins,contains,return,true,else,if,collection,utils,is,empty,allowed,origins,return,is,same,origin,request,else,return,allowed,origins,contains,origin
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1328020251;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's <code>getRealPath</code>,_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,code,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1346174472;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's <code>getRealPath</code>,_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,code,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1356735495;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1363700001;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1380920029;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1385412762;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1394572186;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1414144427;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1419948111;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1419949603;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1424248215;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1424278772;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1424361118;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1424361139;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1430734105;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1432404288;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1432412650;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1436200220;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1436777959;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1444898007;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1458830024;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1467726769;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1467730834;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1468613531;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1468948866;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1468963833;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1495868221;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1496837955;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1501582137;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1506097334;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1508532146;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1515504834;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1515504834;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1516361410;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1519560860;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1522332352;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1522354261;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1526045499;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1530174524;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException;1533723582;Return the real path of the given path within the web application,_as provided by the servlet container._<p>Prepends a slash if the path does not already start with a slash,_and throws a FileNotFoundException if the path cannot be resolved to_a resource (in contrast to ServletContext's {@code getRealPath},_which returns null)._@param servletContext the servlet context of the web application_@param path the path within the web application_@return the corresponding real path_@throws FileNotFoundException if the path cannot be resolved to a resource_@see javax.servlet.ServletContext#getRealPath;public static String getRealPath(ServletContext servletContext, String path) throws FileNotFoundException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		_		if (!path.startsWith("/")) {_			path = "/" + path__		}_		String realPath = servletContext.getRealPath(path)__		if (realPath == null) {_			throw new FileNotFoundException(_					"ServletContext resource [" + path + "] cannot be resolved to absolute file path - " +_					"web application archive not expanded?")__		}_		return realPath__	};return,the,real,path,of,the,given,path,within,the,web,application,as,provided,by,the,servlet,container,p,prepends,a,slash,if,the,path,does,not,already,start,with,a,slash,and,throws,a,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,in,contrast,to,servlet,context,s,code,get,real,path,which,returns,null,param,servlet,context,the,servlet,context,of,the,web,application,param,path,the,path,within,the,web,application,return,the,corresponding,real,path,throws,file,not,found,exception,if,the,path,cannot,be,resolved,to,a,resource,see,javax,servlet,servlet,context,get,real,path;public,static,string,get,real,path,servlet,context,servlet,context,string,path,throws,file,not,found,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,if,path,starts,with,path,path,string,real,path,servlet,context,get,real,path,path,if,real,path,null,throw,new,file,not,found,exception,servlet,context,resource,path,cannot,be,resolved,to,absolute,file,path,web,application,archive,not,expanded,return,real,path
WebUtils -> @SuppressWarnings("unchecked") 	public static String findParameterValue(ServletRequest request, String name);1328020251;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or <code>null</code>_if the parameter does not exist in given request;@SuppressWarnings("unchecked")_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,code,if,the,parameter,does,not,exist,in,given,request;suppress,warnings,unchecked,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @SuppressWarnings("unchecked") 	public static String findParameterValue(ServletRequest request, String name);1346174472;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or <code>null</code>_if the parameter does not exist in given request;@SuppressWarnings("unchecked")_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,code,if,the,parameter,does,not,exist,in,given,request;suppress,warnings,unchecked,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1495868221;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1496837955;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1501582137;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1506097334;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1508532146;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1515504834;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1515504834;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1516361410;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1519560860;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1522332352;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1522354261;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1526045499;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1530174524;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> @Nullable 	public static String getSessionId(HttpServletRequest request);1533723582;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;@Nullable_	public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;nullable,public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1346174472;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1356735495;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1363700001;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1380920029;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1385412762;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1394572186;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1414144427;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1419948111;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1419949603;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1424248215;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively.__@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null};public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1424278772;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null}_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1424361118;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null}_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1424361139;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null}_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1430734105;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null}_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1432404288;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values, never {@code null}_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1432412650;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1436200220;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1436777959;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1444898007;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1458830024;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1467726769;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,string,string,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1467730834;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1468613531;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1468948866;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1468963833;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1495868221;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1496837955;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1501582137;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1506097334;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1508532146;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1515504834;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1515504834;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1516361410;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1519560860;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1522332352;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1522354261;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1526045499;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1530174524;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables);1533723582;Parse the given string with matrix variables. An example string would look_like this {@code "q1=a_q1=b_q2=a,b,c"}. The resulting map would contain_keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and_{@code ["a","b","c"]} respectively._@param matrixVariables the unparsed matrix variables string_@return a map with matrix variable names and values (never {@code null})_@since 3.2;public static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {_		MultiValueMap<String, String> result = new LinkedMultiValueMap<>()__		if (!StringUtils.hasText(matrixVariables)) {_			return result__		}_		StringTokenizer pairs = new StringTokenizer(matrixVariables, "_")__		while (pairs.hasMoreTokens()) {_			String pair = pairs.nextToken()__			int index = pair.indexOf('=')__			if (index != -1) {_				String name = pair.substring(0, index)__				String rawValue = pair.substring(index + 1)__				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {_					result.add(name, value)__				}_			}_			else {_				result.add(pair, "")__			}_		}_		return result__	};parse,the,given,string,with,matrix,variables,an,example,string,would,look,like,this,code,q1,a,q1,b,q2,a,b,c,the,resulting,map,would,contain,keys,code,q1,and,code,q2,with,values,code,a,b,and,code,a,b,c,respectively,param,matrix,variables,the,unparsed,matrix,variables,string,return,a,map,with,matrix,variable,names,and,values,never,code,null,since,3,2;public,static,multi,value,map,string,string,parse,matrix,variables,string,matrix,variables,multi,value,map,string,string,result,new,linked,multi,value,map,if,string,utils,has,text,matrix,variables,return,result,string,tokenizer,pairs,new,string,tokenizer,matrix,variables,while,pairs,has,more,tokens,string,pair,pairs,next,token,int,index,pair,index,of,if,index,1,string,name,pair,substring,0,index,string,raw,value,pair,substring,index,1,for,string,value,string,utils,comma,delimited,list,to,string,array,raw,value,result,add,name,value,else,result,add,pair,return,result
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1495868221;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1496837955;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1501582137;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1506097334;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1508532146;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1515504834;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1515504834;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1516361410;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1519560860;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1522332352;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1522354261;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1526045499;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1530174524;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static String findParameterValue(Map<String, ?> parameters, String name);1533723582;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1495868221;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1496837955;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1501582137;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1506097334;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1508532146;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1515504834;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1515504834;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1516361410;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1519560860;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie[] cookies = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1522332352;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie[] cookies = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1522354261;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie[] cookies = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1526045499;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie[] cookies = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1530174524;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie[] cookies = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Cookie getCookie(HttpServletRequest request, String name);1533723582;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;@Nullable_	public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie[] cookies = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;nullable,public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Object getSessionMutex(HttpSession session);1328020251;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in <code>web.xml</code>. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never <code>null</code>)_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,code,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,code,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1346174472;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in <code>web.xml</code>. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never <code>null</code>)_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,code,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,code,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1356735495;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1363700001;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1380920029;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1385412762;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1394572186;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1414144427;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1419948111;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1419949603;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1424248215;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1424278772;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1424361118;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1424361139;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1430734105;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1432404288;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1432412650;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1436200220;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1436777959;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1444898007;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1458830024;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1467726769;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1467730834;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1468613531;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1468948866;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1468963833;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1495868221;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1496837955;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1501582137;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1506097334;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1508532146;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1515504834;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1515504834;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1516361410;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1519560860;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1522332352;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1522354261;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1526045499;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1530174524;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static Object getSessionMutex(HttpSession session);1533723582;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the HttpSession itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param session the HttpSession to find a mutex for_@return the mutex object (never {@code null})_@see #SESSION_MUTEX_ATTRIBUTE_@see HttpSessionMutexListener;public static Object getSessionMutex(HttpSession session) {_		Assert.notNull(session, "Session must not be null")__		Object mutex = session.getAttribute(SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = session__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,http,session,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,session,the,http,session,to,find,a,mutex,for,return,the,mutex,object,never,code,null,see,see,http,session,mutex,listener;public,static,object,get,session,mutex,http,session,session,assert,not,null,session,session,must,not,be,null,object,mutex,session,get,attribute,if,mutex,null,mutex,session,return,mutex
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1328020251;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1346174472;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1356735495;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1363700001;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1380920029;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1385412762;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1394572186;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1414144427;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1419948111;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1419949603;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1424248215;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1424278772;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1424361118;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1424361139;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1430734105;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1432404288;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1432412650;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1436200220;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1436777959;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1444898007;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1458830024;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1467726769;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1467730834;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1468613531;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes);1468948866;Expose the given Map as request attributes, using the keys as attribute names_and the values as corresponding attribute values. Keys need to be Strings._@param request current HTTP request_@param attributes the attributes Map;public static void exposeRequestAttributes(ServletRequest request, Map<String, ?> attributes) {_		Assert.notNull(request, "Request must not be null")__		Assert.notNull(attributes, "Attributes Map must not be null")__		for (Map.Entry<String, ?> entry : attributes.entrySet()) {_			request.setAttribute(entry.getKey(), entry.getValue())__		}_	};expose,the,given,map,as,request,attributes,using,the,keys,as,attribute,names,and,the,values,as,corresponding,attribute,values,keys,need,to,be,strings,param,request,current,http,request,param,attributes,the,attributes,map;public,static,void,expose,request,attributes,servlet,request,request,map,string,attributes,assert,not,null,request,request,must,not,be,null,assert,not,null,attributes,attributes,map,must,not,be,null,for,map,entry,string,entry,attributes,entry,set,request,set,attribute,entry,get,key,entry,get,value
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1328020251;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1346174472;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1356735495;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1363700001;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1380920029;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1385412762;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1394572186;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1414144427;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1419948111;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1419949603;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1424248215;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1424278772;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1424361118;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1424361139;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1430734105;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1432404288;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1432412650;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1436200220;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1436777959;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1444898007;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1458830024;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1467726769;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1467730834;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1468613531;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1468948866;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1468963833;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, Object value);1495868221;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1328020251;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or <code>null</code> if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,code,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1346174472;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or <code>null</code> if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,code,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1356735495;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1363700001;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1380920029;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1385412762;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1394572186;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1414144427;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1419948111;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1419949603;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1424248215;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1424278772;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1424361118;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1424361139;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1430734105;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1432404288;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1432412650;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1436200220;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1436777959;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1444898007;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1458830024;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1467726769;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1467730834;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1468613531;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1468948866;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType);1468963833;Return an appropriate request object of the specified type, if available,_unwrapping the given request as far as necessary._@param request the servlet request to introspect_@param requiredType the desired type of request object_@return the matching request object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	public static <T> T getNativeRequest(ServletRequest request, Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(request)) {_				return (T) request__			}_			else if (request instanceof ServletRequestWrapper) {_				return getNativeRequest(((ServletRequestWrapper) request).getRequest(), requiredType)__			}_		}_		return null__	};return,an,appropriate,request,object,of,the,specified,type,if,available,unwrapping,the,given,request,as,far,as,necessary,param,request,the,servlet,request,to,introspect,param,required,type,the,desired,type,of,request,object,return,the,matching,request,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,public,static,t,t,get,native,request,servlet,request,request,class,t,required,type,if,required,type,null,if,required,type,is,instance,request,return,t,request,else,if,request,instanceof,servlet,request,wrapper,return,get,native,request,servlet,request,wrapper,request,get,request,required,type,return,null
WebUtils -> @Nullable 	public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1495868221;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;@Nullable_	public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;nullable,public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> @Nullable 	public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1496837955;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;@Nullable_	public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;nullable,public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> @Nullable 	public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1501582137;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;@Nullable_	public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;nullable,public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1328020251;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or <code>null</code> if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,code,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1346174472;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or <code>null</code> if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,code,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1356735495;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1363700001;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1380920029;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1385412762;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1394572186;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1414144427;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1419948111;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1419949603;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1424248215;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1424278772;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1424361118;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1424361139;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1430734105;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1432404288;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1432412650;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1436200220;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1436777959;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1444898007;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1458830024;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1467726769;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1467730834;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1468613531;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1468948866;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> public static Cookie getCookie(HttpServletRequest request, String name);1468963833;Retrieve the first cookie with the given name. Note that multiple_cookies can have the same name but different paths or domains._@param request current servlet request_@param name cookie name_@return the first cookie with the given name, or {@code null} if none is found;public static Cookie getCookie(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		Cookie cookies[] = request.getCookies()__		if (cookies != null) {_			for (Cookie cookie : cookies) {_				if (name.equals(cookie.getName())) {_					return cookie__				}_			}_		}_		return null__	};retrieve,the,first,cookie,with,the,given,name,note,that,multiple,cookies,can,have,the,same,name,but,different,paths,or,domains,param,request,current,servlet,request,param,name,cookie,name,return,the,first,cookie,with,the,given,name,or,code,null,if,none,is,found;public,static,cookie,get,cookie,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,cookie,cookies,request,get,cookies,if,cookies,null,for,cookie,cookie,cookies,if,name,equals,cookie,get,name,return,cookie,return,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1496837955;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1501582137;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1506097334;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1508532146;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1515504834;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1515504834;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1516361410;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1519560860;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1522332352;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1522354261;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1526045499;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1530174524;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext);1533723582;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);@Nullable_	public static Boolean getDefaultHtmlEscape(@Nullable ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;nullable,public,static,boolean,get,default,html,escape,nullable,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 	    throws IllegalStateException;1328020251;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or <code>null</code> if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_	    throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,code,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 	    throws IllegalStateException;1346174472;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or <code>null</code> if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_	    throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,code,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1328020251;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1346174472;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1356735495;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1363700001;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1380920029;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1385412762;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1394572186;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1414144427;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1419948111;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1419949603;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1424248215;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1424278772;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1424361118;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1424361139;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1430734105;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1432404288;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1432412650;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1436200220;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1436777959;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1444898007;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1458830024;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1467726769;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<String, Object>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,string,object,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1467730834;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1468613531;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1468948866;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1468963833;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix);1495868221;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1496837955;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1501582137;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1506097334;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1508532146;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1515504834;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1515504834;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1516361410;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1519560860;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1522332352;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1522354261;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1526045499;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1530174524;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType);1533723582;Return an appropriate response object of the specified type, if available,_unwrapping the given response as far as necessary._@param response the servlet response to introspect_@param requiredType the desired type of response object_@return the matching response object, or {@code null} if none_of that type is available;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T getNativeResponse(ServletResponse response, @Nullable Class<T> requiredType) {_		if (requiredType != null) {_			if (requiredType.isInstance(response)) {_				return (T) response__			}_			else if (response instanceof ServletResponseWrapper) {_				return getNativeResponse(((ServletResponseWrapper) response).getResponse(), requiredType)__			}_		}_		return null__	};return,an,appropriate,response,object,of,the,specified,type,if,available,unwrapping,the,given,response,as,far,as,necessary,param,response,the,servlet,response,to,introspect,param,required,type,the,desired,type,of,response,object,return,the,matching,response,object,or,code,null,if,none,of,that,type,is,available;suppress,warnings,unchecked,nullable,public,static,t,t,get,native,response,servlet,response,response,nullable,class,t,required,type,if,required,type,null,if,required,type,is,instance,response,return,t,response,else,if,response,instanceof,servlet,response,wrapper,return,get,native,response,servlet,response,wrapper,response,get,response,required,type,return,null
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1328020251;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_<code>javax.servlet.error.status_code</code>,_<code>javax.servlet.error.exception_type</code>,_<code>javax.servlet.error.message</code>,_<code>javax.servlet.error.exception</code>,_<code>javax.servlet.error.request_uri</code>,_<code>javax.servlet.error.servlet_name</code>._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,code,javax,servlet,error,code,code,javax,servlet,error,message,code,code,javax,servlet,error,exception,code,code,javax,servlet,error,code,code,javax,servlet,error,code,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1346174472;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_<code>javax.servlet.error.status_code</code>,_<code>javax.servlet.error.exception_type</code>,_<code>javax.servlet.error.message</code>,_<code>javax.servlet.error.exception</code>,_<code>javax.servlet.error.request_uri</code>,_<code>javax.servlet.error.servlet_name</code>._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,code,javax,servlet,error,code,code,javax,servlet,error,message,code,code,javax,servlet,error,exception,code,code,javax,servlet,error,code,code,javax,servlet,error,code,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1356735495;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1363700001;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1380920029;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1385412762;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1394572186;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1414144427;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1419948111;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1419949603;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1424248215;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1424278772;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1424361118;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1424361139;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1430734105;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1432404288;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1432412650;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1436200220;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1436777959;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1444898007;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1458830024;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1467726769;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1467730834;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1468613531;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1468948866;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1468963833;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName);1495868221;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1328020251;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1346174472;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1356735495;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1363700001;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1380920029;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1385412762;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1394572186;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1414144427;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1419948111;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1419949603;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1424248215;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1424278772;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1424361118;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1424361139;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1430734105;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1432404288;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1432412650;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1436200220;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1436777959;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1444898007;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1458830024;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1467726769;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1467730834;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1468613531;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1468948866;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1468963833;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1495868221;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1496837955;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1501582137;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1506097334;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1508532146;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1515504834;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1515504834;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1516361410;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1519560860;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1522332352;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1522354261;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1526045499;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1530174524;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static boolean hasSubmitParameter(ServletRequest request, String name);1533723582;Check if a specific input type="submit" parameter was sent in the request,_either via a button (directly with name) or via an image (name + ".x" or_name + ".y")._@param request current HTTP request_@param name name of the parameter_@return if the parameter was sent_@see #SUBMIT_IMAGE_SUFFIXES;public static boolean hasSubmitParameter(ServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		if (request.getParameter(name) != null) {_			return true__		}_		for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_			if (request.getParameter(name + suffix) != null) {_				return true__			}_		}_		return false__	};check,if,a,specific,input,type,submit,parameter,was,sent,in,the,request,either,via,a,button,directly,with,name,or,via,an,image,name,x,or,name,y,param,request,current,http,request,param,name,name,of,the,parameter,return,if,the,parameter,was,sent,see;public,static,boolean,has,submit,parameter,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,if,request,get,parameter,name,null,return,true,for,string,suffix,if,request,get,parameter,name,suffix,null,return,true,return,false
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1508532146;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1515504834;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1515504834;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1516361410;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1519560860;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1522332352;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1522354261;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1526045499;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1530174524;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, 			@Nullable String servletName);1533723582;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex,_			@Nullable String servletName) {__		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1328020251;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in <code>web.xml</code>_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,code,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1346174472;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in <code>web.xml</code>_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,code,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1356735495;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1363700001;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1380920029;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1385412762;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1394572186;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1414144427;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param)? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1419948111;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1419949603;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1424248215;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1424278772;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1424361118;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1424361139;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1430734105;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled (null = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1432404288;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1432412650;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1436200220;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1436777959;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1444898007;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1458830024;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1467726769;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1467730834;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1468613531;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1468948866;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> public static Boolean getDefaultHtmlEscape(ServletContext servletContext);1468963833;Return whether default HTML escaping is enabled for the web application,_i.e. the value of the "defaultHtmlEscape" context-param in {@code web.xml}_(if any)._<p>This method differentiates between no param specified at all and_an actual boolean value specified, allowing to have a context-specific_default in case of no setting at the global level._@param servletContext the servlet context of the web application_@return whether default HTML escaping is enabled for the given application_({@code null} = no explicit default);public static Boolean getDefaultHtmlEscape(ServletContext servletContext) {_		if (servletContext == null) {_			return null__		}_		String param = servletContext.getInitParameter(HTML_ESCAPE_CONTEXT_PARAM)__		return (StringUtils.hasText(param) ? Boolean.valueOf(param) : null)__	};return,whether,default,html,escaping,is,enabled,for,the,web,application,i,e,the,value,of,the,default,html,escape,context,param,in,code,web,xml,if,any,p,this,method,differentiates,between,no,param,specified,at,all,and,an,actual,boolean,value,specified,allowing,to,have,a,context,specific,default,in,case,of,no,setting,at,the,global,level,param,servlet,context,the,servlet,context,of,the,web,application,return,whether,default,html,escaping,is,enabled,for,the,given,application,code,null,no,explicit,default;public,static,boolean,get,default,html,escape,servlet,context,servlet,context,if,servlet,context,null,return,null,string,param,servlet,context,get,init,parameter,return,string,utils,has,text,param,boolean,value,of,param,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1495868221;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1496837955;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1501582137;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1506097334;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1508532146;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1515504834;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1515504834;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1516361410;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1519560860;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1522332352;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1522354261;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1526045499;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1530174524;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> @Nullable 	public static Object getSessionAttribute(HttpServletRequest request, String name);1533723582;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;@Nullable_	public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;nullable,public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1496837955;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1501582137;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1506097334;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1508532146;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1515504834;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1515504834;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1516361410;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1519560860;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1522332352;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1522354261;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1526045499;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1530174524;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value);1533723582;Set the session attribute with the given name to the given value._Removes the session attribute if value is null, if a session existed at all._Does not create a new session if not necessary!_@param request current HTTP request_@param name the name of the session attribute_@param value the value of the session attribute;public static void setSessionAttribute(HttpServletRequest request, String name, @Nullable Object value) {_		Assert.notNull(request, "Request must not be null")__		if (value != null) {_			request.getSession().setAttribute(name, value)__		}_		else {_			HttpSession session = request.getSession(false)__			if (session != null) {_				session.removeAttribute(name)__			}_		}_	};set,the,session,attribute,with,the,given,name,to,the,given,value,removes,the,session,attribute,if,value,is,null,if,a,session,existed,at,all,does,not,create,a,new,session,if,not,necessary,param,request,current,http,request,param,name,the,name,of,the,session,attribute,param,value,the,value,of,the,session,attribute;public,static,void,set,session,attribute,http,servlet,request,request,string,name,nullable,object,value,assert,not,null,request,request,must,not,be,null,if,value,null,request,get,session,set,attribute,name,value,else,http,session,session,request,get,session,false,if,session,null,session,remove,attribute,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1356735495;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1363700001;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1380920029;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1385412762;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1394572186;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1414144427;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1419948111;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1419949603;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1424248215;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1424278772;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1424361118;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1424361139;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1430734105;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1432404288;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1432412650;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1436200220;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1436777959;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1444898007;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1458830024;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1467726769;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1467730834;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1468613531;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1468948866;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static String findParameterValue(ServletRequest request, String name);1468963833;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1385412762;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1394572186;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1414144427;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1419948111;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1419949603;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1424248215;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1424278772;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1424361118;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1424361139;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1430734105;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1432404288;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1432412650;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1436200220;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1436777959;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1444898007;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1458830024;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1467726769;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1467730834;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz) 			throws IllegalArgumentException;1468613531;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class<?> clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1328020251;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1346174472;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1356735495;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1363700001;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1380920029;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1385412762;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1394572186;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1414144427;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1419948111;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1419949603;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1424248215;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1424278772;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1424361118;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1424361139;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1430734105;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1432404288;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1432412650;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1436200220;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1436777959;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1444898007;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1458830024;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1467726769;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1467730834;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1468613531;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1468948866;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1468963833;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1495868221;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1496837955;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1501582137;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1506097334;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1508532146;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1515504834;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1515504834;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1516361410;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1519560860;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1522332352;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1522354261;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1526045499;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1530174524;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static void removeWebAppRootSystemProperty(ServletContext servletContext);1533723582;Remove the system property that points to the web app root directory._To be called on shutdown of the web application._@param servletContext the servlet context of the web application_@see #setWebAppRootSystemProperty;public static void removeWebAppRootSystemProperty(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		System.getProperties().remove(key)__	};remove,the,system,property,that,points,to,the,web,app,root,directory,to,be,called,on,shutdown,of,the,web,application,param,servlet,context,the,servlet,context,of,the,web,application,see,set,web,app,root,system,property;public,static,void,remove,web,app,root,system,property,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,param,servlet,context,get,init,parameter,string,key,param,null,param,system,get,properties,remove,key
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1394572186;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1414144427;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1419948111;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1419949603;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1424248215;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1424278772;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1424361118;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1424361139;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1430734105;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1432404288;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1432412650;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1436200220;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1436777959;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1444898007;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1458830024;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1467726769;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1467730834;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1468613531;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1468948866;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1468963833;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1506097334;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1508532146;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1515504834;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1515504834;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1516361410;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1519560860;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1522332352;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1522354261;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1526045499;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1530174524;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static Object getRequiredSessionAttribute(HttpServletRequest request, String name) 			throws IllegalStateException;1533723582;Check the given request for a session attribute of the given name._Throws an exception if there is no session or if the session has no such_attribute. Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found_@throws IllegalStateException if the session attribute could not be found;public static Object getRequiredSessionAttribute(HttpServletRequest request, String name)_			throws IllegalStateException {__		Object attr = getSessionAttribute(request, name)__		if (attr == null) {_			throw new IllegalStateException("No session attribute '" + name + "' found")__		}_		return attr__	};check,the,given,request,for,a,session,attribute,of,the,given,name,throws,an,exception,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found,throws,illegal,state,exception,if,the,session,attribute,could,not,be,found;public,static,object,get,required,session,attribute,http,servlet,request,request,string,name,throws,illegal,state,exception,object,attr,get,session,attribute,request,name,if,attr,null,throw,new,illegal,state,exception,no,session,attribute,name,found,return,attr
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1436777959;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,actual,url,uri,components,builder,from,http,request,request,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1444898007;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,actual,url,uri,components,builder,from,http,request,request,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1458830024;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1467726769;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1467730834;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1468613531;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1468948866;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1468963833;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1495868221;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request._@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,url,get,host,equals,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1496837955;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(actualUrl.getHost(), originUrl.getHost()) &&_				getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,actual,url,get,host,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1501582137;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(actualUrl.getHost(), originUrl.getHost()) &&_				getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,actual,url,get,host,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1506097334;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(actualUrl.getHost(), originUrl.getHost()) &&_				getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,actual,url,get,host,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1508532146;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(actualUrl.getHost(), originUrl.getHost()) &&_				getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,actual,url,get,host,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1515504834;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			urlBuilder = new UriComponentsBuilder()._					scheme(servletRequest.getScheme())._					host(servletRequest.getServerName())._					port(servletRequest.getServerPort())._					adaptFromForwardedHeaders(request.getHeaders())__		}_		else {_			urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		}_		UriComponents actualUrl = urlBuilder.build()__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(actualUrl.getHost(), originUrl.getHost()) &&_				getPort(actualUrl) == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,url,builder,new,uri,components,builder,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,adapt,from,forwarded,headers,request,get,headers,else,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,actual,url,get,host,origin,url,get,host,get,port,actual,url,get,port,origin,url
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1515504834;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}_		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()___			if(containsForwardedHeaders(servletRequest)) {_				UriComponents actualUrl = new UriComponentsBuilder()_						.scheme(scheme)_						.host(host)_						.port(port)_						.adaptFromForwardedHeaders(headers)_						.build()__				scheme = actualUrl.getScheme()__				host = actualUrl.getHost()__				port = actualUrl.getPort()__			}_		}_		else {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			scheme = actualUrl.getScheme()__			host = actualUrl.getHost()__			port = actualUrl.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,if,contains,forwarded,headers,servlet,request,uri,components,actual,url,new,uri,components,builder,scheme,scheme,host,host,port,port,adapt,from,forwarded,headers,headers,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,else,uri,components,actual,url,uri,components,builder,from,http,request,request,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1516361410;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}_		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()___			if(containsForwardedHeaders(servletRequest)) {_				UriComponents actualUrl = new UriComponentsBuilder()_						.scheme(scheme)_						.host(host)_						.port(port)_						.adaptFromForwardedHeaders(headers)_						.build()__				scheme = actualUrl.getScheme()__				host = actualUrl.getHost()__				port = actualUrl.getPort()__			}_		}_		else {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			scheme = actualUrl.getScheme()__			host = actualUrl.getHost()__			port = actualUrl.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,if,contains,forwarded,headers,servlet,request,uri,components,actual,url,new,uri,components,builder,scheme,scheme,host,host,port,port,adapt,from,forwarded,headers,headers,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,else,uri,components,actual,url,uri,components,builder,from,http,request,request,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1519560860;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}_		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()___			if(containsForwardedHeaders(servletRequest)) {_				UriComponents actualUrl = new UriComponentsBuilder()_						.scheme(scheme)_						.host(host)_						.port(port)_						.adaptFromForwardedHeaders(headers)_						.build()__				scheme = actualUrl.getScheme()__				host = actualUrl.getHost()__				port = actualUrl.getPort()__			}_		}_		else {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			scheme = actualUrl.getScheme()__			host = actualUrl.getHost()__			port = actualUrl.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,if,contains,forwarded,headers,servlet,request,uri,components,actual,url,new,uri,components,builder,scheme,scheme,host,host,port,port,adapt,from,forwarded,headers,headers,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,else,uri,components,actual,url,uri,components,builder,from,http,request,request,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1522332352;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}__		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()__			if (containsForwardedHeaders(servletRequest)) {_				UriComponents actualUrl = new UriComponentsBuilder()_						.scheme(scheme).host(host).port(port)_						.adaptFromForwardedHeaders(headers)_						.build()__				scheme = actualUrl.getScheme()__				host = actualUrl.getHost()__				port = actualUrl.getPort()__			}_		}_		else {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			scheme = actualUrl.getScheme()__			host = actualUrl.getHost()__			port = actualUrl.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,if,contains,forwarded,headers,servlet,request,uri,components,actual,url,new,uri,components,builder,scheme,scheme,host,host,port,port,adapt,from,forwarded,headers,headers,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,else,uri,components,actual,url,uri,components,builder,from,http,request,request,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1522354261;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._<p><strong>Note:</strong> this method uses values from "Forwarded"_(<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>),_"X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" headers,_if present, in order to reflect the client-originated address._Consider using the {@code ForwardedHeaderFilter} in order to choose from a_central place whether to extract and use, or to discard such headers._See the Spring Framework reference for more on this filter._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}__		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()__			if (containsForwardedHeaders(servletRequest)) {_				UriComponents actualUrl = new UriComponentsBuilder()_						.scheme(scheme).host(host).port(port)_						.adaptFromForwardedHeaders(headers)_						.build()__				scheme = actualUrl.getScheme()__				host = actualUrl.getHost()__				port = actualUrl.getPort()__			}_		}_		else {_			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__			scheme = actualUrl.getScheme()__			host = actualUrl.getHost()__			port = actualUrl.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,p,strong,note,strong,this,method,uses,values,from,forwarded,a,href,http,tools,ietf,org,html,rfc7239,rfc,7239,a,x,forwarded,host,x,forwarded,port,and,x,forwarded,proto,headers,if,present,in,order,to,reflect,the,client,originated,address,consider,using,the,code,forwarded,header,filter,in,order,to,choose,from,a,central,place,whether,to,extract,and,use,or,to,discard,such,headers,see,the,spring,framework,reference,for,more,on,this,filter,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,if,contains,forwarded,headers,servlet,request,uri,components,actual,url,new,uri,components,builder,scheme,scheme,host,host,port,port,adapt,from,forwarded,headers,headers,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,else,uri,components,actual,url,uri,components,builder,from,http,request,request,build,scheme,actual,url,get,scheme,host,actual,url,get,host,port,actual,url,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1526045499;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}__		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()__		}_		else {_			URI uri = request.getURI()__			scheme = uri.getScheme()__			host = uri.getHost()__			port = uri.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,else,uri,uri,request,get,uri,scheme,uri,get,scheme,host,uri,get,host,port,uri,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1530174524;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_{@code X-Forwarded-Port} headers.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}__		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()__		}_		else {_			URI uri = request.getURI()__			scheme = uri.getScheme()__			host = uri.getHost()__			port = uri.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,else,uri,uri,request,get,uri,scheme,uri,get,scheme,host,uri,get,host,port,uri,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static boolean isSameOrigin(HttpRequest request);1533723582;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_{@code X-Forwarded-Port} headers.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request_@since 4.2;public static boolean isSameOrigin(HttpRequest request) {_		HttpHeaders headers = request.getHeaders()__		String origin = headers.getOrigin()__		if (origin == null) {_			return true__		}__		String scheme__		String host__		int port__		if (request instanceof ServletServerHttpRequest) {_			_			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest()__			scheme = servletRequest.getScheme()__			host = servletRequest.getServerName()__			port = servletRequest.getServerPort()__		}_		else {_			URI uri = request.getURI()__			scheme = uri.getScheme()__			host = uri.getHost()__			port = uri.getPort()__		}__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&_				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&_				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request,since,4,2;public,static,boolean,is,same,origin,http,request,request,http,headers,headers,request,get,headers,string,origin,headers,get,origin,if,origin,null,return,true,string,scheme,string,host,int,port,if,request,instanceof,servlet,server,http,request,http,servlet,request,servlet,request,servlet,server,http,request,request,get,servlet,request,scheme,servlet,request,get,scheme,host,servlet,request,get,server,name,port,servlet,request,get,server,port,else,uri,uri,request,get,uri,scheme,uri,get,scheme,host,uri,get,host,port,uri,get,port,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,object,utils,null,safe,equals,scheme,origin,url,get,scheme,object,utils,null,safe,equals,host,origin,url,get,host,get,port,scheme,port,get,port,origin,url,get,scheme,origin,url,get,port
WebUtils -> public static String getSessionId(HttpServletRequest request);1328020251;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or <code>null</code> if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,code,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1346174472;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or <code>null</code> if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,code,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1356735495;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1363700001;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1380920029;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1385412762;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1394572186;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1414144427;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1419948111;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1419949603;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1424248215;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1424278772;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1424361118;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1424361139;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1430734105;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1432404288;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1432412650;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1436200220;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1436777959;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1444898007;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1458830024;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1467726769;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1467730834;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1468613531;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1468948866;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static String getSessionId(HttpServletRequest request);1468963833;Determine the session id of the given request, if any._@param request current HTTP request_@return the session id, or {@code null} if none;public static String getSessionId(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getId() : null)__	};determine,the,session,id,of,the,given,request,if,any,param,request,current,http,request,return,the,session,id,or,code,null,if,none;public,static,string,get,session,id,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,id,null
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1328020251;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_<code>javax.servlet.error.status_code</code>,_<code>javax.servlet.error.exception_type</code>,_<code>javax.servlet.error.message</code>,_<code>javax.servlet.error.exception</code>,_<code>javax.servlet.error.request_uri</code>,_<code>javax.servlet.error.servlet_name</code>._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,code,javax,servlet,error,code,code,javax,servlet,error,message,code,code,javax,servlet,error,exception,code,code,javax,servlet,error,code,code,javax,servlet,error,code,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1346174472;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_<code>javax.servlet.error.status_code</code>,_<code>javax.servlet.error.exception_type</code>,_<code>javax.servlet.error.message</code>,_<code>javax.servlet.error.exception</code>,_<code>javax.servlet.error.request_uri</code>,_<code>javax.servlet.error.servlet_name</code>._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,code,javax,servlet,error,code,code,javax,servlet,error,message,code,code,javax,servlet,error,exception,code,code,javax,servlet,error,code,code,javax,servlet,error,code,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1356735495;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1363700001;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1380920029;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1385412762;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1394572186;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1414144427;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1419948111;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1419949603;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1424248215;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1424278772;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1424361118;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1424361139;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1430734105;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1432404288;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1432412650;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1436200220;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1436777959;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1444898007;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1458830024;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1467726769;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1467730834;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1468613531;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1468948866;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1468963833;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1495868221;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1496837955;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1501582137;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1506097334;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1508532146;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1515504834;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1515504834;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1516361410;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1519560860;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1522332352;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1522354261;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1526045499;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1530174524;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static void clearErrorRequestAttributes(HttpServletRequest request);1533723582;Clear the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._@param request current servlet request;public static void clearErrorRequestAttributes(HttpServletRequest request) {_		request.removeAttribute(ERROR_STATUS_CODE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_TYPE_ATTRIBUTE)__		request.removeAttribute(ERROR_MESSAGE_ATTRIBUTE)__		request.removeAttribute(ERROR_EXCEPTION_ATTRIBUTE)__		request.removeAttribute(ERROR_REQUEST_URI_ATTRIBUTE)__		request.removeAttribute(ERROR_SERVLET_NAME_ATTRIBUTE)__	};clear,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,param,request,current,servlet,request;public,static,void,clear,error,request,attributes,http,servlet,request,request,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute,request,remove,attribute
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1328020251;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1346174472;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1356735495;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1363700001;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1380920029;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = (String) paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,string,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1385412762;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1394572186;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1414144427;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1419948111;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1419949603;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1424248215;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1424278772;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1424361118;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1424361139;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1430734105;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1432404288;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1432412650;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1436200220;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1436777959;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1444898007;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1458830024;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1467726769;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1467730834;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1468613531;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage);1468948866;Return the target page specified in the request._@param request current servlet request_@param paramPrefix the parameter prefix to check for_(e.g. "_target" for parameters like "_target1" or "_target2")_@param currentPage the current page, to be returned as fallback_if no target page specified_@return the page specified in the request, or current page if not found;public static int getTargetPage(ServletRequest request, String paramPrefix, int currentPage) {_		Enumeration<String> paramNames = request.getParameterNames()__		while (paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if (paramName.startsWith(paramPrefix)) {_				for (int i = 0_ i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length_ i++) {_					String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]__					if (paramName.endsWith(suffix)) {_						paramName = paramName.substring(0, paramName.length() - suffix.length())__					}_				}_				return Integer.parseInt(paramName.substring(paramPrefix.length()))__			}_		}_		return currentPage__	};return,the,target,page,specified,in,the,request,param,request,current,servlet,request,param,param,prefix,the,parameter,prefix,to,check,for,e,g,for,parameters,like,or,param,current,page,the,current,page,to,be,returned,as,fallback,if,no,target,page,specified,return,the,page,specified,in,the,request,or,current,page,if,not,found;public,static,int,get,target,page,servlet,request,request,string,param,prefix,int,current,page,enumeration,string,param,names,request,get,parameter,names,while,param,names,has,more,elements,string,param,name,param,names,next,element,if,param,name,starts,with,param,prefix,for,int,i,0,i,web,utils,length,i,string,suffix,web,utils,i,if,param,name,ends,with,suffix,param,name,param,name,substring,0,param,name,length,suffix,length,return,integer,parse,int,param,name,substring,param,prefix,length,return,current,page
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, @Nullable String servletName);1496837955;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, @Nullable String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, @Nullable String servletName);1501582137;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, @Nullable String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, @Nullable String servletName);1506097334;Expose the Servlet spec's error attributes as {@link javax.servlet.http.HttpServletRequest}_attributes under the keys defined in the Servlet 2.3 specification, for error pages that_are rendered directly rather than through the Servlet container's error page resolution:_{@code javax.servlet.error.status_code},_{@code javax.servlet.error.exception_type},_{@code javax.servlet.error.message},_{@code javax.servlet.error.exception},_{@code javax.servlet.error.request_uri},_{@code javax.servlet.error.servlet_name}._<p>Does not override values if already present, to respect attribute values_that have been exposed explicitly before._<p>Exposes status code 200 by default. Set the "javax.servlet.error.status_code"_attribute explicitly (before or after) in order to expose a different status code._@param request current servlet request_@param ex the exception encountered_@param servletName the name of the offending servlet;public static void exposeErrorRequestAttributes(HttpServletRequest request, Throwable ex, @Nullable String servletName) {_		exposeRequestAttributeIfNotPresent(request, ERROR_STATUS_CODE_ATTRIBUTE, HttpServletResponse.SC_OK)__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_TYPE_ATTRIBUTE, ex.getClass())__		exposeRequestAttributeIfNotPresent(request, ERROR_MESSAGE_ATTRIBUTE, ex.getMessage())__		exposeRequestAttributeIfNotPresent(request, ERROR_EXCEPTION_ATTRIBUTE, ex)__		exposeRequestAttributeIfNotPresent(request, ERROR_REQUEST_URI_ATTRIBUTE, request.getRequestURI())__		if (servletName != null) {_			exposeRequestAttributeIfNotPresent(request, ERROR_SERVLET_NAME_ATTRIBUTE, servletName)__		}_	};expose,the,servlet,spec,s,error,attributes,as,link,javax,servlet,http,http,servlet,request,attributes,under,the,keys,defined,in,the,servlet,2,3,specification,for,error,pages,that,are,rendered,directly,rather,than,through,the,servlet,container,s,error,page,resolution,code,javax,servlet,error,code,javax,servlet,error,code,javax,servlet,error,message,code,javax,servlet,error,exception,code,javax,servlet,error,code,javax,servlet,error,p,does,not,override,values,if,already,present,to,respect,attribute,values,that,have,been,exposed,explicitly,before,p,exposes,status,code,200,by,default,set,the,javax,servlet,error,attribute,explicitly,before,or,after,in,order,to,expose,a,different,status,code,param,request,current,servlet,request,param,ex,the,exception,encountered,param,servlet,name,the,name,of,the,offending,servlet;public,static,void,expose,error,request,attributes,http,servlet,request,request,throwable,ex,nullable,string,servlet,name,expose,request,attribute,if,not,present,request,http,servlet,response,expose,request,attribute,if,not,present,request,ex,get,class,expose,request,attribute,if,not,present,request,ex,get,message,expose,request,attribute,if,not,present,request,ex,expose,request,attribute,if,not,present,request,request,get,request,uri,if,servlet,name,null,expose,request,attribute,if,not,present,request,servlet,name
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1328020251;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1346174472;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1356735495;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1363700001;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1380920029;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1385412762;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1394572186;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1414144427;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1419948111;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1419949603;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1424248215;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1424278772;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1424361118;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1424361139;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1430734105;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1432404288;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1432412650;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1436200220;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1436777959;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1444898007;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1458830024;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1467726769;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1467730834;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1468613531;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static String extractFilenameFromUrlPath(String urlPath);1468948866;Extract the URL filename from the given request URL path._Correctly resolves nested paths such as "/products/view.html" as well._@param urlPath the request URL path (e.g. "/index.html")_@return the extracted URI filename (e.g. "index");public static String extractFilenameFromUrlPath(String urlPath) {_		String filename = extractFullFilenameFromUrlPath(urlPath)__		int dotIndex = filename.lastIndexOf('.')__		if (dotIndex != -1) {_			filename = filename.substring(0, dotIndex)__		}_		return filename__	};extract,the,url,filename,from,the,given,request,url,path,correctly,resolves,nested,paths,such,as,products,view,html,as,well,param,url,path,the,request,url,path,e,g,index,html,return,the,extracted,uri,filename,e,g,index;public,static,string,extract,filename,from,url,path,string,url,path,string,filename,extract,full,filename,from,url,path,url,path,int,dot,index,filename,last,index,of,if,dot,index,1,filename,filename,substring,0,dot,index,return,filename
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz) 			throws IllegalArgumentException;1328020251;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_				    "Could not instantiate class [" + clazz.getName() +_				    "] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_				    "Could not access default constructor of class [" + clazz.getName() +_				    "] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz) 			throws IllegalArgumentException;1346174472;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_				    "Could not instantiate class [" + clazz.getName() +_				    "] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_				    "Could not access default constructor of class [" + clazz.getName() +_				    "] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz) 			throws IllegalArgumentException;1356735495;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz) 			throws IllegalArgumentException;1363700001;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz) 			throws IllegalArgumentException;1380920029;Get the specified session attribute, creating and setting a new attribute if_no existing found. The given class needs to have a public no-arg constructor._Useful for on-demand state objects in a web tier, like shopping carts._@param session current HTTP session_@param name the name of the session attribute_@param clazz the class to instantiate for a new attribute_@return the value of the session attribute, newly created if not found_@throws IllegalArgumentException if the session attribute could not be instantiated;public static Object getOrCreateSessionAttribute(HttpSession session, String name, Class clazz)_			throws IllegalArgumentException {__		Assert.notNull(session, "Session must not be null")__		Object sessionObject = session.getAttribute(name)__		if (sessionObject == null) {_			try {_				sessionObject = clazz.newInstance()__			}_			catch (InstantiationException ex) {_				throw new IllegalArgumentException(_					"Could not instantiate class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			catch (IllegalAccessException ex) {_				throw new IllegalArgumentException(_					"Could not access default constructor of class [" + clazz.getName() +_					"] for session attribute '" + name + "': " + ex.getMessage())__			}_			session.setAttribute(name, sessionObject)__		}_		return sessionObject__	};get,the,specified,session,attribute,creating,and,setting,a,new,attribute,if,no,existing,found,the,given,class,needs,to,have,a,public,no,arg,constructor,useful,for,on,demand,state,objects,in,a,web,tier,like,shopping,carts,param,session,current,http,session,param,name,the,name,of,the,session,attribute,param,clazz,the,class,to,instantiate,for,a,new,attribute,return,the,value,of,the,session,attribute,newly,created,if,not,found,throws,illegal,argument,exception,if,the,session,attribute,could,not,be,instantiated;public,static,object,get,or,create,session,attribute,http,session,session,string,name,class,clazz,throws,illegal,argument,exception,assert,not,null,session,session,must,not,be,null,object,session,object,session,get,attribute,name,if,session,object,null,try,session,object,clazz,new,instance,catch,instantiation,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,class,clazz,get,name,for,session,attribute,name,ex,get,message,catch,illegal,access,exception,ex,throw,new,illegal,argument,exception,could,not,access,default,constructor,of,class,clazz,get,name,for,session,attribute,name,ex,get,message,session,set,attribute,name,session,object,return,session,object
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1496837955;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1501582137;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1506097334;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1508532146;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1515504834;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1515504834;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1516361410;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1519560860;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1522332352;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1522354261;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1526045499;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1530174524;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request the HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,the,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix);1533723582;Return a map containing all parameters with the given prefix._Maps single values to String and multiple values to String array._<p>For example, with a prefix of "spring_", "spring_param1" and_"spring_param2" result in a Map with "param1" and "param2" as keys._@param request the HTTP request in which to look for parameters_@param prefix the beginning of parameter names_(if this is null or the empty string, all parameters will match)_@return map containing request parameters <b>without the prefix</b>,_containing either a String or a String array as values_@see javax.servlet.ServletRequest#getParameterNames_@see javax.servlet.ServletRequest#getParameterValues_@see javax.servlet.ServletRequest#getParameterMap;public static Map<String, Object> getParametersStartingWith(ServletRequest request, @Nullable String prefix) {_		Assert.notNull(request, "Request must not be null")__		Enumeration<String> paramNames = request.getParameterNames()__		Map<String, Object> params = new TreeMap<>()__		if (prefix == null) {_			prefix = ""__		}_		while (paramNames != null && paramNames.hasMoreElements()) {_			String paramName = paramNames.nextElement()__			if ("".equals(prefix) || paramName.startsWith(prefix)) {_				String unprefixed = paramName.substring(prefix.length())__				String[] values = request.getParameterValues(paramName)__				if (values == null || values.length == 0) {_					_				}_				else if (values.length > 1) {_					params.put(unprefixed, values)__				}_				else {_					params.put(unprefixed, values[0])__				}_			}_		}_		return params__	};return,a,map,containing,all,parameters,with,the,given,prefix,maps,single,values,to,string,and,multiple,values,to,string,array,p,for,example,with,a,prefix,of,and,result,in,a,map,with,param1,and,param2,as,keys,param,request,the,http,request,in,which,to,look,for,parameters,param,prefix,the,beginning,of,parameter,names,if,this,is,null,or,the,empty,string,all,parameters,will,match,return,map,containing,request,parameters,b,without,the,prefix,b,containing,either,a,string,or,a,string,array,as,values,see,javax,servlet,servlet,request,get,parameter,names,see,javax,servlet,servlet,request,get,parameter,values,see,javax,servlet,servlet,request,get,parameter,map;public,static,map,string,object,get,parameters,starting,with,servlet,request,request,nullable,string,prefix,assert,not,null,request,request,must,not,be,null,enumeration,string,param,names,request,get,parameter,names,map,string,object,params,new,tree,map,if,prefix,null,prefix,while,param,names,null,param,names,has,more,elements,string,param,name,param,names,next,element,if,equals,prefix,param,name,starts,with,prefix,string,unprefixed,param,name,substring,prefix,length,string,values,request,get,parameter,values,param,name,if,values,null,values,length,0,else,if,values,length,1,params,put,unprefixed,values,else,params,put,unprefixed,values,0,return,params
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1495868221;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1496837955;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1501582137;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1506097334;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1508532146;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1515504834;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1515504834;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1516361410;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1519560860;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1522332352;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1522354261;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1526045499;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1530174524;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> @Nullable 	public static String findParameterValue(ServletRequest request, String name);1533723582;Obtain a named parameter from the given request parameters._<p>See {@link #findParameterValue(java.util.Map, String)}_for a description of the lookup algorithm._@param request current HTTP request_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;@Nullable_	public static String findParameterValue(ServletRequest request, String name) {_		return findParameterValue(request.getParameterMap(), name)__	};obtain,a,named,parameter,from,the,given,request,parameters,p,see,link,find,parameter,value,java,util,map,string,for,a,description,of,the,lookup,algorithm,param,request,current,http,request,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;nullable,public,static,string,find,parameter,value,servlet,request,request,string,name,return,find,parameter,value,request,get,parameter,map,name
WebUtils -> public static File getTempDir(ServletContext servletContext);1328020251;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1346174472;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1356735495;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1363700001;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1380920029;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1385412762;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1394572186;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1414144427;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1419948111;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1419949603;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1424248215;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1424278772;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1424361118;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1424361139;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1430734105;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1432404288;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1432412650;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1436200220;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1436777959;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1444898007;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1458830024;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1467726769;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1467730834;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1468613531;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1468948866;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1468963833;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1495868221;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1496837955;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1501582137;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1506097334;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1508532146;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1515504834;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1515504834;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1516361410;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1519560860;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1522332352;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1522354261;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1526045499;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1530174524;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static File getTempDir(ServletContext servletContext);1533723582;Return the temporary directory for the current web application,_as provided by the servlet container._@param servletContext the servlet context of the web application_@return the File representing the temporary directory;public static File getTempDir(ServletContext servletContext) {_		Assert.notNull(servletContext, "ServletContext must not be null")__		return (File) servletContext.getAttribute(TEMP_DIR_CONTEXT_ATTRIBUTE)__	};return,the,temporary,directory,for,the,current,web,application,as,provided,by,the,servlet,container,param,servlet,context,the,servlet,context,of,the,web,application,return,the,file,representing,the,temporary,directory;public,static,file,get,temp,dir,servlet,context,servlet,context,assert,not,null,servlet,context,servlet,context,must,not,be,null,return,file,servlet,context,get,attribute
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1328020251;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or <code>null</code> if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,code,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1346174472;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or <code>null</code> if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,code,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1356735495;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1363700001;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1380920029;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1385412762;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1394572186;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1414144427;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1419948111;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1419949603;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1424248215;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1424278772;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1424361118;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1424361139;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1430734105;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1432404288;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1432412650;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1436200220;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1436777959;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1444898007;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1458830024;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1467726769;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1467730834;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1468613531;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1468948866;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static Object getSessionAttribute(HttpServletRequest request, String name);1468963833;Check the given request for a session attribute of the given name._Returns null if there is no session or if the session has no such attribute._Does not create a new session if none has existed before!_@param request current HTTP request_@param name the name of the session attribute_@return the value of the session attribute, or {@code null} if not found;public static Object getSessionAttribute(HttpServletRequest request, String name) {_		Assert.notNull(request, "Request must not be null")__		HttpSession session = request.getSession(false)__		return (session != null ? session.getAttribute(name) : null)__	};check,the,given,request,for,a,session,attribute,of,the,given,name,returns,null,if,there,is,no,session,or,if,the,session,has,no,such,attribute,does,not,create,a,new,session,if,none,has,existed,before,param,request,current,http,request,param,name,the,name,of,the,session,attribute,return,the,value,of,the,session,attribute,or,code,null,if,not,found;public,static,object,get,session,attribute,http,servlet,request,request,string,name,assert,not,null,request,request,must,not,be,null,http,session,session,request,get,session,false,return,session,null,session,get,attribute,name,null
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1328020251;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in <code>web.xml</code>. Default is "webapp.root"._<p>Can be used for tools that support substition with <code>System.getProperty</code>_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_			    "Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_			    "Web app root system property already set to different value: '" +_			    key + "' = [" + oldValue + "] instead of [" + root + "] - " +_			    "Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,code,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,code,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1346174472;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in <code>web.xml</code>. Default is "webapp.root"._<p>Can be used for tools that support substition with <code>System.getProperty</code>_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_			    "Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_			    "Web app root system property already set to different value: '" +_			    key + "' = [" + oldValue + "] instead of [" + root + "] - " +_			    "Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,code,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,code,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1356735495;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1363700001;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1380920029;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1385412762;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1394572186;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1414144427;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1419948111;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1419949603;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1424248215;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1424278772;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1424361118;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1424361139;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1430734105;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1432404288;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1432412650;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substition with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substition,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1436200220;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1436777959;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1444898007;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1458830024;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1467726769;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1467730834;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener_@see Log4jWebConfigurer;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener,see,log4j,web,configurer;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1468613531;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1468948866;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1468963833;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1495868221;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1496837955;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_				"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException(_				"Web app root system property already set to different value: '" +_				key + "' = [" + oldValue + "] instead of [" + root + "] - " +_				"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1501582137;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1506097334;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1508532146;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1515504834;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1515504834;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1516361410;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1519560860;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1522332352;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1522354261;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1526045499;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1530174524;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException;1533723582;Set a system property to the web application root directory._The key of the system property can be defined with the "webAppRootKey"_context-param in {@code web.xml}. Default is "webapp.root"._<p>Can be used for tools that support substitution with {@code System.getProperty}_values, like log4j's "${key}" syntax within log file locations._@param servletContext the servlet context of the web application_@throws IllegalStateException if the system property is already set,_or if the WAR file is not expanded_@see #WEB_APP_ROOT_KEY_PARAM_@see #DEFAULT_WEB_APP_ROOT_KEY_@see WebAppRootListener;public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {_		Assert.notNull(servletContext, "ServletContext must not be null")__		String root = servletContext.getRealPath("/")__		if (root == null) {_			throw new IllegalStateException(_					"Cannot set web app root system property when WAR file is not expanded")__		}_		String param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM)__		String key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY)__		String oldValue = System.getProperty(key)__		if (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {_			throw new IllegalStateException("Web app root system property already set to different value: '" +_					key + "' = [" + oldValue + "] instead of [" + root + "] - " +_					"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!")__		}_		System.setProperty(key, root)__		servletContext.log("Set web app root system property: '" + key + "' = [" + root + "]")__	};set,a,system,property,to,the,web,application,root,directory,the,key,of,the,system,property,can,be,defined,with,the,web,app,root,key,context,param,in,code,web,xml,default,is,webapp,root,p,can,be,used,for,tools,that,support,substitution,with,code,system,get,property,values,like,log4j,s,key,syntax,within,log,file,locations,param,servlet,context,the,servlet,context,of,the,web,application,throws,illegal,state,exception,if,the,system,property,is,already,set,or,if,the,war,file,is,not,expanded,see,see,see,web,app,root,listener;public,static,void,set,web,app,root,system,property,servlet,context,servlet,context,throws,illegal,state,exception,assert,not,null,servlet,context,servlet,context,must,not,be,null,string,root,servlet,context,get,real,path,if,root,null,throw,new,illegal,state,exception,cannot,set,web,app,root,system,property,when,war,file,is,not,expanded,string,param,servlet,context,get,init,parameter,string,key,param,null,param,string,old,value,system,get,property,key,if,old,value,null,string,utils,path,equals,old,value,root,throw,new,illegal,state,exception,web,app,root,system,property,already,set,to,different,value,key,old,value,instead,of,root,choose,unique,values,for,the,web,app,root,key,context,param,in,your,web,xml,files,system,set,property,key,root,servlet,context,log,set,web,app,root,system,property,key,root
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1328020251;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or <code>null</code>_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,code,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1346174472;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or <code>null</code>_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,code,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1356735495;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1363700001;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1380920029;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1385412762;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1394572186;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1414144427;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1419948111;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1419949603;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1424248215;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1424278772;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1424361118;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1424361139;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1430734105;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1432404288;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1432412650;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1436200220;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1436777959;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1444898007;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1458830024;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1467726769;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1467730834;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1468613531;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1468948866;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
WebUtils -> public static String findParameterValue(Map<String, ?> parameters, String name);1468963833;Obtain a named parameter from the given request parameters._<p>This method will try to obtain a parameter value using the_following algorithm:_<ol>_<li>Try to get the parameter value using just the given <i>logical</i> name._This handles parameters of the form <tt>logicalName = value</tt>. For normal_parameters, e.g. submitted using a hidden HTML form field, this will return_the requested value.</li>_<li>Try to obtain the parameter value from the parameter name, where the_parameter name in the request is of the form <tt>logicalName_value = xyz</tt>_with "_" being the configured delimiter. This deals with parameter values_submitted using an HTML form submit button.</li>_<li>If the value obtained in the previous step has a ".x" or ".y" suffix,_remove that. This handles cases where the value was submitted using an_HTML form image button. In this case the parameter in the request would_actually be of the form <tt>logicalName_value.x = 123</tt>. </li>_</ol>_@param parameters the available parameter map_@param name the <i>logical</i> name of the request parameter_@return the value of the parameter, or {@code null}_if the parameter does not exist in given request;public static String findParameterValue(Map<String, ?> parameters, String name) {_		_		Object value = parameters.get(name)__		if (value instanceof String[]) {_			String[] values = (String[]) value__			return (values.length > 0 ? values[0] : null)__		}_		else if (value != null) {_			return value.toString()__		}_		_		String prefix = name + "_"__		for (String paramName : parameters.keySet()) {_			if (paramName.startsWith(prefix)) {_				_				for (String suffix : SUBMIT_IMAGE_SUFFIXES) {_					if (paramName.endsWith(suffix)) {_						return paramName.substring(prefix.length(), paramName.length() - suffix.length())__					}_				}_				return paramName.substring(prefix.length())__			}_		}_		_		return null__	};obtain,a,named,parameter,from,the,given,request,parameters,p,this,method,will,try,to,obtain,a,parameter,value,using,the,following,algorithm,ol,li,try,to,get,the,parameter,value,using,just,the,given,i,logical,i,name,this,handles,parameters,of,the,form,tt,logical,name,value,tt,for,normal,parameters,e,g,submitted,using,a,hidden,html,form,field,this,will,return,the,requested,value,li,li,try,to,obtain,the,parameter,value,from,the,parameter,name,where,the,parameter,name,in,the,request,is,of,the,form,tt,xyz,tt,with,being,the,configured,delimiter,this,deals,with,parameter,values,submitted,using,an,html,form,submit,button,li,li,if,the,value,obtained,in,the,previous,step,has,a,x,or,y,suffix,remove,that,this,handles,cases,where,the,value,was,submitted,using,an,html,form,image,button,in,this,case,the,parameter,in,the,request,would,actually,be,of,the,form,tt,x,123,tt,li,ol,param,parameters,the,available,parameter,map,param,name,the,i,logical,i,name,of,the,request,parameter,return,the,value,of,the,parameter,or,code,null,if,the,parameter,does,not,exist,in,given,request;public,static,string,find,parameter,value,map,string,parameters,string,name,object,value,parameters,get,name,if,value,instanceof,string,string,values,string,value,return,values,length,0,values,0,null,else,if,value,null,return,value,to,string,string,prefix,name,for,string,param,name,parameters,key,set,if,param,name,starts,with,prefix,for,string,suffix,if,param,name,ends,with,suffix,return,param,name,substring,prefix,length,param,name,length,suffix,length,return,param,name,substring,prefix,length,return,null
