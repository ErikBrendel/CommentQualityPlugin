# id;timestamp;commentText;codeText;commentWords;codeWords
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1513266280;Tokenize the given {@link DataBuffer} flux into a {@link TokenBuffer} flux, given the_parameters._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {_		try {_			Jackson2Tokenizer tokenizer =_					new Jackson2Tokenizer(jsonFactory.createNonBlockingByteArrayParser(),_							tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,link,data,buffer,flux,into,a,link,token,buffer,flux,given,the,parameters,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,jackson2tokenizer,tokenizer,new,jackson2tokenizer,json,factory,create,non,blocking,byte,array,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1516637288;Tokenize the given {@link DataBuffer} flux into a {@link TokenBuffer} flux, given the_parameters._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {_		try {_			Jackson2Tokenizer tokenizer =_					new Jackson2Tokenizer(jsonFactory.createNonBlockingByteArrayParser(),_							tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,link,data,buffer,flux,into,a,link,token,buffer,flux,given,the,parameters,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,jackson2tokenizer,tokenizer,new,jackson2tokenizer,json,factory,create,non,blocking,byte,array,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1517248585;Tokenize the given {@link DataBuffer} flux into a {@link TokenBuffer} flux, given the_parameters._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {_		try {_			Jackson2Tokenizer tokenizer =_					new Jackson2Tokenizer(jsonFactory.createNonBlockingByteArrayParser(),_							tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,link,data,buffer,flux,into,a,link,token,buffer,flux,given,the,parameters,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,jackson2tokenizer,tokenizer,new,jackson2tokenizer,json,factory,create,non,blocking,byte,array,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1519225953;Tokenize the given {@link DataBuffer} flux into a {@link TokenBuffer} flux, given the_parameters._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {_		try {_			Jackson2Tokenizer tokenizer =_					new Jackson2Tokenizer(jsonFactory.createNonBlockingByteArrayParser(),_							tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,link,data,buffer,flux,into,a,link,token,buffer,flux,given,the,parameters,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,jackson2tokenizer,tokenizer,new,jackson2tokenizer,json,factory,create,non,blocking,byte,array,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1519226986;Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {__		try {_			JsonParser parser = jsonFactory.createNonBlockingByteArrayParser()__			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,code,flux,data,buffer,into,code,flux,token,buffer,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,json,parser,parser,json,factory,create,non,blocking,byte,array,parser,jackson2tokenizer,tokenizer,new,jackson2tokenizer,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1530174524;Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {__		try {_			JsonParser parser = jsonFactory.createNonBlockingByteArrayParser()__			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,code,flux,data,buffer,into,code,flux,token,buffer,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,json,parser,parser,json,factory,create,non,blocking,byte,array,parser,jackson2tokenizer,tokenizer,new,jackson2tokenizer,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory, 			boolean tokenizeArrayElements);1539875794;Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}._@param dataBuffers the source data buffers_@param jsonFactory the factory to use_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received._@return the result token buffers;public static Flux<TokenBuffer> tokenize(Flux<DataBuffer> dataBuffers, JsonFactory jsonFactory,_			boolean tokenizeArrayElements) {__		try {_			JsonParser parser = jsonFactory.createNonBlockingByteArrayParser()__			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements)__			return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};tokenize,the,given,code,flux,data,buffer,into,code,flux,token,buffer,param,data,buffers,the,source,data,buffers,param,json,factory,the,factory,to,use,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received,return,the,result,token,buffers;public,static,flux,token,buffer,tokenize,flux,data,buffer,data,buffers,json,factory,json,factory,boolean,tokenize,array,elements,try,json,parser,parser,json,factory,create,non,blocking,byte,array,parser,jackson2tokenizer,tokenizer,new,jackson2tokenizer,parser,tokenize,array,elements,return,data,buffers,flat,map,tokenizer,tokenize,flux,error,tokenizer,end,of,input,catch,ioexception,ex,return,flux,error,ex
Jackson2Tokenizer -> public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements);1498659541;Create a new instance of the {@code Jackson2Tokenizer}._@param parser the non-blocking parser, obtained via_{@link com.fasterxml.jackson.core.JsonFactory#createNonBlockingByteArrayParser}_@param tokenizeArrayElements if {@code true} and the "top level" JSON object is an array,_each of its elements is returned individually and immediately after it was fully received;public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements) {_		Assert.notNull(parser, "'parser' must not be null")___		this.parser = parser__		this.tokenizeArrayElements = tokenizeArrayElements__		this.tokenBuffer = new TokenBuffer(parser)__		this.inputFeeder = (ByteArrayFeeder) this.parser.getNonBlockingInputFeeder()__	};create,a,new,instance,of,the,code,jackson2tokenizer,param,parser,the,non,blocking,parser,obtained,via,link,com,fasterxml,jackson,core,json,factory,create,non,blocking,byte,array,parser,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,of,its,elements,is,returned,individually,and,immediately,after,it,was,fully,received;public,jackson2tokenizer,json,parser,parser,boolean,tokenize,array,elements,assert,not,null,parser,parser,must,not,be,null,this,parser,parser,this,tokenize,array,elements,tokenize,array,elements,this,token,buffer,new,token,buffer,parser,this,input,feeder,byte,array,feeder,this,parser,get,non,blocking,input,feeder
Jackson2Tokenizer -> public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements);1498747733;Create a new instance of the {@code Jackson2Tokenizer}._@param parser the non-blocking parser, obtained via_{@link com.fasterxml.jackson.core.JsonFactory#createNonBlockingByteArrayParser}_@param tokenizeArrayElements if {@code true} and the "top level" JSON object is an array,_each of its elements is returned individually and immediately after it was fully received;public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements) {_		Assert.notNull(parser, "'parser' must not be null")___		this.parser = parser__		this.tokenizeArrayElements = tokenizeArrayElements__		this.tokenBuffer = new TokenBuffer(parser)__		this.inputFeeder = (ByteArrayFeeder) this.parser.getNonBlockingInputFeeder()__	};create,a,new,instance,of,the,code,jackson2tokenizer,param,parser,the,non,blocking,parser,obtained,via,link,com,fasterxml,jackson,core,json,factory,create,non,blocking,byte,array,parser,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,of,its,elements,is,returned,individually,and,immediately,after,it,was,fully,received;public,jackson2tokenizer,json,parser,parser,boolean,tokenize,array,elements,assert,not,null,parser,parser,must,not,be,null,this,parser,parser,this,tokenize,array,elements,tokenize,array,elements,this,token,buffer,new,token,buffer,parser,this,input,feeder,byte,array,feeder,this,parser,get,non,blocking,input,feeder
Jackson2Tokenizer -> public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements);1500631686;Create a new instance of the {@code Jackson2Tokenizer}._@param parser the non-blocking parser, obtained via_{@link com.fasterxml.jackson.core.JsonFactory#createNonBlockingByteArrayParser}_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received.;public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements) {_		Assert.notNull(parser, "'parser' must not be null")___		this.parser = parser__		this.tokenizeArrayElements = tokenizeArrayElements__		this.tokenBuffer = new TokenBuffer(parser)__		this.inputFeeder = (ByteArrayFeeder) this.parser.getNonBlockingInputFeeder()__	};create,a,new,instance,of,the,code,jackson2tokenizer,param,parser,the,non,blocking,parser,obtained,via,link,com,fasterxml,jackson,core,json,factory,create,non,blocking,byte,array,parser,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received;public,jackson2tokenizer,json,parser,parser,boolean,tokenize,array,elements,assert,not,null,parser,parser,must,not,be,null,this,parser,parser,this,tokenize,array,elements,tokenize,array,elements,this,token,buffer,new,token,buffer,parser,this,input,feeder,byte,array,feeder,this,parser,get,non,blocking,input,feeder
Jackson2Tokenizer -> public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements);1500633680;Create a new instance of the {@code Jackson2Tokenizer}._@param parser the non-blocking parser, obtained via_{@link com.fasterxml.jackson.core.JsonFactory#createNonBlockingByteArrayParser}_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received.;public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements) {_		Assert.notNull(parser, "'parser' must not be null")___		this.parser = parser__		this.tokenizeArrayElements = tokenizeArrayElements__		this.tokenBuffer = new TokenBuffer(parser)__		this.inputFeeder = (ByteArrayFeeder) this.parser.getNonBlockingInputFeeder()__	};create,a,new,instance,of,the,code,jackson2tokenizer,param,parser,the,non,blocking,parser,obtained,via,link,com,fasterxml,jackson,core,json,factory,create,non,blocking,byte,array,parser,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received;public,jackson2tokenizer,json,parser,parser,boolean,tokenize,array,elements,assert,not,null,parser,parser,must,not,be,null,this,parser,parser,this,tokenize,array,elements,tokenize,array,elements,this,token,buffer,new,token,buffer,parser,this,input,feeder,byte,array,feeder,this,parser,get,non,blocking,input,feeder
Jackson2Tokenizer -> public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements);1500637418;Create a new instance of the {@code Jackson2Tokenizer}._@param parser the non-blocking parser, obtained via_{@link com.fasterxml.jackson.core.JsonFactory#createNonBlockingByteArrayParser}_@param tokenizeArrayElements if {@code true} and the "top level" JSON_object is an array, each element is returned individually, immediately_after it is received.;public Jackson2Tokenizer(JsonParser parser, boolean tokenizeArrayElements) {_		Assert.notNull(parser, "'parser' must not be null")___		this.parser = parser__		this.tokenizeArrayElements = tokenizeArrayElements__		this.tokenBuffer = new TokenBuffer(parser)__		this.inputFeeder = (ByteArrayFeeder) this.parser.getNonBlockingInputFeeder()__	};create,a,new,instance,of,the,code,jackson2tokenizer,param,parser,the,non,blocking,parser,obtained,via,link,com,fasterxml,jackson,core,json,factory,create,non,blocking,byte,array,parser,param,tokenize,array,elements,if,code,true,and,the,top,level,json,object,is,an,array,each,element,is,returned,individually,immediately,after,it,is,received;public,jackson2tokenizer,json,parser,parser,boolean,tokenize,array,elements,assert,not,null,parser,parser,must,not,be,null,this,parser,parser,this,tokenize,array,elements,tokenize,array,elements,this,token,buffer,new,token,buffer,parser,this,input,feeder,byte,array,feeder,this,parser,get,non,blocking,input,feeder
