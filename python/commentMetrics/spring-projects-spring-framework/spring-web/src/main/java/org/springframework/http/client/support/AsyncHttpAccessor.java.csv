commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Set the request factory that this accessor uses for obtaining {@link  * org.springframework.http.client.ClientHttpRequest HttpRequests}.  */ ;/**  * Set the request factory that this accessor uses for obtaining {@link  * org.springframework.http.client.ClientHttpRequest HttpRequests}.  */ public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {     Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null").     this.asyncRequestFactory = asyncRequestFactory. }
true;public;0;4;/**  * Return the request factory that this accessor uses for obtaining {@link  * org.springframework.http.client.ClientHttpRequest HttpRequests}.  */ ;/**  * Return the request factory that this accessor uses for obtaining {@link  * org.springframework.http.client.ClientHttpRequest HttpRequests}.  */ public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {     Assert.state(this.asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set").     return this.asyncRequestFactory. }
true;protected;2;10;/**  * Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's  * {@link org.springframework.http.client.AsyncClientHttpRequestFactory}.  * @param url the URL to connect to  * @param method the HTTP method to execute (GET, POST, etc.)  * @return the created request  * @throws IOException in case of I/O errors  */ ;/**  * Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's  * {@link org.springframework.http.client.AsyncClientHttpRequestFactory}.  * @param url the URL to connect to  * @param method the HTTP method to execute (GET, POST, etc.)  * @return the created request  * @throws IOException in case of I/O errors  */ protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) throws IOException {     org.springframework.http.client.AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method).     if (logger.isDebugEnabled()) {         logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"").     }     return request. }
