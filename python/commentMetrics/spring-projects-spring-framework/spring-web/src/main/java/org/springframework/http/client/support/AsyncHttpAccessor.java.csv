# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncHttpAccessor -> public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory);1490795646;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {_		Assert.notNull(asyncRequestFactory, "'asyncRequestFactory' must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,org,springframework,http,client,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory);1500495740;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {_		Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,org,springframework,http,client,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,client,http,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory);1500502496;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {_		Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,org,springframework,http,client,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,client,http,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public AsyncClientHttpRequestFactory getAsyncRequestFactory();1377627757;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,async,client,http,request,factory,get,async,request,factory,return,this,async,request,factory
AsyncHttpAccessor -> public AsyncClientHttpRequestFactory getAsyncRequestFactory();1385507478;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,async,client,http,request,factory,get,async,request,factory,return,this,async,request,factory
AsyncHttpAccessor -> public AsyncClientHttpRequestFactory getAsyncRequestFactory();1413848647;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,async,client,http,request,factory,get,async,request,factory,return,this,async,request,factory
AsyncHttpAccessor -> protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1490795646;Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's_{@link org.springframework.http.client.AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {_		org.springframework.http.client.AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,org,springframework,http,client,async,client,http,request,via,this,template,s,link,org,springframework,http,client,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,org,springframework,http,client,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,org,springframework,http,client,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1500495740;Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's_{@link org.springframework.http.client.AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {__		org.springframework.http.client.AsyncClientHttpRequest request =_				getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,org,springframework,http,client,async,client,http,request,via,this,template,s,link,org,springframework,http,client,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,org,springframework,http,client,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,org,springframework,http,client,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1500502496;Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's_{@link org.springframework.http.client.AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {__		org.springframework.http.client.AsyncClientHttpRequest request =_				getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,org,springframework,http,client,async,client,http,request,via,this,template,s,link,org,springframework,http,client,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,org,springframework,http,client,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,org,springframework,http,client,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1508532146;Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's_{@link org.springframework.http.client.AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {__		org.springframework.http.client.AsyncClientHttpRequest request =_				getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,org,springframework,http,client,async,client,http,request,via,this,template,s,link,org,springframework,http,client,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,org,springframework,http,client,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,org,springframework,http,client,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1530174524;Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's_{@link org.springframework.http.client.AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {__		org.springframework.http.client.AsyncClientHttpRequest request =_				getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,org,springframework,http,client,async,client,http,request,via,this,template,s,link,org,springframework,http,client,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,org,springframework,http,client,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,org,springframework,http,client,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1531942370;Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's_{@link org.springframework.http.client.AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {__		org.springframework.http.client.AsyncClientHttpRequest request =_				getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,org,springframework,http,client,async,client,http,request,via,this,template,s,link,org,springframework,http,client,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,org,springframework,http,client,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,org,springframework,http,client,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> public void setAsyncRequestFactory( 			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory);1508532146;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(_			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {__		Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,org,springframework,http,client,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,client,http,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory( 			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory);1530174524;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(_			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {__		Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,org,springframework,http,client,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,client,http,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory( 			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory);1531942370;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(_			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {__		Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,org,springframework,http,client,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,client,http,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory);1377627757;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory) {_		Assert.notNull(asyncRequestFactory, "'asyncRequestFactory' must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory);1385507478;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory) {_		Assert.notNull(asyncRequestFactory, "'asyncRequestFactory' must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory);1413848647;Set the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public void setAsyncRequestFactory(AsyncClientHttpRequestFactory asyncRequestFactory) {_		Assert.notNull(asyncRequestFactory, "'asyncRequestFactory' must not be null")__		this.asyncRequestFactory = asyncRequestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,void,set,async,request,factory,async,client,http,request,factory,async,request,factory,assert,not,null,async,request,factory,async,request,factory,must,not,be,null,this,async,request,factory,async,request,factory
AsyncHttpAccessor -> public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory();1490795646;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,org,springframework,http,client,async,client,http,request,factory,get,async,request,factory,return,this,async,request,factory
AsyncHttpAccessor -> public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory();1500495740;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		Assert.state(asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set")__		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,org,springframework,http,client,async,client,http,request,factory,get,async,request,factory,assert,state,async,request,factory,null,no,async,client,http,request,factory,set,return,this,async,request,factory
AsyncHttpAccessor -> public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory();1500502496;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		Assert.state(asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set")__		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,org,springframework,http,client,async,client,http,request,factory,get,async,request,factory,assert,state,async,request,factory,null,no,async,client,http,request,factory,set,return,this,async,request,factory
AsyncHttpAccessor -> public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory();1508532146;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		Assert.state(asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set")__		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,org,springframework,http,client,async,client,http,request,factory,get,async,request,factory,assert,state,async,request,factory,null,no,async,client,http,request,factory,set,return,this,async,request,factory
AsyncHttpAccessor -> public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory();1530174524;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		Assert.state(this.asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set")__		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,org,springframework,http,client,async,client,http,request,factory,get,async,request,factory,assert,state,this,async,request,factory,null,no,async,client,http,request,factory,set,return,this,async,request,factory
AsyncHttpAccessor -> public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory();1531942370;Return the request factory that this accessor uses for obtaining {@link_org.springframework.http.client.ClientHttpRequest HttpRequests}.;public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {_		Assert.state(this.asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set")__		return this.asyncRequestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,org,springframework,http,client,client,http,request,http,requests;public,org,springframework,http,client,async,client,http,request,factory,get,async,request,factory,assert,state,this,async,request,factory,null,no,async,client,http,request,factory,set,return,this,async,request,factory
AsyncHttpAccessor -> protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1377627757;Create a new {@link AsyncClientHttpRequest} via this template's {@link_AsyncClientHttpRequestFactory}.__@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {_		AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,async,client,http,request,via,this,template,s,link,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1385507478;Create a new {@link AsyncClientHttpRequest} via this template's {@link_AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {_		AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,async,client,http,request,via,this,template,s,link,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
AsyncHttpAccessor -> protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method) 			throws IOException;1413848647;Create a new {@link AsyncClientHttpRequest} via this template's {@link_AsyncClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)_			throws IOException {_		AsyncClientHttpRequest request = getAsyncRequestFactory().createAsyncRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,async,client,http,request,via,this,template,s,link,async,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,async,client,http,request,create,async,request,uri,url,http,method,method,throws,ioexception,async,client,http,request,request,get,async,request,factory,create,async,request,url,method,if,logger,is,debug,enabled,logger,debug,created,asynchronous,method,name,request,for,url,return,request
