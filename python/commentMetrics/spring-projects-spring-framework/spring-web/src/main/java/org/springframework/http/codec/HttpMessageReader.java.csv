commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the {@link MediaType}'s that this reader supports.  */ ;/**  * Return the {@link MediaType}'s that this reader supports.  */ List<MediaType> getReadableMediaTypes().
true;;2;1;/**  * Whether the given object type is supported by this reader.  * @param elementType the type of object to check  * @param mediaType the media type for the read (possibly {@code null})  * @return {@code true} if readable, {@code false} otherwise  */ ;/**  * Whether the given object type is supported by this reader.  * @param elementType the type of object to check  * @param mediaType the media type for the read (possibly {@code null})  * @return {@code true} if readable, {@code false} otherwise  */ boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType).
true;;3;1;/**  * Read from the input message and encode to a stream of objects.  * @param elementType the type of objects in the stream which must have been  * previously checked via {@link #canRead(ResolvableType, MediaType)}  * @param message the message to read from  * @param hints additional information about how to read and decode the input  * @return the decoded stream of elements  */ ;/**  * Read from the input message and encode to a stream of objects.  * @param elementType the type of objects in the stream which must have been  * previously checked via {@link #canRead(ResolvableType, MediaType)}  * @param message the message to read from  * @param hints additional information about how to read and decode the input  * @return the decoded stream of elements  */ Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints).
true;;3;1;/**  * Read from the input message and encode to a single object.  * @param elementType the type of objects in the stream which must have been  * previously checked via {@link #canRead(ResolvableType, MediaType)}  * @param message the message to read from  * @param hints additional information about how to read and decode the input  * @return the decoded object  */ ;/**  * Read from the input message and encode to a single object.  * @param elementType the type of objects in the stream which must have been  * previously checked via {@link #canRead(ResolvableType, MediaType)}  * @param message the message to read from  * @param hints additional information about how to read and decode the input  * @return the decoded object  */ Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints).
true;default;5;5;/**  * Server-side only alternative to  * {@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}  * with additional context available.  * @param actualType the actual type of the target method parameter.  * for annotated controllers, the {@link MethodParameter} can be accessed  * via {@link ResolvableType#getSource()}.  * @param elementType the type of Objects in the output stream  * @param request the current request  * @param response the current response  * @param hints additional information about how to read the body  * @return the decoded stream of elements  */ ;/**  * Server-side only alternative to  * {@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}  * with additional context available.  * @param actualType the actual type of the target method parameter.  * for annotated controllers, the {@link MethodParameter} can be accessed  * via {@link ResolvableType#getSource()}.  * @param elementType the type of Objects in the output stream  * @param request the current request  * @param response the current response  * @param hints additional information about how to read the body  * @return the decoded stream of elements  */ default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {     return read(elementType, request, hints). }
true;default;5;5;/**  * Server-side only alternative to  * {@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}  * with additional, context available.  * @param actualType the actual type of the target method parameter.  * for annotated controllers, the {@link MethodParameter} can be accessed  * via {@link ResolvableType#getSource()}.  * @param elementType the type of Objects in the output stream  * @param request the current request  * @param response the current response  * @param hints additional information about how to read the body  * @return the decoded stream of elements  */ ;/**  * Server-side only alternative to  * {@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}  * with additional, context available.  * @param actualType the actual type of the target method parameter.  * for annotated controllers, the {@link MethodParameter} can be accessed  * via {@link ResolvableType#getSource()}.  * @param elementType the type of Objects in the output stream  * @param request the current request  * @param response the current response  * @param hints additional information about how to read the body  * @return the decoded stream of elements  */ default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {     return readMono(elementType, request, hints). }
