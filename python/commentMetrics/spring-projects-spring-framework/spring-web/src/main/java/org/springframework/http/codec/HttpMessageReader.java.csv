# id;timestamp;commentText;codeText;commentWords;codeWords
HttpMessageReader -> default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1490392946;Server-side only alternative to_{@link #read(ResolvableType, ReactiveHttpInputMessage, Map)} with_additional context available.__@param actualType the actual type of the target method parameter_ for_annotated controllers, the {@link MethodParameter} can be accessed via_{@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return read(elementType, request, hints)__	};server,side,only,alternative,to,link,read,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,flux,t,read,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,element,type,request,hints
HttpMessageReader -> default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1494019148;Server-side only alternative to_{@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return read(elementType, request, hints)__	};server,side,only,alternative,to,link,read,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,flux,t,read,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,element,type,request,hints
HttpMessageReader -> default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1495868221;Server-side only alternative to_{@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return read(elementType, request, hints)__	};server,side,only,alternative,to,link,read,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,flux,t,read,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,element,type,request,hints
HttpMessageReader -> default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1496837955;Server-side only alternative to_{@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return read(elementType, request, hints)__	};server,side,only,alternative,to,link,read,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,flux,t,read,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,element,type,request,hints
HttpMessageReader -> default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1530174524;Server-side only alternative to_{@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return read(elementType, request, hints)__	};server,side,only,alternative,to,link,read,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,flux,t,read,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,element,type,request,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;1473771793;Read a {@link Flux} of the given type form the given input message, and returns it._@param elementType the stream element type to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@param hints additional information about how to do read_@return the converted {@link Flux} of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;read,a,link,flux,of,the,given,type,form,the,given,input,message,and,returns,it,param,element,type,the,stream,element,type,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,param,hints,additional,information,about,how,to,do,read,return,the,converted,link,flux,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,input,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;1474365351;Read a {@link Flux} of the given type form the given input message, and returns it._@param elementType the stream element type to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@param hints additional information about how to read the body_@return the converted {@link Flux} of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;read,a,link,flux,of,the,given,type,form,the,given,input,message,and,returns,it,param,element,type,the,stream,element,type,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,param,hints,additional,information,about,how,to,read,the,body,return,the,converted,link,flux,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,input,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1490109321;Read from the input message and encode to a stream of objects.__@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded stream of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,stream,of,objects,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,stream,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1490392946;Read from the input message and encode to a stream of objects.__@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded stream of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,stream,of,objects,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,stream,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1494019148;Read from the input message and encode to a stream of objects._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded stream of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,stream,of,objects,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,stream,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1495868221;Read from the input message and encode to a stream of objects._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded stream of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,stream,of,objects,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,stream,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1496837955;Read from the input message and encode to a stream of objects._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded stream of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,stream,of,objects,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,stream,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1530174524;Read from the input message and encode to a stream of objects._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded stream of elements;Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,stream,of,objects,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,stream,of,elements;flux,t,read,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;1473771793;Read a {@link Mono} of the given type form the given input message, and returns it._@param elementType the stream element type to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@param hints additional information about how to do read_@return the converted {@link Mono} of object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;read,a,link,mono,of,the,given,type,form,the,given,input,message,and,returns,it,param,element,type,the,stream,element,type,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,param,hints,additional,information,about,how,to,do,read,return,the,converted,link,mono,of,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,input,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;1474365351;Read a {@link Mono} of the given type form the given input message, and returns it._@param elementType the stream element type to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@param hints additional information about how to read the body_@return the converted {@link Mono} of object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints)_;read,a,link,mono,of,the,given,type,form,the,given,input,message,and,returns,it,param,element,type,the,stream,element,type,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,param,hints,additional,information,about,how,to,read,the,body,return,the,converted,link,mono,of,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,input,message,map,string,object,hints
HttpMessageReader -> boolean canRead(ResolvableType type, MediaType mediaType)_;1469211286;Indicates whether the given class can be read by this converter._@param type the type to test for readability_@param mediaType the media type to read, can be {@code null} if not specified._Typically the value of a {@code Content-Type} header._@return {@code true} if readable_ {@code false} otherwise;boolean canRead(ResolvableType type, MediaType mediaType)_;indicates,whether,the,given,class,can,be,read,by,this,converter,param,type,the,type,to,test,for,readability,param,media,type,the,media,type,to,read,can,be,code,null,if,not,specified,typically,the,value,of,a,code,content,type,header,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,type,media,type,media,type
HttpMessageReader -> boolean canRead(ResolvableType type, MediaType mediaType)_;1469287049;Indicates whether the given class can be read by this converter._@param type the type to test for readability_@param mediaType the media type to read, can be {@code null} if not specified._Typically the value of a {@code Content-Type} header._@return {@code true} if readable_ {@code false} otherwise;boolean canRead(ResolvableType type, MediaType mediaType)_;indicates,whether,the,given,class,can,be,read,by,this,converter,param,type,the,type,to,test,for,readability,param,media,type,the,media,type,to,read,can,be,code,null,if,not,specified,typically,the,value,of,a,code,content,type,header,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,type,media,type,media,type
HttpMessageReader -> default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1490392946;Server-side only alternative to_{@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)} with_additional, context available.__@param actualType the actual type of the target method parameter_ for_annotated controllers, the {@link MethodParameter} can be accessed via_{@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return readMono(elementType, request, hints)__	};server,side,only,alternative,to,link,read,mono,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,mono,t,read,mono,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,mono,element,type,request,hints
HttpMessageReader -> default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1494019148;Server-side only alternative to_{@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional, context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return readMono(elementType, request, hints)__	};server,side,only,alternative,to,link,read,mono,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,mono,t,read,mono,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,mono,element,type,request,hints
HttpMessageReader -> default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1495868221;Server-side only alternative to_{@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional, context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return readMono(elementType, request, hints)__	};server,side,only,alternative,to,link,read,mono,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,mono,t,read,mono,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,mono,element,type,request,hints
HttpMessageReader -> default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1496837955;Server-side only alternative to_{@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional, context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return readMono(elementType, request, hints)__	};server,side,only,alternative,to,link,read,mono,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,mono,t,read,mono,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,mono,element,type,request,hints
HttpMessageReader -> default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, 			ServerHttpResponse response, Map<String, Object> hints);1530174524;Server-side only alternative to_{@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}_with additional, context available._@param actualType the actual type of the target method parameter__for annotated controllers, the {@link MethodParameter} can be accessed_via {@link ResolvableType#getSource()}._@param elementType the type of Objects in the output stream_@param request the current request_@param response the current response_@param hints additional information about how to read the body_@return the decoded stream of elements;default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,_			ServerHttpResponse response, Map<String, Object> hints) {__		return readMono(elementType, request, hints)__	};server,side,only,alternative,to,link,read,mono,resolvable,type,reactive,http,input,message,map,with,additional,context,available,param,actual,type,the,actual,type,of,the,target,method,parameter,for,annotated,controllers,the,link,method,parameter,can,be,accessed,via,link,resolvable,type,get,source,param,element,type,the,type,of,objects,in,the,output,stream,param,request,the,current,request,param,response,the,current,response,param,hints,additional,information,about,how,to,read,the,body,return,the,decoded,stream,of,elements;default,mono,t,read,mono,resolvable,type,actual,type,resolvable,type,element,type,server,http,request,request,server,http,response,response,map,string,object,hints,return,read,mono,element,type,request,hints
HttpMessageReader -> boolean canRead(ResolvableType elementType, MediaType mediaType)_;1474365351;Indicates whether the given class can be read by this converter._@param elementType the stream element type to test for readability_@param mediaType the media type to read, can be {@code null} if not specified._Typically the value of a {@code Content-Type} header._@return {@code true} if readable_ {@code false} otherwise;boolean canRead(ResolvableType elementType, MediaType mediaType)_;indicates,whether,the,given,class,can,be,read,by,this,converter,param,element,type,the,stream,element,type,to,test,for,readability,param,media,type,the,media,type,to,read,can,be,code,null,if,not,specified,typically,the,value,of,a,code,content,type,header,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,media,type,media,type
HttpMessageReader -> boolean canRead(ResolvableType elementType, MediaType mediaType)_;1490109321;Whether the given object type is supported by this reader._@param elementType the type of object to check_@param mediaType the media type for the read, possibly {@code null}_@return {@code true} if readable, {@code false} otherwise;boolean canRead(ResolvableType elementType, MediaType mediaType)_;whether,the,given,object,type,is,supported,by,this,reader,param,element,type,the,type,of,object,to,check,param,media,type,the,media,type,for,the,read,possibly,code,null,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,media,type,media,type
HttpMessageReader -> boolean canRead(ResolvableType elementType, MediaType mediaType)_;1490392946;Whether the given object type is supported by this reader._@param elementType the type of object to check_@param mediaType the media type for the read, possibly {@code null}_@return {@code true} if readable, {@code false} otherwise;boolean canRead(ResolvableType elementType, MediaType mediaType)_;whether,the,given,object,type,is,supported,by,this,reader,param,element,type,the,type,of,object,to,check,param,media,type,the,media,type,for,the,read,possibly,code,null,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,media,type,media,type
HttpMessageReader -> boolean canRead(ResolvableType elementType, MediaType mediaType)_;1494019148;Whether the given object type is supported by this reader._@param elementType the type of object to check_@param mediaType the media type for the read, possibly {@code null}_@return {@code true} if readable, {@code false} otherwise;boolean canRead(ResolvableType elementType, MediaType mediaType)_;whether,the,given,object,type,is,supported,by,this,reader,param,element,type,the,type,of,object,to,check,param,media,type,the,media,type,for,the,read,possibly,code,null,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,media,type,media,type
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1490109321;Read from the input message and encode to a single object.__@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,single,object,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1490392946;Read from the input message and encode to a single object.__@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,single,object,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1494019148;Read from the input message and encode to a single object._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,single,object,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1495868221;Read from the input message and encode to a single object._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,single,object,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1496837955;Read from the input message and encode to a single object._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,single,object,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;1530174524;Read from the input message and encode to a single object._@param elementType the type of objects in the stream which must have been_previously checked via {@link #canRead(ResolvableType, MediaType)}_@param message the message to read from_@param hints additional information about how to read and decode the input_@return the decoded object;Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints)_;read,from,the,input,message,and,encode,to,a,single,object,param,element,type,the,type,of,objects,in,the,stream,which,must,have,been,previously,checked,via,link,can,read,resolvable,type,media,type,param,message,the,message,to,read,from,param,hints,additional,information,about,how,to,read,and,decode,the,input,return,the,decoded,object;mono,t,read,mono,resolvable,type,element,type,reactive,http,input,message,message,map,string,object,hints
HttpMessageReader -> Flux<T> read(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;1469211286;Read a {@link Flux} of the given type form the given input message, and returns it._@param type the type of object to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@return the converted {@link Flux} of elements;Flux<T> read(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;read,a,link,flux,of,the,given,type,form,the,given,input,message,and,returns,it,param,type,the,type,of,object,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,return,the,converted,link,flux,of,elements;flux,t,read,resolvable,type,type,reactive,http,input,message,input,message
HttpMessageReader -> Flux<T> read(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;1469287049;Read a {@link Flux} of the given type form the given input message, and returns it._@param type the type of object to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@return the converted {@link Flux} of elements;Flux<T> read(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;read,a,link,flux,of,the,given,type,form,the,given,input,message,and,returns,it,param,type,the,type,of,object,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,return,the,converted,link,flux,of,elements;flux,t,read,resolvable,type,type,reactive,http,input,message,input,message
HttpMessageReader -> boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType)_;1495868221;Whether the given object type is supported by this reader._@param elementType the type of object to check_@param mediaType the media type for the read, possibly {@code null}_@return {@code true} if readable, {@code false} otherwise;boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType)_;whether,the,given,object,type,is,supported,by,this,reader,param,element,type,the,type,of,object,to,check,param,media,type,the,media,type,for,the,read,possibly,code,null,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,nullable,media,type,media,type
HttpMessageReader -> boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType)_;1496837955;Whether the given object type is supported by this reader._@param elementType the type of object to check_@param mediaType the media type for the read (possibly {@code null})_@return {@code true} if readable, {@code false} otherwise;boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType)_;whether,the,given,object,type,is,supported,by,this,reader,param,element,type,the,type,of,object,to,check,param,media,type,the,media,type,for,the,read,possibly,code,null,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,nullable,media,type,media,type
HttpMessageReader -> boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType)_;1530174524;Whether the given object type is supported by this reader._@param elementType the type of object to check_@param mediaType the media type for the read (possibly {@code null})_@return {@code true} if readable, {@code false} otherwise;boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType)_;whether,the,given,object,type,is,supported,by,this,reader,param,element,type,the,type,of,object,to,check,param,media,type,the,media,type,for,the,read,possibly,code,null,return,code,true,if,readable,code,false,otherwise;boolean,can,read,resolvable,type,element,type,nullable,media,type,media,type
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1469211286;Return the list of {@link MediaType} objects that can be read by this converter._@return the list of supported readable media types;List<MediaType> getReadableMediaTypes()_;return,the,list,of,link,media,type,objects,that,can,be,read,by,this,converter,return,the,list,of,supported,readable,media,types;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1469287049;Return the list of {@link MediaType} objects that can be read by this converter._@return the list of supported readable media types;List<MediaType> getReadableMediaTypes()_;return,the,list,of,link,media,type,objects,that,can,be,read,by,this,converter,return,the,list,of,supported,readable,media,types;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1473671607;Return the list of {@link MediaType} objects that can be read by this converter._@return the list of supported readable media types;List<MediaType> getReadableMediaTypes()_;return,the,list,of,link,media,type,objects,that,can,be,read,by,this,converter,return,the,list,of,supported,readable,media,types;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1473771793;Return the list of {@link MediaType} objects that can be read by this converter._@return the list of supported readable media types;List<MediaType> getReadableMediaTypes()_;return,the,list,of,link,media,type,objects,that,can,be,read,by,this,converter,return,the,list,of,supported,readable,media,types;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1474365351;Return the list of {@link MediaType} objects that can be read by this converter._@return the list of supported readable media types;List<MediaType> getReadableMediaTypes()_;return,the,list,of,link,media,type,objects,that,can,be,read,by,this,converter,return,the,list,of,supported,readable,media,types;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1490109321;Return the {@link MediaType}'s that this reader supports.;List<MediaType> getReadableMediaTypes()_;return,the,link,media,type,s,that,this,reader,supports;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1490392946;Return the {@link MediaType}'s that this reader supports.;List<MediaType> getReadableMediaTypes()_;return,the,link,media,type,s,that,this,reader,supports;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1494019148;Return the {@link MediaType}'s that this reader supports.;List<MediaType> getReadableMediaTypes()_;return,the,link,media,type,s,that,this,reader,supports;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1495868221;Return the {@link MediaType}'s that this reader supports.;List<MediaType> getReadableMediaTypes()_;return,the,link,media,type,s,that,this,reader,supports;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1496837955;Return the {@link MediaType}'s that this reader supports.;List<MediaType> getReadableMediaTypes()_;return,the,link,media,type,s,that,this,reader,supports;list,media,type,get,readable,media,types
HttpMessageReader -> List<MediaType> getReadableMediaTypes()_;1530174524;Return the {@link MediaType}'s that this reader supports.;List<MediaType> getReadableMediaTypes()_;return,the,link,media,type,s,that,this,reader,supports;list,media,type,get,readable,media,types
HttpMessageReader -> Mono<T> readMono(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;1469211286;Read a {@link Mono} of the given type form the given input message, and returns it._@param type the type of object to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@return the converted {@link Mono} of object;Mono<T> readMono(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;read,a,link,mono,of,the,given,type,form,the,given,input,message,and,returns,it,param,type,the,type,of,object,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,return,the,converted,link,mono,of,object;mono,t,read,mono,resolvable,type,type,reactive,http,input,message,input,message
HttpMessageReader -> Mono<T> readMono(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;1469287049;Read a {@link Mono} of the given type form the given input message, and returns it._@param type the type of object to return. This type must have previously been_passed to the {@link #canRead canRead} method of this interface, which must have_returned {@code true}._@param inputMessage the HTTP input message to read from_@return the converted {@link Mono} of object;Mono<T> readMono(ResolvableType type, ReactiveHttpInputMessage inputMessage)_;read,a,link,mono,of,the,given,type,form,the,given,input,message,and,returns,it,param,type,the,type,of,object,to,return,this,type,must,have,previously,been,passed,to,the,link,can,read,can,read,method,of,this,interface,which,must,have,returned,code,true,param,input,message,the,http,input,message,to,read,from,return,the,converted,link,mono,of,object;mono,t,read,mono,resolvable,type,type,reactive,http,input,message,input,message
