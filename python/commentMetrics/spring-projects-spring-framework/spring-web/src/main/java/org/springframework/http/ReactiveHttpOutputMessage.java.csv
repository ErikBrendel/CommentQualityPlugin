commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return a {@link DataBufferFactory} that can be used to create the body.  * @return a buffer factory  * @see #writeWith(Publisher)  */ ;/**  * Return a {@link DataBufferFactory} that can be used to create the body.  * @return a buffer factory  * @see #writeWith(Publisher)  */ DataBufferFactory bufferFactory().
true;;1;1;/**  * Register an action to apply just before the HttpOutputMessage is committed.  * <p><strong>Note:</strong> the supplied action must be properly deferred,  * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's  * executed in the right order, relative to other actions.  * @param action the action to apply  */ ;/**  * Register an action to apply just before the HttpOutputMessage is committed.  * <p><strong>Note:</strong> the supplied action must be properly deferred,  * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's  * executed in the right order, relative to other actions.  * @param action the action to apply  */ void beforeCommit(Supplier<? extends Mono<Void>> action).
true;;0;1;/**  * Whether the HttpOutputMessage is committed.  */ ;/**  * Whether the HttpOutputMessage is committed.  */ boolean isCommitted().
false;;1;1;;/**  * Use the given {@link Publisher} to write the body of the message to the  * underlying HTTP layer.  * @param body the body content publisher  * @return a {@link Mono} that indicates completion or error  */ Mono<Void> writeWith(Publisher<? extends DataBuffer> body).
true;;1;1;/**  * Use the given {@link Publisher} of {@code Publishers} to write the body  * of the HttpOutputMessage to the underlying HTTP layer, flushing after  * each {@code Publisher<DataBuffer>}.  * @param body the body content publisher  * @return a {@link Mono} that indicates completion or error  */ ;/**  * Use the given {@link Publisher} of {@code Publishers} to write the body  * of the HttpOutputMessage to the underlying HTTP layer, flushing after  * each {@code Publisher<DataBuffer>}.  * @param body the body content publisher  * @return a {@link Mono} that indicates completion or error  */ Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body).
true;;0;1;/**  * Indicate that message handling is complete, allowing for any cleanup or  * end-of-processing tasks to be performed such as applying header changes  * made via {@link #getHeaders()} to the underlying HTTP message (if not  * applied already).  * <p>This method should be automatically invoked at the end of message  * processing so typically applications should not have to invoke it.  * If invoked multiple times it should have no side effects.  * @return a {@link Mono} that indicates completion or error  */ ;/**  * Indicate that message handling is complete, allowing for any cleanup or  * end-of-processing tasks to be performed such as applying header changes  * made via {@link #getHeaders()} to the underlying HTTP message (if not  * applied already).  * <p>This method should be automatically invoked at the end of message  * processing so typically applications should not have to invoke it.  * If invoked multiple times it should have no side effects.  * @return a {@link Mono} that indicates completion or error  */ Mono<Void> setComplete().
