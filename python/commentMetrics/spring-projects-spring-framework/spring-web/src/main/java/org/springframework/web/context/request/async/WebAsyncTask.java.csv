# id;timestamp;commentText;codeText;commentWords;codeWords
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1354139803;A {@link BeanFactory} to use to resolve an executor name. Applications are_not expected to have to set this property when {@code WebAsyncTask} is used in a_Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,to,resolve,an,executor,name,applications,are,not,expected,to,have,to,set,this,property,when,code,web,async,task,is,used,in,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1362408075;A {@link BeanFactory} to use to resolve an executor name. Applications are_not expected to have to set this property when {@code WebAsyncTask} is used in a_Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,to,resolve,an,executor,name,applications,are,not,expected,to,have,to,set,this,property,when,code,web,async,task,is,used,in,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1416675732;A {@link BeanFactory} to use for resolving an executor name._<p>This factory reference will automatically be set when_{@code WebAsyncTask} is used within a Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,for,resolving,an,executor,name,p,this,factory,reference,will,automatically,be,set,when,code,web,async,task,is,used,within,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1495868221;A {@link BeanFactory} to use for resolving an executor name._<p>This factory reference will automatically be set when_{@code WebAsyncTask} is used within a Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,for,resolving,an,executor,name,p,this,factory,reference,will,automatically,be,set,when,code,web,async,task,is,used,within,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1498500776;A {@link BeanFactory} to use for resolving an executor name._<p>This factory reference will automatically be set when_{@code WebAsyncTask} is used within a Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,for,resolving,an,executor,name,p,this,factory,reference,will,automatically,be,set,when,code,web,async,task,is,used,within,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1498503011;A {@link BeanFactory} to use for resolving an executor name._<p>This factory reference will automatically be set when_{@code WebAsyncTask} is used within a Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,for,resolving,an,executor,name,p,this,factory,reference,will,automatically,be,set,when,code,web,async,task,is,used,within,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1498505691;A {@link BeanFactory} to use for resolving an executor name._<p>This factory reference will automatically be set when_{@code WebAsyncTask} is used within a Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,for,resolving,an,executor,name,p,this,factory,reference,will,automatically,be,set,when,code,web,async,task,is,used,within,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void setBeanFactory(BeanFactory beanFactory);1530174524;A {@link BeanFactory} to use for resolving an executor name._<p>This factory reference will automatically be set when_{@code WebAsyncTask} is used within a Spring MVC controller.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};a,link,bean,factory,to,use,for,resolving,an,executor,name,p,this,factory,reference,will,automatically,be,set,when,code,web,async,task,is,used,within,a,spring,mvc,controller;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
WebAsyncTask -> public void onTimeout(Callable<V> callback);1354139803;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code Callable} has completed. The callback is executed in the same_thread and therefore should return without blocking. It may return an_alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1362408075;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code Callable} has completed. The callback is executed in the same_thread and therefore should return without blocking. It may return an_alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1416675732;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request times_out before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1495868221;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request times_out before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1498500776;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request times_out before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1498503011;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request times_out before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1498505691;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request times_out before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public void onTimeout(Callable<V> callback);1530174524;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request times_out before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onTimeout(Callable<V> callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,timeout,callable,v,callback,this,timeout,callback,callback
WebAsyncTask -> public AsyncTaskExecutor getExecutor();1354139803;Return the AsyncTaskExecutor to use for concurrent handling, or {@code null}.;public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "A BeanFactory is required to look up an task executor bean")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null;public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,a,bean,factory,is,required,to,look,up,an,task,executor,bean,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> public AsyncTaskExecutor getExecutor();1362408075;Return the AsyncTaskExecutor to use for concurrent handling, or {@code null}.;public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "A BeanFactory is required to look up a task executor bean")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null;public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,a,bean,factory,is,required,to,look,up,a,task,executor,bean,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> public AsyncTaskExecutor getExecutor();1416675732;Return the AsyncTaskExecutor to use for concurrent handling,_or {@code null} if none specified.;public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null,if,none,specified;public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,bean,factory,is,required,to,look,up,an,executor,bean,by,name,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> @Nullable 	public Long getTimeout();1495868221;Return the timeout value in milliseconds, or {@code null} if no timeout is set.;@Nullable_	public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,no,timeout,is,set;nullable,public,long,get,timeout,return,this,timeout
WebAsyncTask -> @Nullable 	public Long getTimeout();1498500776;Return the timeout value in milliseconds, or {@code null} if no timeout is set.;@Nullable_	public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,no,timeout,is,set;nullable,public,long,get,timeout,return,this,timeout
WebAsyncTask -> @Nullable 	public Long getTimeout();1498503011;Return the timeout value in milliseconds, or {@code null} if no timeout is set.;@Nullable_	public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,no,timeout,is,set;nullable,public,long,get,timeout,return,this,timeout
WebAsyncTask -> @Nullable 	public Long getTimeout();1498505691;Return the timeout value in milliseconds, or {@code null} if no timeout is set.;@Nullable_	public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,no,timeout,is,set;nullable,public,long,get,timeout,return,this,timeout
WebAsyncTask -> @Nullable 	public Long getTimeout();1530174524;Return the timeout value in milliseconds, or {@code null} if no timeout is set.;@Nullable_	public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,no,timeout,is,set;nullable,public,long,get,timeout,return,this,timeout
WebAsyncTask -> public WebAsyncTask(Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1354139803;Create an {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param callable the callable for concurrent handling;public WebAsyncTask(Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(timeout, executor, null, callable)__		Assert.notNull(executor, "Executor must not be null")__	};create,an,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,async,task,executor,executor,callable,v,callable,this,timeout,executor,null,callable,assert,not,null,executor,executor,must,not,be,null
WebAsyncTask -> public WebAsyncTask(Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1362408075;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param callable the callable for concurrent handling;public WebAsyncTask(Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(timeout, executor, null, callable)__		Assert.notNull(executor, "Executor must not be null")__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,async,task,executor,executor,callable,v,callable,this,timeout,executor,null,callable,assert,not,null,executor,executor,must,not,be,null
WebAsyncTask -> public WebAsyncTask(Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1416675732;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executor the executor to use_@param callable the callable for concurrent handling;public WebAsyncTask(Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(callable)__		Assert.notNull(executor, "Executor must not be null")__		this.executor = executor__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,the,executor,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,async,task,executor,executor,callable,v,callable,this,callable,assert,not,null,executor,executor,must,not,be,null,this,executor,executor,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable);1495868221;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executorName the name of an executor bean to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable) {_		this(callable)__		Assert.notNull(executorName, "Executor name must not be null")__		this.executorName = executorName__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,name,the,name,of,an,executor,bean,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,string,executor,name,callable,v,callable,this,callable,assert,not,null,executor,name,executor,name,must,not,be,null,this,executor,name,executor,name,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable);1498500776;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executorName the name of an executor bean to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable) {_		this(callable)__		Assert.notNull(executorName, "Executor name must not be null")__		this.executorName = executorName__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,name,the,name,of,an,executor,bean,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,string,executor,name,callable,v,callable,this,callable,assert,not,null,executor,name,executor,name,must,not,be,null,this,executor,name,executor,name,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable);1498503011;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executorName the name of an executor bean to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable) {_		this(callable)__		Assert.notNull(executorName, "Executor name must not be null")__		this.executorName = executorName__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,name,the,name,of,an,executor,bean,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,string,executor,name,callable,v,callable,this,callable,assert,not,null,executor,name,executor,name,must,not,be,null,this,executor,name,executor,name,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable);1498505691;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executorName the name of an executor bean to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable) {_		this(callable)__		Assert.notNull(executorName, "Executor name must not be null")__		this.executorName = executorName__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,name,the,name,of,an,executor,bean,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,string,executor,name,callable,v,callable,this,callable,assert,not,null,executor,name,executor,name,must,not,be,null,this,executor,name,executor,name,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable);1530174524;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executorName the name of an executor bean to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, String executorName, Callable<V> callable) {_		this(callable)__		Assert.notNull(executorName, "Executor name must not be null")__		this.executorName = executorName__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,name,the,name,of,an,executor,bean,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,string,executor,name,callable,v,callable,this,callable,assert,not,null,executor,name,executor,name,must,not,be,null,this,executor,name,executor,name,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(Long timeout, String executorName, Callable<V> callable);1354139803;Create an {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param callable the callable for concurrent handling;public WebAsyncTask(Long timeout, String executorName, Callable<V> callable) {_		this(timeout, null, executorName, callable)__		Assert.notNull(executor, "Executor name must not be null")__	};create,an,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,string,executor,name,callable,v,callable,this,timeout,null,executor,name,callable,assert,not,null,executor,executor,name,must,not,be,null
WebAsyncTask -> public WebAsyncTask(Long timeout, String executorName, Callable<V> callable);1362408075;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param callable the callable for concurrent handling;public WebAsyncTask(Long timeout, String executorName, Callable<V> callable) {_		this(timeout, null, executorName, callable)__		Assert.notNull(executor, "Executor name must not be null")__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,string,executor,name,callable,v,callable,this,timeout,null,executor,name,callable,assert,not,null,executor,executor,name,must,not,be,null
WebAsyncTask -> public WebAsyncTask(Long timeout, String executorName, Callable<V> callable);1416675732;Create a {@code WebAsyncTask} with a timeout value, an executor name, and a {@link Callable}._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executorName the name of an executor bean to use_@param callable the callable for concurrent handling;public WebAsyncTask(Long timeout, String executorName, Callable<V> callable) {_		this(callable)__		Assert.notNull(executorName, "Executor name must not be null")__		this.executorName = executorName__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,name,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,name,the,name,of,an,executor,bean,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,string,executor,name,callable,v,callable,this,callable,assert,not,null,executor,name,executor,name,must,not,be,null,this,executor,name,executor,name,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1495868221;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executor the executor to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(callable)__		Assert.notNull(executor, "Executor must not be null")__		this.executor = executor__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,the,executor,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,async,task,executor,executor,callable,v,callable,this,callable,assert,not,null,executor,executor,must,not,be,null,this,executor,executor,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1498500776;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executor the executor to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(callable)__		Assert.notNull(executor, "Executor must not be null")__		this.executor = executor__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,the,executor,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,async,task,executor,executor,callable,v,callable,this,callable,assert,not,null,executor,executor,must,not,be,null,this,executor,executor,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1498503011;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executor the executor to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(callable)__		Assert.notNull(executor, "Executor must not be null")__		this.executor = executor__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,the,executor,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,async,task,executor,executor,callable,v,callable,this,callable,assert,not,null,executor,executor,must,not,be,null,this,executor,executor,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1498505691;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executor the executor to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(callable)__		Assert.notNull(executor, "Executor must not be null")__		this.executor = executor__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,the,executor,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,async,task,executor,executor,callable,v,callable,this,callable,assert,not,null,executor,executor,must,not,be,null,this,executor,executor,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable);1530174524;Create a {@code WebAsyncTask} with a timeout value, an executor instance, and a Callable._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param executor the executor to use_@param callable the callable for concurrent handling;public WebAsyncTask(@Nullable Long timeout, AsyncTaskExecutor executor, Callable<V> callable) {_		this(callable)__		Assert.notNull(executor, "Executor must not be null")__		this.executor = executor__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,an,executor,instance,and,a,callable,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,executor,the,executor,to,use,param,callable,the,callable,for,concurrent,handling;public,web,async,task,nullable,long,timeout,async,task,executor,executor,callable,v,callable,this,callable,assert,not,null,executor,executor,must,not,be,null,this,executor,executor,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1354139803;Create an {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(timeout, null, null, callable)__	};create,an,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,timeout,null,null,callable
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1362408075;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(timeout, null, null, callable)__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,timeout,null,null,callable
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1416675732;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout a timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(callable)__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,a,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,callable,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1495868221;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout a timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(callable)__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,a,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,callable,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1498500776;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout a timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(callable)__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,a,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,callable,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1498503011;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout a timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(callable)__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,a,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,callable,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1498505691;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout a timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(callable)__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,a,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,callable,this,timeout,timeout
WebAsyncTask -> public WebAsyncTask(long timeout, Callable<V> callable);1530174524;Create a {@code WebAsyncTask} with a timeout value and a {@link Callable}._@param timeout a timeout value in milliseconds_@param callable the callable for concurrent handling;public WebAsyncTask(long timeout, Callable<V> callable) {_		this(callable)__		this.timeout = timeout__	};create,a,code,web,async,task,with,a,timeout,value,and,a,link,callable,param,timeout,a,timeout,value,in,milliseconds,param,callable,the,callable,for,concurrent,handling;public,web,async,task,long,timeout,callable,v,callable,this,callable,this,timeout,timeout
WebAsyncTask -> public void onError(Callable<V> callback);1498500776;Register code to invoke when an error occurred while processing the async request._<p>This method is called from a container thread when an error occurred while processing_an async request before the {@code Callable} has completed. The callback is executed in_the same thread and therefore should return without blocking. It may return_an alternative value to use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}.;public void onError(Callable<V> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,while,processing,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor;public,void,on,error,callable,v,callback,this,error,callback,callback
WebAsyncTask -> public void onError(Callable<V> callback);1498503011;Register code to invoke for an error during async request processing._<p>This method is called from a container thread when an error occurred_while processing an async request before the {@code Callable} has_completed. The callback is executed in the same thread and therefore_should return without blocking. It may return an alternative value to_use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}._@since 5.0;public void onError(Callable<V> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,for,an,error,during,async,request,processing,p,this,method,is,called,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor,since,5,0;public,void,on,error,callable,v,callback,this,error,callback,callback
WebAsyncTask -> public void onError(Callable<V> callback);1498505691;Register code to invoke for an error during async request processing._<p>This method is called from a container thread when an error occurred_while processing an async request before the {@code Callable} has_completed. The callback is executed in the same thread and therefore_should return without blocking. It may return an alternative value to_use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}._@since 5.0;public void onError(Callable<V> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,for,an,error,during,async,request,processing,p,this,method,is,called,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor,since,5,0;public,void,on,error,callable,v,callback,this,error,callback,callback
WebAsyncTask -> public void onError(Callable<V> callback);1530174524;Register code to invoke for an error during async request processing._<p>This method is called from a container thread when an error occurred_while processing an async request before the {@code Callable} has_completed. The callback is executed in the same thread and therefore_should return without blocking. It may return an alternative value to_use, including an {@link Exception} or return_{@link CallableProcessingInterceptor#RESULT_NONE RESULT_NONE}._@since 5.0;public void onError(Callable<V> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,for,an,error,during,async,request,processing,p,this,method,is,called,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,callable,has,completed,the,callback,is,executed,in,the,same,thread,and,therefore,should,return,without,blocking,it,may,return,an,alternative,value,to,use,including,an,link,exception,or,return,link,callable,processing,interceptor,since,5,0;public,void,on,error,callable,v,callback,this,error,callback,callback
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1354139803;Create an {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		this(null, null, null, callable)__	};create,an,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,this,null,null,null,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1362408075;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		this(null, null, null, callable)__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,this,null,null,null,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1416675732;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		Assert.notNull(callable, "Callable must not be null")__		this.callable = callable__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,assert,not,null,callable,callable,must,not,be,null,this,callable,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1495868221;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		Assert.notNull(callable, "Callable must not be null")__		this.callable = callable__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,assert,not,null,callable,callable,must,not,be,null,this,callable,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1498500776;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		Assert.notNull(callable, "Callable must not be null")__		this.callable = callable__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,assert,not,null,callable,callable,must,not,be,null,this,callable,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1498503011;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		Assert.notNull(callable, "Callable must not be null")__		this.callable = callable__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,assert,not,null,callable,callable,must,not,be,null,this,callable,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1498505691;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		Assert.notNull(callable, "Callable must not be null")__		this.callable = callable__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,assert,not,null,callable,callable,must,not,be,null,this,callable,callable
WebAsyncTask -> public WebAsyncTask(Callable<V> callable);1530174524;Create a {@code WebAsyncTask} wrapping the given {@link Callable}._@param callable the callable for concurrent handling;public WebAsyncTask(Callable<V> callable) {_		Assert.notNull(callable, "Callable must not be null")__		this.callable = callable__	};create,a,code,web,async,task,wrapping,the,given,link,callable,param,callable,the,callable,for,concurrent,handling;public,web,async,task,callable,v,callable,assert,not,null,callable,callable,must,not,be,null,this,callable,callable
WebAsyncTask -> public Long getTimeout();1354139803;Return the timeout value in milliseconds or {@code null} if not value is set.;public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,not,value,is,set;public,long,get,timeout,return,this,timeout
WebAsyncTask -> public Long getTimeout();1362408075;Return the timeout value in milliseconds or {@code null} if not value is set.;public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,not,value,is,set;public,long,get,timeout,return,this,timeout
WebAsyncTask -> public Long getTimeout();1416675732;Return the timeout value in milliseconds, or {@code null} if no timeout is set.;public Long getTimeout() {_		return this.timeout__	};return,the,timeout,value,in,milliseconds,or,code,null,if,no,timeout,is,set;public,long,get,timeout,return,this,timeout
WebAsyncTask -> @Nullable 	public AsyncTaskExecutor getExecutor();1495868221;Return the AsyncTaskExecutor to use for concurrent handling,_or {@code null} if none specified.;@Nullable_	public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null,if,none,specified;nullable,public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,bean,factory,is,required,to,look,up,an,executor,bean,by,name,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> @Nullable 	public AsyncTaskExecutor getExecutor();1498500776;Return the AsyncTaskExecutor to use for concurrent handling,_or {@code null} if none specified.;@Nullable_	public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null,if,none,specified;nullable,public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,bean,factory,is,required,to,look,up,an,executor,bean,by,name,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> @Nullable 	public AsyncTaskExecutor getExecutor();1498503011;Return the AsyncTaskExecutor to use for concurrent handling,_or {@code null} if none specified.;@Nullable_	public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null,if,none,specified;nullable,public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,bean,factory,is,required,to,look,up,an,executor,bean,by,name,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> @Nullable 	public AsyncTaskExecutor getExecutor();1498505691;Return the AsyncTaskExecutor to use for concurrent handling,_or {@code null} if none specified.;@Nullable_	public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null,if,none,specified;nullable,public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,bean,factory,is,required,to,look,up,an,executor,bean,by,name,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> @Nullable 	public AsyncTaskExecutor getExecutor();1530174524;Return the AsyncTaskExecutor to use for concurrent handling,_or {@code null} if none specified.;@Nullable_	public AsyncTaskExecutor getExecutor() {_		if (this.executor != null) {_			return this.executor__		}_		else if (this.executorName != null) {_			Assert.state(this.beanFactory != null, "BeanFactory is required to look up an executor bean by name")__			return this.beanFactory.getBean(this.executorName, AsyncTaskExecutor.class)__		}_		else {_			return null__		}_	};return,the,async,task,executor,to,use,for,concurrent,handling,or,code,null,if,none,specified;nullable,public,async,task,executor,get,executor,if,this,executor,null,return,this,executor,else,if,this,executor,name,null,assert,state,this,bean,factory,null,bean,factory,is,required,to,look,up,an,executor,bean,by,name,return,this,bean,factory,get,bean,this,executor,name,async,task,executor,class,else,return,null
WebAsyncTask -> public void onCompletion(Runnable callback);1354139803;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1362408075;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1416675732;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason, including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1495868221;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason, including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1498500776;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason, including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1498503011;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason, including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1498505691;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason, including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public void onCompletion(Runnable callback);1530174524;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason, including timeout and network error.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error;public,void,on,completion,runnable,callback,this,completion,callback,callback
WebAsyncTask -> public Callable<?> getCallable();1354139803;Return the {@link Callable} to use for concurrent handling, never {@code null}.;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1362408075;Return the {@link Callable} to use for concurrent handling, never {@code null}.;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1416675732;Return the {@link Callable} to use for concurrent handling (never {@code null}).;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1495868221;Return the {@link Callable} to use for concurrent handling (never {@code null}).;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1498500776;Return the {@link Callable} to use for concurrent handling (never {@code null}).;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1498503011;Return the {@link Callable} to use for concurrent handling (never {@code null}).;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1498505691;Return the {@link Callable} to use for concurrent handling (never {@code null}).;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
WebAsyncTask -> public Callable<?> getCallable();1530174524;Return the {@link Callable} to use for concurrent handling (never {@code null}).;public Callable<?> getCallable() {_		return this.callable__	};return,the,link,callable,to,use,for,concurrent,handling,never,code,null;public,callable,get,callable,return,this,callable
