commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Static factory method to create a new builder instance.  * @param webHandler the target handler for the request  * @return the prepared builder  */ ;/**  * Static factory method to create a new builder instance.  * @param webHandler the target handler for the request  * @return the prepared builder  */ public static WebHttpHandlerBuilder webHandler(WebHandler webHandler) {     return new WebHttpHandlerBuilder(webHandler, null). }
true;public,static;1;57;/**  * Static factory method to create a new builder instance by detecting beans  * in an {@link ApplicationContext}. The following are detected:  * <ul>  * <li>{@link WebHandler} [1] -- looked up by the name  * {@link #WEB_HANDLER_BEAN_NAME}.  * <li>{@link WebFilter} [0..N] -- detected by type and ordered,  * see {@link AnnotationAwareOrderComparator}.  * <li>{@link WebExceptionHandler} [0..N] -- detected by type and  * ordered.  * <li>{@link WebSessionManager} [0..1] -- looked up by the name  * {@link #WEB_SESSION_MANAGER_BEAN_NAME}.  * <li>{@link ServerCodecConfigurer} [0..1] -- looked up by the name  * {@link #SERVER_CODEC_CONFIGURER_BEAN_NAME}.  * <li>{@link LocaleContextResolver} [0..1] -- looked up by the name  * {@link #LOCALE_CONTEXT_RESOLVER_BEAN_NAME}.  * </ul>  * @param context the application context to use for the lookup  * @return the prepared builder  */ ;/**  * Static factory method to create a new builder instance by detecting beans  * in an {@link ApplicationContext}. The following are detected:  * <ul>  * <li>{@link WebHandler} [1] -- looked up by the name  * {@link #WEB_HANDLER_BEAN_NAME}.  * <li>{@link WebFilter} [0..N] -- detected by type and ordered,  * see {@link AnnotationAwareOrderComparator}.  * <li>{@link WebExceptionHandler} [0..N] -- detected by type and  * ordered.  * <li>{@link WebSessionManager} [0..1] -- looked up by the name  * {@link #WEB_SESSION_MANAGER_BEAN_NAME}.  * <li>{@link ServerCodecConfigurer} [0..1] -- looked up by the name  * {@link #SERVER_CODEC_CONFIGURER_BEAN_NAME}.  * <li>{@link LocaleContextResolver} [0..1] -- looked up by the name  * {@link #LOCALE_CONTEXT_RESOLVER_BEAN_NAME}.  * </ul>  * @param context the application context to use for the lookup  * @return the prepared builder  */ public static WebHttpHandlerBuilder applicationContext(ApplicationContext context) {     WebHttpHandlerBuilder builder = new WebHttpHandlerBuilder(context.getBean(WEB_HANDLER_BEAN_NAME, WebHandler.class), context).     List<WebFilter> webFilters = context.getBeanProvider(WebFilter.class).orderedStream().collect(Collectors.toList()).     builder.filters(filters -> filters.addAll(webFilters)).     List<WebExceptionHandler> exceptionHandlers = context.getBeanProvider(WebExceptionHandler.class).orderedStream().collect(Collectors.toList()).     builder.exceptionHandlers(handlers -> handlers.addAll(exceptionHandlers)).     try {         builder.sessionManager(context.getBean(WEB_SESSION_MANAGER_BEAN_NAME, WebSessionManager.class)).     } catch (NoSuchBeanDefinitionException ex) {     // Fall back on default     }     try {         builder.codecConfigurer(context.getBean(SERVER_CODEC_CONFIGURER_BEAN_NAME, ServerCodecConfigurer.class)).     } catch (NoSuchBeanDefinitionException ex) {     // Fall back on default     }     try {         builder.localeContextResolver(context.getBean(LOCALE_CONTEXT_RESOLVER_BEAN_NAME, LocaleContextResolver.class)).     } catch (NoSuchBeanDefinitionException ex) {     // Fall back on default     }     try {         builder.localeContextResolver(context.getBean(LOCALE_CONTEXT_RESOLVER_BEAN_NAME, LocaleContextResolver.class)).     } catch (NoSuchBeanDefinitionException ex) {     // Fall back on default     }     try {         builder.forwardedHeaderTransformer(context.getBean(FORWARDED_HEADER_TRANSFORMER_BEAN_NAME, ForwardedHeaderTransformer.class)).     } catch (NoSuchBeanDefinitionException ex) {     // Fall back on default     }     return builder. }
true;public;1;7;/**  * Add the given filter(s).  * @param filters the filter(s) to add that's  */ ;/**  * Add the given filter(s).  * @param filters the filter(s) to add that's  */ public WebHttpHandlerBuilder filter(WebFilter... filters) {     if (!ObjectUtils.isEmpty(filters)) {         this.filters.addAll(Arrays.asList(filters)).         updateFilters().     }     return this. }
true;public;1;5;/**  * Manipulate the "live" list of currently configured filters.  * @param consumer the consumer to use  */ ;/**  * Manipulate the "live" list of currently configured filters.  * @param consumer the consumer to use  */ public WebHttpHandlerBuilder filters(Consumer<List<WebFilter>> consumer) {     consumer.accept(this.filters).     updateFilters().     return this. }
false;private;0;18;;private void updateFilters() {     if (this.filters.isEmpty()) {         return.     }     List<WebFilter> filtersToUse = this.filters.stream().peek(filter -> {         if (filter instanceof ForwardedHeaderTransformer && this.forwardedHeaderTransformer == null) {             this.forwardedHeaderTransformer = (ForwardedHeaderTransformer) filter.         }     }).filter(filter -> !(filter instanceof ForwardedHeaderTransformer)).collect(Collectors.toList()).     this.filters.clear().     this.filters.addAll(filtersToUse). }
true;public;1;6;/**  * Add the given exception handler(s).  * @param handlers the exception handler(s)  */ ;/**  * Add the given exception handler(s).  * @param handlers the exception handler(s)  */ public WebHttpHandlerBuilder exceptionHandler(WebExceptionHandler... handlers) {     if (!ObjectUtils.isEmpty(handlers)) {         this.exceptionHandlers.addAll(Arrays.asList(handlers)).     }     return this. }
true;public;1;4;/**  * Manipulate the "live" list of currently configured exception handlers.  * @param consumer the consumer to use  */ ;/**  * Manipulate the "live" list of currently configured exception handlers.  * @param consumer the consumer to use  */ public WebHttpHandlerBuilder exceptionHandlers(Consumer<List<WebExceptionHandler>> consumer) {     consumer.accept(this.exceptionHandlers).     return this. }
true;public;1;4;/**  * Configure the {@link WebSessionManager} to set on the  * {@link ServerWebExchange WebServerExchange}.  * <p>By default {@link DefaultWebSessionManager} is used.  * @param manager the session manager  * @see HttpWebHandlerAdapter#setSessionManager(WebSessionManager)  */ ;/**  * Configure the {@link WebSessionManager} to set on the  * {@link ServerWebExchange WebServerExchange}.  * <p>By default {@link DefaultWebSessionManager} is used.  * @param manager the session manager  * @see HttpWebHandlerAdapter#setSessionManager(WebSessionManager)  */ public WebHttpHandlerBuilder sessionManager(WebSessionManager manager) {     this.sessionManager = manager.     return this. }
true;public;0;3;/**  * Whether a {@code WebSessionManager} is configured or not, either detected from an  * {@code ApplicationContext} or explicitly configured via {@link #sessionManager}.  * @since 5.0.9  */ ;/**  * Whether a {@code WebSessionManager} is configured or not, either detected from an  * {@code ApplicationContext} or explicitly configured via {@link #sessionManager}.  * @since 5.0.9  */ public boolean hasSessionManager() {     return (this.sessionManager != null). }
true;public;1;4;/**  * Configure the {@link ServerCodecConfigurer} to set on the {@code WebServerExchange}.  * @param codecConfigurer the codec configurer  */ ;/**  * Configure the {@link ServerCodecConfigurer} to set on the {@code WebServerExchange}.  * @param codecConfigurer the codec configurer  */ public WebHttpHandlerBuilder codecConfigurer(ServerCodecConfigurer codecConfigurer) {     this.codecConfigurer = codecConfigurer.     return this. }
true;public;0;3;/**  * Whether a {@code ServerCodecConfigurer} is configured or not, either detected from an  * {@code ApplicationContext} or explicitly configured via {@link #codecConfigurer}.  * @since 5.0.9  */ ;/**  * Whether a {@code ServerCodecConfigurer} is configured or not, either detected from an  * {@code ApplicationContext} or explicitly configured via {@link #codecConfigurer}.  * @since 5.0.9  */ public boolean hasCodecConfigurer() {     return (this.codecConfigurer != null). }
true;public;1;4;/**  * Configure the {@link LocaleContextResolver} to set on the  * {@link ServerWebExchange WebServerExchange}.  * @param localeContextResolver the locale context resolver  */ ;/**  * Configure the {@link LocaleContextResolver} to set on the  * {@link ServerWebExchange WebServerExchange}.  * @param localeContextResolver the locale context resolver  */ public WebHttpHandlerBuilder localeContextResolver(LocaleContextResolver localeContextResolver) {     this.localeContextResolver = localeContextResolver.     return this. }
true;public;0;3;/**  * Whether a {@code LocaleContextResolver} is configured or not, either detected from an  * {@code ApplicationContext} or explicitly configured via {@link #localeContextResolver}.  * @since 5.0.9  */ ;/**  * Whether a {@code LocaleContextResolver} is configured or not, either detected from an  * {@code ApplicationContext} or explicitly configured via {@link #localeContextResolver}.  * @since 5.0.9  */ public boolean hasLocaleContextResolver() {     return (this.localeContextResolver != null). }
true;public;1;4;/**  * Configure the {@link ForwardedHeaderTransformer} for extracting and/or  * removing forwarded headers.  * @param transformer the transformer  * @since 5.1  */ ;/**  * Configure the {@link ForwardedHeaderTransformer} for extracting and/or  * removing forwarded headers.  * @param transformer the transformer  * @since 5.1  */ public WebHttpHandlerBuilder forwardedHeaderTransformer(ForwardedHeaderTransformer transformer) {     this.forwardedHeaderTransformer = transformer.     return this. }
true;public;0;3;/**  * Whether a {@code ForwardedHeaderTransformer} is configured or not, either  * detected from an {@code ApplicationContext} or explicitly configured via  * {@link #forwardedHeaderTransformer(ForwardedHeaderTransformer)}.  * @since 5.1  */ ;/**  * Whether a {@code ForwardedHeaderTransformer} is configured or not, either  * detected from an {@code ApplicationContext} or explicitly configured via  * {@link #forwardedHeaderTransformer(ForwardedHeaderTransformer)}.  * @since 5.1  */ public boolean hasForwardedHeaderTransformer() {     return (this.forwardedHeaderTransformer != null). }
true;public;0;25;/**  * Build the {@link HttpHandler}.  */ ;/**  * Build the {@link HttpHandler}.  */ public HttpHandler build() {     WebHandler decorated = new FilteringWebHandler(this.webHandler, this.filters).     decorated = new ExceptionHandlingWebHandler(decorated, this.exceptionHandlers).     HttpWebHandlerAdapter adapted = new HttpWebHandlerAdapter(decorated).     if (this.sessionManager != null) {         adapted.setSessionManager(this.sessionManager).     }     if (this.codecConfigurer != null) {         adapted.setCodecConfigurer(this.codecConfigurer).     }     if (this.localeContextResolver != null) {         adapted.setLocaleContextResolver(this.localeContextResolver).     }     if (this.forwardedHeaderTransformer != null) {         adapted.setForwardedHeaderTransformer(this.forwardedHeaderTransformer).     }     if (this.applicationContext != null) {         adapted.setApplicationContext(this.applicationContext).     }     adapted.afterPropertiesSet().     return adapted. }
true;public;0;4;/**  * Clone this {@link WebHttpHandlerBuilder}.  * @return the cloned builder instance  */ ;/**  * Clone this {@link WebHttpHandlerBuilder}.  * @return the cloned builder instance  */ @Override public WebHttpHandlerBuilder clone() {     return new WebHttpHandlerBuilder(this). }
