commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isStarted() {     return (this.asyncContext != null && this.request.getServletRequest().isAsyncStarted()). }
false;public;0;4;;@Override public boolean isCompleted() {     return this.asyncCompleted.get(). }
false;public;0;4;;@Override public void start() {     start(NO_TIMEOUT_VALUE). }
false;public;1;17;;@Override public void start(long timeout) {     Assert.state(!isCompleted(), "Async processing has already completed").     if (isStarted()) {         return.     }     HttpServletRequest servletRequest = this.request.getServletRequest().     HttpServletResponse servletResponse = this.response.getServletResponse().     this.asyncContext = servletRequest.startAsync(servletRequest, servletResponse).     this.asyncContext.addListener(this).     if (timeout != NO_TIMEOUT_VALUE) {         this.asyncContext.setTimeout(timeout).     } }
false;public;0;6;;@Override public void complete() {     if (this.asyncContext != null && isStarted() && !isCompleted()) {         this.asyncContext.complete().     } }
false;public;1;5;;// --------------------------------------------------------------------- // Implementation of AsyncListener methods // --------------------------------------------------------------------- @Override public void onComplete(AsyncEvent event) throws IOException {     this.asyncContext = null.     this.asyncCompleted.set(true). }
false;public;1;3;;@Override public void onStartAsync(AsyncEvent event) throws IOException { }
false;public;1;3;;@Override public void onError(AsyncEvent event) throws IOException { }
false;public;1;3;;@Override public void onTimeout(AsyncEvent event) throws IOException { }
