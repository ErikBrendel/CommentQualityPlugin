commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the converter to use for parsing form content.  * <p>By default this is an instance of {@link AllEncompassingFormHttpMessageConverter}.  */ ;/**  * Set the converter to use for parsing form content.  * <p>By default this is an instance of {@link AllEncompassingFormHttpMessageConverter}.  */ public void setFormConverter(FormHttpMessageConverter converter) {     Assert.notNull(converter, "FormHttpMessageConverter is required").     this.formConverter = converter. }
true;public;1;3;/**  * The default character set to use for reading form data.  * This is a shortcut for:<br>  * {@code getFormConverter.setCharset(charset)}.  */ ;/**  * The default character set to use for reading form data.  * This is a shortcut for:<br>  * {@code getFormConverter.setCharset(charset)}.  */ public void setCharset(Charset charset) {     this.formConverter.setCharset(charset). }
false;protected;3;13;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     MultiValueMap<String, String> params = parseIfNecessary(request).     if (!CollectionUtils.isEmpty(params)) {         filterChain.doFilter(new FormContentRequestWrapper(request, params), response).     } else {         filterChain.doFilter(request, response).     } }
false;public;0;4;;@Override public InputStream getBody() throws IOException {     return request.getInputStream(). }
false;private;1;14;;@Nullable private MultiValueMap<String, String> parseIfNecessary(HttpServletRequest request) throws IOException {     if (!shouldParse(request)) {         return null.     }     HttpInputMessage inputMessage = new ServletServerHttpRequest(request) {          @Override         public InputStream getBody() throws IOException {             return request.getInputStream().         }     }.     return this.formConverter.read(null, inputMessage). }
false;private;1;12;;private boolean shouldParse(HttpServletRequest request) {     if (!HTTP_METHODS.contains(request.getMethod())) {         return false.     }     try {         MediaType mediaType = MediaType.parseMediaType(request.getContentType()).         return MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType).     } catch (IllegalArgumentException ex) {         return false.     } }
false;public;1;7;;@Override @Nullable public String getParameter(String name) {     String queryStringValue = super.getParameter(name).     String formValue = this.formParams.getFirst(name).     return (queryStringValue != null ? queryStringValue : formValue). }
false;public;0;10;;@Override public Map<String, String[]> getParameterMap() {     Map<String, String[]> result = new LinkedHashMap<>().     Enumeration<String> names = getParameterNames().     while (names.hasMoreElements()) {         String name = names.nextElement().         result.put(name, getParameterValues(name)).     }     return result. }
false;public;0;7;;@Override public Enumeration<String> getParameterNames() {     Set<String> names = new LinkedHashSet<>().     names.addAll(Collections.list(super.getParameterNames())).     names.addAll(this.formParams.keySet()).     return Collections.enumeration(names). }
false;public;1;18;;@Override @Nullable public String[] getParameterValues(String name) {     String[] parameterValues = super.getParameterValues(name).     List<String> formParam = this.formParams.get(name).     if (formParam == null) {         return parameterValues.     }     if (parameterValues == null || getQueryString() == null) {         return StringUtils.toStringArray(formParam).     } else {         List<String> result = new ArrayList<>(parameterValues.length + formParam.size()).         result.addAll(Arrays.asList(parameterValues)).         result.addAll(formParam).         return StringUtils.toStringArray(result).     } }
