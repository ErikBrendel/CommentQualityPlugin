commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the list of {@link MediaType} objects supported by this converter.  */ ;/**  * Set the list of {@link MediaType} objects supported by this converter.  */ public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {     this.supportedMediaTypes = supportedMediaTypes. }
false;public;0;4;;@Override public List<MediaType> getSupportedMediaTypes() {     return Collections.unmodifiableList(this.supportedMediaTypes). }
true;public;1;4;/**  * Set the message body converters to use. These converters are used to  * convert objects to MIME parts.  */ ;/**  * Set the message body converters to use. These converters are used to  * convert objects to MIME parts.  */ public void setPartConverters(List<HttpMessageConverter<?>> partConverters) {     Assert.notEmpty(partConverters, "'partConverters' must not be empty").     this.partConverters = partConverters. }
true;public;1;4;/**  * Add a message body converter. Such a converter is used to convert objects  * to MIME parts.  */ ;/**  * Add a message body converter. Such a converter is used to convert objects  * to MIME parts.  */ public void addPartConverter(HttpMessageConverter<?> partConverter) {     Assert.notNull(partConverter, "'partConverter' must not be null").     this.partConverters.add(partConverter). }
true;public;1;6;/**  * Set the default character set to use for reading and writing form data when  * the request or response Content-Type header does not explicitly specify it.  * <p>As of 4.3, this is also used as the default charset for the conversion  * of text bodies in a multipart request.  * <p>As of 5.0 this is also used for part headers including  * "Content-Disposition" (and its filename parameter) unless (the mutually  * exclusive) {@link #setMultipartCharset} is also set, in which case part  * headers are encoded as ASCII and <i>filename</i> is encoded with the  * "encoded-word" syntax from RFC 2047.  * <p>By default this is set to "UTF-8".  */ ;/**  * Set the default character set to use for reading and writing form data when  * the request or response Content-Type header does not explicitly specify it.  * <p>As of 4.3, this is also used as the default charset for the conversion  * of text bodies in a multipart request.  * <p>As of 5.0 this is also used for part headers including  * "Content-Disposition" (and its filename parameter) unless (the mutually  * exclusive) {@link #setMultipartCharset} is also set, in which case part  * headers are encoded as ASCII and <i>filename</i> is encoded with the  * "encoded-word" syntax from RFC 2047.  * <p>By default this is set to "UTF-8".  */ public void setCharset(@Nullable Charset charset) {     if (charset != this.charset) {         this.charset = (charset != null ? charset : DEFAULT_CHARSET).         applyDefaultCharset().     } }
true;private;0;11;/**  * Apply the configured charset as a default to registered part converters.  */ ;/**  * Apply the configured charset as a default to registered part converters.  */ private void applyDefaultCharset() {     for (HttpMessageConverter<?> candidate : this.partConverters) {         if (candidate instanceof AbstractHttpMessageConverter) {             AbstractHttpMessageConverter<?> converter = (AbstractHttpMessageConverter<?>) candidate.             // Only override default charset if the converter operates with a charset to begin with...             if (converter.getDefaultCharset() != null) {                 converter.setDefaultCharset(this.charset).             }         }     } }
true;public;1;3;/**  * Set the character set to use when writing multipart data to encode file  * names. Encoding is based on the "encoded-word" syntax defined in RFC 2047  * and relies on {@code MimeUtility} from "javax.mail".  * <p>As of 5.0 by default part headers, including Content-Disposition (and  * its filename parameter) will be encoded based on the setting of  * {@link #setCharset(Charset)} or {@code UTF-8} by default.  * @since 4.1.1  * @see <a href="http://en.wikipedia.org/wiki/MIME#Encoded-Word">Encoded-Word</a>  */ ;/**  * Set the character set to use when writing multipart data to encode file  * names. Encoding is based on the "encoded-word" syntax defined in RFC 2047  * and relies on {@code MimeUtility} from "javax.mail".  * <p>As of 5.0 by default part headers, including Content-Disposition (and  * its filename parameter) will be encoded based on the setting of  * {@link #setCharset(Charset)} or {@code UTF-8} by default.  * @since 4.1.1  * @see <a href="http://en.wikipedia.org/wiki/MIME#Encoded-Word">Encoded-Word</a>  */ public void setMultipartCharset(Charset charset) {     this.multipartCharset = charset. }
false;public;2;16;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     if (!MultiValueMap.class.isAssignableFrom(clazz)) {         return false.     }     if (mediaType == null) {         return true.     }     for (MediaType supportedMediaType : getSupportedMediaTypes()) {         // We can't read multipart....         if (!supportedMediaType.equals(MediaType.MULTIPART_FORM_DATA) && supportedMediaType.includes(mediaType)) {             return true.         }     }     return false. }
false;public;2;15;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     if (!MultiValueMap.class.isAssignableFrom(clazz)) {         return false.     }     if (mediaType == null || MediaType.ALL.equals(mediaType)) {         return true.     }     for (MediaType supportedMediaType : getSupportedMediaTypes()) {         if (supportedMediaType.isCompatibleWith(mediaType)) {             return true.         }     }     return false. }
false;public;2;24;;@Override public MultiValueMap<String, String> read(@Nullable Class<? extends MultiValueMap<String, ?>> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     MediaType contentType = inputMessage.getHeaders().getContentType().     Charset charset = (contentType != null && contentType.getCharset() != null ? contentType.getCharset() : this.charset).     String body = StreamUtils.copyToString(inputMessage.getBody(), charset).     String[] pairs = StringUtils.tokenizeToStringArray(body, "&").     MultiValueMap<String, String> result = new LinkedMultiValueMap<>(pairs.length).     for (String pair : pairs) {         int idx = pair.indexOf('=').         if (idx == -1) {             result.add(URLDecoder.decode(pair, charset.name()), null).         } else {             String name = URLDecoder.decode(pair.substring(0, idx), charset.name()).             String value = URLDecoder.decode(pair.substring(idx + 1), charset.name()).             result.add(name, value).         }     }     return result. }
false;public;3;12;;@Override @SuppressWarnings("unchecked") public void write(MultiValueMap<String, ?> map, @Nullable MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     if (!isMultipart(map, contentType)) {         writeForm((MultiValueMap<String, Object>) map, contentType, outputMessage).     } else {         writeMultipart((MultiValueMap<String, Object>) map, outputMessage).     } }
false;private;2;13;;private boolean isMultipart(MultiValueMap<String, ?> map, @Nullable MediaType contentType) {     if (contentType != null) {         return MediaType.MULTIPART_FORM_DATA.includes(contentType).     }     for (String name : map.keySet()) {         for (Object value : map.get(name)) {             if (value != null && !(value instanceof String)) {                 return true.             }         }     }     return false. }
false;private;3;20;;private void writeForm(MultiValueMap<String, Object> formData, @Nullable MediaType contentType, HttpOutputMessage outputMessage) throws IOException {     contentType = getMediaType(contentType).     outputMessage.getHeaders().setContentType(contentType).     Charset charset = contentType.getCharset().     // should never occur     Assert.notNull(charset, "No charset").     final byte[] bytes = serializeForm(formData, charset).getBytes(charset).     outputMessage.getHeaders().setContentLength(bytes.length).     if (outputMessage instanceof StreamingHttpOutputMessage) {         StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage.         streamingOutputMessage.setBody(outputStream -> StreamUtils.copy(bytes, outputStream)).     } else {         StreamUtils.copy(bytes, outputMessage.getBody()).     } }
false;private;1;11;;private MediaType getMediaType(@Nullable MediaType mediaType) {     if (mediaType == null) {         return DEFAULT_FORM_DATA_MEDIA_TYPE.     } else if (mediaType.getCharset() == null) {         return new MediaType(mediaType, this.charset).     } else {         return mediaType.     } }
false;protected;2;21;;protected String serializeForm(MultiValueMap<String, Object> formData, Charset charset) {     StringBuilder builder = new StringBuilder().     formData.forEach((name, values) -> values.forEach(value -> {         try {             if (builder.length() != 0) {                 builder.append('&').             }             builder.append(URLEncoder.encode(name, charset.name())).             if (value != null) {                 builder.append('=').                 builder.append(URLEncoder.encode(String.valueOf(value), charset.name())).             }         } catch (UnsupportedEncodingException ex) {             throw new IllegalStateException(ex).         }     })).     return builder.toString(). }
false;private;2;26;;private void writeMultipart(final MultiValueMap<String, Object> parts, HttpOutputMessage outputMessage) throws IOException {     final byte[] boundary = generateMultipartBoundary().     Map<String, String> parameters = new LinkedHashMap<>(2).     if (!isFilenameCharsetSet()) {         parameters.put("charset", this.charset.name()).     }     parameters.put("boundary", new String(boundary, StandardCharsets.US_ASCII)).     MediaType contentType = new MediaType(MediaType.MULTIPART_FORM_DATA, parameters).     HttpHeaders headers = outputMessage.getHeaders().     headers.setContentType(contentType).     if (outputMessage instanceof StreamingHttpOutputMessage) {         StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage.         streamingOutputMessage.setBody(outputStream -> {             writeParts(outputStream, parts, boundary).             writeEnd(outputStream, boundary).         }).     } else {         writeParts(outputMessage.getBody(), parts, boundary).         writeEnd(outputMessage.getBody(), boundary).     } }
true;private;0;3;/**  * When {@link #setMultipartCharset(Charset)} is configured (i.e. RFC 2047,  * "encoded-word" syntax) we need to use ASCII for part headers or otherwise  * we encode directly using the configured {@link #setCharset(Charset)}.  */ ;/**  * When {@link #setMultipartCharset(Charset)} is configured (i.e. RFC 2047,  * "encoded-word" syntax) we need to use ASCII for part headers or otherwise  * we encode directly using the configured {@link #setCharset(Charset)}.  */ private boolean isFilenameCharsetSet() {     return (this.multipartCharset != null). }
false;private;3;12;;private void writeParts(OutputStream os, MultiValueMap<String, Object> parts, byte[] boundary) throws IOException {     for (Map.Entry<String, List<Object>> entry : parts.entrySet()) {         String name = entry.getKey().         for (Object part : entry.getValue()) {             if (part != null) {                 writeBoundary(os, boundary).                 writePart(name, getHttpEntity(part), os).                 writeNewLine(os).             }         }     } }
false;private;3;24;;@SuppressWarnings("unchecked") private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException {     Object partBody = partEntity.getBody().     if (partBody == null) {         throw new IllegalStateException("Empty body for part '" + name + "': " + partEntity).     }     Class<?> partType = partBody.getClass().     HttpHeaders partHeaders = partEntity.getHeaders().     MediaType partContentType = partHeaders.getContentType().     for (HttpMessageConverter<?> messageConverter : this.partConverters) {         if (messageConverter.canWrite(partType, partContentType)) {             Charset charset = isFilenameCharsetSet() ? StandardCharsets.US_ASCII : this.charset.             HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os, charset).             multipartMessage.getHeaders().setContentDispositionFormData(name, getFilename(partBody)).             if (!partHeaders.isEmpty()) {                 multipartMessage.getHeaders().putAll(partHeaders).             }             ((HttpMessageConverter<Object>) messageConverter).write(partBody, partContentType, multipartMessage).             return.         }     }     throw new HttpMessageNotWritableException("Could not write request: no suitable HttpMessageConverter " + "found for request type [" + partType.getName() + "]"). }
true;protected;0;3;/**  * Generate a multipart boundary.  * <p>This implementation delegates to  * {@link MimeTypeUtils#generateMultipartBoundary()}.  */ ;/**  * Generate a multipart boundary.  * <p>This implementation delegates to  * {@link MimeTypeUtils#generateMultipartBoundary()}.  */ protected byte[] generateMultipartBoundary() {     return MimeTypeUtils.generateMultipartBoundary(). }
true;protected;1;3;/**  * Return an {@link HttpEntity} for the given part Object.  * @param part the part to return an {@link HttpEntity} for  * @return the part Object itself it is an {@link HttpEntity},  * or a newly built {@link HttpEntity} wrapper for that part  */ ;/**  * Return an {@link HttpEntity} for the given part Object.  * @param part the part to return an {@link HttpEntity} for  * @return the part Object itself it is an {@link HttpEntity},  * or a newly built {@link HttpEntity} wrapper for that part  */ protected HttpEntity<?> getHttpEntity(Object part) {     return (part instanceof HttpEntity ? (HttpEntity<?>) part : new HttpEntity<>(part)). }
true;protected;1;14;/**  * Return the filename of the given multipart part. This value will be used for the  * {@code Content-Disposition} header.  * <p>The default implementation returns {@link Resource#getFilename()} if the part is a  * {@code Resource}, and {@code null} in other cases. Can be overridden in subclasses.  * @param part the part to determine the file name for  * @return the filename, or {@code null} if not known  */ ;/**  * Return the filename of the given multipart part. This value will be used for the  * {@code Content-Disposition} header.  * <p>The default implementation returns {@link Resource#getFilename()} if the part is a  * {@code Resource}, and {@code null} in other cases. Can be overridden in subclasses.  * @param part the part to determine the file name for  * @return the filename, or {@code null} if not known  */ @Nullable protected String getFilename(Object part) {     if (part instanceof Resource) {         Resource resource = (Resource) part.         String filename = resource.getFilename().         if (filename != null && this.multipartCharset != null) {             filename = MimeDelegate.encode(filename, this.multipartCharset.name()).         }         return filename.     } else {         return null.     } }
false;private;2;6;;private void writeBoundary(OutputStream os, byte[] boundary) throws IOException {     os.write('-').     os.write('-').     os.write(boundary).     writeNewLine(os). }
false;private,static;2;8;;private static void writeEnd(OutputStream os, byte[] boundary) throws IOException {     os.write('-').     os.write('-').     os.write(boundary).     os.write('-').     os.write('-').     writeNewLine(os). }
false;private,static;1;4;;private static void writeNewLine(OutputStream os) throws IOException {     os.write('\r').     os.write('\n'). }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers). }
false;public;0;5;;@Override public OutputStream getBody() throws IOException {     writeHeaders().     return this.outputStream. }
false;private;0;17;;private void writeHeaders() throws IOException {     if (!this.headersWritten) {         for (Map.Entry<String, List<String>> entry : this.headers.entrySet()) {             byte[] headerName = getBytes(entry.getKey()).             for (String headerValueString : entry.getValue()) {                 byte[] headerValue = getBytes(headerValueString).                 this.outputStream.write(headerName).                 this.outputStream.write(':').                 this.outputStream.write(' ').                 this.outputStream.write(headerValue).                 writeNewLine(this.outputStream).             }         }         writeNewLine(this.outputStream).         this.headersWritten = true.     } }
false;private;1;3;;private byte[] getBytes(String name) {     return name.getBytes(this.charset). }
false;public,static;2;8;;public static String encode(String value, String charset) {     try {         return MimeUtility.encodeText(value, charset, null).     } catch (UnsupportedEncodingException ex) {         throw new IllegalStateException(ex).     } }
