commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the log category for warn logging.  * <p>Default is no warn logging. Specify this setting to activate warn  * logging into a specific category.  * @since 5.1  * @see org.apache.commons.logging.LogFactory#getLog(String)  * @see java.util.logging.Logger#getLogger(String)  */ ;/**  * Set the log category for warn logging.  * <p>Default is no warn logging. Specify this setting to activate warn  * logging into a specific category.  * @since 5.1  * @see org.apache.commons.logging.LogFactory#getLog(String)  * @see java.util.logging.Logger#getLogger(String)  */ public void setWarnLogCategory(String loggerName) {     this.warnLogger = LogFactory.getLog(loggerName). }
false;public;2;18;;@Override public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {     HttpStatus status = resolveStatus(ex).     if (status == null || !exchange.getResponse().setStatusCode(status)) {         return Mono.error(ex).     }     // Mirrors AbstractHandlerExceptionResolver in spring-webmvc...     String logPrefix = exchange.getLogPrefix().     if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {         this.warnLogger.warn(logPrefix + formatError(ex, exchange.getRequest()), ex).     } else if (logger.isDebugEnabled()) {         logger.debug(logPrefix + formatError(ex, exchange.getRequest())).     }     return exchange.getResponse().setComplete(). }
false;private;2;5;;private String formatError(Throwable ex, ServerHttpRequest request) {     String reason = ex.getClass().getSimpleName() + ": " + ex.getMessage().     String path = request.getURI().getRawPath().     return "Resolved [" + reason + "] for HTTP " + request.getMethod() + " " + path. }
false;private;1;11;;@Nullable private HttpStatus resolveStatus(Throwable ex) {     HttpStatus status = determineStatus(ex).     if (status == null) {         Throwable cause = ex.getCause().         if (cause != null) {             status = resolveStatus(cause).         }     }     return status. }
true;protected;1;7;/**  * Determine the HTTP status implied by the given exception.  * @param ex the exception to introspect  * @return the associated HTTP status, if any  * @since 5.0.5  */ ;/**  * Determine the HTTP status implied by the given exception.  * @param ex the exception to introspect  * @return the associated HTTP status, if any  * @since 5.0.5  */ @Nullable protected HttpStatus determineStatus(Throwable ex) {     if (ex instanceof ResponseStatusException) {         return ((ResponseStatusException) ex).getStatus().     }     return null. }
