# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1356735495;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1368482696;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1398858661;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1401910463;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1468613531;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1490350197;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(HttpExchange)_@see #invokeAndCreateResult(RemoteInvocation, Object)_@see #writeRemoteInvocationResult(HttpExchange, RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,http,exchange,see,invoke,and,create,result,remote,invocation,object,see,write,remote,invocation,result,http,exchange,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> @Override 	public void handle(HttpExchange exchange) throws IOException;1533666953;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(HttpExchange)_@see #invokeAndCreateResult(RemoteInvocation, Object)_@see #writeRemoteInvocationResult(HttpExchange, RemoteInvocationResult);@Override_	public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,http,exchange,see,invoke,and,create,result,remote,invocation,object,see,write,remote,invocation,result,http,exchange,remote,invocation,result;override,public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> public void handle(HttpExchange exchange) throws IOException;1328020251;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> public void handle(HttpExchange exchange) throws IOException;1357119239;Reads a remote invocation from the request, executes it,_and writes the remote invocation result to the response._@see #readRemoteInvocation(com.sun.net.httpserver.HttpExchange)_@see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)_@see #writeRemoteInvocationResult(com.sun.net.httpserver.HttpExchange, org.springframework.remoting.support.RemoteInvocationResult);public void handle(HttpExchange exchange) throws IOException {_		try {_			RemoteInvocation invocation = readRemoteInvocation(exchange)__			RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy())__			writeRemoteInvocationResult(exchange, result)__			exchange.close()__		}_		catch (ClassNotFoundException ex) {_			exchange.sendResponseHeaders(500, -1)__			logger.error("Class not found during deserialization", ex)__		}_	};reads,a,remote,invocation,from,the,request,executes,it,and,writes,the,remote,invocation,result,to,the,response,see,read,remote,invocation,com,sun,net,httpserver,http,exchange,see,invoke,and,create,result,org,springframework,remoting,support,remote,invocation,object,see,write,remote,invocation,result,com,sun,net,httpserver,http,exchange,org,springframework,remoting,support,remote,invocation,result;public,void,handle,http,exchange,exchange,throws,ioexception,try,remote,invocation,invocation,read,remote,invocation,exchange,remote,invocation,result,result,invoke,and,create,result,invocation,get,proxy,write,remote,invocation,result,exchange,result,exchange,close,catch,class,not,found,exception,ex,exchange,send,response,headers,500,1,logger,error,class,not,found,during,deserialization,ex
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1328020251;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1356735495;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1357119239;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1368482696;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1398858661;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1401910463;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1468613531;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1490350197;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException;1533666953;Return the InputStream to use for reading remote invocations,_potentially decorating the given original InputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param is the original InputStream_@return the potentially decorated InputStream_@throws java.io.IOException in case of I/O failure;protected InputStream decorateInputStream(HttpExchange exchange, InputStream is) throws IOException {_		return is__	};return,the,input,stream,to,use,for,reading,remote,invocations,potentially,decorating,the,given,original,input,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,is,the,original,input,stream,return,the,potentially,decorated,input,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,input,stream,decorate,input,stream,http,exchange,exchange,input,stream,is,throws,ioexception,return,is
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1328020251;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1356735495;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1357119239;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1368482696;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1398858661;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1401910463;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1468613531;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1490350197;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult( 			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException;1533666953;Serialize the given RemoteInvocation to the given OutputStream._<p>The default implementation gives {@link #decorateOutputStream} a chance_to decorate the stream first (for example, for custom encryption or compression)._Creates an {@link java.io.ObjectOutputStream} for the final stream and calls_{@link #doWriteRemoteInvocationResult} to actually write the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@param os the OutputStream to write to_@throws java.io.IOException in case of I/O failure_@see #decorateOutputStream_@see #doWriteRemoteInvocationResult;protected void writeRemoteInvocationResult(_			HttpExchange exchange, RemoteInvocationResult result, OutputStream os) throws IOException {__		ObjectOutputStream oos = createObjectOutputStream(decorateOutputStream(exchange, os))__		doWriteRemoteInvocationResult(result, oos)__		oos.flush()__	};serialize,the,given,remote,invocation,to,the,given,output,stream,p,the,default,implementation,gives,link,decorate,output,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,an,link,java,io,object,output,stream,for,the,final,stream,and,calls,link,do,write,remote,invocation,result,to,actually,write,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,param,os,the,output,stream,to,write,to,throws,java,io,ioexception,in,case,of,i,o,failure,see,decorate,output,stream,see,do,write,remote,invocation,result;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,output,stream,os,throws,ioexception,object,output,stream,oos,create,object,output,stream,decorate,output,stream,exchange,os,do,write,remote,invocation,result,result,oos,oos,flush
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1328020251;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1356735495;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1357119239;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1368482696;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1398858661;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1401910463;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1468613531;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1490350197;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException;1533666953;Return the OutputStream to use for writing remote invocation results,_potentially decorating the given original OutputStream._<p>The default implementation returns the given stream as-is._Can be overridden, for example, for custom encryption or compression._@param exchange current HTTP request/response_@param os the original OutputStream_@return the potentially decorated OutputStream_@throws java.io.IOException in case of I/O failure;protected OutputStream decorateOutputStream(HttpExchange exchange, OutputStream os) throws IOException {_		return os__	};return,the,output,stream,to,use,for,writing,remote,invocation,results,potentially,decorating,the,given,original,output,stream,p,the,default,implementation,returns,the,given,stream,as,is,can,be,overridden,for,example,for,custom,encryption,or,compression,param,exchange,current,http,request,response,param,os,the,original,output,stream,return,the,potentially,decorated,output,stream,throws,java,io,ioexception,in,case,of,i,o,failure;protected,output,stream,decorate,output,stream,http,exchange,exchange,output,stream,os,throws,ioexception,return,os
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1328020251;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1356735495;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1357119239;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1368482696;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1398858661;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1401910463;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1468613531;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1490350197;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is) 			throws IOException, ClassNotFoundException;1533666953;Deserialize a RemoteInvocation object from the given InputStream._<p>Gives {@link #decorateInputStream} a chance to decorate the stream_first (for example, for custom encryption or compression). Creates a_{@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}_and calls {@link #doReadRemoteInvocation} to actually read the object._<p>Can be overridden for custom serialization of the invocation._@param exchange current HTTP request/response_@param is the InputStream to read from_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown during deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange, InputStream is)_			throws IOException, ClassNotFoundException {__		ObjectInputStream ois = createObjectInputStream(decorateInputStream(exchange, is))__		return doReadRemoteInvocation(ois)__	};deserialize,a,remote,invocation,object,from,the,given,input,stream,p,gives,link,decorate,input,stream,a,chance,to,decorate,the,stream,first,for,example,for,custom,encryption,or,compression,creates,a,link,org,springframework,remoting,rmi,codebase,aware,object,input,stream,and,calls,link,do,read,remote,invocation,to,actually,read,the,object,p,can,be,overridden,for,custom,serialization,of,the,invocation,param,exchange,current,http,request,response,param,is,the,input,stream,to,read,from,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,during,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,input,stream,is,throws,ioexception,class,not,found,exception,object,input,stream,ois,create,object,input,stream,decorate,input,stream,exchange,is,return,do,read,remote,invocation,ois
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1328020251;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1356735495;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1357119239;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1368482696;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1398858661;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1401910463;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1468613531;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1490350197;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result) 			throws IOException;1533666953;Write the given RemoteInvocationResult to the given HTTP response._@param exchange current HTTP request/response_@param result the RemoteInvocationResult object_@throws java.io.IOException in case of I/O failure;protected void writeRemoteInvocationResult(HttpExchange exchange, RemoteInvocationResult result)_			throws IOException {__		exchange.getResponseHeaders().set("Content-Type", getContentType())__		exchange.sendResponseHeaders(200, 0)__		writeRemoteInvocationResult(exchange, result, exchange.getResponseBody())__	};write,the,given,remote,invocation,result,to,the,given,http,response,param,exchange,current,http,request,response,param,result,the,remote,invocation,result,object,throws,java,io,ioexception,in,case,of,i,o,failure;protected,void,write,remote,invocation,result,http,exchange,exchange,remote,invocation,result,result,throws,ioexception,exchange,get,response,headers,set,content,type,get,content,type,exchange,send,response,headers,200,0,write,remote,invocation,result,exchange,result,exchange,get,response,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1328020251;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1356735495;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1357119239;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1368482696;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1398858661;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1401910463;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1468613531;Read a RemoteInvocation from the given HTTP request._<p>Delegates to_{@link #readRemoteInvocation(com.sun.net.httpserver.HttpExchange, java.io.InputStream)}_with the_{@link com.sun.net.httpserver.HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,com,sun,net,httpserver,http,exchange,java,io,input,stream,with,the,link,com,sun,net,httpserver,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1490350197;Read a RemoteInvocation from the given HTTP request._<p>Delegates to {@link #readRemoteInvocation(HttpExchange, InputStream)}_with the {@link HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,http,exchange,input,stream,with,the,link,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
SimpleHttpInvokerServiceExporter -> protected RemoteInvocation readRemoteInvocation(HttpExchange exchange) 			throws IOException, ClassNotFoundException;1533666953;Read a RemoteInvocation from the given HTTP request._<p>Delegates to {@link #readRemoteInvocation(HttpExchange, InputStream)}_with the {@link HttpExchange#getRequestBody()} request's input stream}._@param exchange current HTTP request/response_@return the RemoteInvocation object_@throws java.io.IOException in case of I/O failure_@throws ClassNotFoundException if thrown by deserialization;protected RemoteInvocation readRemoteInvocation(HttpExchange exchange)_			throws IOException, ClassNotFoundException {__		return readRemoteInvocation(exchange, exchange.getRequestBody())__	};read,a,remote,invocation,from,the,given,http,request,p,delegates,to,link,read,remote,invocation,http,exchange,input,stream,with,the,link,http,exchange,get,request,body,request,s,input,stream,param,exchange,current,http,request,response,return,the,remote,invocation,object,throws,java,io,ioexception,in,case,of,i,o,failure,throws,class,not,found,exception,if,thrown,by,deserialization;protected,remote,invocation,read,remote,invocation,http,exchange,exchange,throws,ioexception,class,not,found,exception,return,read,remote,invocation,exchange,exchange,get,request,body
