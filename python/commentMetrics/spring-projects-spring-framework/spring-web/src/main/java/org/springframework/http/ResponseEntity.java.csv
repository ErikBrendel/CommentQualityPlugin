commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Return the HTTP status code of the response.  * @return the HTTP status as an HttpStatus enum entry  */ ;/**  * Return the HTTP status code of the response.  * @return the HTTP status as an HttpStatus enum entry  */ public HttpStatus getStatusCode() {     if (this.status instanceof HttpStatus) {         return (HttpStatus) this.status.     } else {         return HttpStatus.valueOf((Integer) this.status).     } }
true;public;0;8;/**  * Return the HTTP status code of the response.  * @return the HTTP status as an int value  * @since 4.3  */ ;/**  * Return the HTTP status code of the response.  * @return the HTTP status as an int value  * @since 4.3  */ public int getStatusCodeValue() {     if (this.status instanceof HttpStatus) {         return ((HttpStatus) this.status).value().     } else {         return (Integer) this.status.     } }
false;public;1;11;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (!super.equals(other)) {         return false.     }     ResponseEntity<?> otherEntity = (ResponseEntity<?>) other.     return ObjectUtils.nullSafeEquals(this.status, otherEntity.status). }
false;public;0;4;;@Override public int hashCode() {     return (super.hashCode() * 29 + ObjectUtils.nullSafeHashCode(this.status)). }
false;public;0;19;;@Override public String toString() {     StringBuilder builder = new StringBuilder("<").     builder.append(this.status.toString()).     if (this.status instanceof HttpStatus) {         builder.append(' ').         builder.append(((HttpStatus) this.status).getReasonPhrase()).     }     builder.append(',').     T body = getBody().     HttpHeaders headers = getHeaders().     if (body != null) {         builder.append(body).         builder.append(',').     }     builder.append(headers).     builder.append('>').     return builder.toString(). }
true;public,static;1;4;/**  * Create a builder with the given status.  * @param status the response status  * @return the created builder  * @since 4.1  */ ;// Static builder methods /**  * Create a builder with the given status.  * @param status the response status  * @return the created builder  * @since 4.1  */ public static BodyBuilder status(HttpStatus status) {     Assert.notNull(status, "HttpStatus must not be null").     return new DefaultBuilder(status). }
true;public,static;1;3;/**  * Create a builder with the given status.  * @param status the response status  * @return the created builder  * @since 4.1  */ ;/**  * Create a builder with the given status.  * @param status the response status  * @return the created builder  * @since 4.1  */ public static BodyBuilder status(int status) {     return new DefaultBuilder(status). }
true;public,static;1;4;/**  * A shortcut for creating a {@code ResponseEntity} with the given body  * and the {@linkplain HttpStatus#OK OK} status, or an empty body and a  * {@linkplain HttpStatus#NOT_FOUND NOT FOUND} status in case of a  * {@linkplain Optional#empty()} parameter.  * @return the created {@code ResponseEntity}  * @since 5.1  */ ;/**  * A shortcut for creating a {@code ResponseEntity} with the given body  * and the {@linkplain HttpStatus#OK OK} status, or an empty body and a  * {@linkplain HttpStatus#NOT_FOUND NOT FOUND} status in case of a  * {@linkplain Optional#empty()} parameter.  * @return the created {@code ResponseEntity}  * @since 5.1  */ public static <T> ResponseEntity<T> of(Optional<T> body) {     Assert.notNull(body, "Body must not be null").     return body.map(ResponseEntity::ok).orElse(notFound().build()). }
true;public,static;0;3;/**  * Create a builder with the status set to {@linkplain HttpStatus#OK OK}.  * @return the created builder  * @since 4.1  */ ;/**  * Create a builder with the status set to {@linkplain HttpStatus#OK OK}.  * @return the created builder  * @since 4.1  */ public static BodyBuilder ok() {     return status(HttpStatus.OK). }
true;public,static;1;4;/**  * A shortcut for creating a {@code ResponseEntity} with the given body and  * the status set to {@linkplain HttpStatus#OK OK}.  * @return the created {@code ResponseEntity}  * @since 4.1  */ ;/**  * A shortcut for creating a {@code ResponseEntity} with the given body and  * the status set to {@linkplain HttpStatus#OK OK}.  * @return the created {@code ResponseEntity}  * @since 4.1  */ public static <T> ResponseEntity<T> ok(T body) {     BodyBuilder builder = ok().     return builder.body(body). }
true;public,static;1;4;/**  * Create a new builder with a {@linkplain HttpStatus#CREATED CREATED} status  * and a location header set to the given URI.  * @param location the location URI  * @return the created builder  * @since 4.1  */ ;/**  * Create a new builder with a {@linkplain HttpStatus#CREATED CREATED} status  * and a location header set to the given URI.  * @param location the location URI  * @return the created builder  * @since 4.1  */ public static BodyBuilder created(URI location) {     BodyBuilder builder = status(HttpStatus.CREATED).     return builder.location(location). }
true;public,static;0;3;/**  * Create a builder with an {@linkplain HttpStatus#ACCEPTED ACCEPTED} status.  * @return the created builder  * @since 4.1  */ ;/**  * Create a builder with an {@linkplain HttpStatus#ACCEPTED ACCEPTED} status.  * @return the created builder  * @since 4.1  */ public static BodyBuilder accepted() {     return status(HttpStatus.ACCEPTED). }
true;public,static;0;3;/**  * Create a builder with a {@linkplain HttpStatus#NO_CONTENT NO_CONTENT} status.  * @return the created builder  * @since 4.1  */ ;/**  * Create a builder with a {@linkplain HttpStatus#NO_CONTENT NO_CONTENT} status.  * @return the created builder  * @since 4.1  */ public static HeadersBuilder<?> noContent() {     return status(HttpStatus.NO_CONTENT). }
true;public,static;0;3;/**  * Create a builder with a {@linkplain HttpStatus#BAD_REQUEST BAD_REQUEST} status.  * @return the created builder  * @since 4.1  */ ;/**  * Create a builder with a {@linkplain HttpStatus#BAD_REQUEST BAD_REQUEST} status.  * @return the created builder  * @since 4.1  */ public static BodyBuilder badRequest() {     return status(HttpStatus.BAD_REQUEST). }
true;public,static;0;3;/**  * Create a builder with a {@linkplain HttpStatus#NOT_FOUND NOT_FOUND} status.  * @return the created builder  * @since 4.1  */ ;/**  * Create a builder with a {@linkplain HttpStatus#NOT_FOUND NOT_FOUND} status.  * @return the created builder  * @since 4.1  */ public static HeadersBuilder<?> notFound() {     return status(HttpStatus.NOT_FOUND). }
true;public,static;0;3;/**  * Create a builder with an  * {@linkplain HttpStatus#UNPROCESSABLE_ENTITY UNPROCESSABLE_ENTITY} status.  * @return the created builder  * @since 4.1.3  */ ;/**  * Create a builder with an  * {@linkplain HttpStatus#UNPROCESSABLE_ENTITY UNPROCESSABLE_ENTITY} status.  * @return the created builder  * @since 4.1.3  */ public static BodyBuilder unprocessableEntity() {     return status(HttpStatus.UNPROCESSABLE_ENTITY). }
true;;2;1;/**  * Add the given, single header value under the given name.  * @param headerName the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given, single header value under the given name.  * @param headerName the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ B header(String headerName, String... headerValues).
true;;1;1;/**  * Copy the given headers into the entity's headers map.  * @param headers the existing HttpHeaders to copy from  * @return this builder  * @since 4.1.2  * @see HttpHeaders#add(String, String)  */ ;/**  * Copy the given headers into the entity's headers map.  * @param headers the existing HttpHeaders to copy from  * @return this builder  * @since 4.1.2  * @see HttpHeaders#add(String, String)  */ B headers(@Nullable HttpHeaders headers).
true;;1;1;/**  * Set the set of allowed {@link HttpMethod HTTP methods}, as specified  * by the {@code Allow} header.  * @param allowedMethods the allowed methods  * @return this builder  * @see HttpHeaders#setAllow(Set)  */ ;/**  * Set the set of allowed {@link HttpMethod HTTP methods}, as specified  * by the {@code Allow} header.  * @param allowedMethods the allowed methods  * @return this builder  * @see HttpHeaders#setAllow(Set)  */ B allow(HttpMethod... allowedMethods).
true;;1;1;/**  * Set the entity tag of the body, as specified by the {@code ETag} header.  * @param etag the new entity tag  * @return this builder  * @see HttpHeaders#setETag(String)  */ ;/**  * Set the entity tag of the body, as specified by the {@code ETag} header.  * @param etag the new entity tag  * @return this builder  * @see HttpHeaders#setETag(String)  */ B eTag(String etag).
true;;1;1;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @since 5.1.4  * @see HttpHeaders#setLastModified(ZonedDateTime)  */ ;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @since 5.1.4  * @see HttpHeaders#setLastModified(ZonedDateTime)  */ B lastModified(ZonedDateTime lastModified).
true;;1;1;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @since 5.1.4  * @see HttpHeaders#setLastModified(Instant)  */ ;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @since 5.1.4  * @see HttpHeaders#setLastModified(Instant)  */ B lastModified(Instant lastModified).
true;;1;1;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param lastModified the last modified date  * @return this builder  * @see HttpHeaders#setLastModified(long)  */ ;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param lastModified the last modified date  * @return this builder  * @see HttpHeaders#setLastModified(long)  */ B lastModified(long lastModified).
true;;1;1;/**  * Set the location of a resource, as specified by the {@code Location} header.  * @param location the location  * @return this builder  * @see HttpHeaders#setLocation(URI)  */ ;/**  * Set the location of a resource, as specified by the {@code Location} header.  * @param location the location  * @return this builder  * @see HttpHeaders#setLocation(URI)  */ B location(URI location).
true;;1;1;/**  * Set the caching directives for the resource, as specified by the HTTP 1.1  * {@code Cache-Control} header.  * <p>A {@code CacheControl} instance can be built like  * {@code CacheControl.maxAge(3600).cachePublic().noTransform()}.  * @param cacheControl a builder for cache-related HTTP response headers  * @return this builder  * @since 4.2  * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC-7234 Section 5.2</a>  */ ;/**  * Set the caching directives for the resource, as specified by the HTTP 1.1  * {@code Cache-Control} header.  * <p>A {@code CacheControl} instance can be built like  * {@code CacheControl.maxAge(3600).cachePublic().noTransform()}.  * @param cacheControl a builder for cache-related HTTP response headers  * @return this builder  * @since 4.2  * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC-7234 Section 5.2</a>  */ B cacheControl(CacheControl cacheControl).
true;;1;1;/**  * Configure one or more request header names (e.g. "Accept-Language") to  * add to the "Vary" response header to inform clients that the response is  * subject to content negotiation and variances based on the value of the  * given request headers. The configured request header names are added only  * if not already present in the response "Vary" header.  * @param requestHeaders request header names  * @since 4.3  */ ;/**  * Configure one or more request header names (e.g. "Accept-Language") to  * add to the "Vary" response header to inform clients that the response is  * subject to content negotiation and variances based on the value of the  * given request headers. The configured request header names are added only  * if not already present in the response "Vary" header.  * @param requestHeaders request header names  * @since 4.3  */ B varyBy(String... requestHeaders).
true;;0;1;/**  * Build the response entity with no body.  * @return the response entity  * @see BodyBuilder#body(Object)  */ ;/**  * Build the response entity with no body.  * @return the response entity  * @see BodyBuilder#body(Object)  */ <T> ResponseEntity<T> build().
true;;1;1;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ ;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ BodyBuilder contentLength(long contentLength).
true;;1;1;/**  * Set the {@linkplain MediaType media type} of the body, as specified by the  * {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ ;/**  * Set the {@linkplain MediaType media type} of the body, as specified by the  * {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ BodyBuilder contentType(MediaType contentType).
true;;1;1;/**  * Set the body of the response entity and returns it.  * @param <T> the type of the body  * @param body the body of the response entity  * @return the built response entity  */ ;/**  * Set the body of the response entity and returns it.  * @param <T> the type of the body  * @param body the body of the response entity  * @return the built response entity  */ <T> ResponseEntity<T> body(@Nullable T body).
false;public;2;7;;@Override public BodyBuilder header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         this.headers.add(headerName, headerValue).     }     return this. }
false;public;1;7;;@Override public BodyBuilder headers(@Nullable HttpHeaders headers) {     if (headers != null) {         this.headers.putAll(headers).     }     return this. }
false;public;1;5;;@Override public BodyBuilder allow(HttpMethod... allowedMethods) {     this.headers.setAllow(new LinkedHashSet<>(Arrays.asList(allowedMethods))).     return this. }
false;public;1;5;;@Override public BodyBuilder contentLength(long contentLength) {     this.headers.setContentLength(contentLength).     return this. }
false;public;1;5;;@Override public BodyBuilder contentType(MediaType contentType) {     this.headers.setContentType(contentType).     return this. }
false;public;1;11;;@Override public BodyBuilder eTag(String etag) {     if (!etag.startsWith("\"") && !etag.startsWith("W/\"")) {         etag = "\"" + etag.     }     if (!etag.endsWith("\"")) {         etag = etag + "\"".     }     this.headers.setETag(etag).     return this. }
false;public;1;5;;@Override public BodyBuilder lastModified(ZonedDateTime date) {     this.headers.setLastModified(date).     return this. }
false;public;1;5;;@Override public BodyBuilder lastModified(Instant date) {     this.headers.setLastModified(date).     return this. }
false;public;1;5;;@Override public BodyBuilder lastModified(long date) {     this.headers.setLastModified(date).     return this. }
false;public;1;5;;@Override public BodyBuilder location(URI location) {     this.headers.setLocation(location).     return this. }
false;public;1;5;;@Override public BodyBuilder cacheControl(CacheControl cacheControl) {     this.headers.setCacheControl(cacheControl).     return this. }
false;public;1;5;;@Override public BodyBuilder varyBy(String... requestHeaders) {     this.headers.setVary(Arrays.asList(requestHeaders)).     return this. }
false;public;0;4;;@Override public <T> ResponseEntity<T> build() {     return body(null). }
false;public;1;4;;@Override public <T> ResponseEntity<T> body(@Nullable T body) {     return new ResponseEntity<>(body, this.headers, this.statusCode). }
