# id;timestamp;commentText;codeText;commentWords;codeWords
ContextLoaderListener -> public void contextDestroyed(ServletContextEvent event);1328020251;Close the root web application context.;public void contextDestroyed(ServletContextEvent event) {_		if (this.contextLoader != null) {_			this.contextLoader.closeWebApplicationContext(event.getServletContext())__		}_		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;public,void,context,destroyed,servlet,context,event,event,if,this,context,loader,null,this,context,loader,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> public void contextDestroyed(ServletContextEvent event);1335774711;Close the root web application context.;public void contextDestroyed(ServletContextEvent event) {_		if (this.contextLoader != null) {_			this.contextLoader.closeWebApplicationContext(event.getServletContext())__		}_		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;public,void,context,destroyed,servlet,context,event,event,if,this,context,loader,null,this,context,loader,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> public void contextDestroyed(ServletContextEvent event);1357119239;Close the root web application context.;public void contextDestroyed(ServletContextEvent event) {_		if (this.contextLoader != null) {_			this.contextLoader.closeWebApplicationContext(event.getServletContext())__		}_		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;public,void,context,destroyed,servlet,context,event,event,if,this,context,loader,null,this,context,loader,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> public void contextDestroyed(ServletContextEvent event);1367508310;Close the root web application context.;public void contextDestroyed(ServletContextEvent event) {_		closeWebApplicationContext(event.getServletContext())__		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;public,void,context,destroyed,servlet,context,event,event,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1328020251;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1335774711;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1356735495;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1357119239;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1367508310;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1368482696;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1427815317;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1468613531;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}s_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener(WebApplicationContext context);1530174524;Create a new {@code ContextLoaderListener} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link javax.servlet.ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_org.springframework.context.ConfigurableApplicationContext#refresh() refreshed}. If it_(a) is an implementation of {@link ConfigurableWebApplicationContext} and_(b) has <strong>not</strong> already been refreshed (the recommended approach),_then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_org.springframework.context.ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer org.springframework.context.ApplicationContextInitializer ApplicationContextInitializers}_specified through the "contextInitializerClasses" init-param will be applied.</li>_<li>{@link org.springframework.context.ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and the Spring_application context will be closed when the {@link #contextDestroyed} lifecycle_method is invoked on this listener._@param context the application context to manage_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener(WebApplicationContext context) {_		super(context)__	};create,a,new,code,context,loader,listener,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,javax,servlet,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,org,springframework,context,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,org,springframework,context,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,org,springframework,context,application,context,initializer,application,context,initializer,org,springframework,context,application,context,initializer,application,context,initializers,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,org,springframework,context,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,param,context,the,application,context,to,manage,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener,web,application,context,context,super,context
ContextLoaderListener -> public ContextLoaderListener();1328020251;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1335774711;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1356735495;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1357119239;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1367508310;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1368482696;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1427815317;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1468613531;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> public ContextLoaderListener();1530174524;Create a new {@code ContextLoaderListener} that will create a web application_context based on the "contextClass" and "contextConfigLocation" servlet_context-params. See {@link ContextLoader} superclass documentation for details on_default values for each._<p>This constructor is typically used when declaring {@code ContextLoaderListener}_as a {@code <listener>} within {@code web.xml}, where a no-arg constructor is_required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and the Spring application context will be closed when the {@link #contextDestroyed}_lifecycle method is invoked on this listener._@see ContextLoader_@see #ContextLoaderListener(WebApplicationContext)_@see #contextInitialized(ServletContextEvent)_@see #contextDestroyed(ServletContextEvent);public ContextLoaderListener() {_	};create,a,new,code,context,loader,listener,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,link,context,loader,superclass,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,code,context,loader,listener,as,a,code,listener,within,code,web,xml,where,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,the,spring,application,context,will,be,closed,when,the,link,context,destroyed,lifecycle,method,is,invoked,on,this,listener,see,context,loader,see,context,loader,listener,web,application,context,see,context,initialized,servlet,context,event,see,context,destroyed,servlet,context,event;public,context,loader,listener
ContextLoaderListener -> @Deprecated 	protected ContextLoader createContextLoader();1328020251;Create the ContextLoader to use. Can be overridden in subclasses._@return the new ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	protected ContextLoader createContextLoader() {_		return null__	};create,the,context,loader,to,use,can,be,overridden,in,subclasses,return,the,new,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,protected,context,loader,create,context,loader,return,null
ContextLoaderListener -> @Deprecated 	protected ContextLoader createContextLoader();1335774711;Create the ContextLoader to use. Can be overridden in subclasses._@return the new ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	protected ContextLoader createContextLoader() {_		return null__	};create,the,context,loader,to,use,can,be,overridden,in,subclasses,return,the,new,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,protected,context,loader,create,context,loader,return,null
ContextLoaderListener -> @Deprecated 	protected ContextLoader createContextLoader();1356735495;Create the ContextLoader to use. Can be overridden in subclasses._@return the new ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	protected ContextLoader createContextLoader() {_		return null__	};create,the,context,loader,to,use,can,be,overridden,in,subclasses,return,the,new,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,protected,context,loader,create,context,loader,return,null
ContextLoaderListener -> @Deprecated 	protected ContextLoader createContextLoader();1357119239;Create the ContextLoader to use. Can be overridden in subclasses._@return the new ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	protected ContextLoader createContextLoader() {_		return null__	};create,the,context,loader,to,use,can,be,overridden,in,subclasses,return,the,new,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,protected,context,loader,create,context,loader,return,null
ContextLoaderListener -> public void contextInitialized(ServletContextEvent event);1328020251;Initialize the root web application context.;public void contextInitialized(ServletContextEvent event) {_		this.contextLoader = createContextLoader()__		if (this.contextLoader == null) {_			this.contextLoader = this__		}_		this.contextLoader.initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;public,void,context,initialized,servlet,context,event,event,this,context,loader,create,context,loader,if,this,context,loader,null,this,context,loader,this,this,context,loader,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> public void contextInitialized(ServletContextEvent event);1335774711;Initialize the root web application context.;public void contextInitialized(ServletContextEvent event) {_		this.contextLoader = createContextLoader()__		if (this.contextLoader == null) {_			this.contextLoader = this__		}_		this.contextLoader.initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;public,void,context,initialized,servlet,context,event,event,this,context,loader,create,context,loader,if,this,context,loader,null,this,context,loader,this,this,context,loader,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> public void contextInitialized(ServletContextEvent event);1357119239;Initialize the root web application context.;public void contextInitialized(ServletContextEvent event) {_		this.contextLoader = createContextLoader()__		if (this.contextLoader == null) {_			this.contextLoader = this__		}_		this.contextLoader.initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;public,void,context,initialized,servlet,context,event,event,this,context,loader,create,context,loader,if,this,context,loader,null,this,context,loader,this,this,context,loader,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> public void contextInitialized(ServletContextEvent event);1367508310;Initialize the root web application context.;public void contextInitialized(ServletContextEvent event) {_		initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;public,void,context,initialized,servlet,context,event,event,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextDestroyed(ServletContextEvent event);1356735495;Close the root web application context.;@Override_	public void contextDestroyed(ServletContextEvent event) {_		if (this.contextLoader != null) {_			this.contextLoader.closeWebApplicationContext(event.getServletContext())__		}_		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;override,public,void,context,destroyed,servlet,context,event,event,if,this,context,loader,null,this,context,loader,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextDestroyed(ServletContextEvent event);1368482696;Close the root web application context.;@Override_	public void contextDestroyed(ServletContextEvent event) {_		closeWebApplicationContext(event.getServletContext())__		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;override,public,void,context,destroyed,servlet,context,event,event,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextDestroyed(ServletContextEvent event);1427815317;Close the root web application context.;@Override_	public void contextDestroyed(ServletContextEvent event) {_		closeWebApplicationContext(event.getServletContext())__		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;override,public,void,context,destroyed,servlet,context,event,event,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextDestroyed(ServletContextEvent event);1468613531;Close the root web application context.;@Override_	public void contextDestroyed(ServletContextEvent event) {_		closeWebApplicationContext(event.getServletContext())__		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;override,public,void,context,destroyed,servlet,context,event,event,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextDestroyed(ServletContextEvent event);1530174524;Close the root web application context.;@Override_	public void contextDestroyed(ServletContextEvent event) {_		closeWebApplicationContext(event.getServletContext())__		ContextCleanupListener.cleanupAttributes(event.getServletContext())__	};close,the,root,web,application,context;override,public,void,context,destroyed,servlet,context,event,event,close,web,application,context,event,get,servlet,context,context,cleanup,listener,cleanup,attributes,event,get,servlet,context
ContextLoaderListener -> @Deprecated 	public ContextLoader getContextLoader();1328020251;Return the ContextLoader used by this listener._@return the current ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	public ContextLoader getContextLoader() {_		return this.contextLoader__	};return,the,context,loader,used,by,this,listener,return,the,current,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,public,context,loader,get,context,loader,return,this,context,loader
ContextLoaderListener -> @Deprecated 	public ContextLoader getContextLoader();1335774711;Return the ContextLoader used by this listener._@return the current ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	public ContextLoader getContextLoader() {_		return this.contextLoader__	};return,the,context,loader,used,by,this,listener,return,the,current,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,public,context,loader,get,context,loader,return,this,context,loader
ContextLoaderListener -> @Deprecated 	public ContextLoader getContextLoader();1356735495;Return the ContextLoader used by this listener._@return the current ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	public ContextLoader getContextLoader() {_		return this.contextLoader__	};return,the,context,loader,used,by,this,listener,return,the,current,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,public,context,loader,get,context,loader,return,this,context,loader
ContextLoaderListener -> @Deprecated 	public ContextLoader getContextLoader();1357119239;Return the ContextLoader used by this listener._@return the current ContextLoader_@deprecated in favor of simply subclassing ContextLoaderListener itself_(which extends ContextLoader, as of Spring 3.0);@Deprecated_	public ContextLoader getContextLoader() {_		return this.contextLoader__	};return,the,context,loader,used,by,this,listener,return,the,current,context,loader,deprecated,in,favor,of,simply,subclassing,context,loader,listener,itself,which,extends,context,loader,as,of,spring,3,0;deprecated,public,context,loader,get,context,loader,return,this,context,loader
ContextLoaderListener -> @Override 	public void contextInitialized(ServletContextEvent event);1356735495;Initialize the root web application context.;@Override_	public void contextInitialized(ServletContextEvent event) {_		this.contextLoader = createContextLoader()__		if (this.contextLoader == null) {_			this.contextLoader = this__		}_		this.contextLoader.initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;override,public,void,context,initialized,servlet,context,event,event,this,context,loader,create,context,loader,if,this,context,loader,null,this,context,loader,this,this,context,loader,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextInitialized(ServletContextEvent event);1368482696;Initialize the root web application context.;@Override_	public void contextInitialized(ServletContextEvent event) {_		initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;override,public,void,context,initialized,servlet,context,event,event,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextInitialized(ServletContextEvent event);1427815317;Initialize the root web application context.;@Override_	public void contextInitialized(ServletContextEvent event) {_		initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;override,public,void,context,initialized,servlet,context,event,event,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextInitialized(ServletContextEvent event);1468613531;Initialize the root web application context.;@Override_	public void contextInitialized(ServletContextEvent event) {_		initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;override,public,void,context,initialized,servlet,context,event,event,init,web,application,context,event,get,servlet,context
ContextLoaderListener -> @Override 	public void contextInitialized(ServletContextEvent event);1530174524;Initialize the root web application context.;@Override_	public void contextInitialized(ServletContextEvent event) {_		initWebApplicationContext(event.getServletContext())__	};initialize,the,root,web,application,context;override,public,void,context,initialized,servlet,context,event,event,init,web,application,context,event,get,servlet,context
