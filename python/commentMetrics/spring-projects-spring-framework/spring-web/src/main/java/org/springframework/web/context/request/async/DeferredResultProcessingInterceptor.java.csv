# id;timestamp;commentText;codeText;commentWords;codeWords
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1351289067;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}.__<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1351648724;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}.__<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1353616762;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}.__<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1354291807;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}.__<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1431187531;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}._<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1461047077;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}._<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1498500776;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}._<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1353616762;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.__@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;<T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1354291807;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.__@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;<T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1431187531;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;<T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1461047077;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;<T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1498500776;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;<T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1498505691;Invoked immediately before the start of concurrent handling, in the same_thread that started it. This method may be used to capture state just prior_to the start of concurrent processing with the given {@code DeferredResult}._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;default <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {_	};invoked,immediately,before,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,capture,state,just,prior,to,the,start,of,concurrent,processing,with,the,given,code,deferred,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;default,t,void,before,concurrent,handling,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1510200931;Invoked immediately before the start of concurrent handling, in the same_thread that started it. This method may be used to capture state just prior_to the start of concurrent processing with the given {@code DeferredResult}._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;default <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {_	};invoked,immediately,before,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,capture,state,just,prior,to,the,start,of,concurrent,processing,with,the,given,code,deferred,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;default,t,void,before,concurrent,handling,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, 			Throwable t) throws Exception;1498505691;Invoked from a container thread when an error occurred while processing an async request_before the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@param t the error that occurred while request processing_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;default <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult,_			Throwable t) throws Exception {__		return true__	};invoked,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,param,t,the,error,that,occurred,while,request,processing,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;default,t,boolean,handle,error,native,web,request,request,deferred,result,t,deferred,result,throwable,t,throws,exception,return,true
DeferredResultProcessingInterceptor -> default <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, 			Throwable t) throws Exception;1510200931;Invoked from a container thread when an error occurred while processing an async request_before the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@param t the error that occurred while request processing_@return {@code true} if error handling should continue, or {@code false} if_other interceptors should by bypassed and not be invoked_@throws Exception in case of errors;default <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult,_			Throwable t) throws Exception {__		return true__	};invoked,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,param,t,the,error,that,occurred,while,request,processing,return,code,true,if,error,handling,should,continue,or,code,false,if,other,interceptors,should,by,bypassed,and,not,be,invoked,throws,exception,in,case,of,errors;default,t,boolean,handle,error,native,web,request,request,deferred,result,t,deferred,result,throwable,t,throws,exception,return,true
DeferredResultProcessingInterceptor -> default <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1498505691;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;default <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {__		return true__	};invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;default,t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception,return,true
DeferredResultProcessingInterceptor -> default <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1510200931;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing._@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@return {@code true} if processing should continue, or {@code false} if_other interceptors should not be invoked_@throws Exception in case of errors;default <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {__		return true__	};invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,return,code,true,if,processing,should,continue,or,code,false,if,other,interceptors,should,not,be,invoked,throws,exception,in,case,of,errors;default,t,boolean,handle,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception,return,true
DeferredResultProcessingInterceptor -> default <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1498505691;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;default <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {_	};invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;default,t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1510200931;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;default <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {_	};invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;default,t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1351289067;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result.__<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result.__@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1351648724;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result.__<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result.__@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1353616762;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result.__<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result.__@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1354291807;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result.__<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result.__@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1431187531;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result._<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result._@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1461047077;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result._<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result._@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;1498500776;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result._<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result._@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception_;invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> void postProcess(NativeWebRequest request, DeferredResult<?> deferredResult, 			Object concurrentResult) throws Exception_;1348061150;Invoked when a {@link DeferredResult} is set either with a normal value_or with a {@link DeferredResult#DeferredResult(Long, Object) timeout_result}. The invocation occurs in the thread that set the result._<p>_If the request ends before the {@code DeferredResult} is set, then_{@link #afterExpiration(NativeWebRequest, DeferredResult)} is called.__@param request the current request_@param deferredResult the DeferredResult that has been set_@param concurrentResult the result to which the {@code DeferredResult}_was set;void postProcess(NativeWebRequest request, DeferredResult<?> deferredResult,_			Object concurrentResult) throws Exception_;invoked,when,a,link,deferred,result,is,set,either,with,a,normal,value,or,with,a,link,deferred,result,deferred,result,long,object,timeout,result,the,invocation,occurs,in,the,thread,that,set,the,result,p,if,the,request,ends,before,the,code,deferred,result,is,set,then,link,after,expiration,native,web,request,deferred,result,is,called,param,request,the,current,request,param,deferred,result,the,deferred,result,that,has,been,set,param,concurrent,result,the,result,to,which,the,code,deferred,result,was,set;void,post,process,native,web,request,request,deferred,result,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> void postProcess(NativeWebRequest request, DeferredResult<?> deferredResult, 			Object concurrentResult) throws Exception_;1351178945;Invoked when a {@link DeferredResult} is set via_{@link DeferredResult#setResult(Object) setResult}, or_{@link DeferredResult#setErrorResult(Object) setErrorResult}, or after_a timeout if a {@code DeferredResult} was created with a constructor_accepting a default timeout result._<p>_If the request ends before the {@code DeferredResult} is set, then_{@link #afterExpiration(NativeWebRequest, DeferredResult)} is called.__@param request the current request_@param deferredResult the DeferredResult that has been set_@param concurrentResult the result to which the {@code DeferredResult}_was set;void postProcess(NativeWebRequest request, DeferredResult<?> deferredResult,_			Object concurrentResult) throws Exception_;invoked,when,a,link,deferred,result,is,set,via,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,or,after,a,timeout,if,a,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,p,if,the,request,ends,before,the,code,deferred,result,is,set,then,link,after,expiration,native,web,request,deferred,result,is,called,param,request,the,current,request,param,deferred,result,the,deferred,result,that,has,been,set,param,concurrent,result,the,result,to,which,the,code,deferred,result,was,set;void,post,process,native,web,request,request,deferred,result,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1431187531;Invoked immediately before the start of concurrent handling, in the same_thread that started it. This method may be used to capture state just prior_to the start of concurrent processing with the given {@code DeferredResult}._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,before,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,capture,state,just,prior,to,the,start,of,concurrent,processing,with,the,given,code,deferred,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1461047077;Invoked immediately before the start of concurrent handling, in the same_thread that started it. This method may be used to capture state just prior_to the start of concurrent processing with the given {@code DeferredResult}._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,before,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,capture,state,just,prior,to,the,start,of,concurrent,processing,with,the,given,code,deferred,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1498500776;Invoked immediately before the start of concurrent handling, in the same_thread that started it. This method may be used to capture state just prior_to the start of concurrent processing with the given {@code DeferredResult}._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,immediately,before,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,capture,state,just,prior,to,the,start,of,concurrent,processing,with,the,given,code,deferred,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> void preProcess(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;1348061150;Invoked before the start of concurrent handling using a_{@link DeferredResult}. The invocation occurs in the thread that_initiated concurrent handling.__@param request the current request_@param deferredResult the DeferredResult instance;void preProcess(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;invoked,before,the,start,of,concurrent,handling,using,a,link,deferred,result,the,invocation,occurs,in,the,thread,that,initiated,concurrent,handling,param,request,the,current,request,param,deferred,result,the,deferred,result,instance;void,pre,process,native,web,request,request,deferred,result,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> void preProcess(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;1351178945;Invoked before the start of concurrent handling using a_{@link DeferredResult}. The invocation occurs in the thread that_initiated concurrent handling.__@param request the current request_@param deferredResult the DeferredResult instance;void preProcess(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;invoked,before,the,start,of,concurrent,handling,using,a,link,deferred,result,the,invocation,occurs,in,the,thread,that,initiated,concurrent,handling,param,request,the,current,request,param,deferred,result,the,deferred,result,instance;void,pre,process,native,web,request,request,deferred,result,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1351289067;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) to resume processing.__@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@throws Exception in case of errors;<T> void afterTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,void,after,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1351648724;Invoked from a container thread when an async request times out before_the {@code DeferredResult} has been set. Implementations may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.__@param request the current request_@param deferredResult the DeferredResult for the current request_ if the_{@code DeferredResult} is set, then concurrent processing is resumed and_subsequent interceptors are not invoked_@throws Exception in case of errors;<T> void afterTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,implementations,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,if,the,code,deferred,result,is,set,then,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,void,after,timeout,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, 			Object concurrentResult) throws Exception;1498505691;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result._<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result._@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;default <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult,_			Object concurrentResult) throws Exception {_	};invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;default,t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, 			Object concurrentResult) throws Exception;1510200931;Invoked after a {@code DeferredResult} has been set, via_{@link DeferredResult#setResult(Object)} or_{@link DeferredResult#setErrorResult(Object)}, and is also ready to_handle the concurrent result._<p>This method may also be invoked after a timeout when the_{@code DeferredResult} was created with a constructor accepting a default_timeout result._@param request the current request_@param deferredResult the DeferredResult for the current request_@param concurrentResult the result to which the {@code DeferredResult}_@throws Exception in case of errors;default <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult,_			Object concurrentResult) throws Exception {_	};invoked,after,a,code,deferred,result,has,been,set,via,link,deferred,result,set,result,object,or,link,deferred,result,set,error,result,object,and,is,also,ready,to,handle,the,concurrent,result,p,this,method,may,also,be,invoked,after,a,timeout,when,the,code,deferred,result,was,created,with,a,constructor,accepting,a,default,timeout,result,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,param,concurrent,result,the,result,to,which,the,code,deferred,result,throws,exception,in,case,of,errors;default,t,void,post,process,native,web,request,request,deferred,result,t,deferred,result,object,concurrent,result,throws,exception
DeferredResultProcessingInterceptor -> void afterExpiration(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;1348061150;Invoked when a {@link DeferredResult} expires before a result has been_set possibly due to a timeout or a network error. This invocation occurs_in the thread where the timeout or network error notification is_processed.__@param request the current request_@param deferredResult the DeferredResult that has been set;void afterExpiration(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;invoked,when,a,link,deferred,result,expires,before,a,result,has,been,set,possibly,due,to,a,timeout,or,a,network,error,this,invocation,occurs,in,the,thread,where,the,timeout,or,network,error,notification,is,processed,param,request,the,current,request,param,deferred,result,the,deferred,result,that,has,been,set;void,after,expiration,native,web,request,request,deferred,result,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> void afterExpiration(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;1351178945;Invoked when a {@link DeferredResult} was never set before the request_completed due to a timeout or network error.__@param request the current request_@param deferredResult the DeferredResult that has been set;void afterExpiration(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception_;invoked,when,a,link,deferred,result,was,never,set,before,the,request,completed,due,to,a,timeout,or,network,error,param,request,the,current,request,param,deferred,result,the,deferred,result,that,has,been,set;void,after,expiration,native,web,request,request,deferred,result,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1351289067;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1351648724;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1353616762;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1354291807;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.__@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1431187531;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1461047077;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;1498500776;Invoked from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception_;invoked,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1498505691;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}._<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;default <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {_	};invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;default,t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
DeferredResultProcessingInterceptor -> default <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) 			throws Exception;1510200931;Invoked immediately after the start of concurrent handling, in the same_thread that started it. This method may be used to detect the start of_concurrent processing with the given {@code DeferredResult}._<p>The {@code DeferredResult} may have already been set, for example at_the time of its creation or by another thread._@param request the current request_@param deferredResult the DeferredResult for the current request_@throws Exception in case of errors;default <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult)_			throws Exception {_	};invoked,immediately,after,the,start,of,concurrent,handling,in,the,same,thread,that,started,it,this,method,may,be,used,to,detect,the,start,of,concurrent,processing,with,the,given,code,deferred,result,p,the,code,deferred,result,may,have,already,been,set,for,example,at,the,time,of,its,creation,or,by,another,thread,param,request,the,current,request,param,deferred,result,the,deferred,result,for,the,current,request,throws,exception,in,case,of,errors;default,t,void,pre,process,native,web,request,request,deferred,result,t,deferred,result,throws,exception
