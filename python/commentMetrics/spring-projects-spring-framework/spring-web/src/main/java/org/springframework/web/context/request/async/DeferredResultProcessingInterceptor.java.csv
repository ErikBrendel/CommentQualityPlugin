commented;modifiers;parameterAmount;loc;comment;code
true;default;2;3;/**  * Invoked immediately before the start of concurrent handling, in the same  * thread that started it. This method may be used to capture state just prior  * to the start of concurrent processing with the given {@code DeferredResult}.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @throws Exception in case of errors  */ ;/**  * Invoked immediately before the start of concurrent handling, in the same  * thread that started it. This method may be used to capture state just prior  * to the start of concurrent processing with the given {@code DeferredResult}.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @throws Exception in case of errors  */ default <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception { }
true;default;2;3;/**  * Invoked immediately after the start of concurrent handling, in the same  * thread that started it. This method may be used to detect the start of  * concurrent processing with the given {@code DeferredResult}.  * <p>The {@code DeferredResult} may have already been set, for example at  * the time of its creation or by another thread.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @throws Exception in case of errors  */ ;/**  * Invoked immediately after the start of concurrent handling, in the same  * thread that started it. This method may be used to detect the start of  * concurrent processing with the given {@code DeferredResult}.  * <p>The {@code DeferredResult} may have already been set, for example at  * the time of its creation or by another thread.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @throws Exception in case of errors  */ default <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception { }
true;default;3;3;/**  * Invoked after a {@code DeferredResult} has been set, via  * {@link DeferredResult#setResult(Object)} or  * {@link DeferredResult#setErrorResult(Object)}, and is also ready to  * handle the concurrent result.  * <p>This method may also be invoked after a timeout when the  * {@code DeferredResult} was created with a constructor accepting a default  * timeout result.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @param concurrentResult the result to which the {@code DeferredResult}  * @throws Exception in case of errors  */ ;/**  * Invoked after a {@code DeferredResult} has been set, via  * {@link DeferredResult#setResult(Object)} or  * {@link DeferredResult#setErrorResult(Object)}, and is also ready to  * handle the concurrent result.  * <p>This method may also be invoked after a timeout when the  * {@code DeferredResult} was created with a constructor accepting a default  * timeout result.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @param concurrentResult the result to which the {@code DeferredResult}  * @throws Exception in case of errors  */ default <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult) throws Exception { }
true;default;2;5;/**  * Invoked from a container thread when an async request times out before  * the {@code DeferredResult} has been set. Implementations may invoke  * {@link DeferredResult#setResult(Object) setResult} or  * {@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.  * @param request the current request  * @param deferredResult the DeferredResult for the current request. if the  * {@code DeferredResult} is set, then concurrent processing is resumed and  * subsequent interceptors are not invoked  * @return {@code true} if processing should continue, or {@code false} if  * other interceptors should not be invoked  * @throws Exception in case of errors  */ ;/**  * Invoked from a container thread when an async request times out before  * the {@code DeferredResult} has been set. Implementations may invoke  * {@link DeferredResult#setResult(Object) setResult} or  * {@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.  * @param request the current request  * @param deferredResult the DeferredResult for the current request. if the  * {@code DeferredResult} is set, then concurrent processing is resumed and  * subsequent interceptors are not invoked  * @return {@code true} if processing should continue, or {@code false} if  * other interceptors should not be invoked  * @throws Exception in case of errors  */ default <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception {     return true. }
true;default;3;5;/**  * Invoked from a container thread when an error occurred while processing an async request  * before the {@code DeferredResult} has been set. Implementations may invoke  * {@link DeferredResult#setResult(Object) setResult} or  * {@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.  * @param request the current request  * @param deferredResult the DeferredResult for the current request. if the  * {@code DeferredResult} is set, then concurrent processing is resumed and  * subsequent interceptors are not invoked  * @param t the error that occurred while request processing  * @return {@code true} if error handling should continue, or {@code false} if  * other interceptors should by bypassed and not be invoked  * @throws Exception in case of errors  */ ;/**  * Invoked from a container thread when an error occurred while processing an async request  * before the {@code DeferredResult} has been set. Implementations may invoke  * {@link DeferredResult#setResult(Object) setResult} or  * {@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.  * @param request the current request  * @param deferredResult the DeferredResult for the current request. if the  * {@code DeferredResult} is set, then concurrent processing is resumed and  * subsequent interceptors are not invoked  * @param t the error that occurred while request processing  * @return {@code true} if error handling should continue, or {@code false} if  * other interceptors should by bypassed and not be invoked  * @throws Exception in case of errors  */ default <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, Throwable t) throws Exception {     return true. }
true;default;2;3;/**  * Invoked from a container thread when an async request completed for any  * reason including timeout and network error. This method is useful for  * detecting that a {@code DeferredResult} instance is no longer usable.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @throws Exception in case of errors  */ ;/**  * Invoked from a container thread when an async request completed for any  * reason including timeout and network error. This method is useful for  * detecting that a {@code DeferredResult} instance is no longer usable.  * @param request the current request  * @param deferredResult the DeferredResult for the current request  * @throws Exception in case of errors  */ default <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult) throws Exception { }
