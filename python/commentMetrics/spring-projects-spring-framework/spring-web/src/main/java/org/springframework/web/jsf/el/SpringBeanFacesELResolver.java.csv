commented;modifiers;parameterAmount;loc;comment;code
false;public;3;13;;@Override @Nullable public Object getValue(ELContext elContext, @Nullable Object base, Object property) throws ELException {     if (base == null) {         String beanName = property.toString().         WebApplicationContext wac = getWebApplicationContext(elContext).         if (wac.containsBean(beanName)) {             elContext.setPropertyResolved(true).             return wac.getBean(beanName).         }     }     return null. }
false;public;3;13;;@Override @Nullable public Class<?> getType(ELContext elContext, @Nullable Object base, Object property) throws ELException {     if (base == null) {         String beanName = property.toString().         WebApplicationContext wac = getWebApplicationContext(elContext).         if (wac.containsBean(beanName)) {             elContext.setPropertyResolved(true).             return wac.getType(beanName).         }     }     return null. }
false;public;4;17;;@Override public void setValue(ELContext elContext, @Nullable Object base, Object property, Object value) throws ELException {     if (base == null) {         String beanName = property.toString().         WebApplicationContext wac = getWebApplicationContext(elContext).         if (wac.containsBean(beanName)) {             if (value == wac.getBean(beanName)) {                 // Setting the bean reference to the same value is alright - can simply be ignored...                 elContext.setPropertyResolved(true).             } else {                 throw new PropertyNotWritableException("Variable '" + beanName + "' refers to a Spring bean which by definition is not writable").             }         }     } }
false;public;3;11;;@Override public boolean isReadOnly(ELContext elContext, @Nullable Object base, Object property) throws ELException {     if (base == null) {         String beanName = property.toString().         WebApplicationContext wac = getWebApplicationContext(elContext).         if (wac.containsBean(beanName)) {             return true.         }     }     return false. }
false;public;2;5;;@Override @Nullable public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext elContext, @Nullable Object base) {     return null. }
false;public;2;4;;@Override public Class<?> getCommonPropertyType(ELContext elContext, @Nullable Object base) {     return Object.class. }
true;protected;1;4;/**  * Retrieve the web application context to delegate bean name resolution to.  * <p>The default implementation delegates to FacesContextUtils.  * @param elContext the current JSF ELContext  * @return the Spring web application context (never {@code null})  * @see org.springframework.web.jsf.FacesContextUtils#getRequiredWebApplicationContext  */ ;/**  * Retrieve the web application context to delegate bean name resolution to.  * <p>The default implementation delegates to FacesContextUtils.  * @param elContext the current JSF ELContext  * @return the Spring web application context (never {@code null})  * @see org.springframework.web.jsf.FacesContextUtils#getRequiredWebApplicationContext  */ protected WebApplicationContext getWebApplicationContext(ELContext elContext) {     FacesContext facesContext = FacesContext.getCurrentInstance().     return FacesContextUtils.getRequiredWebApplicationContext(facesContext). }
