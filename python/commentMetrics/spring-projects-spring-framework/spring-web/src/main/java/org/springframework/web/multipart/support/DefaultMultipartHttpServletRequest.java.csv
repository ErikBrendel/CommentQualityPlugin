commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override @Nullable public String getParameter(String name) {     String[] values = getMultipartParameters().get(name).     if (values != null) {         return (values.length > 0 ? values[0] : null).     }     return super.getParameter(name). }
false;public;1;17;;@Override public String[] getParameterValues(String name) {     String[] parameterValues = super.getParameterValues(name).     String[] mpValues = getMultipartParameters().get(name).     if (mpValues == null) {         return parameterValues.     }     if (parameterValues == null || getQueryString() == null) {         return mpValues.     } else {         String[] result = new String[mpValues.length + parameterValues.length].         System.arraycopy(mpValues, 0, result, 0, mpValues.length).         System.arraycopy(parameterValues, 0, result, mpValues.length, parameterValues.length).         return result.     } }
false;public;0;12;;@Override public Enumeration<String> getParameterNames() {     Map<String, String[]> multipartParameters = getMultipartParameters().     if (multipartParameters.isEmpty()) {         return super.getParameterNames().     }     Set<String> paramNames = new LinkedHashSet<>().     paramNames.addAll(Collections.list(super.getParameterNames())).     paramNames.addAll(multipartParameters.keySet()).     return Collections.enumeration(paramNames). }
false;public;0;10;;@Override public Map<String, String[]> getParameterMap() {     Map<String, String[]> result = new LinkedHashMap<>().     Enumeration<String> names = getParameterNames().     while (names.hasMoreElements()) {         String name = names.nextElement().         result.put(name, getParameterValues(name)).     }     return result. }
false;public;1;10;;@Override public String getMultipartContentType(String paramOrFileName) {     MultipartFile file = getFile(paramOrFileName).     if (file != null) {         return file.getContentType().     } else {         return getMultipartParameterContentTypes().get(paramOrFileName).     } }
false;public;1;12;;@Override public HttpHeaders getMultipartHeaders(String paramOrFileName) {     String contentType = getMultipartContentType(paramOrFileName).     if (contentType != null) {         HttpHeaders headers = new HttpHeaders().         headers.add(CONTENT_TYPE, contentType).         return headers.     } else {         return null.     } }
true;protected,final;1;3;/**  * Set a Map with parameter names as keys and String array objects as values.  * To be invoked by subclasses on initialization.  */ ;/**  * Set a Map with parameter names as keys and String array objects as values.  * To be invoked by subclasses on initialization.  */ protected final void setMultipartParameters(Map<String, String[]> multipartParameters) {     this.multipartParameters = multipartParameters. }
true;protected;0;6;/**  * Obtain the multipart parameter Map for retrieval,  * lazily initializing it if necessary.  * @see #initializeMultipart()  */ ;/**  * Obtain the multipart parameter Map for retrieval,  * lazily initializing it if necessary.  * @see #initializeMultipart()  */ protected Map<String, String[]> getMultipartParameters() {     if (this.multipartParameters == null) {         initializeMultipart().     }     return this.multipartParameters. }
true;protected,final;1;3;/**  * Set a Map with parameter names as keys and content type Strings as values.  * To be invoked by subclasses on initialization.  */ ;/**  * Set a Map with parameter names as keys and content type Strings as values.  * To be invoked by subclasses on initialization.  */ protected final void setMultipartParameterContentTypes(Map<String, String> multipartParameterContentTypes) {     this.multipartParameterContentTypes = multipartParameterContentTypes. }
true;protected;0;6;/**  * Obtain the multipart parameter content type Map for retrieval,  * lazily initializing it if necessary.  * @see #initializeMultipart()  */ ;/**  * Obtain the multipart parameter content type Map for retrieval,  * lazily initializing it if necessary.  * @see #initializeMultipart()  */ protected Map<String, String> getMultipartParameterContentTypes() {     if (this.multipartParameterContentTypes == null) {         initializeMultipart().     }     return this.multipartParameterContentTypes. }
