commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Set the HTTP status code of the response.  * @param status the HTTP status as an {@link HttpStatus} enum value  * @return {@code false} if the status code has not been set because the  * HTTP response is already committed, {@code true} if successfully set.  */ ;/**  * Set the HTTP status code of the response.  * @param status the HTTP status as an {@link HttpStatus} enum value  * @return {@code false} if the status code has not been set because the  * HTTP response is already committed, {@code true} if successfully set.  */ boolean setStatusCode(@Nullable HttpStatus status).
true;;0;2;/**  * Return the status code set via {@link #setStatusCode}, or if the status  * has not been set, return the default status code from the underlying  * server response. The return value may be {@code null} if the status code  * value is outside the {@link HttpStatus} enum range, or if the underlying  * server response does not have a default value.  */ ;/**  * Return the status code set via {@link #setStatusCode}, or if the status  * has not been set, return the default status code from the underlying  * server response. The return value may be {@code null} if the status code  * value is outside the {@link HttpStatus} enum range, or if the underlying  * server response does not have a default value.  */ @Nullable HttpStatus getStatusCode().
true;;0;1;/**  * Return a mutable map with the cookies to send to the server.  */ ;/**  * Return a mutable map with the cookies to send to the server.  */ MultiValueMap<String, ResponseCookie> getCookies().
true;;1;1;/**  * Add the given {@code ResponseCookie}.  * @param cookie the cookie to add  * @throws IllegalStateException if the response has already been committed  */ ;/**  * Add the given {@code ResponseCookie}.  * @param cookie the cookie to add  * @throws IllegalStateException if the response has already been committed  */ void addCookie(ResponseCookie cookie).
