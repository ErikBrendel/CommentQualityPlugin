# id;timestamp;commentText;codeText;commentWords;codeWords
CallableProcessingInterceptor -> default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception;1498505691;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception {_	};invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;default,t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception;1502206048;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}._<p>The default implementation is empty._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception {_	};invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,p,the,default,implementation,is,empty,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;default,t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1351289067;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1353616762;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1354291807;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1385423968;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1441886706;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1498500776;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;1498503011;Invoked <em>after</em> the start of concurrent handling in the async_thread in which the {@code Callable} is executed and <em>before</em> the_actual invocation of the {@code Callable}._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,after,em,the,start,of,concurrent,handling,in,the,async,thread,in,which,the,code,callable,is,executed,and,em,before,em,the,actual,invocation,of,the,code,callable,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,pre,process,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception;1498505691;Invoked from a container thread when an error occurred while processing_the async request before the {@code Callable} task completes._Implementations may return a value, including an {@link Exception}, to_use instead of the value the {@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@param t the error that occurred while request processing_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors_@since 5.0;default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception {_		return RESULT_NONE__	};invoked,from,a,container,thread,when,an,error,occurred,while,processing,the,async,request,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,t,the,error,that,occurred,while,request,processing,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors,since,5,0;default,t,object,handle,error,native,web,request,request,callable,t,task,throwable,t,throws,exception,return
CallableProcessingInterceptor -> default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception;1502206048;Invoked from a container thread when an error occurred while processing_the async request before the {@code Callable} task completes._Implementations may return a value, including an {@link Exception}, to_use instead of the value the {@link Callable} did not return in time._<p>The default implementation always returns {@link #RESULT_NONE}._@param request the current request_@param task the task for the current async request_@param t the error that occurred while request processing_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors_@since 5.0;default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception {_		return RESULT_NONE__	};invoked,from,a,container,thread,when,an,error,occurred,while,processing,the,async,request,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,p,the,default,implementation,always,returns,link,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,t,the,error,that,occurred,while,request,processing,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors,since,5,0;default,t,object,handle,error,native,web,request,request,callable,t,task,throwable,t,throws,exception,return
CallableProcessingInterceptor -> default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception;1498505691;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {_		return RESULT_NONE__	};invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;default,t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception,return
CallableProcessingInterceptor -> default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception;1502206048;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time._<p>The default implementation always returns {@link #RESULT_NONE}._@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {_		return RESULT_NONE__	};invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,p,the,default,implementation,always,returns,link,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;default,t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception,return
CallableProcessingInterceptor -> <T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;1354291807;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling.__<p>_This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transfered to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._</p>__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transfered,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,p,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;1385423968;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling.__<p>_This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transferred to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._</p>__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transferred,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,p,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;1441886706;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling._<p>This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transferred to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transferred,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;1498500776;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling._<p>This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transferred to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transferred,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;1498503011;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling._<p>This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transferred to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void  beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transferred,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception_;1498500776;Invoked from a container thread when an error occurred while processing the async request_before the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@paramt t the error that occurred while request processing_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception_;invoked,from,a,container,thread,when,an,error,occurred,while,processing,the,async,request,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,paramt,t,the,error,that,occurred,while,request,processing,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,error,native,web,request,request,callable,t,task,throwable,t,throws,exception
CallableProcessingInterceptor -> <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception_;1498503011;Invoked from a container thread when an error occurred while processing_the async request before the {@code Callable} task completes._Implementations may return a value, including an {@link Exception}, to_use instead of the value the {@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@param t the error that occurred while request processing_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors_@since 5.0;<T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception_;invoked,from,a,container,thread,when,an,error,occurred,while,processing,the,async,request,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,t,the,error,that,occurred,while,request,processing,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors,since,5,0;t,object,handle,error,native,web,request,request,callable,t,task,throwable,t,throws,exception
CallableProcessingInterceptor -> default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception;1498505691;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling._<p>This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transferred to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {_	};invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transferred,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;default,t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception;1502206048;Invoked <em>before</em> the start of concurrent handling in the original_thread in which the {@code Callable} is submitted for concurrent handling._<p>This is useful for capturing the state of the current thread just prior to_invoking the {@link Callable}. Once the state is captured, it can then be_transferred to the new {@link Thread} in_{@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of_Spring Security's SecurityContextHolder and migrating it to the new Thread_is a concrete example of where this is useful._<p>The default implementation is empty._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {_	};invoked,em,before,em,the,start,of,concurrent,handling,in,the,original,thread,in,which,the,code,callable,is,submitted,for,concurrent,handling,p,this,is,useful,for,capturing,the,state,of,the,current,thread,just,prior,to,invoking,the,link,callable,once,the,state,is,captured,it,can,then,be,transferred,to,the,new,link,thread,in,link,pre,process,native,web,request,callable,capturing,the,state,of,spring,security,s,security,context,holder,and,migrating,it,to,the,new,thread,is,a,concrete,example,of,where,this,is,useful,p,the,default,implementation,is,empty,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;default,t,void,before,concurrent,handling,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception;1498505691;Invoked from a container thread when async processing completes for any_reason including timeout or network error._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {_	};invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;default,t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception;1502206048;Invoked from a container thread when async processing completes for any_reason including timeout or network error._<p>The default implementation is empty._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {_	};invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,p,the,default,implementation,is,empty,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;default,t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1351289067;Invoked from a container thread when async processing completes for any_reason including timeout or network error.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1353616762;Invoked from a container thread when async processing completes for any_reason including timeout or network error.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1354291807;Invoked from a container thread when async processing completes for any_reason including timeout or network error.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1385423968;Invoked from a container thread when async processing completes for any_reason including timeout or network error.__@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1441886706;Invoked from a container thread when async processing completes for any_reason including timeout or network error._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1498500776;Invoked from a container thread when async processing completes for any_reason including timeout or network error._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;1498503011;Invoked from a container thread when async processing completes for any_reason including timeout or network error._@param request the current request_@param task the task for the current async request_@throws Exception in case of errors;<T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,async,processing,completes,for,any,reason,including,timeout,or,network,error,param,request,the,current,request,param,task,the,task,for,the,current,async,request,throws,exception,in,case,of,errors;t,void,after,completion,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;1353616762;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time.__@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;1354291807;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time.__@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;1385423968;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time.__@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;1441886706;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;1498500776;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;1498503011;Invoked from a container thread when the async request times out before_the {@code Callable} task completes. Implementations may return a value,_including an {@link Exception}, to use instead of the value the_{@link Callable} did not return in time._@param request the current request_@param task the task for the current async request_@return a concurrent result value_ if the value is anything other than_{@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing_is resumed and subsequent interceptors are not invoked_@throws Exception in case of errors;<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception_;invoked,from,a,container,thread,when,the,async,request,times,out,before,the,code,callable,task,completes,implementations,may,return,a,value,including,an,link,exception,to,use,instead,of,the,value,the,link,callable,did,not,return,in,time,param,request,the,current,request,param,task,the,task,for,the,current,async,request,return,a,concurrent,result,value,if,the,value,is,anything,other,than,link,or,link,concurrent,processing,is,resumed,and,subsequent,interceptors,are,not,invoked,throws,exception,in,case,of,errors;t,object,handle,timeout,native,web,request,request,callable,t,task,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1351289067;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing.__@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1353616762;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing.__@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1354291807;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing.__@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1385423968;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing.__@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1441886706;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing._@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1498500776;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing._@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> <T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;1498503011;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing._@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;<T> void postProcess(NativeWebRequest request, Callable<T> task, Object concurrentResult) throws Exception_;invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> default <T> void postProcess(NativeWebRequest request, Callable<T> task, 			Object concurrentResult) throws Exception;1498505691;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing._@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;default <T> void postProcess(NativeWebRequest request, Callable<T> task,_			Object concurrentResult) throws Exception {_	};invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;default,t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
CallableProcessingInterceptor -> default <T> void postProcess(NativeWebRequest request, Callable<T> task, 			Object concurrentResult) throws Exception;1502206048;Invoked <em>after</em> the {@code Callable} has produced a result in the_async thread in which the {@code Callable} is executed. This method may_be invoked later than {@code afterTimeout} or {@code afterCompletion}_depending on when the {@code Callable} finishes processing._<p>The default implementation is empty._@param request the current request_@param task the task for the current async request_@param concurrentResult the result of concurrent processing, which could_be a {@link Throwable} if the {@code Callable} raised an exception_@throws Exception in case of errors;default <T> void postProcess(NativeWebRequest request, Callable<T> task,_			Object concurrentResult) throws Exception {_	};invoked,em,after,em,the,code,callable,has,produced,a,result,in,the,async,thread,in,which,the,code,callable,is,executed,this,method,may,be,invoked,later,than,code,after,timeout,or,code,after,completion,depending,on,when,the,code,callable,finishes,processing,p,the,default,implementation,is,empty,param,request,the,current,request,param,task,the,task,for,the,current,async,request,param,concurrent,result,the,result,of,concurrent,processing,which,could,be,a,link,throwable,if,the,code,callable,raised,an,exception,throws,exception,in,case,of,errors;default,t,void,post,process,native,web,request,request,callable,t,task,object,concurrent,result,throws,exception
