commented;modifiers;parameterAmount;loc;comment;code
true;public;2;12;/**  * Initialize a WebDataBinder with {@code @InitBinder} methods.  * <p>If the {@code @InitBinder} annotation specifies attributes names,  * it is invoked only if the names include the target object name.  * @throws Exception if one of the invoked @{@link InitBinder} methods fails  * @see #isBinderMethodApplicable  */ ;/**  * Initialize a WebDataBinder with {@code @InitBinder} methods.  * <p>If the {@code @InitBinder} annotation specifies attributes names,  * it is invoked only if the names include the target object name.  * @throws Exception if one of the invoked @{@link InitBinder} methods fails  * @see #isBinderMethodApplicable  */ @Override public void initBinder(WebDataBinder dataBinder, NativeWebRequest request) throws Exception {     for (InvocableHandlerMethod binderMethod : this.binderMethods) {         if (isBinderMethodApplicable(binderMethod, dataBinder)) {             Object returnValue = binderMethod.invokeForRequest(request, null, dataBinder).             if (returnValue != null) {                 throw new IllegalStateException("@InitBinder methods must not return a value (should be void): " + binderMethod).             }         }     } }
true;protected;2;6;/**  * Determine whether the given {@code @InitBinder} method should be used  * to initialize the given {@link WebDataBinder} instance. By default we  * check the specified attribute names in the annotation value, if any.  */ ;/**  * Determine whether the given {@code @InitBinder} method should be used  * to initialize the given {@link WebDataBinder} instance. By default we  * check the specified attribute names in the annotation value, if any.  */ protected boolean isBinderMethodApplicable(HandlerMethod initBinderMethod, WebDataBinder dataBinder) {     InitBinder ann = initBinderMethod.getMethodAnnotation(InitBinder.class).     Assert.state(ann != null, "No InitBinder annotation").     String[] names = ann.value().     return (ObjectUtils.isEmpty(names) || ObjectUtils.containsElement(names, dataBinder.getObjectName())). }
