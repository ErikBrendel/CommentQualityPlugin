# id;timestamp;commentText;codeText;commentWords;codeWords
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response);1400256389;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response);1400508029;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response);1401205411;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response);1455813219;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response);1467730834;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response);1495868221;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1328020251;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1337254729;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1356735495;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1357119239;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1368482696;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1368707594;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1400256389;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1400508029;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1401205411;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1455813219;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1467730834;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1495868221;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1496837955;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request);1498780456;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request;public ServletRequestAttributes(HttpServletRequest request) {_		Assert.notNull(request, "Request must not be null")__		this.request = request__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request;public,servlet,request,attributes,http,servlet,request,request,assert,not,null,request,request,must,not,be,null,this,request,request
ServletRequestAttributes -> public final HttpServletResponse getResponse();1400256389;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> public final HttpServletResponse getResponse();1400508029;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> public final HttpServletResponse getResponse();1401205411;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> public final HttpServletResponse getResponse();1455813219;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> public final HttpServletResponse getResponse();1467730834;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1328020251;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1337254729;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1356735495;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1357119239;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1368482696;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1368707594;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1400256389;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1400508029;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1401205411;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			return this.request.getSession(allowCreate)__		}_		else {_			_			if (this.session == null && allowCreate) {_				throw new IllegalStateException(_						"No session found and request already completed - cannot create new session!")__			}_			return this.session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,return,this,request,get,session,allow,create,else,if,this,session,null,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,return,this,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1455813219;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			HttpSession session = this.request.getSession(allowCreate)__			this.session = session__			return session__		}_		else {_			_			HttpSession session = this.session__			if (session == null) {_				if (allowCreate) {_					throw new IllegalStateException(_							"No session found and request already completed - cannot create new session!")__				}_				else {_					session = this.request.getSession(false)__					this.session = session__				}_			}_			return session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,http,session,session,this,request,get,session,allow,create,this,session,session,return,session,else,http,session,session,this,session,if,session,null,if,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,else,session,this,request,get,session,false,this,session,session,return,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1467730834;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			HttpSession session = this.request.getSession(allowCreate)__			this.session = session__			return session__		}_		else {_			_			HttpSession session = this.session__			if (session == null) {_				if (allowCreate) {_					throw new IllegalStateException(_							"No session found and request already completed - cannot create new session!")__				}_				else {_					session = this.request.getSession(false)__					this.session = session__				}_			}_			return session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,http,session,session,this,request,get,session,allow,create,this,session,session,return,session,else,http,session,session,this,session,if,session,null,if,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,else,session,this,request,get,session,false,this,session,session,return,session
ServletRequestAttributes -> protected final HttpSession getSession(boolean allowCreate);1495868221;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			HttpSession session = this.request.getSession(allowCreate)__			this.session = session__			return session__		}_		else {_			_			HttpSession session = this.session__			if (session == null) {_				if (allowCreate) {_					throw new IllegalStateException(_							"No session found and request already completed - cannot create new session!")__				}_				else {_					session = this.request.getSession(false)__					this.session = session__				}_			}_			return session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,http,session,session,this,request,get,session,allow,create,this,session,session,return,session,else,http,session,session,this,session,if,session,null,if,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,else,session,this,request,get,session,false,this,session,session,return,session
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1328020251;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1337254729;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1356735495;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1357119239;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1368482696;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1368707594;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1400256389;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1400508029;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1401205411;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1455813219;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1467730834;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1495868221;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = getSession(true)__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,get,session,true,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1496837955;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = obtainSession()__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,obtain,session,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> protected void registerSessionDestructionCallback(String name, Runnable callback);1498780456;Register the given callback as to be executed after session termination._<p>Note: The callback object should be serializable in order to survive_web app restarts._@param name the name of the attribute to register the callback for_@param callback the callback to be executed for destruction;protected void registerSessionDestructionCallback(String name, Runnable callback) {_		HttpSession session = obtainSession()__		session.setAttribute(DESTRUCTION_CALLBACK_NAME_PREFIX + name,_				new DestructionCallbackBindingListener(callback))__	};register,the,given,callback,as,to,be,executed,after,session,termination,p,note,the,callback,object,should,be,serializable,in,order,to,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,callback,to,be,executed,for,destruction;protected,void,register,session,destruction,callback,string,name,runnable,callback,http,session,session,obtain,session,session,set,attribute,name,new,destruction,callback,binding,listener,callback
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1328020251;Update all accessed session attributes through <code>session.setAttribute</code>_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		synchronized (this.sessionAttributesToUpdate) {_			if (this.session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = this.session.getAttribute(name)__						if (oldValue == newValue) {_							this.session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,code,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,synchronized,this,session,attributes,to,update,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1337254729;Update all accessed session attributes through <code>session.setAttribute</code>_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		synchronized (this.sessionAttributesToUpdate) {_			if (this.session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = this.session.getAttribute(name)__						if (oldValue == newValue) {_							this.session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,code,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,synchronized,this,session,attributes,to,update,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1356735495;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		synchronized (this.sessionAttributesToUpdate) {_			if (this.session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = this.session.getAttribute(name)__						if (oldValue == newValue) {_							this.session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,synchronized,this,session,attributes,to,update,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1357119239;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		synchronized (this.sessionAttributesToUpdate) {_			if (this.session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = this.session.getAttribute(name)__						if (oldValue == newValue) {_							this.session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,synchronized,this,session,attributes,to,update,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1368482696;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		synchronized (this.sessionAttributesToUpdate) {_			if (this.session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = this.session.getAttribute(name)__						if (oldValue == newValue) {_							this.session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,synchronized,this,session,attributes,to,update,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1368707594;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		if (this.session != null) {_			try {_				for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_					String name = entry.getKey()__					Object newValue = entry.getValue()__					Object oldValue = this.session.getAttribute(name)__					if (oldValue == newValue) {_						this.session.setAttribute(name, newValue)__					}_				}_			}_			catch (IllegalStateException ex) {_				_			}_		}_		this.sessionAttributesToUpdate.clear()__	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1400256389;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		if (this.session != null) {_			try {_				for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_					String name = entry.getKey()__					Object newValue = entry.getValue()__					Object oldValue = this.session.getAttribute(name)__					if (oldValue == newValue) {_						this.session.setAttribute(name, newValue)__					}_				}_			}_			catch (IllegalStateException ex) {_				_			}_		}_		this.sessionAttributesToUpdate.clear()__	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1400508029;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		if (this.session != null) {_			try {_				for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_					String name = entry.getKey()__					Object newValue = entry.getValue()__					Object oldValue = this.session.getAttribute(name)__					if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_						this.session.setAttribute(name, newValue)__					}_				}_			}_			catch (IllegalStateException ex) {_				_			}_		}_		this.sessionAttributesToUpdate.clear()__	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1401205411;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		_		this.session = this.request.getSession(false)__		_		if (this.session != null) {_			try {_				for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_					String name = entry.getKey()__					Object newValue = entry.getValue()__					Object oldValue = this.session.getAttribute(name)__					if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_						this.session.setAttribute(name, newValue)__					}_				}_			}_			catch (IllegalStateException ex) {_				_			}_		}_		this.sessionAttributesToUpdate.clear()__	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,this,session,this,request,get,session,false,if,this,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,this,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,this,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1455813219;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		if (!this.sessionAttributesToUpdate.isEmpty()) {_			_			HttpSession session = getSession(false)__			if (session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = session.getAttribute(name)__						if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_							session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,if,this,session,attributes,to,update,is,empty,http,session,session,get,session,false,if,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1467730834;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		if (!this.sessionAttributesToUpdate.isEmpty()) {_			_			HttpSession session = getSession(false)__			if (session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = session.getAttribute(name)__						if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_							session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,if,this,session,attributes,to,update,is,empty,http,session,session,get,session,false,if,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1495868221;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		if (!this.sessionAttributesToUpdate.isEmpty()) {_			_			HttpSession session = getSession(false)__			if (session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = session.getAttribute(name)__						if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_							session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,if,this,session,attributes,to,update,is,empty,http,session,session,get,session,false,if,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1496837955;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		if (!this.sessionAttributesToUpdate.isEmpty()) {_			_			HttpSession session = getSession(false)__			if (session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = session.getAttribute(name)__						if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_							session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,if,this,session,attributes,to,update,is,empty,http,session,session,get,session,false,if,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> @Override 	protected void updateAccessedSessionAttributes();1498780456;Update all accessed session attributes through {@code session.setAttribute}_calls, explicitly indicating to the container that they might have been modified.;@Override_	protected void updateAccessedSessionAttributes() {_		if (!this.sessionAttributesToUpdate.isEmpty()) {_			_			HttpSession session = getSession(false)__			if (session != null) {_				try {_					for (Map.Entry<String, Object> entry : this.sessionAttributesToUpdate.entrySet()) {_						String name = entry.getKey()__						Object newValue = entry.getValue()__						Object oldValue = session.getAttribute(name)__						if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {_							session.setAttribute(name, newValue)__						}_					}_				}_				catch (IllegalStateException ex) {_					_				}_			}_			this.sessionAttributesToUpdate.clear()__		}_	};update,all,accessed,session,attributes,through,code,session,set,attribute,calls,explicitly,indicating,to,the,container,that,they,might,have,been,modified;override,protected,void,update,accessed,session,attributes,if,this,session,attributes,to,update,is,empty,http,session,session,get,session,false,if,session,null,try,for,map,entry,string,object,entry,this,session,attributes,to,update,entry,set,string,name,entry,get,key,object,new,value,entry,get,value,object,old,value,session,get,attribute,name,if,old,value,new,value,is,immutable,session,attribute,name,new,value,session,set,attribute,name,new,value,catch,illegal,state,exception,ex,this,session,attributes,to,update,clear
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, Object value);1400508029;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, Object value) {_		return (value instanceof String || value instanceof Character ||_				value instanceof Boolean || value instanceof Number)__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,object,value,return,value,instanceof,string,value,instanceof,character,value,instanceof,boolean,value,instanceof,number
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, Object value);1401205411;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and standard {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, Object value) {_		return (value == null || immutableValueTypes.contains(value.getClass()))__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,standard,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,object,value,return,value,null,immutable,value,types,contains,value,get,class
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, Object value);1455813219;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and standard {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, Object value) {_		return (value == null || immutableValueTypes.contains(value.getClass()))__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,standard,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,object,value,return,value,null,immutable,value,types,contains,value,get,class
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, Object value);1467730834;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and standard {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, Object value) {_		return (value == null || immutableValueTypes.contains(value.getClass()))__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,standard,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,object,value,return,value,null,immutable,value,types,contains,value,get,class
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, Object value);1495868221;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and standard {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, Object value) {_		return (value == null || immutableValueTypes.contains(value.getClass()))__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,standard,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,object,value,return,value,null,immutable,value,types,contains,value,get,class
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, @Nullable HttpServletResponse response);1496837955;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, @Nullable HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,nullable,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> public ServletRequestAttributes(HttpServletRequest request, @Nullable HttpServletResponse response);1498780456;Create a new ServletRequestAttributes instance for the given request._@param request current HTTP request_@param response current HTTP response (for optional exposure);public ServletRequestAttributes(HttpServletRequest request, @Nullable HttpServletResponse response) {_		this(request)__		this.response = response__	};create,a,new,servlet,request,attributes,instance,for,the,given,request,param,request,current,http,request,param,response,current,http,response,for,optional,exposure;public,servlet,request,attributes,http,servlet,request,request,nullable,http,servlet,response,response,this,request,this,response,response
ServletRequestAttributes -> @Nullable 	public final HttpServletResponse getResponse();1495868221;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;@Nullable_	public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;nullable,public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> @Nullable 	public final HttpServletResponse getResponse();1496837955;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;@Nullable_	public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;nullable,public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> @Nullable 	public final HttpServletResponse getResponse();1498780456;Exposes the native {@link HttpServletResponse} that we're wrapping (if any).;@Nullable_	public final HttpServletResponse getResponse() {_		return this.response__	};exposes,the,native,link,http,servlet,response,that,we,re,wrapping,if,any;nullable,public,final,http,servlet,response,get,response,return,this,response
ServletRequestAttributes -> @Nullable 	protected final HttpSession getSession(boolean allowCreate);1496837955;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;@Nullable_	protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			HttpSession session = this.request.getSession(allowCreate)__			this.session = session__			return session__		}_		else {_			_			HttpSession session = this.session__			if (session == null) {_				if (allowCreate) {_					throw new IllegalStateException(_							"No session found and request already completed - cannot create new session!")__				}_				else {_					session = this.request.getSession(false)__					this.session = session__				}_			}_			return session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;nullable,protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,http,session,session,this,request,get,session,allow,create,this,session,session,return,session,else,http,session,session,this,session,if,session,null,if,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,else,session,this,request,get,session,false,this,session,session,return,session
ServletRequestAttributes -> @Nullable 	protected final HttpSession getSession(boolean allowCreate);1498780456;Exposes the {@link HttpSession} that we're wrapping._@param allowCreate whether to allow creation of a new session if none exists yet;@Nullable_	protected final HttpSession getSession(boolean allowCreate) {_		if (isRequestActive()) {_			HttpSession session = this.request.getSession(allowCreate)__			this.session = session__			return session__		}_		else {_			_			HttpSession session = this.session__			if (session == null) {_				if (allowCreate) {_					throw new IllegalStateException(_							"No session found and request already completed - cannot create new session!")__				}_				else {_					session = this.request.getSession(false)__					this.session = session__				}_			}_			return session__		}_	};exposes,the,link,http,session,that,we,re,wrapping,param,allow,create,whether,to,allow,creation,of,a,new,session,if,none,exists,yet;nullable,protected,final,http,session,get,session,boolean,allow,create,if,is,request,active,http,session,session,this,request,get,session,allow,create,this,session,session,return,session,else,http,session,session,this,session,if,session,null,if,allow,create,throw,new,illegal,state,exception,no,session,found,and,request,already,completed,cannot,create,new,session,else,session,this,request,get,session,false,this,session,session,return,session
ServletRequestAttributes -> public final HttpServletRequest getRequest();1328020251;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1337254729;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1356735495;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1357119239;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1368482696;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1368707594;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1400256389;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1400508029;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1401205411;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1455813219;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1467730834;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1495868221;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1496837955;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> public final HttpServletRequest getRequest();1498780456;Exposes the native {@link HttpServletRequest} that we're wrapping.;public final HttpServletRequest getRequest() {_		return this.request__	};exposes,the,native,link,http,servlet,request,that,we,re,wrapping;public,final,http,servlet,request,get,request,return,this,request
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, @Nullable Object value);1496837955;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and standard {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, @Nullable Object value) {_		return (value == null || immutableValueTypes.contains(value.getClass()))__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,standard,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,nullable,object,value,return,value,null,immutable,value,types,contains,value,get,class
ServletRequestAttributes -> protected boolean isImmutableSessionAttribute(String name, @Nullable Object value);1498780456;Determine whether the given value is to be considered as an immutable session_attribute, that is, doesn't have to be re-set via {@code session.setAttribute}_since its value cannot meaningfully change internally._<p>The default implementation returns {@code true} for {@code String},_{@code Character}, {@code Boolean} and standard {@code Number} values._@param name the name of the attribute_@param value the corresponding value to check_@return {@code true} if the value is to be considered as immutable for the_purposes of session attribute management_ {@code false} otherwise_@see #updateAccessedSessionAttributes();protected boolean isImmutableSessionAttribute(String name, @Nullable Object value) {_		return (value == null || immutableValueTypes.contains(value.getClass()))__	};determine,whether,the,given,value,is,to,be,considered,as,an,immutable,session,attribute,that,is,doesn,t,have,to,be,re,set,via,code,session,set,attribute,since,its,value,cannot,meaningfully,change,internally,p,the,default,implementation,returns,code,true,for,code,string,code,character,code,boolean,and,standard,code,number,values,param,name,the,name,of,the,attribute,param,value,the,corresponding,value,to,check,return,code,true,if,the,value,is,to,be,considered,as,immutable,for,the,purposes,of,session,attribute,management,code,false,otherwise,see,update,accessed,session,attributes;protected,boolean,is,immutable,session,attribute,string,name,nullable,object,value,return,value,null,immutable,value,types,contains,value,get,class
