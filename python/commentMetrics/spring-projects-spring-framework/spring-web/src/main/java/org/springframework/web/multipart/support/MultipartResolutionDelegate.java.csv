commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;12;;@Nullable public static MultipartRequest resolveMultipartRequest(NativeWebRequest webRequest) {     MultipartRequest multipartRequest = webRequest.getNativeRequest(MultipartRequest.class).     if (multipartRequest != null) {         return multipartRequest.     }     HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class).     if (servletRequest != null && isMultipartContent(servletRequest)) {         return new StandardMultipartHttpServletRequest(servletRequest).     }     return null. }
false;public,static;1;4;;public static boolean isMultipartRequest(HttpServletRequest request) {     return (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null || isMultipartContent(request)). }
false;private,static;1;4;;private static boolean isMultipartContent(HttpServletRequest request) {     String contentType = request.getContentType().     return (contentType != null && contentType.toLowerCase().startsWith("multipart/")). }
false;static;1;7;;static MultipartHttpServletRequest asMultipartHttpServletRequest(HttpServletRequest request) {     MultipartHttpServletRequest unwrapped = WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class).     if (unwrapped != null) {         return unwrapped.     }     return new StandardMultipartHttpServletRequest(request). }
false;public,static;1;6;;public static boolean isMultipartArgument(MethodParameter parameter) {     Class<?> paramType = parameter.getNestedParameterType().     return (MultipartFile.class == paramType || isMultipartFileCollection(parameter) || isMultipartFileArray(parameter) || (Part.class == paramType || isPartCollection(parameter) || isPartArray(parameter))). }
false;public,static;3;45;;@Nullable public static Object resolveMultipartArgument(String name, MethodParameter parameter, HttpServletRequest request) throws Exception {     MultipartHttpServletRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class).     boolean isMultipart = (multipartRequest != null || isMultipartContent(request)).     if (MultipartFile.class == parameter.getNestedParameterType()) {         if (multipartRequest == null && isMultipart) {             multipartRequest = new StandardMultipartHttpServletRequest(request).         }         return (multipartRequest != null ? multipartRequest.getFile(name) : null).     } else if (isMultipartFileCollection(parameter)) {         if (multipartRequest == null && isMultipart) {             multipartRequest = new StandardMultipartHttpServletRequest(request).         }         return (multipartRequest != null ? multipartRequest.getFiles(name) : null).     } else if (isMultipartFileArray(parameter)) {         if (multipartRequest == null && isMultipart) {             multipartRequest = new StandardMultipartHttpServletRequest(request).         }         if (multipartRequest != null) {             List<MultipartFile> multipartFiles = multipartRequest.getFiles(name).             return multipartFiles.toArray(new MultipartFile[0]).         } else {             return null.         }     } else if (Part.class == parameter.getNestedParameterType()) {         return (isMultipart ? request.getPart(name) : null).     } else if (isPartCollection(parameter)) {         return (isMultipart ? resolvePartList(request, name) : null).     } else if (isPartArray(parameter)) {         return (isMultipart ? resolvePartList(request, name).toArray(new Part[0]) : null).     } else {         return UNRESOLVABLE.     } }
false;private,static;1;3;;private static boolean isMultipartFileCollection(MethodParameter methodParam) {     return (MultipartFile.class == getCollectionParameterType(methodParam)). }
false;private,static;1;3;;private static boolean isMultipartFileArray(MethodParameter methodParam) {     return (MultipartFile.class == methodParam.getNestedParameterType().getComponentType()). }
false;private,static;1;3;;private static boolean isPartCollection(MethodParameter methodParam) {     return (Part.class == getCollectionParameterType(methodParam)). }
false;private,static;1;3;;private static boolean isPartArray(MethodParameter methodParam) {     return (Part.class == methodParam.getNestedParameterType().getComponentType()). }
false;private,static;1;11;;@Nullable private static Class<?> getCollectionParameterType(MethodParameter methodParam) {     Class<?> paramType = methodParam.getNestedParameterType().     if (Collection.class == paramType || List.class.isAssignableFrom(paramType)) {         Class<?> valueType = ResolvableType.forMethodParameter(methodParam).asCollection().resolveGeneric().         if (valueType != null) {             return valueType.         }     }     return null. }
false;private,static;2;10;;private static List<Part> resolvePartList(HttpServletRequest request, String name) throws Exception {     Collection<Part> parts = request.getParts().     List<Part> result = new ArrayList<>(parts.size()).     for (Part part : parts) {         if (part.getName().equals(name)) {             result.add(part).         }     }     return result. }
