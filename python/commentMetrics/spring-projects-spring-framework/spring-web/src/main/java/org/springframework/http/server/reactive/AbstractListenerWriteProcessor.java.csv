# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractListenerWriteProcessor -> protected void writingComplete();1493025457;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1496323185;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1496323735;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1498780456;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1511293325;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1511318790;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1511411136;Invoked when writing is complete. Defaults to no-op.;protected void writingComplete() {_	};invoked,when,writing,is,complete,defaults,to,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1511450555;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1511452503;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1523471247;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1523471247;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1530174524;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1530174524;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1530906258;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1530912796;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1531942370;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1532436274;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1539999914;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected void writingComplete();1545067161;Invoked after onComplete or onError notification._<p>The default implementation is a no-op.;protected void writingComplete() {_	};invoked,after,on,complete,or,on,error,notification,p,the,default,implementation,is,a,no,op;protected,void,writing,complete
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1481755387;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1485810955;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1490793036;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1493025457;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1496323185;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1496323735;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1498780456;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1511293325;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1511318790;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1511411136;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1511450555;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1511452503;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1523471247;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1523471247;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1530174524;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1530174524;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1530906258;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1530912796;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1531942370;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1532436274;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1539999914;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean isWritePossible()_;1545067161;Whether writing is possible.;protected abstract boolean isWritePossible()_;whether,writing,is,possible;protected,abstract,boolean,is,write,possible
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1481583450;Writes the given data to the output, indicating if the entire data was_written._@param data the data to write_@return {@code true} if the data was fully written and a new data_can be requested_ {@code false} otherwise;protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,indicating,if,the,entire,data,was,written,param,data,the,data,to,write,return,code,true,if,the,data,was,fully,written,and,a,new,data,can,be,requested,code,false,otherwise;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1481755387;Writes the given data to the output._@param data the data to write_@return whether the data was fully written (true)and new data can be_requested or otherwise (false);protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,true,and,new,data,can,be,requested,or,otherwise,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1485810955;Writes the given data to the output._@param data the data to write_@return whether the data was fully written (true)and new data can be_requested or otherwise (false);protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,true,and,new,data,can,be,requested,or,otherwise,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1490793036;Writes the given data to the output._@param data the data to write_@return whether the data was fully written (true)and new data can be_requested or otherwise (false);protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,true,and,new,data,can,be,requested,or,otherwise,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1493025457;Writes the given data to the output._@param data the data to write_@return whether the data was fully written (true)and new data can be_requested or otherwise (false);protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,true,and,new,data,can,be,requested,or,otherwise,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1496323185;Writes the given data to the output._@param data the data to write_@return whether the data was fully written (true)and new data can be_requested or otherwise (false);protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,true,and,new,data,can,be,requested,or,otherwise,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1496323735;Writes the given data to the output._@param data the data to write_@return whether the data was fully written (true)and new data can be_requested or otherwise (false);protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,true,and,new,data,can,be,requested,or,otherwise,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1498780456;Writes the given data to the output._@param data the data to write_@return whether the data was fully written ({@code true})_and new data can be requested, or otherwise ({@code false});protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,code,true,and,new,data,can,be,requested,or,otherwise,code,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1511293325;Writes the given data to the output._@param data the data to write_@return whether the data was fully written ({@code true})_and new data can be requested, or otherwise ({@code false});protected abstract boolean write(T data) throws IOException_;writes,the,given,data,to,the,output,param,data,the,data,to,write,return,whether,the,data,was,fully,written,code,true,and,new,data,can,be,requested,or,otherwise,code,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1511318790;Write the given item._@param data the item to write_@return whether the data was fully written ({@code true})_and new data can be requested, or otherwise ({@code false});protected abstract boolean write(T data) throws IOException_;write,the,given,item,param,data,the,item,to,write,return,whether,the,data,was,fully,written,code,true,and,new,data,can,be,requested,or,otherwise,code,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1511411136;Write the given item._@param data the item to write_@return whether the data was fully written ({@code true})_and new data can be requested, or otherwise ({@code false});protected abstract boolean write(T data) throws IOException_;write,the,given,item,param,data,the,item,to,write,return,whether,the,data,was,fully,written,code,true,and,new,data,can,be,requested,or,otherwise,code,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1511450555;Write the given item._@param data the item to write_@return whether the data was fully written ({@code true})_and new data can be requested, or otherwise ({@code false});protected abstract boolean write(T data) throws IOException_;write,the,given,item,param,data,the,item,to,write,return,whether,the,data,was,fully,written,code,true,and,new,data,can,be,requested,or,otherwise,code,false;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1511452503;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1523471247;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1523471247;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1530174524;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1530174524;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1530906258;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1530912796;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1531942370;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1532436274;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1539999914;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected abstract boolean write(T data) throws IOException_;1545067161;Write the given item._<p><strong>Note:</strong> Sub-classes are responsible for releasing any_data buffer associated with the item, once fully written, if pooled_buffers apply to the underlying container._@param data the item to write_@return whether the current data item was written and another one_requested ({@code true}), or or otherwise if more writes are required.;protected abstract boolean write(T data) throws IOException_;write,the,given,item,p,strong,note,strong,sub,classes,are,responsible,for,releasing,any,data,buffer,associated,with,the,item,once,fully,written,if,pooled,buffers,apply,to,the,underlying,container,param,data,the,item,to,write,return,whether,the,current,data,item,was,written,and,another,one,requested,code,true,or,or,otherwise,if,more,writes,are,required;protected,abstract,boolean,write,t,data,throws,ioexception
AbstractListenerWriteProcessor -> protected void suspendWriting();1493025457;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1496323185;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1496323735;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1498780456;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1511293325;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1511318790;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1511411136;Suspend writing. Defaults to no-op.;protected void suspendWriting() {_	};suspend,writing,defaults,to,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected void suspendWriting();1511450555;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op.;protected void suspendWriting() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op;protected,void,suspend,writing
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1481755387;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1485810955;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1490793036;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1493025457;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1496323185;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1496323735;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1498780456;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1511293325;Whether the given data item contains any actual data to be processed.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,contains,any,actual,data,to,be,processed;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1511318790;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1511411136;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1511450555;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1511452503;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1523471247;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1523471247;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1530174524;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1530174524;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1530906258;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1530912796;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1531942370;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1532436274;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1539999914;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected abstract boolean isDataEmpty(T data)_;1545067161;Whether the given data item has any content to write._If false the item is not written.;protected abstract boolean isDataEmpty(T data)_;whether,the,given,data,item,has,any,content,to,write,if,false,the,item,is,not,written;protected,abstract,boolean,is,data,empty,t,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1511318790;Called when a data item is received via {@link Subscriber#onNext(Object)}._The default implementation saves the data for writing when possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,for,writing,when,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1511411136;Called when a data item is received via {@link Subscriber#onNext(Object)}._The default implementation saves the data for writing when possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,for,writing,when,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1511450555;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1511452503;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1523471247;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1523471247;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1530174524;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1530174524;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1530906258;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1530912796;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1531942370;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1532436274;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1539999914;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		T prev = this.currentData__		if (prev != null) {_			_			_			_			discardData(data)__			cancel()__			onError(new IllegalStateException("Received new data while current not processed yet."))__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,t,prev,this,current,data,if,prev,null,discard,data,data,cancel,on,error,new,illegal,state,exception,received,new,data,while,current,not,processed,yet,this,current,data,data
AbstractListenerWriteProcessor -> protected void dataReceived(T data);1545067161;Template method invoked after a data item to write is received via_{@link Subscriber#onNext(Object)}. The default implementation saves the_data item for writing once that is possible.;protected void dataReceived(T data) {_		T prev = this.currentData__		if (prev != null) {_			_			_			_			discardData(data)__			cancel()__			onError(new IllegalStateException("Received new data while current not processed yet."))__		}_		this.currentData = data__	};template,method,invoked,after,a,data,item,to,write,is,received,via,link,subscriber,on,next,object,the,default,implementation,saves,the,data,item,for,writing,once,that,is,possible;protected,void,data,received,t,data,t,prev,this,current,data,if,prev,null,discard,data,data,cancel,on,error,new,illegal,state,exception,received,new,data,while,current,not,processed,yet,this,current,data,data
AbstractListenerWriteProcessor -> public AbstractListenerWriteProcessor(String logPrefix);1530906258;Create an instance with the given log prefix._@since 5.1;public AbstractListenerWriteProcessor(String logPrefix) {_		this.logPrefix = logPrefix__		this.resultPublisher = new WriteResultPublisher(logPrefix)__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,write,processor,string,log,prefix,this,log,prefix,log,prefix,this,result,publisher,new,write,result,publisher,log,prefix
AbstractListenerWriteProcessor -> public AbstractListenerWriteProcessor(String logPrefix);1530912796;Create an instance with the given log prefix._@since 5.1;public AbstractListenerWriteProcessor(String logPrefix) {_		this.logPrefix = logPrefix__		this.resultPublisher = new WriteResultPublisher(logPrefix)__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,write,processor,string,log,prefix,this,log,prefix,log,prefix,this,result,publisher,new,write,result,publisher,log,prefix
AbstractListenerWriteProcessor -> public AbstractListenerWriteProcessor(String logPrefix);1531942370;Create an instance with the given log prefix._@since 5.1;public AbstractListenerWriteProcessor(String logPrefix) {_		this.logPrefix = logPrefix__		this.resultPublisher = new WriteResultPublisher(logPrefix)__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,write,processor,string,log,prefix,this,log,prefix,log,prefix,this,result,publisher,new,write,result,publisher,log,prefix
AbstractListenerWriteProcessor -> public AbstractListenerWriteProcessor(String logPrefix);1532436274;Create an instance with the given log prefix._@since 5.1;public AbstractListenerWriteProcessor(String logPrefix) {_		this.logPrefix = logPrefix__		this.resultPublisher = new WriteResultPublisher(logPrefix)__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,write,processor,string,log,prefix,this,log,prefix,log,prefix,this,result,publisher,new,write,result,publisher,log,prefix
AbstractListenerWriteProcessor -> public AbstractListenerWriteProcessor(String logPrefix);1539999914;Create an instance with the given log prefix._@since 5.1;public AbstractListenerWriteProcessor(String logPrefix) {_		this.logPrefix = logPrefix__		this.resultPublisher = new WriteResultPublisher(logPrefix)__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,write,processor,string,log,prefix,this,log,prefix,log,prefix,this,result,publisher,new,write,result,publisher,log,prefix
AbstractListenerWriteProcessor -> public AbstractListenerWriteProcessor(String logPrefix);1545067161;Create an instance with the given log prefix._@since 5.1;public AbstractListenerWriteProcessor(String logPrefix) {_		this.logPrefix = logPrefix__		this.resultPublisher = new WriteResultPublisher(logPrefix)__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,abstract,listener,write,processor,string,log,prefix,this,log,prefix,log,prefix,this,result,publisher,new,write,result,publisher,log,prefix
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1481583450;Called when the current data should be released.;protected abstract void releaseData()_;called,when,the,current,data,should,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1481755387;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1485810955;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1490793036;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1493025457;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1496323185;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1496323735;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1498780456;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1511293325;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1511318790;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1511411136;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> protected abstract void releaseData()_;1511450555;Called when the current received data item can be released.;protected abstract void releaseData()_;called,when,the,current,received,data,item,can,be,released;protected,abstract,void,release,data
AbstractListenerWriteProcessor -> public void cancel();1481755387;Listeners can call this method to cancel further writing.;public void cancel() {_		this.subscription.cancel()__	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1485810955;Listeners can call this method to cancel further writing.;public void cancel() {_		this.subscription.cancel()__	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1490793036;Listeners can call this method to cancel further writing.;public void cancel() {_		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1493025457;Listeners can call this method to cancel further writing.;public void cancel() {_		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1496323185;Listeners can call this method to cancel further writing.;public void cancel() {_		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1496323735;Listeners can call this method to cancel further writing.;public void cancel() {_		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1498780456;Listeners can call this method to cancel further writing.;public void cancel() {_		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1511293325;Listeners can call this method to cancel further writing.;public void cancel() {_		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};listeners,can,call,this,method,to,cancel,further,writing;public,void,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1511450555;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		this.logger.trace("Received request to cancel")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,this,logger,trace,received,request,to,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1511452503;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		this.logger.trace("Received request to cancel")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,this,logger,trace,received,request,to,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1523471247;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		this.logger.trace("Received request to cancel")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,this,logger,trace,received,request,to,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1523471247;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		this.logger.trace("Received request to cancel")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,this,logger,trace,received,request,to,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1530174524;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		this.logger.trace("Received request to cancel")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,this,logger,trace,received,request,to,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1530174524;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		logger.trace("Received request to cancel")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,logger,trace,received,request,to,cancel,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1530906258;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		logger.trace(getLogPrefix() + "Cancellation")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,logger,trace,get,log,prefix,cancellation,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1530912796;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		rsWriteLogger.trace(getLogPrefix() + "Cancellation")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,rs,write,logger,trace,get,log,prefix,cancellation,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1531942370;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		rsWriteLogger.trace(getLogPrefix() + "Cancellation")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,rs,write,logger,trace,get,log,prefix,cancellation,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1532436274;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		rsWriteLogger.trace(getLogPrefix() + "Cancellation")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,rs,write,logger,trace,get,log,prefix,cancellation,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1539999914;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		rsWriteLogger.trace(getLogPrefix() + "Cancellation")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,rs,write,logger,trace,get,log,prefix,cancellation,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> public void cancel();1545067161;Invoked during an error or completion callback from the underlying_container to cancel the upstream subscription.;public void cancel() {_		rsWriteLogger.trace(getLogPrefix() + "Cancellation")__		if (this.subscription != null) {_			this.subscription.cancel()__		}_	};invoked,during,an,error,or,completion,callback,from,the,underlying,container,to,cancel,the,upstream,subscription;public,void,cancel,rs,write,logger,trace,get,log,prefix,cancellation,if,this,subscription,null,this,subscription,cancel
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1523471247;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1530174524;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1530174524;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1530906258;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1530912796;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1531942370;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1532436274;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1539999914;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> @Deprecated 	protected void writingPaused();1545067161;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op._@deprecated originally introduced for Undertow to stop write notifications_when no data is available, but deprecated as of as of 5.0.6 since constant_switching on every requested item causes a significant slowdown.;@Deprecated_	protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op,deprecated,originally,introduced,for,undertow,to,stop,write,notifications,when,no,data,is,available,but,deprecated,as,of,as,of,5,0,6,since,constant,switching,on,every,requested,item,causes,a,significant,slowdown;deprecated,protected,void,writing,paused
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1496323735;Invoked when an error happens while writing._<p>Defaults to no-op. Servlet 3.1 based implementations will receive_{@code javax.servlet.WriteListener#onError(Throwable)} event.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,error,happens,while,writing,p,defaults,to,no,op,servlet,3,1,based,implementations,will,receive,code,javax,servlet,write,listener,on,error,throwable,event;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1498780456;Invoked when an error happens while writing._<p>Defaults to no-op. Servlet 3.1 based implementations will receive_{@code javax.servlet.WriteListener#onError(Throwable)} event.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,error,happens,while,writing,p,defaults,to,no,op,servlet,3,1,based,implementations,will,receive,code,javax,servlet,write,listener,on,error,throwable,event;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1511293325;Invoked when an error happens while writing._<p>Defaults to no-op. Servlet 3.1 based implementations will receive_{@code javax.servlet.WriteListener#onError(Throwable)} event.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,error,happens,while,writing,p,defaults,to,no,op,servlet,3,1,based,implementations,will,receive,code,javax,servlet,write,listener,on,error,throwable,event;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1511318790;Invoked when an error happens while writing._<p>Defaults to no-op. Servlet 3.1 based implementations will receive_{@code javax.servlet.WriteListener#onError(Throwable)} event.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,error,happens,while,writing,p,defaults,to,no,op,servlet,3,1,based,implementations,will,receive,code,javax,servlet,write,listener,on,error,throwable,event;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1511411136;Invoked when an error happens while writing._<p>Defaults to no-op. Servlet 3.1 based implementations will receive_{@code javax.servlet.WriteListener#onError(Throwable)} event.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,error,happens,while,writing,p,defaults,to,no,op,servlet,3,1,based,implementations,will,receive,code,javax,servlet,write,listener,on,error,throwable,event;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1511450555;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1511452503;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1523471247;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1523471247;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1530174524;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1530174524;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1530906258;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1530912796;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1531942370;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1532436274;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1539999914;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> protected void writingFailed(Throwable ex);1545067161;Invoked when an I/O error occurs during a write. Sub-classes may choose_to ignore this if they know the underlying API will provide an error_notification in a container thread._<p>Defaults to no-op.;protected void writingFailed(Throwable ex) {_	};invoked,when,an,i,o,error,occurs,during,a,write,sub,classes,may,choose,to,ignore,this,if,they,know,the,underlying,api,will,provide,an,error,notification,in,a,container,thread,p,defaults,to,no,op;protected,void,writing,failed,throwable,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1511411136;Notify of an error. This can come from the upstream write Publisher or_from sub-classes as a result of an I/O error.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};notify,of,an,error,this,can,come,from,the,upstream,write,publisher,or,from,sub,classes,as,a,result,of,an,i,o,error;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1511450555;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1511452503;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1523471247;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1523471247;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1530174524;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1530174524;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace("Received onError: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,received,on,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1530906258;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (logger.isTraceEnabled()) {_			logger.trace(getLogPrefix() + "Write source error: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,logger,is,trace,enabled,logger,trace,get,log,prefix,write,source,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1530912796;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "Write source error: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,write,source,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1531942370;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "Write source error: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,write,source,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1532436274;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "Write source error: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,write,source,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1539999914;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "Write source error: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,write,source,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> @Override 	public final void onError(Throwable ex);1545067161;Error signal from the upstream, write Publisher. This is also used by_sub-classes to delegate error notifications from the container.;@Override_	public final void onError(Throwable ex) {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "Write source error: " + ex)__		}_		this.state.get().onError(this, ex)__	};error,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,error,notifications,from,the,container;override,public,final,void,on,error,throwable,ex,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,write,source,error,ex,this,state,get,on,error,this,ex
AbstractListenerWriteProcessor -> protected void writingPaused();1511452503;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op.;protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op;protected,void,writing,paused
AbstractListenerWriteProcessor -> protected void writingPaused();1523471247;Invoked after the current data has been written and before requesting_the next item from the upstream, write Publisher._<p>The default implementation is a no-op.;protected void writingPaused() {_	};invoked,after,the,current,data,has,been,written,and,before,requesting,the,next,item,from,the,upstream,write,publisher,p,the,default,implementation,is,a,no,op;protected,void,writing,paused
AbstractListenerWriteProcessor -> public String getLogPrefix();1530906258;Create an instance with the given log prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerWriteProcessor -> public String getLogPrefix();1530912796;Create an instance with the given log prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerWriteProcessor -> public String getLogPrefix();1531942370;Create an instance with the given log prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerWriteProcessor -> public String getLogPrefix();1532436274;Create an instance with the given log prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerWriteProcessor -> public String getLogPrefix();1539999914;Create an instance with the given log prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerWriteProcessor -> public String getLogPrefix();1545067161;Create an instance with the given log prefix._@since 5.1;public String getLogPrefix() {_		return this.logPrefix__	};create,an,instance,with,the,given,log,prefix,since,5,1;public,string,get,log,prefix,return,this,log,prefix
AbstractListenerWriteProcessor -> protected void receiveData(T data);1481583450;Called when a data is received via {@link Subscriber#onNext(Object)}_@param data the data that was received.;protected void receiveData(T data) {_		Assert.state(this.currentData == null)__		this.currentData = data__	};called,when,a,data,is,received,via,link,subscriber,on,next,object,param,data,the,data,that,was,received;protected,void,receive,data,t,data,assert,state,this,current,data,null,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1481755387;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		Assert.state(this.currentData == null)__		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,assert,state,this,current,data,null,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1485810955;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1490793036;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1493025457;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1496323185;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1496323735;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1498780456;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> protected void receiveData(T data);1511293325;Called when a data item is received via {@link Subscriber#onNext(Object)};protected void receiveData(T data) {_		if (this.currentData != null) {_			throw new IllegalStateException("Current data not processed yet: " + this.currentData)__		}_		this.currentData = data__	};called,when,a,data,item,is,received,via,link,subscriber,on,next,object;protected,void,receive,data,t,data,if,this,current,data,null,throw,new,illegal,state,exception,current,data,not,processed,yet,this,current,data,this,current,data,data
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1511411136;Notify of completion. This can come from the upstream write Publisher or_from sub-classes as a result of an I/O completion event.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};notify,of,completion,this,can,come,from,the,upstream,write,publisher,or,from,sub,classes,as,a,result,of,an,i,o,completion,event;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1511450555;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1511452503;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1523471247;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1523471247;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1530174524;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1530174524;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		logger.trace("Received onComplete")__		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,logger,trace,received,on,complete,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1530906258;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		if (logger.isTraceEnabled()) {_			logger.trace(getLogPrefix() + "No more items to write")__		}_		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,if,logger,is,trace,enabled,logger,trace,get,log,prefix,no,more,items,to,write,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1530912796;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "No more items to write")__		}_		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,no,more,items,to,write,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1531942370;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "No more items to write")__		}_		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,no,more,items,to,write,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1532436274;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "No more items to write")__		}_		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,no,more,items,to,write,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1539999914;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "No more items to write")__		}_		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,no,more,items,to,write,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> @Override 	public final void onComplete();1545067161;Completion signal from the upstream, write Publisher. This is also used_by sub-classes to delegate completion notifications from the container.;@Override_	public final void onComplete() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "No more items to write")__		}_		this.state.get().onComplete(this)__	};completion,signal,from,the,upstream,write,publisher,this,is,also,used,by,sub,classes,to,delegate,completion,notifications,from,the,container;override,public,final,void,on,complete,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,no,more,items,to,write,this,state,get,on,complete,this
AbstractListenerWriteProcessor -> protected abstract void discardData(T data)_;1539999914;Invoked after any error (either from the upstream write Publisher, or_from I/O operations to the underlying server) and cancellation_to discard in-flight data that was in_the process of being written when the error took place._@param data the data to be released_@since 5.1.2;protected abstract void discardData(T data)_;invoked,after,any,error,either,from,the,upstream,write,publisher,or,from,i,o,operations,to,the,underlying,server,and,cancellation,to,discard,in,flight,data,that,was,in,the,process,of,being,written,when,the,error,took,place,param,data,the,data,to,be,released,since,5,1,2;protected,abstract,void,discard,data,t,data
AbstractListenerWriteProcessor -> protected abstract void discardData(T data)_;1545067161;Invoked after any error (either from the upstream write Publisher, or_from I/O operations to the underlying server) and cancellation_to discard in-flight data that was in_the process of being written when the error took place._@param data the data to be released_@since 5.0.11;protected abstract void discardData(T data)_;invoked,after,any,error,either,from,the,upstream,write,publisher,or,from,i,o,operations,to,the,underlying,server,and,cancellation,to,discard,in,flight,data,that,was,in,the,process,of,being,written,when,the,error,took,place,param,data,the,data,to,be,released,since,5,0,11;protected,abstract,void,discard,data,t,data
AbstractListenerWriteProcessor -> public final void onWritePossible();1481583450;Called via a listener interface to indicate that writing is possible._@see WriteListener#onWritePossible()_@see org.xnio.ChannelListener#handleEvent(Channel);public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};called,via,a,listener,interface,to,indicate,that,writing,is,possible,see,write,listener,on,write,possible,see,org,xnio,channel,listener,handle,event,channel;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1481755387;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1485810955;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1490793036;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1493025457;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1496323185;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1496323735;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1498780456;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1511293325;Listeners can call this to notify when writing is possible.;public final void onWritePossible() {_		this.state.get().onWritePossible(this)__	};listeners,can,call,this,to,notify,when,writing,is,possible;public,final,void,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1511450555;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		this.logger.trace("Received onWritePossible")__		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,this,logger,trace,received,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1511452503;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		this.logger.trace("Received onWritePossible")__		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,this,logger,trace,received,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1523471247;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		this.logger.trace("Received onWritePossible")__		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,this,logger,trace,received,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1523471247;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		this.logger.trace("Received onWritePossible")__		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,this,logger,trace,received,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1530174524;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		this.logger.trace("Received onWritePossible")__		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,this,logger,trace,received,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1530174524;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		logger.trace("Received onWritePossible")__		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,logger,trace,received,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1530906258;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		if (logger.isTraceEnabled()) {_			logger.trace(getLogPrefix() + "onWritePossible")__		}_		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,if,logger,is,trace,enabled,logger,trace,get,log,prefix,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1530912796;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "onWritePossible")__		}_		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1531942370;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "onWritePossible")__		}_		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1532436274;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "onWritePossible")__		}_		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1539999914;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "onWritePossible")__		}_		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,on,write,possible,this,state,get,on,write,possible,this
AbstractListenerWriteProcessor -> public final void onWritePossible();1545067161;Invoked when writing is possible, either in the same thread after a check_via {@link #isWritePossible()}, or as a callback from the underlying_container.;public final void onWritePossible() {_		if (rsWriteLogger.isTraceEnabled()) {_			rsWriteLogger.trace(getLogPrefix() + "onWritePossible")__		}_		this.state.get().onWritePossible(this)__	};invoked,when,writing,is,possible,either,in,the,same,thread,after,a,check,via,link,is,write,possible,or,as,a,callback,from,the,underlying,container;public,final,void,on,write,possible,if,rs,write,logger,is,trace,enabled,rs,write,logger,trace,get,log,prefix,on,write,possible,this,state,get,on,write,possible,this
