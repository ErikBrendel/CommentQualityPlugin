commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public MediaType getContentType() {     if (this.cachedContentType != null) {         return this.cachedContentType.     } else {         MediaType contentType = super.getContentType().         this.cachedContentType = contentType.         return contentType.     } }
false;public;1;5;;@Override public List<String> get(Object key) {     List<String> values = this.headers.get(key).     return (values != null ? Collections.unmodifiableList(values) : null). }
false;public;2;4;;@Override public void add(String headerName, @Nullable String headerValue) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void addAll(String key, List<? extends String> values) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void addAll(MultiValueMap<String, String> values) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void set(String headerName, @Nullable String headerValue) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void setAll(Map<String, String> values) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Map<String, String> toSingleValueMap() {     return Collections.unmodifiableMap(this.headers.toSingleValueMap()). }
false;public;0;4;;@Override public Set<String> keySet() {     return Collections.unmodifiableSet(this.headers.keySet()). }
false;public;2;4;;@Override public List<String> put(String key, List<String> value) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public List<String> remove(Object key) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void putAll(Map<? extends String, ? extends List<String>> map) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void clear() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Collection<List<String>> values() {     return Collections.unmodifiableCollection(this.headers.values()). }
false;public;0;6;;@Override public Set<Entry<String, List<String>>> entrySet() {     return Collections.unmodifiableSet(this.headers.entrySet().stream().map(AbstractMap.SimpleImmutableEntry::new).collect(Collectors.toSet())). }
