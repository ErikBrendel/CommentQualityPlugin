commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the default HTTP Status to use for redirects.  * <p>By default this is {@link HttpStatus#SEE_OTHER}.  * @param status the 3xx redirect status to use  */ ;/**  * Set the default HTTP Status to use for redirects.  * <p>By default this is {@link HttpStatus#SEE_OTHER}.  * @param status the 3xx redirect status to use  */ public void setRedirectStatus(HttpStatus status) {     Assert.notNull(status, "Property 'redirectStatus' is required").     Assert.isTrue(status.is3xxRedirection(), "Not a redirect status code").     this.redirectStatus = status. }
true;public;0;3;/**  * Return the configured redirect status.  */ ;/**  * Return the configured redirect status.  */ public HttpStatus getRedirectStatus() {     return this.redirectStatus. }
false;protected;3;7;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     response = RelativeRedirectResponseWrapper.wrapIfNecessary(response, this.redirectStatus).     filterChain.doFilter(request, response). }
