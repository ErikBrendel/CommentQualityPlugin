commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the parameter name to look for HTTP methods.  * @see #DEFAULT_METHOD_PARAM  */ ;/**  * Set the parameter name to look for HTTP methods.  * @see #DEFAULT_METHOD_PARAM  */ public void setMethodParam(String methodParam) {     Assert.hasText(methodParam, "'methodParam' must not be empty").     this.methodParam = methodParam. }
false;protected;3;18;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     HttpServletRequest requestToUse = request.     if ("POST".equals(request.getMethod()) && request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == null) {         String paramValue = request.getParameter(this.methodParam).         if (StringUtils.hasLength(paramValue)) {             String method = paramValue.toUpperCase(Locale.ENGLISH).             if (ALLOWED_METHODS.contains(method)) {                 requestToUse = new HttpMethodRequestWrapper(request, method).             }         }     }     filterChain.doFilter(requestToUse, response). }
false;public;0;4;;@Override public String getMethod() {     return this.method. }
