commented;modifiers;parameterAmount;loc;comment;code
true;public,final;2;4;/**  * This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}  * with the wrapped request factory provided to the  * {@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.  */ ;/**  * This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}  * with the wrapped request factory provided to the  * {@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.  */ @Override public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {     return createRequest(uri, httpMethod, this.requestFactory). }
true;protected,abstract;3;2;/**  * Create a new {@link ClientHttpRequest} for the specified URI and HTTP method  * by using the passed-on request factory.  * <p>Called from {@link #createRequest(URI, HttpMethod)}.  * @param uri the URI to create a request for  * @param httpMethod the HTTP method to execute  * @param requestFactory the wrapped request factory  * @return the created request  * @throws IOException in case of I/O errors  */ ;/**  * Create a new {@link ClientHttpRequest} for the specified URI and HTTP method  * by using the passed-on request factory.  * <p>Called from {@link #createRequest(URI, HttpMethod)}.  * @param uri the URI to create a request for  * @param httpMethod the HTTP method to execute  * @param requestFactory the wrapped request factory  * @return the created request  * @throws IOException in case of I/O errors  */ protected abstract ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException.
