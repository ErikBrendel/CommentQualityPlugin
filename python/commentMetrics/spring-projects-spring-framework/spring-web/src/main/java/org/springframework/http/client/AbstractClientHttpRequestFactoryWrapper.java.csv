# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractClientHttpRequestFactoryWrapper -> protected abstract ClientHttpRequest createRequest( 			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;1328020251;Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the_passed-on request factory._<p>Called from {@link #createRequest(URI, HttpMethod)}._@param uri the URI to create a request for_@param httpMethod the HTTP method to execute_@param requestFactory the wrapped request factory_@return the created request_@throws IOException in case of I/O errors;protected abstract ClientHttpRequest createRequest(_			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;create,a,new,link,client,http,request,for,the,specified,uri,and,http,method,by,using,the,passed,on,request,factory,p,called,from,link,create,request,uri,http,method,param,uri,the,uri,to,create,a,request,for,param,http,method,the,http,method,to,execute,param,request,factory,the,wrapped,request,factory,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,abstract,client,http,request,create,request,uri,uri,http,method,http,method,client,http,request,factory,request,factory,throws,ioexception
AbstractClientHttpRequestFactoryWrapper -> protected abstract ClientHttpRequest createRequest( 			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;1356735495;Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the_passed-on request factory._<p>Called from {@link #createRequest(URI, HttpMethod)}._@param uri the URI to create a request for_@param httpMethod the HTTP method to execute_@param requestFactory the wrapped request factory_@return the created request_@throws IOException in case of I/O errors;protected abstract ClientHttpRequest createRequest(_			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;create,a,new,link,client,http,request,for,the,specified,uri,and,http,method,by,using,the,passed,on,request,factory,p,called,from,link,create,request,uri,http,method,param,uri,the,uri,to,create,a,request,for,param,http,method,the,http,method,to,execute,param,request,factory,the,wrapped,request,factory,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,abstract,client,http,request,create,request,uri,uri,http,method,http,method,client,http,request,factory,request,factory,throws,ioexception
AbstractClientHttpRequestFactoryWrapper -> protected abstract ClientHttpRequest createRequest( 			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;1357119239;Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the_passed-on request factory._<p>Called from {@link #createRequest(URI, HttpMethod)}._@param uri the URI to create a request for_@param httpMethod the HTTP method to execute_@param requestFactory the wrapped request factory_@return the created request_@throws IOException in case of I/O errors;protected abstract ClientHttpRequest createRequest(_			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;create,a,new,link,client,http,request,for,the,specified,uri,and,http,method,by,using,the,passed,on,request,factory,p,called,from,link,create,request,uri,http,method,param,uri,the,uri,to,create,a,request,for,param,http,method,the,http,method,to,execute,param,request,factory,the,wrapped,request,factory,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,abstract,client,http,request,create,request,uri,uri,http,method,http,method,client,http,request,factory,request,factory,throws,ioexception
AbstractClientHttpRequestFactoryWrapper -> protected abstract ClientHttpRequest createRequest( 			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;1368482696;Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the_passed-on request factory._<p>Called from {@link #createRequest(URI, HttpMethod)}._@param uri the URI to create a request for_@param httpMethod the HTTP method to execute_@param requestFactory the wrapped request factory_@return the created request_@throws IOException in case of I/O errors;protected abstract ClientHttpRequest createRequest(_			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;create,a,new,link,client,http,request,for,the,specified,uri,and,http,method,by,using,the,passed,on,request,factory,p,called,from,link,create,request,uri,http,method,param,uri,the,uri,to,create,a,request,for,param,http,method,the,http,method,to,execute,param,request,factory,the,wrapped,request,factory,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,abstract,client,http,request,create,request,uri,uri,http,method,http,method,client,http,request,factory,request,factory,throws,ioexception
AbstractClientHttpRequestFactoryWrapper -> protected abstract ClientHttpRequest createRequest( 			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;1449660489;Create a new {@link ClientHttpRequest} for the specified URI and HTTP method_by using the passed-on request factory._<p>Called from {@link #createRequest(URI, HttpMethod)}._@param uri the URI to create a request for_@param httpMethod the HTTP method to execute_@param requestFactory the wrapped request factory_@return the created request_@throws IOException in case of I/O errors;protected abstract ClientHttpRequest createRequest(_			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException_;create,a,new,link,client,http,request,for,the,specified,uri,and,http,method,by,using,the,passed,on,request,factory,p,called,from,link,create,request,uri,http,method,param,uri,the,uri,to,create,a,request,for,param,http,method,the,http,method,to,execute,param,request,factory,the,wrapped,request,factory,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,abstract,client,http,request,create,request,uri,uri,http,method,http,method,client,http,request,factory,request,factory,throws,ioexception
AbstractClientHttpRequestFactoryWrapper -> @Override 	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException;1356735495;This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}_with the wrapped request factory provided to the_{@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.;@Override_	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {_		return createRequest(uri, httpMethod, requestFactory)__	};this,implementation,simply,calls,link,create,request,uri,http,method,client,http,request,factory,with,the,wrapped,request,factory,provided,to,the,linkplain,abstract,client,http,request,factory,wrapper,client,http,request,factory,constructor;override,public,final,client,http,request,create,request,uri,uri,http,method,http,method,throws,ioexception,return,create,request,uri,http,method,request,factory
AbstractClientHttpRequestFactoryWrapper -> @Override 	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException;1368482696;This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}_with the wrapped request factory provided to the_{@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.;@Override_	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {_		return createRequest(uri, httpMethod, requestFactory)__	};this,implementation,simply,calls,link,create,request,uri,http,method,client,http,request,factory,with,the,wrapped,request,factory,provided,to,the,linkplain,abstract,client,http,request,factory,wrapper,client,http,request,factory,constructor;override,public,final,client,http,request,create,request,uri,uri,http,method,http,method,throws,ioexception,return,create,request,uri,http,method,request,factory
AbstractClientHttpRequestFactoryWrapper -> @Override 	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException;1449660489;This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}_with the wrapped request factory provided to the_{@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.;@Override_	public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {_		return createRequest(uri, httpMethod, this.requestFactory)__	};this,implementation,simply,calls,link,create,request,uri,http,method,client,http,request,factory,with,the,wrapped,request,factory,provided,to,the,linkplain,abstract,client,http,request,factory,wrapper,client,http,request,factory,constructor;override,public,final,client,http,request,create,request,uri,uri,http,method,http,method,throws,ioexception,return,create,request,uri,http,method,this,request,factory
AbstractClientHttpRequestFactoryWrapper -> protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory);1328020251;Creates a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory._@param requestFactory the request factory to be wrapped;protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};creates,a,code,abstract,client,http,request,factory,wrapper,wrapping,the,given,request,factory,param,request,factory,the,request,factory,to,be,wrapped;protected,abstract,client,http,request,factory,wrapper,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
AbstractClientHttpRequestFactoryWrapper -> protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory);1356735495;Creates a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory._@param requestFactory the request factory to be wrapped;protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};creates,a,code,abstract,client,http,request,factory,wrapper,wrapping,the,given,request,factory,param,request,factory,the,request,factory,to,be,wrapped;protected,abstract,client,http,request,factory,wrapper,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
AbstractClientHttpRequestFactoryWrapper -> protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory);1357119239;Creates a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory._@param requestFactory the request factory to be wrapped;protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};creates,a,code,abstract,client,http,request,factory,wrapper,wrapping,the,given,request,factory,param,request,factory,the,request,factory,to,be,wrapped;protected,abstract,client,http,request,factory,wrapper,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
AbstractClientHttpRequestFactoryWrapper -> protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory);1368482696;Creates a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory._@param requestFactory the request factory to be wrapped;protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};creates,a,code,abstract,client,http,request,factory,wrapper,wrapping,the,given,request,factory,param,request,factory,the,request,factory,to,be,wrapped;protected,abstract,client,http,request,factory,wrapper,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
AbstractClientHttpRequestFactoryWrapper -> protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory);1449660489;Create a {@code AbstractClientHttpRequestFactoryWrapper} wrapping the given request factory._@param requestFactory the request factory to be wrapped;protected AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null")__		this.requestFactory = requestFactory__	};create,a,code,abstract,client,http,request,factory,wrapper,wrapping,the,given,request,factory,param,request,factory,the,request,factory,to,be,wrapped;protected,abstract,client,http,request,factory,wrapper,client,http,request,factory,request,factory,assert,not,null,request,factory,client,http,request,factory,must,not,be,null,this,request,factory,request,factory
AbstractClientHttpRequestFactoryWrapper -> public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException;1328020251;This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}_with the wrapped request factory provided to the_{@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.;public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {_		return createRequest(uri, httpMethod, requestFactory)__	};this,implementation,simply,calls,link,create,request,uri,http,method,client,http,request,factory,with,the,wrapped,request,factory,provided,to,the,linkplain,abstract,client,http,request,factory,wrapper,client,http,request,factory,constructor;public,final,client,http,request,create,request,uri,uri,http,method,http,method,throws,ioexception,return,create,request,uri,http,method,request,factory
AbstractClientHttpRequestFactoryWrapper -> public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException;1357119239;This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}_with the wrapped request factory provided to the_{@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}.;public final ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {_		return createRequest(uri, httpMethod, requestFactory)__	};this,implementation,simply,calls,link,create,request,uri,http,method,client,http,request,factory,with,the,wrapped,request,factory,provided,to,the,linkplain,abstract,client,http,request,factory,wrapper,client,http,request,factory,constructor;public,final,client,http,request,create,request,uri,uri,http,method,http,method,throws,ioexception,return,create,request,uri,http,method,request,factory
