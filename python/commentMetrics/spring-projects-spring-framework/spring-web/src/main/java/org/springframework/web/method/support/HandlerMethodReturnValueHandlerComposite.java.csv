commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return a read-only list with the registered handlers, or an empty list.  */ ;/**  * Return a read-only list with the registered handlers, or an empty list.  */ public List<HandlerMethodReturnValueHandler> getHandlers() {     return Collections.unmodifiableList(this.returnValueHandlers). }
true;public;1;4;/**  * Whether the given {@linkplain MethodParameter method return type} is supported by any registered  * {@link HandlerMethodReturnValueHandler}.  */ ;/**  * Whether the given {@linkplain MethodParameter method return type} is supported by any registered  * {@link HandlerMethodReturnValueHandler}.  */ @Override public boolean supportsReturnType(MethodParameter returnType) {     return getReturnValueHandler(returnType) != null. }
false;private;1;9;;@Nullable private HandlerMethodReturnValueHandler getReturnValueHandler(MethodParameter returnType) {     for (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {         if (handler.supportsReturnType(returnType)) {             return handler.         }     }     return null. }
true;public;4;10;/**  * Iterate over registered {@link HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers} and invoke the one that supports it.  * @throws IllegalStateException if no suitable {@link HandlerMethodReturnValueHandler} is found.  */ ;/**  * Iterate over registered {@link HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers} and invoke the one that supports it.  * @throws IllegalStateException if no suitable {@link HandlerMethodReturnValueHandler} is found.  */ @Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {     HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType).     if (handler == null) {         throw new IllegalArgumentException("Unknown return value type: " + returnType.getParameterType().getName()).     }     handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest). }
false;private;2;13;;@Nullable private HandlerMethodReturnValueHandler selectHandler(@Nullable Object value, MethodParameter returnType) {     boolean isAsyncValue = isAsyncReturnValue(value, returnType).     for (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {         if (isAsyncValue && !(handler instanceof AsyncHandlerMethodReturnValueHandler)) {             continue.         }         if (handler.supportsReturnType(returnType)) {             return handler.         }     }     return null. }
false;private;2;9;;private boolean isAsyncReturnValue(@Nullable Object value, MethodParameter returnType) {     for (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {         if (handler instanceof AsyncHandlerMethodReturnValueHandler && ((AsyncHandlerMethodReturnValueHandler) handler).isAsyncReturnValue(value, returnType)) {             return true.         }     }     return false. }
true;public;1;4;/**  * Add the given {@link HandlerMethodReturnValueHandler}.  */ ;/**  * Add the given {@link HandlerMethodReturnValueHandler}.  */ public HandlerMethodReturnValueHandlerComposite addHandler(HandlerMethodReturnValueHandler handler) {     this.returnValueHandlers.add(handler).     return this. }
true;public;1;8;/**  * Add the given {@link HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers}.  */ ;/**  * Add the given {@link HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers}.  */ public HandlerMethodReturnValueHandlerComposite addHandlers(@Nullable List<? extends HandlerMethodReturnValueHandler> handlers) {     if (handlers != null) {         this.returnValueHandlers.addAll(handlers).     }     return this. }
