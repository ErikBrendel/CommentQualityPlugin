commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;11;/**  * Apply {@link Flux#reduce(Object, BiFunction) reduce} on the body, count  * the number of bytes produced, release data buffers without writing, and  * set the {@literal Content-Length} header.  */ ;/**  * Apply {@link Flux#reduce(Object, BiFunction) reduce} on the body, count  * the number of bytes produced, release data buffers without writing, and  * set the {@literal Content-Length} header.  */ @Override public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {     return Flux.from(body).reduce(0, (current, buffer) -> {         int next = current + buffer.readableByteCount().         DataBufferUtils.release(buffer).         return next.     }).doOnNext(count -> getHeaders().setContentLength(count)).then(). }
true;public,final;1;6;/**  * Invoke {@link #setComplete()} without writing.  * <p>RFC 7302 allows HTTP HEAD response without content-length and it's not  * something that can be computed on a streaming response.  */ ;/**  * Invoke {@link #setComplete()} without writing.  * <p>RFC 7302 allows HTTP HEAD response without content-length and it's not  * something that can be computed on a streaming response.  */ @Override public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {     // RFC 7302 allows HEAD without content-length.     return setComplete(). }
