# id;timestamp;commentText;codeText;commentWords;codeWords
HttpHeadResponseDecorator -> @Override 	public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body);1506540329;Apply {@link Flux#reduce(Object, BiFunction) reduce} on the body, count_the number of bytes produced, release data buffers without writing, and_set the {@literal Content-Length} header.;@Override_	public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {__		__		return getDelegate().writeWith(_				Flux.from(body)_						.reduce(0, (current, buffer) -> {_							int next = current + buffer.readableByteCount()__							DataBufferUtils.release(buffer)__							return next__						})_						.doOnNext(count -> getHeaders().setContentLength(count))_						.then(Mono.empty()))__	};apply,link,flux,reduce,object,bi,function,reduce,on,the,body,count,the,number,of,bytes,produced,release,data,buffers,without,writing,and,set,the,literal,content,length,header;override,public,final,mono,void,write,with,publisher,extends,data,buffer,body,return,get,delegate,write,with,flux,from,body,reduce,0,current,buffer,int,next,current,buffer,readable,byte,count,data,buffer,utils,release,buffer,return,next,do,on,next,count,get,headers,set,content,length,count,then,mono,empty
HttpHeadResponseDecorator -> @Override 	public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body);1524865018;Apply {@link Flux#reduce(Object, BiFunction) reduce} on the body, count_the number of bytes produced, release data buffers without writing, and_set the {@literal Content-Length} header.;@Override_	public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {_		_		return getDelegate().writeWith(_				Flux.from(body)_						.reduce(0, (current, buffer) -> {_							int next = current + buffer.readableByteCount()__							DataBufferUtils.release(buffer)__							return next__						})_						.doOnNext(count -> getHeaders().setContentLength(count))_						.then(Mono.empty()))__	};apply,link,flux,reduce,object,bi,function,reduce,on,the,body,count,the,number,of,bytes,produced,release,data,buffers,without,writing,and,set,the,literal,content,length,header;override,public,final,mono,void,write,with,publisher,extends,data,buffer,body,return,get,delegate,write,with,flux,from,body,reduce,0,current,buffer,int,next,current,buffer,readable,byte,count,data,buffer,utils,release,buffer,return,next,do,on,next,count,get,headers,set,content,length,count,then,mono,empty
HttpHeadResponseDecorator -> @Override 	public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body);1530906264;Apply {@link Flux#reduce(Object, BiFunction) reduce} on the body, count_the number of bytes produced, release data buffers without writing, and_set the {@literal Content-Length} header.;@Override_	public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {_		return Flux.from(body)_				.reduce(0, (current, buffer) -> {_					int next = current + buffer.readableByteCount()__					DataBufferUtils.release(buffer)__					return next__				})_				.doOnNext(count -> getHeaders().setContentLength(count))_				.then()__	};apply,link,flux,reduce,object,bi,function,reduce,on,the,body,count,the,number,of,bytes,produced,release,data,buffers,without,writing,and,set,the,literal,content,length,header;override,public,final,mono,void,write,with,publisher,extends,data,buffer,body,return,flux,from,body,reduce,0,current,buffer,int,next,current,buffer,readable,byte,count,data,buffer,utils,release,buffer,return,next,do,on,next,count,get,headers,set,content,length,count,then
HttpHeadResponseDecorator -> @Override 	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);1506540329;Invoke {@link #setComplete()} without writing.__<p>RFC 7302 allows HTTP HEAD response without content-length and it's not_something that can be computed on a streaming response.;@Override_	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {_		_		_		return setComplete()__	};invoke,link,set,complete,without,writing,p,rfc,7302,allows,http,head,response,without,content,length,and,it,s,not,something,that,can,be,computed,on,a,streaming,response;override,public,final,mono,void,write,and,flush,with,publisher,extends,publisher,extends,data,buffer,body,return,set,complete
HttpHeadResponseDecorator -> @Override 	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);1524865018;Invoke {@link #setComplete()} without writing._<p>RFC 7302 allows HTTP HEAD response without content-length and it's not_something that can be computed on a streaming response.;@Override_	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {_		_		_		return setComplete()__	};invoke,link,set,complete,without,writing,p,rfc,7302,allows,http,head,response,without,content,length,and,it,s,not,something,that,can,be,computed,on,a,streaming,response;override,public,final,mono,void,write,and,flush,with,publisher,extends,publisher,extends,data,buffer,body,return,set,complete
HttpHeadResponseDecorator -> @Override 	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);1530906264;Invoke {@link #setComplete()} without writing._<p>RFC 7302 allows HTTP HEAD response without content-length and it's not_something that can be computed on a streaming response.;@Override_	public final Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {_		_		_		return setComplete()__	};invoke,link,set,complete,without,writing,p,rfc,7302,allows,http,head,response,without,content,length,and,it,s,not,something,that,can,be,computed,on,a,streaming,response;override,public,final,mono,void,write,and,flush,with,publisher,extends,publisher,extends,data,buffer,body,return,set,complete
