commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure the {@link Executor} to use.  * <p>By default, initialized with a {@link QueuedThreadPool}.  * @param executor the executor to use  */ ;/**  * Configure the {@link Executor} to use.  * <p>By default, initialized with a {@link QueuedThreadPool}.  * @param executor the executor to use  */ public void setExecutor(@Nullable Executor executor) {     this.executor = executor. }
true;public;1;3;/**  * Configure the {@link ByteBufferPool} to use.  * <p>By default, initialized with a {@link MappedByteBufferPool}.  * @param byteBufferPool the {@link ByteBuffer} pool to use  */ ;/**  * Configure the {@link ByteBufferPool} to use.  * <p>By default, initialized with a {@link MappedByteBufferPool}.  * @param byteBufferPool the {@link ByteBuffer} pool to use  */ public void setByteBufferPool(@Nullable ByteBufferPool byteBufferPool) {     this.byteBufferPool = byteBufferPool. }
true;public;1;3;/**  * Configure the {@link Scheduler} to use.  * <p>By default, initialized with a {@link ScheduledExecutorScheduler}.  * @param scheduler the {@link Scheduler} to use  */ ;/**  * Configure the {@link Scheduler} to use.  * <p>By default, initialized with a {@link ScheduledExecutorScheduler}.  * @param scheduler the {@link Scheduler} to use  */ public void setScheduler(@Nullable Scheduler scheduler) {     this.scheduler = scheduler. }
true;public;1;4;/**  * Configure the thread prefix to initialize {@link QueuedThreadPool} executor with. This  * is used only when a {@link Executor} instance isn't  * {@link #setExecutor(Executor) provided}.  * <p>By default set to "jetty-http".  * @param threadPrefix the thread prefix to use  */ ;/**  * Configure the thread prefix to initialize {@link QueuedThreadPool} executor with. This  * is used only when a {@link Executor} instance isn't  * {@link #setExecutor(Executor) provided}.  * <p>By default set to "jetty-http".  * @param threadPrefix the thread prefix to use  */ public void setThreadPrefix(String threadPrefix) {     Assert.notNull(threadPrefix, "Thread prefix is required").     this.threadPrefix = threadPrefix. }
true;public;0;4;/**  * Return the configured {@link Executor}.  */ ;/**  * Return the configured {@link Executor}.  */ @Nullable public Executor getExecutor() {     return this.executor. }
true;public;0;4;/**  * Return the configured {@link ByteBufferPool}.  */ ;/**  * Return the configured {@link ByteBufferPool}.  */ @Nullable public ByteBufferPool getByteBufferPool() {     return this.byteBufferPool. }
true;public;0;4;/**  * Return the configured {@link Scheduler}.  */ ;/**  * Return the configured {@link Scheduler}.  */ @Nullable public Scheduler getScheduler() {     return this.scheduler. }
false;public;0;23;;@Override public void afterPropertiesSet() throws Exception {     String name = this.threadPrefix + "@" + Integer.toHexString(hashCode()).     if (this.executor == null) {         QueuedThreadPool threadPool = new QueuedThreadPool().         threadPool.setName(name).         this.executor = threadPool.     }     if (this.byteBufferPool == null) {         this.byteBufferPool = new MappedByteBufferPool(2048, this.executor instanceof ThreadPool.SizedThreadPool ? ((ThreadPool.SizedThreadPool) executor).getMaxThreads() / 2 : ProcessorUtils.availableProcessors() * 2).     }     if (this.scheduler == null) {         this.scheduler = new ScheduledExecutorScheduler(name + "-scheduler", false).     }     if (this.executor instanceof LifeCycle) {         ((LifeCycle) this.executor).start().     }     this.scheduler.start(). }
false;public;0;19;;@Override public void destroy() throws Exception {     try {         if (this.executor instanceof LifeCycle) {             ((LifeCycle) this.executor).stop().         }     } catch (Throwable ex) {     // ignore     }     try {         if (this.scheduler != null) {             this.scheduler.stop().         }     } catch (Throwable ex) {     // ignore     } }
