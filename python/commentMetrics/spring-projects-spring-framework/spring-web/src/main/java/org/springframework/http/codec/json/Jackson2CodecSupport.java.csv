# id;timestamp;commentText;codeText;commentWords;codeWords
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1502891159;Sub-classes should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};sub,classes,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1507897402;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1529721864;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1530793695;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1530975243;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1531942370;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1536942003;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected List<MimeType> getMimeTypes();1536962806;Subclasses should expose this as "decodable" or "encodable" mime types.;protected List<MimeType> getMimeTypes() {_		return this.mimeTypes__	};subclasses,should,expose,this,as,decodable,or,encodable,mime,types;protected,list,mime,type,get,mime,types,return,this,mime,types
Jackson2CodecSupport -> protected JavaType getJavaType(Type type, Class<?> contextClass);1490122306;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.mapper.getTypeFactory()__		if (contextClass != null) {_			ResolvableType resolvedType = ResolvableType.forType(type)__			if (type instanceof TypeVariable) {_				ResolvableType resolvedTypeVariable = resolveVariable(_						(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__				if (resolvedTypeVariable != ResolvableType.NONE) {_					return typeFactory.constructType(resolvedTypeVariable.resolve())__				}_			}_			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {_				ParameterizedType parameterizedType = (ParameterizedType) type__				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length]__				Type[] typeArguments = parameterizedType.getActualTypeArguments()__				for (int i = 0_ i < typeArguments.length_ i++) {_					Type typeArgument = typeArguments[i]__					if (typeArgument instanceof TypeVariable) {_						ResolvableType resolvedTypeArgument = resolveVariable(_								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass))__						if (resolvedTypeArgument != ResolvableType.NONE) {_							generics[i] = resolvedTypeArgument.resolve()__						}_						else {_							generics[i] = ResolvableType.forType(typeArgument).resolve()__						}_					}_					else {_						generics[i] = ResolvableType.forType(typeArgument).resolve()__					}_				}_				return typeFactory.constructType(ResolvableType._						forClassWithGenerics(resolvedType.getRawClass(), generics).getType())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,mapper,get,type,factory,if,context,class,null,resolvable,type,resolved,type,resolvable,type,for,type,type,if,type,instanceof,type,variable,resolvable,type,resolved,type,variable,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,variable,resolvable,type,none,return,type,factory,construct,type,resolved,type,variable,resolve,else,if,type,instanceof,parameterized,type,resolved,type,has,unresolvable,generics,parameterized,type,parameterized,type,parameterized,type,type,class,generics,new,class,parameterized,type,get,actual,type,arguments,length,type,type,arguments,parameterized,type,get,actual,type,arguments,for,int,i,0,i,type,arguments,length,i,type,type,argument,type,arguments,i,if,type,argument,instanceof,type,variable,resolvable,type,resolved,type,argument,resolve,variable,type,variable,type,argument,resolvable,type,for,class,context,class,if,resolved,type,argument,resolvable,type,none,generics,i,resolved,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,return,type,factory,construct,type,resolvable,type,for,class,with,generics,resolved,type,get,raw,class,generics,get,type,return,type,factory,construct,type,type
Jackson2CodecSupport -> protected JavaType getJavaType(Type type, Class<?> contextClass);1490302386;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.mapper.getTypeFactory()__		if (contextClass != null) {_			ResolvableType resolvedType = ResolvableType.forType(type)__			if (type instanceof TypeVariable) {_				ResolvableType resolvedTypeVariable = resolveVariable(_						(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__				if (resolvedTypeVariable != ResolvableType.NONE) {_					return typeFactory.constructType(resolvedTypeVariable.resolve())__				}_			}_			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {_				ParameterizedType parameterizedType = (ParameterizedType) type__				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length]__				Type[] typeArguments = parameterizedType.getActualTypeArguments()__				for (int i = 0_ i < typeArguments.length_ i++) {_					Type typeArgument = typeArguments[i]__					if (typeArgument instanceof TypeVariable) {_						ResolvableType resolvedTypeArgument = resolveVariable(_								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass))__						if (resolvedTypeArgument != ResolvableType.NONE) {_							generics[i] = resolvedTypeArgument.resolve()__						}_						else {_							generics[i] = ResolvableType.forType(typeArgument).resolve()__						}_					}_					else {_						generics[i] = ResolvableType.forType(typeArgument).resolve()__					}_				}_				return typeFactory.constructType(ResolvableType._						forClassWithGenerics(resolvedType.getRawClass(), generics).getType())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,mapper,get,type,factory,if,context,class,null,resolvable,type,resolved,type,resolvable,type,for,type,type,if,type,instanceof,type,variable,resolvable,type,resolved,type,variable,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,variable,resolvable,type,none,return,type,factory,construct,type,resolved,type,variable,resolve,else,if,type,instanceof,parameterized,type,resolved,type,has,unresolvable,generics,parameterized,type,parameterized,type,parameterized,type,type,class,generics,new,class,parameterized,type,get,actual,type,arguments,length,type,type,arguments,parameterized,type,get,actual,type,arguments,for,int,i,0,i,type,arguments,length,i,type,type,argument,type,arguments,i,if,type,argument,instanceof,type,variable,resolvable,type,resolved,type,argument,resolve,variable,type,variable,type,argument,resolvable,type,for,class,context,class,if,resolved,type,argument,resolvable,type,none,generics,i,resolved,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,return,type,factory,construct,type,resolvable,type,for,class,with,generics,resolved,type,get,raw,class,generics,get,type,return,type,factory,construct,type,type
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper mapper);1490122306;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper mapper) {_		Assert.notNull(mapper, "ObjectMapper must not be null")__		this.mapper = mapper__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,mapper,assert,not,null,mapper,object,mapper,must,not,be,null,this,mapper,mapper
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper mapper);1490302386;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper mapper) {_		Assert.notNull(mapper, "ObjectMapper must not be null")__		this.mapper = mapper__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,mapper,assert,not,null,mapper,object,mapper,must,not,be,null,this,mapper,mapper
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1493935555;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1496259743;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1496837955;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1498659541;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1498771188;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1502891159;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1507897402;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1529721864;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1530793695;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1530975243;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1531942370;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1536942003;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
Jackson2CodecSupport -> protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes);1536962806;Constructor with a Jackson {@link ObjectMapper} to use.;protected Jackson2CodecSupport(ObjectMapper objectMapper, MimeType... mimeTypes) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?_				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES__	};constructor,with,a,jackson,link,object,mapper,to,use;protected,jackson2codec,support,object,mapper,object,mapper,mime,type,mime,types,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,this,mime,types,object,utils,is,empty,mime,types,collections,unmodifiable,list,arrays,as,list,mime,types
