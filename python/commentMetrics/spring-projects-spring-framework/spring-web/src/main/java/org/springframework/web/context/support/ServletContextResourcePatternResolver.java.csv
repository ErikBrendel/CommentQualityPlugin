# id;timestamp;commentText;codeText;commentWords;codeWords
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ServletContext servletContext);1328020251;Create a new ServletContextResourcePatternResolver._@param servletContext the ServletContext to load resources with_@see ServletContextResourceLoader#ServletContextResourceLoader(javax.servlet.ServletContext);public ServletContextResourcePatternResolver(ServletContext servletContext) {_		super(new ServletContextResourceLoader(servletContext))__	};create,a,new,servlet,context,resource,pattern,resolver,param,servlet,context,the,servlet,context,to,load,resources,with,see,servlet,context,resource,loader,servlet,context,resource,loader,javax,servlet,servlet,context;public,servlet,context,resource,pattern,resolver,servlet,context,servlet,context,super,new,servlet,context,resource,loader,servlet,context
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ServletContext servletContext);1356735495;Create a new ServletContextResourcePatternResolver._@param servletContext the ServletContext to load resources with_@see ServletContextResourceLoader#ServletContextResourceLoader(javax.servlet.ServletContext);public ServletContextResourcePatternResolver(ServletContext servletContext) {_		super(new ServletContextResourceLoader(servletContext))__	};create,a,new,servlet,context,resource,pattern,resolver,param,servlet,context,the,servlet,context,to,load,resources,with,see,servlet,context,resource,loader,servlet,context,resource,loader,javax,servlet,servlet,context;public,servlet,context,resource,pattern,resolver,servlet,context,servlet,context,super,new,servlet,context,resource,loader,servlet,context
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ServletContext servletContext);1368216700;Create a new ServletContextResourcePatternResolver._@param servletContext the ServletContext to load resources with_@see ServletContextResourceLoader#ServletContextResourceLoader(javax.servlet.ServletContext);public ServletContextResourcePatternResolver(ServletContext servletContext) {_		super(new ServletContextResourceLoader(servletContext))__	};create,a,new,servlet,context,resource,pattern,resolver,param,servlet,context,the,servlet,context,to,load,resources,with,see,servlet,context,resource,loader,servlet,context,resource,loader,javax,servlet,servlet,context;public,servlet,context,resource,pattern,resolver,servlet,context,servlet,context,super,new,servlet,context,resource,loader,servlet,context
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ServletContext servletContext);1385412762;Create a new ServletContextResourcePatternResolver._@param servletContext the ServletContext to load resources with_@see ServletContextResourceLoader#ServletContextResourceLoader(javax.servlet.ServletContext);public ServletContextResourcePatternResolver(ServletContext servletContext) {_		super(new ServletContextResourceLoader(servletContext))__	};create,a,new,servlet,context,resource,pattern,resolver,param,servlet,context,the,servlet,context,to,load,resources,with,see,servlet,context,resource,loader,servlet,context,resource,loader,javax,servlet,servlet,context;public,servlet,context,resource,pattern,resolver,servlet,context,servlet,context,super,new,servlet,context,resource,loader,servlet,context
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ServletContext servletContext);1427228652;Create a new ServletContextResourcePatternResolver._@param servletContext the ServletContext to load resources with_@see ServletContextResourceLoader#ServletContextResourceLoader(javax.servlet.ServletContext);public ServletContextResourcePatternResolver(ServletContext servletContext) {_		super(new ServletContextResourceLoader(servletContext))__	};create,a,new,servlet,context,resource,pattern,resolver,param,servlet,context,the,servlet,context,to,load,resources,with,see,servlet,context,resource,loader,servlet,context,resource,loader,javax,servlet,servlet,context;public,servlet,context,resource,pattern,resolver,servlet,context,servlet,context,super,new,servlet,context,resource,loader,servlet,context
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ServletContext servletContext);1467730834;Create a new ServletContextResourcePatternResolver._@param servletContext the ServletContext to load resources with_@see ServletContextResourceLoader#ServletContextResourceLoader(javax.servlet.ServletContext);public ServletContextResourcePatternResolver(ServletContext servletContext) {_		super(new ServletContextResourceLoader(servletContext))__	};create,a,new,servlet,context,resource,pattern,resolver,param,servlet,context,the,servlet,context,to,load,resources,with,see,servlet,context,resource,loader,servlet,context,resource,loader,javax,servlet,servlet,context;public,servlet,context,resource,pattern,resolver,servlet,context,servlet,context,super,new,servlet,context,resource,loader,servlet,context
ServletContextResourcePatternResolver -> protected void doRetrieveMatchingServletContextResources( 			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) 			throws IOException;1328020251;Recursively retrieve ServletContextResources that match the given pattern,_adding them to the given result set._@param servletContext the ServletContext to work on_@param fullPattern the pattern to match against,_with preprended root directory path_@param dir the current directory_@param result the Set of matching Resources to add to_@throws IOException if directory contents could not be retrieved_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;protected void doRetrieveMatchingServletContextResources(_			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result)_			throws IOException {__		Set candidates = servletContext.getResourcePaths(dir)__		if (candidates != null) {_			boolean dirDepthNotFixed = fullPattern.contains("**")__			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			String jarFilePath = null__			String pathInJarFile = null__			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {_				jarFilePath = fullPattern.substring(0, jarFileSep)__				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())__			}_			for (Object candidate : candidates) {_				String currPath = (String) candidate__				if (!currPath.startsWith(dir)) {_					_					_					int dirIndex = currPath.indexOf(dir)__					if (dirIndex != -1) {_						currPath = currPath.substring(dirIndex)__					}_				}_				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=_						StringUtils.countOccurrencesOf(fullPattern, "/"))) {_					_					_					doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)__				}_				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {_					_					String absoluteJarPath = servletContext.getRealPath(currPath)__					if (absoluteJarPath != null) {_						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)__					}_				}_				if (getPathMatcher().match(fullPattern, currPath)) {_					result.add(new ServletContextResource(servletContext, currPath))__				}_			}_		}_	};recursively,retrieve,servlet,context,resources,that,match,the,given,pattern,adding,them,to,the,given,result,set,param,servlet,context,the,servlet,context,to,work,on,param,full,pattern,the,pattern,to,match,against,with,preprended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;protected,void,do,retrieve,matching,servlet,context,resources,servlet,context,servlet,context,string,full,pattern,string,dir,set,resource,result,throws,ioexception,set,candidates,servlet,context,get,resource,paths,dir,if,candidates,null,boolean,dir,depth,not,fixed,full,pattern,contains,int,jar,file,sep,full,pattern,index,of,resource,utils,string,jar,file,path,null,string,path,in,jar,file,null,if,jar,file,sep,0,jar,file,sep,resource,utils,length,full,pattern,length,jar,file,path,full,pattern,substring,0,jar,file,sep,path,in,jar,file,full,pattern,substring,jar,file,sep,resource,utils,length,for,object,candidate,candidates,string,curr,path,string,candidate,if,curr,path,starts,with,dir,int,dir,index,curr,path,index,of,dir,if,dir,index,1,curr,path,curr,path,substring,dir,index,if,curr,path,ends,with,dir,depth,not,fixed,string,utils,count,occurrences,of,curr,path,string,utils,count,occurrences,of,full,pattern,do,retrieve,matching,servlet,context,resources,servlet,context,full,pattern,curr,path,result,if,jar,file,path,null,get,path,matcher,match,jar,file,path,curr,path,string,absolute,jar,path,servlet,context,get,real,path,curr,path,if,absolute,jar,path,null,do,retrieve,matching,jar,entries,absolute,jar,path,path,in,jar,file,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,new,servlet,context,resource,servlet,context,curr,path
ServletContextResourcePatternResolver -> protected void doRetrieveMatchingServletContextResources( 			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) 			throws IOException;1356735495;Recursively retrieve ServletContextResources that match the given pattern,_adding them to the given result set._@param servletContext the ServletContext to work on_@param fullPattern the pattern to match against,_with preprended root directory path_@param dir the current directory_@param result the Set of matching Resources to add to_@throws IOException if directory contents could not be retrieved_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;protected void doRetrieveMatchingServletContextResources(_			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result)_			throws IOException {__		Set candidates = servletContext.getResourcePaths(dir)__		if (candidates != null) {_			boolean dirDepthNotFixed = fullPattern.contains("**")__			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			String jarFilePath = null__			String pathInJarFile = null__			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {_				jarFilePath = fullPattern.substring(0, jarFileSep)__				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())__			}_			for (Object candidate : candidates) {_				String currPath = (String) candidate__				if (!currPath.startsWith(dir)) {_					_					_					int dirIndex = currPath.indexOf(dir)__					if (dirIndex != -1) {_						currPath = currPath.substring(dirIndex)__					}_				}_				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=_						StringUtils.countOccurrencesOf(fullPattern, "/"))) {_					_					_					doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)__				}_				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {_					_					String absoluteJarPath = servletContext.getRealPath(currPath)__					if (absoluteJarPath != null) {_						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)__					}_				}_				if (getPathMatcher().match(fullPattern, currPath)) {_					result.add(new ServletContextResource(servletContext, currPath))__				}_			}_		}_	};recursively,retrieve,servlet,context,resources,that,match,the,given,pattern,adding,them,to,the,given,result,set,param,servlet,context,the,servlet,context,to,work,on,param,full,pattern,the,pattern,to,match,against,with,preprended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;protected,void,do,retrieve,matching,servlet,context,resources,servlet,context,servlet,context,string,full,pattern,string,dir,set,resource,result,throws,ioexception,set,candidates,servlet,context,get,resource,paths,dir,if,candidates,null,boolean,dir,depth,not,fixed,full,pattern,contains,int,jar,file,sep,full,pattern,index,of,resource,utils,string,jar,file,path,null,string,path,in,jar,file,null,if,jar,file,sep,0,jar,file,sep,resource,utils,length,full,pattern,length,jar,file,path,full,pattern,substring,0,jar,file,sep,path,in,jar,file,full,pattern,substring,jar,file,sep,resource,utils,length,for,object,candidate,candidates,string,curr,path,string,candidate,if,curr,path,starts,with,dir,int,dir,index,curr,path,index,of,dir,if,dir,index,1,curr,path,curr,path,substring,dir,index,if,curr,path,ends,with,dir,depth,not,fixed,string,utils,count,occurrences,of,curr,path,string,utils,count,occurrences,of,full,pattern,do,retrieve,matching,servlet,context,resources,servlet,context,full,pattern,curr,path,result,if,jar,file,path,null,get,path,matcher,match,jar,file,path,curr,path,string,absolute,jar,path,servlet,context,get,real,path,curr,path,if,absolute,jar,path,null,do,retrieve,matching,jar,entries,absolute,jar,path,path,in,jar,file,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,new,servlet,context,resource,servlet,context,curr,path
ServletContextResourcePatternResolver -> protected void doRetrieveMatchingServletContextResources( 			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) 			throws IOException;1368216700;Recursively retrieve ServletContextResources that match the given pattern,_adding them to the given result set._@param servletContext the ServletContext to work on_@param fullPattern the pattern to match against,_with preprended root directory path_@param dir the current directory_@param result the Set of matching Resources to add to_@throws IOException if directory contents could not be retrieved_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;protected void doRetrieveMatchingServletContextResources(_			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result)_			throws IOException {__		Set<String> candidates = servletContext.getResourcePaths(dir)__		if (candidates != null) {_			boolean dirDepthNotFixed = fullPattern.contains("**")__			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			String jarFilePath = null__			String pathInJarFile = null__			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {_				jarFilePath = fullPattern.substring(0, jarFileSep)__				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())__			}_			for (String currPath : candidates) {_				if (!currPath.startsWith(dir)) {_					_					_					int dirIndex = currPath.indexOf(dir)__					if (dirIndex != -1) {_						currPath = currPath.substring(dirIndex)__					}_				}_				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=_						StringUtils.countOccurrencesOf(fullPattern, "/"))) {_					_					_					doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)__				}_				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {_					_					String absoluteJarPath = servletContext.getRealPath(currPath)__					if (absoluteJarPath != null) {_						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)__					}_				}_				if (getPathMatcher().match(fullPattern, currPath)) {_					result.add(new ServletContextResource(servletContext, currPath))__				}_			}_		}_	};recursively,retrieve,servlet,context,resources,that,match,the,given,pattern,adding,them,to,the,given,result,set,param,servlet,context,the,servlet,context,to,work,on,param,full,pattern,the,pattern,to,match,against,with,preprended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;protected,void,do,retrieve,matching,servlet,context,resources,servlet,context,servlet,context,string,full,pattern,string,dir,set,resource,result,throws,ioexception,set,string,candidates,servlet,context,get,resource,paths,dir,if,candidates,null,boolean,dir,depth,not,fixed,full,pattern,contains,int,jar,file,sep,full,pattern,index,of,resource,utils,string,jar,file,path,null,string,path,in,jar,file,null,if,jar,file,sep,0,jar,file,sep,resource,utils,length,full,pattern,length,jar,file,path,full,pattern,substring,0,jar,file,sep,path,in,jar,file,full,pattern,substring,jar,file,sep,resource,utils,length,for,string,curr,path,candidates,if,curr,path,starts,with,dir,int,dir,index,curr,path,index,of,dir,if,dir,index,1,curr,path,curr,path,substring,dir,index,if,curr,path,ends,with,dir,depth,not,fixed,string,utils,count,occurrences,of,curr,path,string,utils,count,occurrences,of,full,pattern,do,retrieve,matching,servlet,context,resources,servlet,context,full,pattern,curr,path,result,if,jar,file,path,null,get,path,matcher,match,jar,file,path,curr,path,string,absolute,jar,path,servlet,context,get,real,path,curr,path,if,absolute,jar,path,null,do,retrieve,matching,jar,entries,absolute,jar,path,path,in,jar,file,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,new,servlet,context,resource,servlet,context,curr,path
ServletContextResourcePatternResolver -> protected void doRetrieveMatchingServletContextResources( 			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) 			throws IOException;1385412762;Recursively retrieve ServletContextResources that match the given pattern,_adding them to the given result set._@param servletContext the ServletContext to work on_@param fullPattern the pattern to match against,_with preprended root directory path_@param dir the current directory_@param result the Set of matching Resources to add to_@throws IOException if directory contents could not be retrieved_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;protected void doRetrieveMatchingServletContextResources(_			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result)_			throws IOException {__		Set<String> candidates = servletContext.getResourcePaths(dir)__		if (candidates != null) {_			boolean dirDepthNotFixed = fullPattern.contains("**")__			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			String jarFilePath = null__			String pathInJarFile = null__			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {_				jarFilePath = fullPattern.substring(0, jarFileSep)__				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())__			}_			for (String currPath : candidates) {_				if (!currPath.startsWith(dir)) {_					_					_					int dirIndex = currPath.indexOf(dir)__					if (dirIndex != -1) {_						currPath = currPath.substring(dirIndex)__					}_				}_				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=_						StringUtils.countOccurrencesOf(fullPattern, "/"))) {_					_					_					doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)__				}_				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {_					_					String absoluteJarPath = servletContext.getRealPath(currPath)__					if (absoluteJarPath != null) {_						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)__					}_				}_				if (getPathMatcher().match(fullPattern, currPath)) {_					result.add(new ServletContextResource(servletContext, currPath))__				}_			}_		}_	};recursively,retrieve,servlet,context,resources,that,match,the,given,pattern,adding,them,to,the,given,result,set,param,servlet,context,the,servlet,context,to,work,on,param,full,pattern,the,pattern,to,match,against,with,preprended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;protected,void,do,retrieve,matching,servlet,context,resources,servlet,context,servlet,context,string,full,pattern,string,dir,set,resource,result,throws,ioexception,set,string,candidates,servlet,context,get,resource,paths,dir,if,candidates,null,boolean,dir,depth,not,fixed,full,pattern,contains,int,jar,file,sep,full,pattern,index,of,resource,utils,string,jar,file,path,null,string,path,in,jar,file,null,if,jar,file,sep,0,jar,file,sep,resource,utils,length,full,pattern,length,jar,file,path,full,pattern,substring,0,jar,file,sep,path,in,jar,file,full,pattern,substring,jar,file,sep,resource,utils,length,for,string,curr,path,candidates,if,curr,path,starts,with,dir,int,dir,index,curr,path,index,of,dir,if,dir,index,1,curr,path,curr,path,substring,dir,index,if,curr,path,ends,with,dir,depth,not,fixed,string,utils,count,occurrences,of,curr,path,string,utils,count,occurrences,of,full,pattern,do,retrieve,matching,servlet,context,resources,servlet,context,full,pattern,curr,path,result,if,jar,file,path,null,get,path,matcher,match,jar,file,path,curr,path,string,absolute,jar,path,servlet,context,get,real,path,curr,path,if,absolute,jar,path,null,do,retrieve,matching,jar,entries,absolute,jar,path,path,in,jar,file,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,new,servlet,context,resource,servlet,context,curr,path
ServletContextResourcePatternResolver -> protected void doRetrieveMatchingServletContextResources( 			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) 			throws IOException;1427228652;Recursively retrieve ServletContextResources that match the given pattern,_adding them to the given result set._@param servletContext the ServletContext to work on_@param fullPattern the pattern to match against,_with preprended root directory path_@param dir the current directory_@param result the Set of matching Resources to add to_@throws IOException if directory contents could not be retrieved_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;protected void doRetrieveMatchingServletContextResources(_			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result)_			throws IOException {__		Set<String> candidates = servletContext.getResourcePaths(dir)__		if (candidates != null) {_			boolean dirDepthNotFixed = fullPattern.contains("**")__			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			String jarFilePath = null__			String pathInJarFile = null__			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {_				jarFilePath = fullPattern.substring(0, jarFileSep)__				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())__			}_			for (String currPath : candidates) {_				if (!currPath.startsWith(dir)) {_					_					_					int dirIndex = currPath.indexOf(dir)__					if (dirIndex != -1) {_						currPath = currPath.substring(dirIndex)__					}_				}_				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=_						StringUtils.countOccurrencesOf(fullPattern, "/"))) {_					_					_					doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)__				}_				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {_					_					String absoluteJarPath = servletContext.getRealPath(currPath)__					if (absoluteJarPath != null) {_						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)__					}_				}_				if (getPathMatcher().match(fullPattern, currPath)) {_					result.add(new ServletContextResource(servletContext, currPath))__				}_			}_		}_	};recursively,retrieve,servlet,context,resources,that,match,the,given,pattern,adding,them,to,the,given,result,set,param,servlet,context,the,servlet,context,to,work,on,param,full,pattern,the,pattern,to,match,against,with,preprended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;protected,void,do,retrieve,matching,servlet,context,resources,servlet,context,servlet,context,string,full,pattern,string,dir,set,resource,result,throws,ioexception,set,string,candidates,servlet,context,get,resource,paths,dir,if,candidates,null,boolean,dir,depth,not,fixed,full,pattern,contains,int,jar,file,sep,full,pattern,index,of,resource,utils,string,jar,file,path,null,string,path,in,jar,file,null,if,jar,file,sep,0,jar,file,sep,resource,utils,length,full,pattern,length,jar,file,path,full,pattern,substring,0,jar,file,sep,path,in,jar,file,full,pattern,substring,jar,file,sep,resource,utils,length,for,string,curr,path,candidates,if,curr,path,starts,with,dir,int,dir,index,curr,path,index,of,dir,if,dir,index,1,curr,path,curr,path,substring,dir,index,if,curr,path,ends,with,dir,depth,not,fixed,string,utils,count,occurrences,of,curr,path,string,utils,count,occurrences,of,full,pattern,do,retrieve,matching,servlet,context,resources,servlet,context,full,pattern,curr,path,result,if,jar,file,path,null,get,path,matcher,match,jar,file,path,curr,path,string,absolute,jar,path,servlet,context,get,real,path,curr,path,if,absolute,jar,path,null,do,retrieve,matching,jar,entries,absolute,jar,path,path,in,jar,file,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,new,servlet,context,resource,servlet,context,curr,path
ServletContextResourcePatternResolver -> protected void doRetrieveMatchingServletContextResources( 			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) 			throws IOException;1467730834;Recursively retrieve ServletContextResources that match the given pattern,_adding them to the given result set._@param servletContext the ServletContext to work on_@param fullPattern the pattern to match against,_with preprended root directory path_@param dir the current directory_@param result the Set of matching Resources to add to_@throws IOException if directory contents could not be retrieved_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;protected void doRetrieveMatchingServletContextResources(_			ServletContext servletContext, String fullPattern, String dir, Set<Resource> result)_			throws IOException {__		Set<String> candidates = servletContext.getResourcePaths(dir)__		if (candidates != null) {_			boolean dirDepthNotFixed = fullPattern.contains("**")__			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			String jarFilePath = null__			String pathInJarFile = null__			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {_				jarFilePath = fullPattern.substring(0, jarFileSep)__				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())__			}_			for (String currPath : candidates) {_				if (!currPath.startsWith(dir)) {_					_					_					int dirIndex = currPath.indexOf(dir)__					if (dirIndex != -1) {_						currPath = currPath.substring(dirIndex)__					}_				}_				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=_						StringUtils.countOccurrencesOf(fullPattern, "/"))) {_					_					_					doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)__				}_				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {_					_					String absoluteJarPath = servletContext.getRealPath(currPath)__					if (absoluteJarPath != null) {_						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)__					}_				}_				if (getPathMatcher().match(fullPattern, currPath)) {_					result.add(new ServletContextResource(servletContext, currPath))__				}_			}_		}_	};recursively,retrieve,servlet,context,resources,that,match,the,given,pattern,adding,them,to,the,given,result,set,param,servlet,context,the,servlet,context,to,work,on,param,full,pattern,the,pattern,to,match,against,with,preprended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;protected,void,do,retrieve,matching,servlet,context,resources,servlet,context,servlet,context,string,full,pattern,string,dir,set,resource,result,throws,ioexception,set,string,candidates,servlet,context,get,resource,paths,dir,if,candidates,null,boolean,dir,depth,not,fixed,full,pattern,contains,int,jar,file,sep,full,pattern,index,of,resource,utils,string,jar,file,path,null,string,path,in,jar,file,null,if,jar,file,sep,0,jar,file,sep,resource,utils,length,full,pattern,length,jar,file,path,full,pattern,substring,0,jar,file,sep,path,in,jar,file,full,pattern,substring,jar,file,sep,resource,utils,length,for,string,curr,path,candidates,if,curr,path,starts,with,dir,int,dir,index,curr,path,index,of,dir,if,dir,index,1,curr,path,curr,path,substring,dir,index,if,curr,path,ends,with,dir,depth,not,fixed,string,utils,count,occurrences,of,curr,path,string,utils,count,occurrences,of,full,pattern,do,retrieve,matching,servlet,context,resources,servlet,context,full,pattern,curr,path,result,if,jar,file,path,null,get,path,matcher,match,jar,file,path,curr,path,string,absolute,jar,path,servlet,context,get,real,path,curr,path,if,absolute,jar,path,null,do,retrieve,matching,jar,entries,absolute,jar,path,path,in,jar,file,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,new,servlet,context,resource,servlet,context,curr,path
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ResourceLoader resourceLoader);1328020251;Create a new ServletContextResourcePatternResolver._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public ServletContextResourcePatternResolver(ResourceLoader resourceLoader) {_		super(resourceLoader)__	};create,a,new,servlet,context,resource,pattern,resolver,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,servlet,context,resource,pattern,resolver,resource,loader,resource,loader,super,resource,loader
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ResourceLoader resourceLoader);1356735495;Create a new ServletContextResourcePatternResolver._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public ServletContextResourcePatternResolver(ResourceLoader resourceLoader) {_		super(resourceLoader)__	};create,a,new,servlet,context,resource,pattern,resolver,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,servlet,context,resource,pattern,resolver,resource,loader,resource,loader,super,resource,loader
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ResourceLoader resourceLoader);1368216700;Create a new ServletContextResourcePatternResolver._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public ServletContextResourcePatternResolver(ResourceLoader resourceLoader) {_		super(resourceLoader)__	};create,a,new,servlet,context,resource,pattern,resolver,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,servlet,context,resource,pattern,resolver,resource,loader,resource,loader,super,resource,loader
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ResourceLoader resourceLoader);1385412762;Create a new ServletContextResourcePatternResolver._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public ServletContextResourcePatternResolver(ResourceLoader resourceLoader) {_		super(resourceLoader)__	};create,a,new,servlet,context,resource,pattern,resolver,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,servlet,context,resource,pattern,resolver,resource,loader,resource,loader,super,resource,loader
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ResourceLoader resourceLoader);1427228652;Create a new ServletContextResourcePatternResolver._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public ServletContextResourcePatternResolver(ResourceLoader resourceLoader) {_		super(resourceLoader)__	};create,a,new,servlet,context,resource,pattern,resolver,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,servlet,context,resource,pattern,resolver,resource,loader,resource,loader,super,resource,loader
ServletContextResourcePatternResolver -> public ServletContextResourcePatternResolver(ResourceLoader resourceLoader);1467730834;Create a new ServletContextResourcePatternResolver._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public ServletContextResourcePatternResolver(ResourceLoader resourceLoader) {_		super(resourceLoader)__	};create,a,new,servlet,context,resource,pattern,resolver,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,servlet,context,resource,pattern,resolver,resource,loader,resource,loader,super,resource,loader
ServletContextResourcePatternResolver -> private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result);1356735495;Method extracts entries from the given jar by pattern._@param jarFilePath the path to the jar file_@param entryPattern the pattern for jar entries to match_@param result the Set of matching Resources to add to_@throws IOException if jar contents could not be retrieved;private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]")__		}_		try {_			JarFile jarFile = new JarFile(jarFilePath)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (getPathMatcher().match(entryPattern, entryPath)) {_					result.add(new UrlResource(ResourceUtils.URL_PROTOCOL_JAR + ":" +_							ResourceUtils.URL_PROTOCOL_FILE + ":" + jarFilePath +_							ResourceUtils.JAR_URL_SEPARATOR + entryPath))__				}_			}_		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching resources in jar file [" + jarFilePath +_						"] because the jar cannot be opened through the file system", ex)__			}_		}_	};method,extracts,entries,from,the,given,jar,by,pattern,param,jar,file,path,the,path,to,the,jar,file,param,entry,pattern,the,pattern,for,jar,entries,to,match,param,result,the,set,of,matching,resources,to,add,to,throws,ioexception,if,jar,contents,could,not,be,retrieved;private,void,do,retrieve,matching,jar,entries,string,jar,file,path,string,entry,pattern,set,resource,result,if,logger,is,debug,enabled,logger,debug,searching,jar,file,jar,file,path,for,entries,matching,entry,pattern,try,jar,file,jar,file,new,jar,file,jar,file,path,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,get,path,matcher,match,entry,pattern,entry,path,result,add,new,url,resource,resource,utils,resource,utils,jar,file,path,resource,utils,entry,path,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,resources,in,jar,file,jar,file,path,because,the,jar,cannot,be,opened,through,the,file,system,ex
ServletContextResourcePatternResolver -> private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result);1368216700;Extract entries from the given jar by pattern._@param jarFilePath the path to the jar file_@param entryPattern the pattern for jar entries to match_@param result the Set of matching Resources to add to;private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]")__		}_		try {_			JarFile jarFile = new JarFile(jarFilePath)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (getPathMatcher().match(entryPattern, entryPath)) {_					result.add(new UrlResource(_							ResourceUtils.URL_PROTOCOL_JAR,_							ResourceUtils.FILE_URL_PREFIX + jarFilePath + ResourceUtils.JAR_URL_SEPARATOR + entryPath))__				}_			}_		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching resources in jar file [" + jarFilePath +_						"] because the jar cannot be opened through the file system", ex)__			}_		}_	};extract,entries,from,the,given,jar,by,pattern,param,jar,file,path,the,path,to,the,jar,file,param,entry,pattern,the,pattern,for,jar,entries,to,match,param,result,the,set,of,matching,resources,to,add,to;private,void,do,retrieve,matching,jar,entries,string,jar,file,path,string,entry,pattern,set,resource,result,if,logger,is,debug,enabled,logger,debug,searching,jar,file,jar,file,path,for,entries,matching,entry,pattern,try,jar,file,jar,file,new,jar,file,jar,file,path,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,get,path,matcher,match,entry,pattern,entry,path,result,add,new,url,resource,resource,utils,resource,utils,jar,file,path,resource,utils,entry,path,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,resources,in,jar,file,jar,file,path,because,the,jar,cannot,be,opened,through,the,file,system,ex
ServletContextResourcePatternResolver -> private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result);1385412762;Extract entries from the given jar by pattern._@param jarFilePath the path to the jar file_@param entryPattern the pattern for jar entries to match_@param result the Set of matching Resources to add to;private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]")__		}_		try {_			JarFile jarFile = new JarFile(jarFilePath)__			try {_				for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_					JarEntry entry = entries.nextElement()__					String entryPath = entry.getName()__					if (getPathMatcher().match(entryPattern, entryPath)) {_						result.add(new UrlResource(_								ResourceUtils.URL_PROTOCOL_JAR,_								ResourceUtils.FILE_URL_PREFIX + jarFilePath + ResourceUtils.JAR_URL_SEPARATOR + entryPath))__					}_				}_			}_			finally {_				jarFile.close()__			}_		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching resources in jar file [" + jarFilePath +_						"] because the jar cannot be opened through the file system", ex)__			}_		}_	};extract,entries,from,the,given,jar,by,pattern,param,jar,file,path,the,path,to,the,jar,file,param,entry,pattern,the,pattern,for,jar,entries,to,match,param,result,the,set,of,matching,resources,to,add,to;private,void,do,retrieve,matching,jar,entries,string,jar,file,path,string,entry,pattern,set,resource,result,if,logger,is,debug,enabled,logger,debug,searching,jar,file,jar,file,path,for,entries,matching,entry,pattern,try,jar,file,jar,file,new,jar,file,jar,file,path,try,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,get,path,matcher,match,entry,pattern,entry,path,result,add,new,url,resource,resource,utils,resource,utils,jar,file,path,resource,utils,entry,path,finally,jar,file,close,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,resources,in,jar,file,jar,file,path,because,the,jar,cannot,be,opened,through,the,file,system,ex
ServletContextResourcePatternResolver -> private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result);1427228652;Extract entries from the given jar by pattern._@param jarFilePath the path to the jar file_@param entryPattern the pattern for jar entries to match_@param result the Set of matching Resources to add to;private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]")__		}_		try {_			JarFile jarFile = new JarFile(jarFilePath)__			try {_				for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_					JarEntry entry = entries.nextElement()__					String entryPath = entry.getName()__					if (getPathMatcher().match(entryPattern, entryPath)) {_						result.add(new UrlResource(_								ResourceUtils.URL_PROTOCOL_JAR,_								ResourceUtils.FILE_URL_PREFIX + jarFilePath + ResourceUtils.JAR_URL_SEPARATOR + entryPath))__					}_				}_			}_			finally {_				jarFile.close()__			}_		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching resources in jar file [" + jarFilePath +_						"] because the jar cannot be opened through the file system", ex)__			}_		}_	};extract,entries,from,the,given,jar,by,pattern,param,jar,file,path,the,path,to,the,jar,file,param,entry,pattern,the,pattern,for,jar,entries,to,match,param,result,the,set,of,matching,resources,to,add,to;private,void,do,retrieve,matching,jar,entries,string,jar,file,path,string,entry,pattern,set,resource,result,if,logger,is,debug,enabled,logger,debug,searching,jar,file,jar,file,path,for,entries,matching,entry,pattern,try,jar,file,jar,file,new,jar,file,jar,file,path,try,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,get,path,matcher,match,entry,pattern,entry,path,result,add,new,url,resource,resource,utils,resource,utils,jar,file,path,resource,utils,entry,path,finally,jar,file,close,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,resources,in,jar,file,jar,file,path,because,the,jar,cannot,be,opened,through,the,file,system,ex
ServletContextResourcePatternResolver -> private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result);1467730834;Extract entries from the given jar by pattern._@param jarFilePath the path to the jar file_@param entryPattern the pattern for jar entries to match_@param result the Set of matching Resources to add to;private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]")__		}_		try {_			JarFile jarFile = new JarFile(jarFilePath)__			try {_				for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_					JarEntry entry = entries.nextElement()__					String entryPath = entry.getName()__					if (getPathMatcher().match(entryPattern, entryPath)) {_						result.add(new UrlResource(_								ResourceUtils.URL_PROTOCOL_JAR,_								ResourceUtils.FILE_URL_PREFIX + jarFilePath + ResourceUtils.JAR_URL_SEPARATOR + entryPath))__					}_				}_			}_			finally {_				jarFile.close()__			}_		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching resources in jar file [" + jarFilePath +_						"] because the jar cannot be opened through the file system", ex)__			}_		}_	};extract,entries,from,the,given,jar,by,pattern,param,jar,file,path,the,path,to,the,jar,file,param,entry,pattern,the,pattern,for,jar,entries,to,match,param,result,the,set,of,matching,resources,to,add,to;private,void,do,retrieve,matching,jar,entries,string,jar,file,path,string,entry,pattern,set,resource,result,if,logger,is,debug,enabled,logger,debug,searching,jar,file,jar,file,path,for,entries,matching,entry,pattern,try,jar,file,jar,file,new,jar,file,jar,file,path,try,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,get,path,matcher,match,entry,pattern,entry,path,result,add,new,url,resource,resource,utils,resource,utils,jar,file,path,resource,utils,entry,path,finally,jar,file,close,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,resources,in,jar,file,jar,file,path,because,the,jar,cannot,be,opened,through,the,file,system,ex
ServletContextResourcePatternResolver -> @Override 	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1328020251;Overridden version which checks for ServletContextResource_and uses <code>ServletContext.getResourcePaths</code> to find_matching resources below the web application root directory._In case of other resources, delegates to the superclass version._@see #doRetrieveMatchingServletContextResources_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;@Override_	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		if (rootDirResource instanceof ServletContextResource) {_			ServletContextResource scResource = (ServletContextResource) rootDirResource__			ServletContext sc = scResource.getServletContext()__			String fullPattern = scResource.getPath() + subPattern__			Set<Resource> result = new LinkedHashSet<Resource>(8)__			doRetrieveMatchingServletContextResources(sc, fullPattern, scResource.getPath(), result)__			return result__		}_		else {_			return super.doFindPathMatchingFileResources(rootDirResource, subPattern)__		}_	};overridden,version,which,checks,for,servlet,context,resource,and,uses,code,servlet,context,get,resource,paths,code,to,find,matching,resources,below,the,web,application,root,directory,in,case,of,other,resources,delegates,to,the,superclass,version,see,do,retrieve,matching,servlet,context,resources,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;override,protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,if,root,dir,resource,instanceof,servlet,context,resource,servlet,context,resource,sc,resource,servlet,context,resource,root,dir,resource,servlet,context,sc,sc,resource,get,servlet,context,string,full,pattern,sc,resource,get,path,sub,pattern,set,resource,result,new,linked,hash,set,resource,8,do,retrieve,matching,servlet,context,resources,sc,full,pattern,sc,resource,get,path,result,return,result,else,return,super,do,find,path,matching,file,resources,root,dir,resource,sub,pattern
ServletContextResourcePatternResolver -> @Override 	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1356735495;Overridden version which checks for ServletContextResource_and uses {@code ServletContext.getResourcePaths} to find_matching resources below the web application root directory._In case of other resources, delegates to the superclass version._@see #doRetrieveMatchingServletContextResources_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;@Override_	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		if (rootDirResource instanceof ServletContextResource) {_			ServletContextResource scResource = (ServletContextResource) rootDirResource__			ServletContext sc = scResource.getServletContext()__			String fullPattern = scResource.getPath() + subPattern__			Set<Resource> result = new LinkedHashSet<Resource>(8)__			doRetrieveMatchingServletContextResources(sc, fullPattern, scResource.getPath(), result)__			return result__		}_		else {_			return super.doFindPathMatchingFileResources(rootDirResource, subPattern)__		}_	};overridden,version,which,checks,for,servlet,context,resource,and,uses,code,servlet,context,get,resource,paths,to,find,matching,resources,below,the,web,application,root,directory,in,case,of,other,resources,delegates,to,the,superclass,version,see,do,retrieve,matching,servlet,context,resources,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;override,protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,if,root,dir,resource,instanceof,servlet,context,resource,servlet,context,resource,sc,resource,servlet,context,resource,root,dir,resource,servlet,context,sc,sc,resource,get,servlet,context,string,full,pattern,sc,resource,get,path,sub,pattern,set,resource,result,new,linked,hash,set,resource,8,do,retrieve,matching,servlet,context,resources,sc,full,pattern,sc,resource,get,path,result,return,result,else,return,super,do,find,path,matching,file,resources,root,dir,resource,sub,pattern
ServletContextResourcePatternResolver -> @Override 	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1368216700;Overridden version which checks for ServletContextResource_and uses {@code ServletContext.getResourcePaths} to find_matching resources below the web application root directory._In case of other resources, delegates to the superclass version._@see #doRetrieveMatchingServletContextResources_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;@Override_	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		if (rootDirResource instanceof ServletContextResource) {_			ServletContextResource scResource = (ServletContextResource) rootDirResource__			ServletContext sc = scResource.getServletContext()__			String fullPattern = scResource.getPath() + subPattern__			Set<Resource> result = new LinkedHashSet<Resource>(8)__			doRetrieveMatchingServletContextResources(sc, fullPattern, scResource.getPath(), result)__			return result__		}_		else {_			return super.doFindPathMatchingFileResources(rootDirResource, subPattern)__		}_	};overridden,version,which,checks,for,servlet,context,resource,and,uses,code,servlet,context,get,resource,paths,to,find,matching,resources,below,the,web,application,root,directory,in,case,of,other,resources,delegates,to,the,superclass,version,see,do,retrieve,matching,servlet,context,resources,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;override,protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,if,root,dir,resource,instanceof,servlet,context,resource,servlet,context,resource,sc,resource,servlet,context,resource,root,dir,resource,servlet,context,sc,sc,resource,get,servlet,context,string,full,pattern,sc,resource,get,path,sub,pattern,set,resource,result,new,linked,hash,set,resource,8,do,retrieve,matching,servlet,context,resources,sc,full,pattern,sc,resource,get,path,result,return,result,else,return,super,do,find,path,matching,file,resources,root,dir,resource,sub,pattern
ServletContextResourcePatternResolver -> @Override 	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1385412762;Overridden version which checks for ServletContextResource_and uses {@code ServletContext.getResourcePaths} to find_matching resources below the web application root directory._In case of other resources, delegates to the superclass version._@see #doRetrieveMatchingServletContextResources_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;@Override_	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		if (rootDirResource instanceof ServletContextResource) {_			ServletContextResource scResource = (ServletContextResource) rootDirResource__			ServletContext sc = scResource.getServletContext()__			String fullPattern = scResource.getPath() + subPattern__			Set<Resource> result = new LinkedHashSet<Resource>(8)__			doRetrieveMatchingServletContextResources(sc, fullPattern, scResource.getPath(), result)__			return result__		}_		else {_			return super.doFindPathMatchingFileResources(rootDirResource, subPattern)__		}_	};overridden,version,which,checks,for,servlet,context,resource,and,uses,code,servlet,context,get,resource,paths,to,find,matching,resources,below,the,web,application,root,directory,in,case,of,other,resources,delegates,to,the,superclass,version,see,do,retrieve,matching,servlet,context,resources,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;override,protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,if,root,dir,resource,instanceof,servlet,context,resource,servlet,context,resource,sc,resource,servlet,context,resource,root,dir,resource,servlet,context,sc,sc,resource,get,servlet,context,string,full,pattern,sc,resource,get,path,sub,pattern,set,resource,result,new,linked,hash,set,resource,8,do,retrieve,matching,servlet,context,resources,sc,full,pattern,sc,resource,get,path,result,return,result,else,return,super,do,find,path,matching,file,resources,root,dir,resource,sub,pattern
ServletContextResourcePatternResolver -> @Override 	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1427228652;Overridden version which checks for ServletContextResource_and uses {@code ServletContext.getResourcePaths} to find_matching resources below the web application root directory._In case of other resources, delegates to the superclass version._@see #doRetrieveMatchingServletContextResources_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;@Override_	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		if (rootDirResource instanceof ServletContextResource) {_			ServletContextResource scResource = (ServletContextResource) rootDirResource__			ServletContext sc = scResource.getServletContext()__			String fullPattern = scResource.getPath() + subPattern__			Set<Resource> result = new LinkedHashSet<Resource>(8)__			doRetrieveMatchingServletContextResources(sc, fullPattern, scResource.getPath(), result)__			return result__		}_		else {_			return super.doFindPathMatchingFileResources(rootDirResource, subPattern)__		}_	};overridden,version,which,checks,for,servlet,context,resource,and,uses,code,servlet,context,get,resource,paths,to,find,matching,resources,below,the,web,application,root,directory,in,case,of,other,resources,delegates,to,the,superclass,version,see,do,retrieve,matching,servlet,context,resources,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;override,protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,if,root,dir,resource,instanceof,servlet,context,resource,servlet,context,resource,sc,resource,servlet,context,resource,root,dir,resource,servlet,context,sc,sc,resource,get,servlet,context,string,full,pattern,sc,resource,get,path,sub,pattern,set,resource,result,new,linked,hash,set,resource,8,do,retrieve,matching,servlet,context,resources,sc,full,pattern,sc,resource,get,path,result,return,result,else,return,super,do,find,path,matching,file,resources,root,dir,resource,sub,pattern
ServletContextResourcePatternResolver -> @Override 	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1467730834;Overridden version which checks for ServletContextResource_and uses {@code ServletContext.getResourcePaths} to find_matching resources below the web application root directory._In case of other resources, delegates to the superclass version._@see #doRetrieveMatchingServletContextResources_@see ServletContextResource_@see javax.servlet.ServletContext#getResourcePaths;@Override_	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		if (rootDirResource instanceof ServletContextResource) {_			ServletContextResource scResource = (ServletContextResource) rootDirResource__			ServletContext sc = scResource.getServletContext()__			String fullPattern = scResource.getPath() + subPattern__			Set<Resource> result = new LinkedHashSet<>(8)__			doRetrieveMatchingServletContextResources(sc, fullPattern, scResource.getPath(), result)__			return result__		}_		else {_			return super.doFindPathMatchingFileResources(rootDirResource, subPattern)__		}_	};overridden,version,which,checks,for,servlet,context,resource,and,uses,code,servlet,context,get,resource,paths,to,find,matching,resources,below,the,web,application,root,directory,in,case,of,other,resources,delegates,to,the,superclass,version,see,do,retrieve,matching,servlet,context,resources,see,servlet,context,resource,see,javax,servlet,servlet,context,get,resource,paths;override,protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,if,root,dir,resource,instanceof,servlet,context,resource,servlet,context,resource,sc,resource,servlet,context,resource,root,dir,resource,servlet,context,sc,sc,resource,get,servlet,context,string,full,pattern,sc,resource,get,path,sub,pattern,set,resource,result,new,linked,hash,set,8,do,retrieve,matching,servlet,context,resources,sc,full,pattern,sc,resource,get,path,result,return,result,else,return,super,do,find,path,matching,file,resources,root,dir,resource,sub,pattern
