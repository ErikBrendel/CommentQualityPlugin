commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the integer value of this status code.  */ ;/**  * Return the integer value of this status code.  */ public int value() {     return this.value. }
true;public;0;3;/**  * Return the reason phrase of this status code.  */ ;/**  * Return the reason phrase of this status code.  */ public String getReasonPhrase() {     return this.reasonPhrase. }
true;public;0;3;/**  * Return the HTTP status series of this status code.  * @see HttpStatus.Series  */ ;/**  * Return the HTTP status series of this status code.  * @see HttpStatus.Series  */ public Series series() {     return Series.valueOf(this). }
true;public;0;3;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#INFORMATIONAL}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ ;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#INFORMATIONAL}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ public boolean is1xxInformational() {     return (series() == Series.INFORMATIONAL). }
true;public;0;3;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#SUCCESSFUL}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ ;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#SUCCESSFUL}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ public boolean is2xxSuccessful() {     return (series() == Series.SUCCESSFUL). }
true;public;0;3;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#REDIRECTION}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ ;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#REDIRECTION}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ public boolean is3xxRedirection() {     return (series() == Series.REDIRECTION). }
true;public;0;3;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ ;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ public boolean is4xxClientError() {     return (series() == Series.CLIENT_ERROR). }
true;public;0;3;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ ;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.  * This is a shortcut for checking the value of {@link #series()}.  * @see #series()  */ public boolean is5xxServerError() {     return (series() == Series.SERVER_ERROR). }
true;public;0;3;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.  * This is a shortcut for checking the value of {@link #series()}.  * @since 5.0  * @see #is4xxClientError()  * @see #is5xxServerError()  */ ;/**  * Whether this status code is in the HTTP series  * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR} or  * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR}.  * This is a shortcut for checking the value of {@link #series()}.  * @since 5.0  * @see #is4xxClientError()  * @see #is5xxServerError()  */ public boolean isError() {     return (is4xxClientError() || is5xxServerError()). }
true;public;0;4;/**  * Return a string representation of this status code.  */ ;/**  * Return a string representation of this status code.  */ @Override public String toString() {     return this.value + " " + name(). }
true;public,static;1;7;/**  * Return the enum constant of this type with the specified numeric value.  * @param statusCode the numeric value of the enum to be returned  * @return the enum constant with the specified numeric value  * @throws IllegalArgumentException if this enum has no constant for the specified numeric value  */ ;/**  * Return the enum constant of this type with the specified numeric value.  * @param statusCode the numeric value of the enum to be returned  * @return the enum constant with the specified numeric value  * @throws IllegalArgumentException if this enum has no constant for the specified numeric value  */ public static HttpStatus valueOf(int statusCode) {     HttpStatus status = resolve(statusCode).     if (status == null) {         throw new IllegalArgumentException("No matching constant for [" + statusCode + "]").     }     return status. }
true;public,static;1;9;/**  * Resolve the given status code to an {@code HttpStatus}, if possible.  * @param statusCode the HTTP status code (potentially non-standard)  * @return the corresponding {@code HttpStatus}, or {@code null} if not found  * @since 5.0  */ ;/**  * Resolve the given status code to an {@code HttpStatus}, if possible.  * @param statusCode the HTTP status code (potentially non-standard)  * @return the corresponding {@code HttpStatus}, or {@code null} if not found  * @since 5.0  */ @Nullable public static HttpStatus resolve(int statusCode) {     for (HttpStatus status : values()) {         if (status.value == statusCode) {             return status.         }     }     return null. }
true;public;0;3;/**  * Return the integer value of this status series. Ranges from 1 to 5.  */ ;/**  * Return the integer value of this status series. Ranges from 1 to 5.  */ public int value() {     return this.value. }
true;public,static;1;3;/**  * Return the enum constant of this type with the corresponding series.  * @param status a standard HTTP status enum value  * @return the enum constant of this type with the corresponding series  * @throws IllegalArgumentException if this enum has no corresponding constant  */ ;/**  * Return the enum constant of this type with the corresponding series.  * @param status a standard HTTP status enum value  * @return the enum constant of this type with the corresponding series  * @throws IllegalArgumentException if this enum has no corresponding constant  */ public static Series valueOf(HttpStatus status) {     return valueOf(status.value). }
true;public,static;1;7;/**  * Return the enum constant of this type with the corresponding series.  * @param statusCode the HTTP status code (potentially non-standard)  * @return the enum constant of this type with the corresponding series  * @throws IllegalArgumentException if this enum has no corresponding constant  */ ;/**  * Return the enum constant of this type with the corresponding series.  * @param statusCode the HTTP status code (potentially non-standard)  * @return the enum constant of this type with the corresponding series  * @throws IllegalArgumentException if this enum has no corresponding constant  */ public static Series valueOf(int statusCode) {     Series series = resolve(statusCode).     if (series == null) {         throw new IllegalArgumentException("No matching constant for [" + statusCode + "]").     }     return series. }
true;public,static;1;10;/**  * Resolve the given status code to an {@code HttpStatus.Series}, if possible.  * @param statusCode the HTTP status code (potentially non-standard)  * @return the corresponding {@code Series}, or {@code null} if not found  * @since 5.1.3  */ ;/**  * Resolve the given status code to an {@code HttpStatus.Series}, if possible.  * @param statusCode the HTTP status code (potentially non-standard)  * @return the corresponding {@code Series}, or {@code null} if not found  * @since 5.1.3  */ @Nullable public static Series resolve(int statusCode) {     int seriesCode = statusCode / 100.     for (Series series : values()) {         if (series.value == seriesCode) {             return series.         }     }     return null. }
