# id;timestamp;commentText;codeText;commentWords;codeWords
ExtractingResponseErrorHandler -> public void setSeriesMapping( 			Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1496143045;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(_			Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
ExtractingResponseErrorHandler -> public void setSeriesMapping( 			Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1496310248;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(_			Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1496143045;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1496310248;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1500495740;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1505897698;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1530174524;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1534155772;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler();1534438291;Create a new, empty {@code ExtractingResponseErrorHandler}._<p>Note that {@link #setMessageConverters(List)} must be called when using this constructor.;public ExtractingResponseErrorHandler() {_	};create,a,new,empty,code,extracting,response,error,handler,p,note,that,link,set,message,converters,list,must,be,called,when,using,this,constructor;public,extracting,response,error,handler
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1496143045;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		setMessageConverters(messageConverters)__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,set,message,converters,message,converters
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1496310248;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		setMessageConverters(messageConverters)__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,set,message,converters,message,converters
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1500495740;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1505897698;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1530174524;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1534155772;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters);1534438291;Create a new {@code ExtractingResponseErrorHandler} with the given_{@link HttpMessageConverter} instances._@param messageConverters the message converters to use;public ExtractingResponseErrorHandler(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};create,a,new,code,extracting,response,error,handler,with,the,given,link,http,message,converter,instances,param,message,converters,the,message,converters,to,use;public,extracting,response,error,handler,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1500495740;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1505897698;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1530174524;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1534155772;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1534438291;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setStatusMapping( 			Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1496143045;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(_			Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setStatusMapping( 			Map<HttpStatus, Class<? extends RestClientException>> statusMapping);1496310248;Set the mapping from HTTP status code to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setStatusMapping(_			Map<HttpStatus, Class<? extends RestClientException>> statusMapping) {_		if (!CollectionUtils.isEmpty(statusMapping)) {_			this.statusMapping.putAll(statusMapping)__		}_	};set,the,mapping,from,http,status,code,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,status,mapping,map,http,status,class,extends,rest,client,exception,status,mapping,if,collection,utils,is,empty,status,mapping,this,status,mapping,put,all,status,mapping
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1496143045;Sets the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};sets,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1496310248;Sets the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};sets,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1500495740;Set the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};set,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1505897698;Set the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};set,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1530174524;Set the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};set,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1534155772;Set the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};set,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters);1534438291;Set the message converters to use by this extractor.;public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {_		this.messageConverters = messageConverters__	};set,the,message,converters,to,use,by,this,extractor;public,void,set,message,converters,list,http,message,converter,message,converters,this,message,converters,message,converters
ExtractingResponseErrorHandler -> public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1500495740;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
ExtractingResponseErrorHandler -> public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1505897698;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
ExtractingResponseErrorHandler -> public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1530174524;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
ExtractingResponseErrorHandler -> public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1534155772;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
ExtractingResponseErrorHandler -> public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping);1534438291;Set the mapping from HTTP status series to {@code RestClientException} subclass._If this mapping has a match_for the {@linkplain ClientHttpResponse#getStatusCode() status code} of a given_{@code ClientHttpResponse}, {@link #hasError(ClientHttpResponse)} will return_{@code true} and {@link #handleError(ClientHttpResponse)} will attempt to use the_{@linkplain #setMessageConverters(List) configured message converters} to convert the_response into the mapped subclass of {@link RestClientException}.;public void setSeriesMapping(Map<HttpStatus.Series, Class<? extends RestClientException>> seriesMapping) {_		if (!CollectionUtils.isEmpty(seriesMapping)) {_			this.seriesMapping.putAll(seriesMapping)__		}_	};set,the,mapping,from,http,status,series,to,code,rest,client,exception,subclass,if,this,mapping,has,a,match,for,the,linkplain,client,http,response,get,status,code,status,code,of,a,given,code,client,http,response,link,has,error,client,http,response,will,return,code,true,and,link,handle,error,client,http,response,will,attempt,to,use,the,linkplain,set,message,converters,list,configured,message,converters,to,convert,the,response,into,the,mapped,subclass,of,link,rest,client,exception;public,void,set,series,mapping,map,http,status,series,class,extends,rest,client,exception,series,mapping,if,collection,utils,is,empty,series,mapping,this,series,mapping,put,all,series,mapping
