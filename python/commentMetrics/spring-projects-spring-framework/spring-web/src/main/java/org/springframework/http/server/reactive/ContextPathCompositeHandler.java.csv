commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;4;;private static Map<String, HttpHandler> initHandlers(Map<String, ? extends HttpHandler> map) {     map.keySet().forEach(ContextPathCompositeHandler::assertValidContextPath).     return new LinkedHashMap<>(map). }
false;private,static;1;8;;private static void assertValidContextPath(String contextPath) {     Assert.hasText(contextPath, "Context path must not be empty").     if (contextPath.equals("/")) {         return.     }     Assert.isTrue(contextPath.startsWith("/"), "Context path must begin with '/'").     Assert.isTrue(!contextPath.endsWith("/"), "Context path must not end with '/'"). }
false;public;2;17;;@Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {     // Remove underlying context path first (e.g. Servlet container)     String path = request.getPath().pathWithinApplication().value().     return this.handlerMap.entrySet().stream().filter(entry -> path.startsWith(entry.getKey())).findFirst().map(entry -> {         String contextPath = request.getPath().contextPath().value() + entry.getKey().         ServerHttpRequest newRequest = request.mutate().contextPath(contextPath).build().         return entry.getValue().handle(newRequest, response).     }).orElseGet(() -> {         response.setStatusCode(HttpStatus.NOT_FOUND).         return response.setComplete().     }). }
