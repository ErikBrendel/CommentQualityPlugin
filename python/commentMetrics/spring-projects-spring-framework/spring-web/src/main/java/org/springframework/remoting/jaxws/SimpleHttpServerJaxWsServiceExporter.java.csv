commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify an existing HTTP server to register the web service contexts  * with. This will typically be a server managed by the general Spring  * {@link org.springframework.remoting.support.SimpleHttpServerFactoryBean}.  * <p>Alternatively, configure a local HTTP server through the  * {@link #setPort "port"}, {@link #setHostname "hostname"} and  * {@link #setBacklog "backlog"} properties (or rely on the defaults there).  */ ;/**  * Specify an existing HTTP server to register the web service contexts  * with. This will typically be a server managed by the general Spring  * {@link org.springframework.remoting.support.SimpleHttpServerFactoryBean}.  * <p>Alternatively, configure a local HTTP server through the  * {@link #setPort "port"}, {@link #setHostname "hostname"} and  * {@link #setBacklog "backlog"} properties (or rely on the defaults there).  */ public void setServer(HttpServer server) {     this.server = server. }
true;public;1;3;/**  * Specify the HTTP server's port. Default is 8080.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ ;/**  * Specify the HTTP server's port. Default is 8080.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ public void setPort(int port) {     this.port = port. }
true;public;1;3;/**  * Specify the HTTP server's hostname to bind to. Default is localhost.  * can be overridden with a specific network address to bind to.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ ;/**  * Specify the HTTP server's hostname to bind to. Default is localhost.  * can be overridden with a specific network address to bind to.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ public void setHostname(String hostname) {     this.hostname = hostname. }
true;public;1;3;/**  * Specify the HTTP server's TCP backlog. Default is -1,  * indicating the system's default value.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ ;/**  * Specify the HTTP server's TCP backlog. Default is -1,  * indicating the system's default value.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ public void setBacklog(int backlog) {     this.backlog = backlog. }
true;public;1;3;/**  * Specify the number of seconds to wait until HTTP exchanges have  * completed when shutting down the HTTP server. Default is 0.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ ;/**  * Specify the number of seconds to wait until HTTP exchanges have  * completed when shutting down the HTTP server. Default is 0.  * <p>Only applicable for a locally configured HTTP server.  * Ignored when the {@link #setServer "server"} property has been specified.  */ public void setShutdownDelay(int shutdownDelay) {     this.shutdownDelay = shutdownDelay. }
true;public;1;3;/**  * Set the base path for context publication. Default is "/".  * <p>For each context publication path, the service name will be  * appended to this base address. E.g. service name "OrderService"  * -> "/OrderService".  * @see javax.xml.ws.Endpoint#publish(Object)  * @see javax.jws.WebService#serviceName()  */ ;/**  * Set the base path for context publication. Default is "/".  * <p>For each context publication path, the service name will be  * appended to this base address. E.g. service name "OrderService"  * -> "/OrderService".  * @see javax.xml.ws.Endpoint#publish(Object)  * @see javax.jws.WebService#serviceName()  */ public void setBasePath(String basePath) {     this.basePath = basePath. }
true;public;1;3;/**  * Register common {@link com.sun.net.httpserver.Filter Filters} to be  * applied to all detected {@link javax.jws.WebService} annotated beans.  */ ;/**  * Register common {@link com.sun.net.httpserver.Filter Filters} to be  * applied to all detected {@link javax.jws.WebService} annotated beans.  */ public void setFilters(List<Filter> filters) {     this.filters = filters. }
true;public;1;3;/**  * Register a common {@link com.sun.net.httpserver.Authenticator} to be  * applied to all detected {@link javax.jws.WebService} annotated beans.  */ ;/**  * Register a common {@link com.sun.net.httpserver.Authenticator} to be  * applied to all detected {@link javax.jws.WebService} annotated beans.  */ public void setAuthenticator(Authenticator authenticator) {     this.authenticator = authenticator. }
false;public;0;15;;@Override public void afterPropertiesSet() throws Exception {     if (this.server == null) {         InetSocketAddress address = (this.hostname != null ? new InetSocketAddress(this.hostname, this.port) : new InetSocketAddress(this.port)).         HttpServer server = HttpServer.create(address, this.backlog).         if (logger.isInfoEnabled()) {             logger.info("Starting HttpServer at address " + address).         }         server.start().         this.server = server.         this.localServer = true.     }     super.afterPropertiesSet(). }
false;protected;2;4;;@Override protected void publishEndpoint(Endpoint endpoint, WebService annotation) {     endpoint.publish(buildHttpContext(endpoint, annotation.serviceName())). }
false;protected;2;4;;@Override protected void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation) {     endpoint.publish(buildHttpContext(endpoint, annotation.serviceName())). }
true;protected;2;12;/**  * Build the HttpContext for the given endpoint.  * @param endpoint the JAX-WS Provider Endpoint object  * @param serviceName the given service name  * @return the fully populated HttpContext  */ ;/**  * Build the HttpContext for the given endpoint.  * @param endpoint the JAX-WS Provider Endpoint object  * @param serviceName the given service name  * @return the fully populated HttpContext  */ protected HttpContext buildHttpContext(Endpoint endpoint, String serviceName) {     Assert.state(this.server != null, "No HttpServer available").     String fullPath = calculateEndpointPath(endpoint, serviceName).     HttpContext httpContext = this.server.createContext(fullPath).     if (this.filters != null) {         httpContext.getFilters().addAll(this.filters).     }     if (this.authenticator != null) {         httpContext.setAuthenticator(this.authenticator).     }     return httpContext. }
true;protected;2;3;/**  * Calculate the full endpoint path for the given endpoint.  * @param endpoint the JAX-WS Provider Endpoint object  * @param serviceName the given service name  * @return the full endpoint path  */ ;/**  * Calculate the full endpoint path for the given endpoint.  * @param endpoint the JAX-WS Provider Endpoint object  * @param serviceName the given service name  * @return the full endpoint path  */ protected String calculateEndpointPath(Endpoint endpoint, String serviceName) {     return this.basePath + serviceName. }
false;public;0;8;;@Override public void destroy() {     super.destroy().     if (this.server != null && this.localServer) {         logger.info("Stopping HttpServer").         this.server.stop(this.shutdownDelay).     } }
