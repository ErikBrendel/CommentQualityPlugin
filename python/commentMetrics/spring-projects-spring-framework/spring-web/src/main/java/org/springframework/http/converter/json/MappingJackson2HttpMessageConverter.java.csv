# id;timestamp;commentText;codeText;commentWords;codeWords
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1336584340;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1336595362;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1336684649;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1340831268;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1345666836;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1350938507;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1353602122;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1356735495;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1357119239;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1367502719;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1367943115;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1367955086;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1368482696;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored.;public void setPrefixJson(boolean prefixJson) {_		this.prefixJson = prefixJson__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored;public,void,set,prefix,json,boolean,prefix,json,this,prefix,json,prefix,json
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1374268978;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = prefixJson ? "{} && " : null__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1375309233;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1375969081;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1388350243;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1388680038;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1391790437;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1400209413;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1400528836;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1400602424;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1404933789;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1407939778;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1408382828;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1412047095;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1414075691;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1434375869;Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the_string, the prefix would need to be ignored._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? "{} && " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,does,not,affect,the,evaluation,of,json,but,if,json,validation,is,performed,on,the,string,the,prefix,would,need,to,be,ignored,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1434447007;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1444898007;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1445855940;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1446549639;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1450368890;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1450393779;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1456785272;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1469546119;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1495569556;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1498780456;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> public void setPrefixJson(boolean prefixJson);1528452948;Indicate whether the JSON output by this view should be prefixed with ")]}', ". Default is false._<p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking._The prefix renders the string syntactically invalid as a script so that it cannot be hijacked._This prefix should be stripped before parsing the string as JSON._@see #setJsonPrefix;public void setPrefixJson(boolean prefixJson) {_		this.jsonPrefix = (prefixJson ? ")]}', " : null)__	};indicate,whether,the,json,output,by,this,view,should,be,prefixed,with,default,is,false,p,prefixing,the,json,string,in,this,manner,is,used,to,help,prevent,json,hijacking,the,prefix,renders,the,string,syntactically,invalid,as,a,script,so,that,it,cannot,be,hijacked,this,prefix,should,be,stripped,before,parsing,the,string,as,json,see,set,json,prefix;public,void,set,prefix,json,boolean,prefix,json,this,json,prefix,prefix,json,null
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Class<?> clazz);1336584340;Return the Jackson {@link JavaType} for the specified class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Class&lt_?&gt_ clazz) {_if (List.class.isAssignableFrom(clazz)) {_return objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(clazz)____</pre>_@param clazz the class to return the java type for_@return the java type;protected JavaType getJavaType(Class<?> clazz) {_		return objectMapper.constructType(clazz)__	};return,the,jackson,link,java,type,for,the,specified,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,class,lt,gt,clazz,if,list,class,is,assignable,from,clazz,return,object,mapper,get,type,factory,construct,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,clazz,pre,param,clazz,the,class,to,return,the,java,type,for,return,the,java,type;protected,java,type,get,java,type,class,clazz,return,object,mapper,construct,type,clazz
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Class<?> clazz);1336595362;Return the Jackson {@link JavaType} for the specified class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Class&lt_?&gt_ clazz) {_if (List.class.isAssignableFrom(clazz)) {_return objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(clazz)____</pre>_@param clazz the class to return the java type for_@return the java type;protected JavaType getJavaType(Class<?> clazz) {_		return objectMapper.constructType(clazz)__	};return,the,jackson,link,java,type,for,the,specified,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,class,lt,gt,clazz,if,list,class,is,assignable,from,clazz,return,object,mapper,get,type,factory,construct,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,clazz,pre,param,clazz,the,class,to,return,the,java,type,for,return,the,java,type;protected,java,type,get,java,type,class,clazz,return,object,mapper,construct,type,clazz
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Class<?> clazz);1336684649;Return the Jackson {@link JavaType} for the specified class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Class&lt_?&gt_ clazz) {_if (List.class.isAssignableFrom(clazz)) {_return objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(clazz)____</pre>_@param clazz the class to return the java type for_@return the java type;protected JavaType getJavaType(Class<?> clazz) {_		return objectMapper.constructType(clazz)__	};return,the,jackson,link,java,type,for,the,specified,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,class,lt,gt,clazz,if,list,class,is,assignable,from,clazz,return,object,mapper,get,type,factory,construct,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,clazz,pre,param,clazz,the,class,to,return,the,java,type,for,return,the,java,type;protected,java,type,get,java,type,class,clazz,return,object,mapper,construct,type,clazz
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Class<?> clazz);1340831268;Return the Jackson {@link JavaType} for the specified class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Class&lt_?&gt_ clazz) {_if (List.class.isAssignableFrom(clazz)) {_return objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(clazz)____</pre>_@param clazz the class to return the java type for_@return the java type;protected JavaType getJavaType(Class<?> clazz) {_		return objectMapper.constructType(clazz)__	};return,the,jackson,link,java,type,for,the,specified,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,class,lt,gt,clazz,if,list,class,is,assignable,from,clazz,return,object,mapper,get,type,factory,construct,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,clazz,pre,param,clazz,the,class,to,return,the,java,type,for,return,the,java,type;protected,java,type,get,java,type,class,clazz,return,object,mapper,construct,type,clazz
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1336595362;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1336684649;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1340831268;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1345666836;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1350938507;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1353602122;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1356735495;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1357119239;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1367502719;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1367943115;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre>_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1367955086;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1368482696;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1374268978;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1375309233;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1375969081;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1388350243;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1388680038;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1391790437;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1400209413;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1400528836;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1400602424;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1404933789;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1374268978;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1375309233;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1375969081;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1388350243;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1388680038;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1391790437;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1400209413;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1400528836;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1400602424;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1404933789;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1407939778;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1408382828;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1412047095;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1414075691;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1434375869;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1434447007;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1444898007;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1445855940;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1446549639;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1450368890;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1450393779;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1456785272;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1469546119;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1495569556;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1498780456;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public void setJsonPrefix(String jsonPrefix);1528452948;Specify a custom prefix to use for this view's JSON output._Default is none._@see #setPrefixJson;public void setJsonPrefix(String jsonPrefix) {_		this.jsonPrefix = jsonPrefix__	};specify,a,custom,prefix,to,use,for,this,view,s,json,output,default,is,none,see,set,prefix,json;public,void,set,json,prefix,string,json,prefix,this,json,prefix,json,prefix
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1336584340;Construct a new {@code BindingJacksonHttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET))__	};construct,a,new,code,binding,jackson,http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1336595362;Construct a new {@code BindingJacksonHttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET))__	};construct,a,new,code,binding,jackson,http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1336684649;Construct a new {@code BindingJacksonHttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET))__	};construct,a,new,code,binding,jackson,http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1340831268;Construct a new {@code BindingJacksonHttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET))__	};construct,a,new,code,binding,jackson,http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1345666836;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1350938507;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET), new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1353602122;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET), new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1356735495;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET), new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1357119239;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET), new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1367502719;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET), new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1367943115;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1367955086;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1368482696;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1374268978;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1375309233;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1375969081;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1388350243;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1388680038;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1391790437;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1400209413;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1400528836;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1400602424;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1404933789;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1407939778;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new ObjectMapper(), new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1408382828;Construct a new {@code MappingJackson2HttpMessageConverter}.;public MappingJackson2HttpMessageConverter() {_		super(new ObjectMapper(), new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,code,mapping,jackson2http,message,converter;public,mapping,jackson2http,message,converter,super,new,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1412047095;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1414075691;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1434375869;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1434447007;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1444898007;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1445855940;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1446549639;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1450368890;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1450393779;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1456785272;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1469546119;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1495569556;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1498780456;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter();1528452948;Construct a new {@link MappingJackson2HttpMessageConverter} using default configuration_provided by {@link Jackson2ObjectMapperBuilder}.;public MappingJackson2HttpMessageConverter() {_		this(Jackson2ObjectMapperBuilder.json().build())__	};construct,a,new,link,mapping,jackson2http,message,converter,using,default,configuration,provided,by,link,jackson2object,mapper,builder;public,mapping,jackson2http,message,converter,this,jackson2object,mapper,builder,json,build
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1336584340;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1336595362;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1336684649;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1340831268;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1345666836;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1350938507;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1353602122;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never <code>null</code>);protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null,code;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1356735495;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1357119239;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1367502719;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1367943115;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1367955086;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1368482696;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1374268978;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1375309233;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1375969081;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1388350243;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1388680038;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1391790437;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1400209413;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1400528836;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1400602424;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1404933789;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type);1345666836;Return the Jackson {@link JavaType} for the specified type._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@return the java type;protected JavaType getJavaType(Type type) {_		return this.objectMapper.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,return,the,java,type;protected,java,type,get,java,type,type,type,return,this,object,mapper,construct,type,type
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type);1350938507;Return the Jackson {@link JavaType} for the specified type._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@return the java type;protected JavaType getJavaType(Type type) {_		return this.objectMapper.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,return,the,java,type;protected,java,type,get,java,type,type,type,return,this,object,mapper,construct,type,type
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1412047095;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1414075691;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1434375869;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1434447007;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1444898007;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1445855940;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, new MediaType("application", "json", DEFAULT_CHARSET),_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,new,media,type,application,json,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1446549639;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON_UTF8,_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1450368890;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON_UTF8,_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1450393779;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON_UTF8,_				new MediaType("application", "*+json", DEFAULT_CHARSET))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1456785272;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON, new MediaType("application", "*+json"))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1469546119;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON, new MediaType("application", "*+json"))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1495569556;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON, new MediaType("application", "*+json"))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1498780456;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON, new MediaType("application", "*+json"))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper);1528452948;Construct a new {@link MappingJackson2HttpMessageConverter} with a custom {@link ObjectMapper}._You can use {@link Jackson2ObjectMapperBuilder} to build it easily._@see Jackson2ObjectMapperBuilder#json();public MappingJackson2HttpMessageConverter(ObjectMapper objectMapper) {_		super(objectMapper, MediaType.APPLICATION_JSON, new MediaType("application", "*+json"))__	};construct,a,new,link,mapping,jackson2http,message,converter,with,a,custom,link,object,mapper,you,can,use,link,jackson2object,mapper,builder,to,build,it,easily,see,jackson2object,mapper,builder,json;public,mapping,jackson2http,message,converter,object,mapper,object,mapper,super,object,mapper,media,type,new,media,type,application,json
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1336584340;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1336595362;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1336684649;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1340831268;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1345666836;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1350938507;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1353602122;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1356735495;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1357119239;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1367502719;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1367943115;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1367955086;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1368482696;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1374268978;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1375309233;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1375969081;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1388350243;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1388680038;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1391790437;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1400209413;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1400528836;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1400602424;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1404933789;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1353602122;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)}_or {@code ObjectMapper.getTypeFactory().constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return (contextClass != null) ?_			this.objectMapper.getTypeFactory().constructType(type, contextClass) :_			this.objectMapper.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,or,code,object,mapper,get,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,context,class,null,this,object,mapper,get,type,factory,construct,type,type,context,class,this,object,mapper,construct,type,type
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1356735495;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)}_or {@code ObjectMapper.getTypeFactory().constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return (contextClass != null) ?_			this.objectMapper.getTypeFactory().constructType(type, contextClass) :_			this.objectMapper.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,or,code,object,mapper,get,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,context,class,null,this,object,mapper,get,type,factory,construct,type,type,context,class,this,object,mapper,construct,type,type
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1357119239;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@link ObjectMapper#constructType(java.lang.reflect.Type)}_or {@code ObjectMapper.getTypeFactory().constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return (contextClass != null) ?_			this.objectMapper.getTypeFactory().constructType(type, contextClass) :_			this.objectMapper.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,link,object,mapper,construct,type,java,lang,reflect,type,or,code,object,mapper,get,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,context,class,null,this,object,mapper,get,type,factory,construct,type,type,context,class,this,object,mapper,construct,type,type
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1367502719;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1367943115;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1367955086;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1368482696;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1374268978;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1375309233;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1375969081;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1388350243;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1388680038;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1391790437;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1400209413;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1400528836;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1400602424;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1404933789;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1336584340;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1336595362;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1336684649;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1340831268;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1345666836;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1350938507;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1353602122;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1356735495;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1357119239;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1367502719;Set the {@code ObjectMapper} for this view. If not set, a default_{@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1367943115;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1367955086;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1368482696;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1374268978;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1375309233;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1375969081;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1388350243;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON_serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}_can be configured that provides custom serializers for specific types. The other option for refining_the serialization process is to use Jackson's provided annotations on the types to be serialized,_in which case a custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,org,codehaus,jackson,map,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1388680038;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1391790437;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1400209413;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1400528836;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1400602424;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1404933789;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
