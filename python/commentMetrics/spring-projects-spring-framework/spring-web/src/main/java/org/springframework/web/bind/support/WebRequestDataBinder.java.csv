commented;modifiers;parameterAmount;loc;comment;code
true;public;1;16;/**  * Bind the parameters of the given request to this binder's target,  * also binding multipart files in case of a multipart request.  * <p>This call can create field errors, representing basic binding  * errors like a required field (code "required"), or type mismatch  * between value and bean property (code "typeMismatch").  * <p>Multipart files are bound via their parameter name, just like normal  * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,  * invoking a "setUploadedFile" setter method.  * <p>The type of the target property for a multipart file can be Part, MultipartFile,  * byte[], or String. The latter two receive the contents of the uploaded file.  * all metadata like original file name, content type, etc are lost in those cases.  * @param request request with parameters to bind (can be multipart)  * @see org.springframework.web.multipart.MultipartRequest  * @see org.springframework.web.multipart.MultipartFile  * @see javax.servlet.http.Part  * @see #bind(org.springframework.beans.PropertyValues)  */ ;/**  * Bind the parameters of the given request to this binder's target,  * also binding multipart files in case of a multipart request.  * <p>This call can create field errors, representing basic binding  * errors like a required field (code "required"), or type mismatch  * between value and bean property (code "typeMismatch").  * <p>Multipart files are bound via their parameter name, just like normal  * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,  * invoking a "setUploadedFile" setter method.  * <p>The type of the target property for a multipart file can be Part, MultipartFile,  * byte[], or String. The latter two receive the contents of the uploaded file.  * all metadata like original file name, content type, etc are lost in those cases.  * @param request request with parameters to bind (can be multipart)  * @see org.springframework.web.multipart.MultipartRequest  * @see org.springframework.web.multipart.MultipartFile  * @see javax.servlet.http.Part  * @see #bind(org.springframework.beans.PropertyValues)  */ public void bind(WebRequest request) {     MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap()).     if (isMultipartRequest(request) && request instanceof NativeWebRequest) {         MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class).         if (multipartRequest != null) {             bindMultipart(multipartRequest.getMultiFileMap(), mpvs).         } else {             HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class).             if (servletRequest != null) {                 bindParts(servletRequest, mpvs).             }         }     }     doBind(mpvs). }
true;private;1;4;/**  * Check if the request is a multipart request (by checking its Content-Type header).  * @param request request with parameters to bind  */ ;/**  * Check if the request is a multipart request (by checking its Content-Type header).  * @param request request with parameters to bind  */ private boolean isMultipartRequest(WebRequest request) {     String contentType = request.getHeader("Content-Type").     return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart")). }
false;private;2;22;;private void bindParts(HttpServletRequest request, MutablePropertyValues mpvs) {     try {         MultiValueMap<String, Part> map = new LinkedMultiValueMap<>().         for (Part part : request.getParts()) {             map.add(part.getName(), part).         }         map.forEach((key, values) -> {             if (values.size() == 1) {                 Part part = values.get(0).                 if (isBindEmptyMultipartFiles() || part.getSize() > 0) {                     mpvs.add(key, part).                 }             } else {                 mpvs.add(key, values).             }         }).     } catch (Exception ex) {         throw new MultipartException("Failed to get request parts", ex).     } }
true;public;0;5;/**  * Treats errors as fatal.  * <p>Use this method only if it's an error if the input isn't valid.  * This might be appropriate if all input is from dropdowns, for example.  * @throws BindException if binding errors have been encountered  */ ;/**  * Treats errors as fatal.  * <p>Use this method only if it's an error if the input isn't valid.  * This might be appropriate if all input is from dropdowns, for example.  * @throws BindException if binding errors have been encountered  */ public void closeNoCatch() throws BindException {     if (getBindingResult().hasErrors()) {         throw new BindException(getBindingResult()).     } }
