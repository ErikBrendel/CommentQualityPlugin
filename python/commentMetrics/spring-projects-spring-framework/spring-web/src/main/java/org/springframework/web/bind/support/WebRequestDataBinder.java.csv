# id;timestamp;commentText;codeText;commentWords;codeWords
WebRequestDataBinder -> public void bind(WebRequest request);1328020251;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see #bindMultipartFiles_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,bind,multipart,files,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1356735495;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see #bindMultipartFiles_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,bind,multipart,files,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1380748784;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())___		if(isMultipartRequest(request) && (request instanceof NativeWebRequest)) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else if (ClassUtils.hasMethod(HttpServletRequest.class, "getParts")) {_				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				new Servlet3MultipartHelper().bindParts(serlvetRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,if,class,utils,has,method,http,servlet,request,class,get,parts,http,servlet,request,serlvet,request,native,web,request,request,get,native,request,http,servlet,request,class,new,servlet3multipart,helper,bind,parts,serlvet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1384910011;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())___		if(isMultipartRequest(request) && (request instanceof NativeWebRequest)) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else if (ClassUtils.hasMethod(HttpServletRequest.class, "getParts")) {_				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				new Servlet3MultipartHelper(isBindEmptyMultipartFiles()).bindParts(serlvetRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,if,class,utils,has,method,http,servlet,request,class,get,parts,http,servlet,request,serlvet,request,native,web,request,request,get,native,request,http,servlet,request,class,new,servlet3multipart,helper,is,bind,empty,multipart,files,bind,parts,serlvet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1405696918;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())___		if (isMultipartRequest(request) && (request instanceof NativeWebRequest)) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else if (ClassUtils.hasMethod(HttpServletRequest.class, "getParts")) {_				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				new Servlet3MultipartHelper(isBindEmptyMultipartFiles()).bindParts(serlvetRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,if,class,utils,has,method,http,servlet,request,class,get,parts,http,servlet,request,serlvet,request,native,web,request,request,get,native,request,http,servlet,request,class,new,servlet3multipart,helper,is,bind,empty,multipart,files,bind,parts,serlvet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1409792592;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else if (ClassUtils.hasMethod(HttpServletRequest.class, "getParts")) {_				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				new Servlet3MultipartHelper(isBindEmptyMultipartFiles()).bindParts(serlvetRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,if,class,utils,has,method,http,servlet,request,class,get,parts,http,servlet,request,serlvet,request,native,web,request,request,get,native,request,http,servlet,request,class,new,servlet3multipart,helper,is,bind,empty,multipart,files,bind,parts,serlvet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1467667881;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else {_				HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				bindParts(servletRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,http,servlet,request,servlet,request,native,web,request,request,get,native,request,http,servlet,request,class,bind,parts,servlet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1467730834;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else {_				HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				bindParts(servletRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,http,servlet,request,servlet,request,native,web,request,request,get,native,request,http,servlet,request,class,bind,parts,servlet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1495868221;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else {_				HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				bindParts(servletRequest, mpvs)__			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,http,servlet,request,servlet,request,native,web,request,request,get,native,request,http,servlet,request,class,bind,parts,servlet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1496837955;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else {_				HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				if (servletRequest != null) {_					bindParts(servletRequest, mpvs)__				}_			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,http,servlet,request,servlet,request,native,web,request,request,get,native,request,http,servlet,request,class,if,servlet,request,null,bind,parts,servlet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1498780456;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else {_				HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				if (servletRequest != null) {_					bindParts(servletRequest, mpvs)__				}_			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,http,servlet,request,servlet,request,native,web,request,request,get,native,request,http,servlet,request,class,if,servlet,request,null,bind,parts,servlet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void bind(WebRequest request);1522103912;Bind the parameters of the given request to this binder's target,_also binding multipart files in case of a multipart request._<p>This call can create field errors, representing basic binding_errors like a required field (code "required"), or type mismatch_between value and bean property (code "typeMismatch")._<p>Multipart files are bound via their parameter name, just like normal_HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,_invoking a "setUploadedFile" setter method._<p>The type of the target property for a multipart file can be Part, MultipartFile,_byte[], or String. The latter two receive the contents of the uploaded file__all metadata like original file name, content type, etc are lost in those cases._@param request request with parameters to bind (can be multipart)_@see org.springframework.web.multipart.MultipartRequest_@see org.springframework.web.multipart.MultipartFile_@see javax.servlet.http.Part_@see #bind(org.springframework.beans.PropertyValues);public void bind(WebRequest request) {_		MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap())__		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {_			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class)__			if (multipartRequest != null) {_				bindMultipart(multipartRequest.getMultiFileMap(), mpvs)__			}_			else {_				HttpServletRequest servletRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class)__				if (servletRequest != null) {_					bindParts(servletRequest, mpvs)__				}_			}_		}_		doBind(mpvs)__	};bind,the,parameters,of,the,given,request,to,this,binder,s,target,also,binding,multipart,files,in,case,of,a,multipart,request,p,this,call,can,create,field,errors,representing,basic,binding,errors,like,a,required,field,code,required,or,type,mismatch,between,value,and,bean,property,code,type,mismatch,p,multipart,files,are,bound,via,their,parameter,name,just,like,normal,http,parameters,i,e,uploaded,file,to,an,uploaded,file,bean,property,invoking,a,set,uploaded,file,setter,method,p,the,type,of,the,target,property,for,a,multipart,file,can,be,part,multipart,file,byte,or,string,the,latter,two,receive,the,contents,of,the,uploaded,file,all,metadata,like,original,file,name,content,type,etc,are,lost,in,those,cases,param,request,request,with,parameters,to,bind,can,be,multipart,see,org,springframework,web,multipart,multipart,request,see,org,springframework,web,multipart,multipart,file,see,javax,servlet,http,part,see,bind,org,springframework,beans,property,values;public,void,bind,web,request,request,mutable,property,values,mpvs,new,mutable,property,values,request,get,parameter,map,if,is,multipart,request,request,request,instanceof,native,web,request,multipart,request,multipart,request,native,web,request,request,get,native,request,multipart,request,class,if,multipart,request,null,bind,multipart,multipart,request,get,multi,file,map,mpvs,else,http,servlet,request,servlet,request,native,web,request,request,get,native,request,http,servlet,request,class,if,servlet,request,null,bind,parts,servlet,request,mpvs,do,bind,mpvs
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1328020251;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1356735495;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1380748784;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1384910011;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1405696918;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1409792592;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1467667881;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1467730834;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1495868221;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1496837955;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1498780456;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public void closeNoCatch() throws BindException;1522103912;Treats errors as fatal._<p>Use this method only if it's an error if the input isn't valid._This might be appropriate if all input is from dropdowns, for example._@throws BindException if binding errors have been encountered;public void closeNoCatch() throws BindException {_		if (getBindingResult().hasErrors()) {_			throw new BindException(getBindingResult())__		}_	};treats,errors,as,fatal,p,use,this,method,only,if,it,s,an,error,if,the,input,isn,t,valid,this,might,be,appropriate,if,all,input,is,from,dropdowns,for,example,throws,bind,exception,if,binding,errors,have,been,encountered;public,void,close,no,catch,throws,bind,exception,if,get,binding,result,has,errors,throw,new,bind,exception,get,binding,result
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target);1495868221;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(@Nullable Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,nullable,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target);1496837955;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(@Nullable Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,nullable,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target);1498780456;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(@Nullable Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,nullable,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target);1522103912;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(@Nullable Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,nullable,object,target,super,target
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1380748784;Check if the request is a multipart request (by checking its Content-Type header).__@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return ((contentType != null) && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1384910011;Check if the request is a multipart request (by checking its Content-Type header).__@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return ((contentType != null) && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1405696918;Check if the request is a multipart request (by checking its Content-Type header).__@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return ((contentType != null) && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1409792592;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1467667881;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1467730834;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1495868221;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1496837955;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1498780456;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> private boolean isMultipartRequest(WebRequest request);1522103912;Check if the request is a multipart request (by checking its Content-Type header)._@param request request with parameters to bind;private boolean isMultipartRequest(WebRequest request) {_		String contentType = request.getHeader("Content-Type")__		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"))__	};check,if,the,request,is,a,multipart,request,by,checking,its,content,type,header,param,request,request,with,parameters,to,bind;private,boolean,is,multipart,request,web,request,request,string,content,type,request,get,header,content,type,return,content,type,null,string,utils,starts,with,ignore,case,content,type,multipart
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1328020251;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or <code>null</code>_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,code,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1356735495;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1380748784;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1384910011;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1405696918;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1409792592;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1467667881;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target, String objectName);1467730834;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target, String objectName);1495868221;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(@Nullable Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,nullable,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target, String objectName);1498780456;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(@Nullable Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,nullable,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(@Nullable Object target, String objectName);1522103912;Create a new WebRequestDataBinder instance._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@param objectName the name of the target object;public WebRequestDataBinder(@Nullable Object target, String objectName) {_		super(target, objectName)__	};create,a,new,web,request,data,binder,instance,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,param,object,name,the,name,of,the,target,object;public,web,request,data,binder,nullable,object,target,string,object,name,super,target,object,name
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1328020251;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or <code>null</code>_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,code,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1356735495;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1380748784;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1384910011;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1405696918;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1409792592;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1467667881;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
WebRequestDataBinder -> public WebRequestDataBinder(Object target);1467730834;Create a new WebRequestDataBinder instance, with default object name._@param target the target object to bind onto (or {@code null}_if the binder is just used to convert a plain parameter value)_@see #DEFAULT_OBJECT_NAME;public WebRequestDataBinder(Object target) {_		super(target)__	};create,a,new,web,request,data,binder,instance,with,default,object,name,param,target,the,target,object,to,bind,onto,or,code,null,if,the,binder,is,just,used,to,convert,a,plain,parameter,value,see;public,web,request,data,binder,object,target,super,target
