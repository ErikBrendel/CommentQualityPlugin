commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Determine if the given request contains multipart content.  * <p>Will typically check for content type "multipart/form-data", but the actually  * accepted requests might depend on the capabilities of the resolver implementation.  * @param request the servlet request to be evaluated  * @return whether the request contains multipart content  */ ;/**  * Determine if the given request contains multipart content.  * <p>Will typically check for content type "multipart/form-data", but the actually  * accepted requests might depend on the capabilities of the resolver implementation.  * @param request the servlet request to be evaluated  * @return whether the request contains multipart content  */ boolean isMultipart(HttpServletRequest request).
true;;1;1;/**  * Parse the given HTTP request into multipart files and parameters,  * and wrap the request inside a  * {@link org.springframework.web.multipart.MultipartHttpServletRequest}  * object that provides access to file descriptors and makes contained  * parameters accessible via the standard ServletRequest methods.  * @param request the servlet request to wrap (must be of a multipart content type)  * @return the wrapped servlet request  * @throws MultipartException if the servlet request is not multipart, or if  * implementation-specific problems are encountered (such as exceeding file size limits)  * @see MultipartHttpServletRequest#getFile  * @see MultipartHttpServletRequest#getFileNames  * @see MultipartHttpServletRequest#getFileMap  * @see javax.servlet.http.HttpServletRequest#getParameter  * @see javax.servlet.http.HttpServletRequest#getParameterNames  * @see javax.servlet.http.HttpServletRequest#getParameterMap  */ ;/**  * Parse the given HTTP request into multipart files and parameters,  * and wrap the request inside a  * {@link org.springframework.web.multipart.MultipartHttpServletRequest}  * object that provides access to file descriptors and makes contained  * parameters accessible via the standard ServletRequest methods.  * @param request the servlet request to wrap (must be of a multipart content type)  * @return the wrapped servlet request  * @throws MultipartException if the servlet request is not multipart, or if  * implementation-specific problems are encountered (such as exceeding file size limits)  * @see MultipartHttpServletRequest#getFile  * @see MultipartHttpServletRequest#getFileNames  * @see MultipartHttpServletRequest#getFileMap  * @see javax.servlet.http.HttpServletRequest#getParameter  * @see javax.servlet.http.HttpServletRequest#getParameterNames  * @see javax.servlet.http.HttpServletRequest#getParameterMap  */ MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException.
true;;1;1;/**  * Cleanup any resources used for the multipart handling,  * like a storage for the uploaded files.  * @param request the request to cleanup resources for  */ ;/**  * Cleanup any resources used for the multipart handling,  * like a storage for the uploaded files.  * @param request the request to cleanup resources for  */ void cleanupMultipart(MultipartHttpServletRequest request).
