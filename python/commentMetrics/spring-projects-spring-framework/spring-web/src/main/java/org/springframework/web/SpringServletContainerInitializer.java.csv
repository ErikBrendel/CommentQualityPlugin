commented;modifiers;parameterAmount;loc;comment;code
true;public;2;34;/**  * Delegate the {@code ServletContext} to any {@link WebApplicationInitializer}  * implementations present on the application classpath.  * <p>Because this class declares @{@code HandlesTypes(WebApplicationInitializer.class)},  * Servlet 3.0+ containers will automatically scan the classpath for implementations  * of Spring's {@code WebApplicationInitializer} interface and provide the set of all  * such types to the {@code webAppInitializerClasses} parameter of this method.  * <p>If no {@code WebApplicationInitializer} implementations are found on the classpath,  * this method is effectively a no-op. An INFO-level log message will be issued notifying  * the user that the {@code ServletContainerInitializer} has indeed been invoked but that  * no {@code WebApplicationInitializer} implementations were found.  * <p>Assuming that one or more {@code WebApplicationInitializer} types are detected,  * they will be instantiated (and <em>sorted</em> if the @{@link  * org.springframework.core.annotation.Order @Order} annotation is present or  * the {@link org.springframework.core.Ordered Ordered} interface has been  * implemented). Then the {@link WebApplicationInitializer#onStartup(ServletContext)}  * method will be invoked on each instance, delegating the {@code ServletContext} such  * that each instance may register and configure servlets such as Spring's  * {@code DispatcherServlet}, listeners such as Spring's {@code ContextLoaderListener},  * or any other Servlet API componentry such as filters.  * @param webAppInitializerClasses all implementations of  * {@link WebApplicationInitializer} found on the application classpath  * @param servletContext the servlet context to be initialized  * @see WebApplicationInitializer#onStartup(ServletContext)  * @see AnnotationAwareOrderComparator  */ ;/**  * Delegate the {@code ServletContext} to any {@link WebApplicationInitializer}  * implementations present on the application classpath.  * <p>Because this class declares @{@code HandlesTypes(WebApplicationInitializer.class)},  * Servlet 3.0+ containers will automatically scan the classpath for implementations  * of Spring's {@code WebApplicationInitializer} interface and provide the set of all  * such types to the {@code webAppInitializerClasses} parameter of this method.  * <p>If no {@code WebApplicationInitializer} implementations are found on the classpath,  * this method is effectively a no-op. An INFO-level log message will be issued notifying  * the user that the {@code ServletContainerInitializer} has indeed been invoked but that  * no {@code WebApplicationInitializer} implementations were found.  * <p>Assuming that one or more {@code WebApplicationInitializer} types are detected,  * they will be instantiated (and <em>sorted</em> if the @{@link  * org.springframework.core.annotation.Order @Order} annotation is present or  * the {@link org.springframework.core.Ordered Ordered} interface has been  * implemented). Then the {@link WebApplicationInitializer#onStartup(ServletContext)}  * method will be invoked on each instance, delegating the {@code ServletContext} such  * that each instance may register and configure servlets such as Spring's  * {@code DispatcherServlet}, listeners such as Spring's {@code ContextLoaderListener},  * or any other Servlet API componentry such as filters.  * @param webAppInitializerClasses all implementations of  * {@link WebApplicationInitializer} found on the application classpath  * @param servletContext the servlet context to be initialized  * @see WebApplicationInitializer#onStartup(ServletContext)  * @see AnnotationAwareOrderComparator  */ @Override public void onStartup(@Nullable Set<Class<?>> webAppInitializerClasses, ServletContext servletContext) throws ServletException {     List<WebApplicationInitializer> initializers = new LinkedList<>().     if (webAppInitializerClasses != null) {         for (Class<?> waiClass : webAppInitializerClasses) {             // no matter what @HandlesTypes says...             if (!waiClass.isInterface() && !Modifier.isAbstract(waiClass.getModifiers()) && WebApplicationInitializer.class.isAssignableFrom(waiClass)) {                 try {                     initializers.add((WebApplicationInitializer) ReflectionUtils.accessibleConstructor(waiClass).newInstance()).                 } catch (Throwable ex) {                     throw new ServletException("Failed to instantiate WebApplicationInitializer class", ex).                 }             }         }     }     if (initializers.isEmpty()) {         servletContext.log("No Spring WebApplicationInitializer types detected on classpath").         return.     }     servletContext.log(initializers.size() + " Spring WebApplicationInitializers detected on classpath").     AnnotationAwareOrderComparator.sort(initializers).     for (WebApplicationInitializer initializer : initializers) {         initializer.onStartup(servletContext).     } }
