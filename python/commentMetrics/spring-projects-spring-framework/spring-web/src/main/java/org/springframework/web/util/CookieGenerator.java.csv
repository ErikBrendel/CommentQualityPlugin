commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Use the given name for cookies created by this generator.  * @see javax.servlet.http.Cookie#getName()  */ ;/**  * Use the given name for cookies created by this generator.  * @see javax.servlet.http.Cookie#getName()  */ public void setCookieName(@Nullable String cookieName) {     this.cookieName = cookieName. }
true;public;0;4;/**  * Return the given name for cookies created by this generator.  */ ;/**  * Return the given name for cookies created by this generator.  */ @Nullable public String getCookieName() {     return this.cookieName. }
true;public;1;3;/**  * Use the given domain for cookies created by this generator.  * The cookie is only visible to servers in this domain.  * @see javax.servlet.http.Cookie#setDomain  */ ;/**  * Use the given domain for cookies created by this generator.  * The cookie is only visible to servers in this domain.  * @see javax.servlet.http.Cookie#setDomain  */ public void setCookieDomain(@Nullable String cookieDomain) {     this.cookieDomain = cookieDomain. }
true;public;0;4;/**  * Return the domain for cookies created by this generator, if any.  */ ;/**  * Return the domain for cookies created by this generator, if any.  */ @Nullable public String getCookieDomain() {     return this.cookieDomain. }
true;public;1;3;/**  * Use the given path for cookies created by this generator.  * The cookie is only visible to URLs in this path and below.  * @see javax.servlet.http.Cookie#setPath  */ ;/**  * Use the given path for cookies created by this generator.  * The cookie is only visible to URLs in this path and below.  * @see javax.servlet.http.Cookie#setPath  */ public void setCookiePath(String cookiePath) {     this.cookiePath = cookiePath. }
true;public;0;3;/**  * Return the path for cookies created by this generator.  */ ;/**  * Return the path for cookies created by this generator.  */ public String getCookiePath() {     return this.cookiePath. }
true;public;1;3;/**  * Use the given maximum age (in seconds) for cookies created by this generator.  * Useful special value: -1 ... not persistent, deleted when client shuts down.  * <p>Default is no specific maximum age at all, using the Servlet container's  * default.  * @see javax.servlet.http.Cookie#setMaxAge  */ ;/**  * Use the given maximum age (in seconds) for cookies created by this generator.  * Useful special value: -1 ... not persistent, deleted when client shuts down.  * <p>Default is no specific maximum age at all, using the Servlet container's  * default.  * @see javax.servlet.http.Cookie#setMaxAge  */ public void setCookieMaxAge(@Nullable Integer cookieMaxAge) {     this.cookieMaxAge = cookieMaxAge. }
true;public;0;4;/**  * Return the maximum age for cookies created by this generator.  */ ;/**  * Return the maximum age for cookies created by this generator.  */ @Nullable public Integer getCookieMaxAge() {     return this.cookieMaxAge. }
true;public;1;3;/**  * Set whether the cookie should only be sent using a secure protocol,  * such as HTTPS (SSL). This is an indication to the receiving browser,  * not processed by the HTTP server itself.  * <p>Default is "false".  * @see javax.servlet.http.Cookie#setSecure  */ ;/**  * Set whether the cookie should only be sent using a secure protocol,  * such as HTTPS (SSL). This is an indication to the receiving browser,  * not processed by the HTTP server itself.  * <p>Default is "false".  * @see javax.servlet.http.Cookie#setSecure  */ public void setCookieSecure(boolean cookieSecure) {     this.cookieSecure = cookieSecure. }
true;public;0;3;/**  * Return whether the cookie should only be sent using a secure protocol,  * such as HTTPS (SSL).  */ ;/**  * Return whether the cookie should only be sent using a secure protocol,  * such as HTTPS (SSL).  */ public boolean isCookieSecure() {     return this.cookieSecure. }
true;public;1;3;/**  * Set whether the cookie is supposed to be marked with the "HttpOnly" attribute.  * <p>Default is "false".  * @see javax.servlet.http.Cookie#setHttpOnly  */ ;/**  * Set whether the cookie is supposed to be marked with the "HttpOnly" attribute.  * <p>Default is "false".  * @see javax.servlet.http.Cookie#setHttpOnly  */ public void setCookieHttpOnly(boolean cookieHttpOnly) {     this.cookieHttpOnly = cookieHttpOnly. }
true;public;0;3;/**  * Return whether the cookie is supposed to be marked with the "HttpOnly" attribute.  */ ;/**  * Return whether the cookie is supposed to be marked with the "HttpOnly" attribute.  */ public boolean isCookieHttpOnly() {     return this.cookieHttpOnly. }
true;public;2;18;/**  * Add a cookie with the given value to the response,  * using the cookie descriptor settings of this generator.  * <p>Delegates to {@link #createCookie} for cookie creation.  * @param response the HTTP response to add the cookie to  * @param cookieValue the value of the cookie to add  * @see #setCookieName  * @see #setCookieDomain  * @see #setCookiePath  * @see #setCookieMaxAge  */ ;/**  * Add a cookie with the given value to the response,  * using the cookie descriptor settings of this generator.  * <p>Delegates to {@link #createCookie} for cookie creation.  * @param response the HTTP response to add the cookie to  * @param cookieValue the value of the cookie to add  * @see #setCookieName  * @see #setCookieDomain  * @see #setCookiePath  * @see #setCookieMaxAge  */ public void addCookie(HttpServletResponse response, String cookieValue) {     Assert.notNull(response, "HttpServletResponse must not be null").     Cookie cookie = createCookie(cookieValue).     Integer maxAge = getCookieMaxAge().     if (maxAge != null) {         cookie.setMaxAge(maxAge).     }     if (isCookieSecure()) {         cookie.setSecure(true).     }     if (isCookieHttpOnly()) {         cookie.setHttpOnly(true).     }     response.addCookie(cookie).     if (logger.isTraceEnabled()) {         logger.trace("Added cookie [" + getCookieName() + "=" + cookieValue + "]").     } }
true;public;1;15;/**  * Remove the cookie that this generator describes from the response.  * Will generate a cookie with empty value and max age 0.  * <p>Delegates to {@link #createCookie} for cookie creation.  * @param response the HTTP response to remove the cookie from  * @see #setCookieName  * @see #setCookieDomain  * @see #setCookiePath  */ ;/**  * Remove the cookie that this generator describes from the response.  * Will generate a cookie with empty value and max age 0.  * <p>Delegates to {@link #createCookie} for cookie creation.  * @param response the HTTP response to remove the cookie from  * @see #setCookieName  * @see #setCookieDomain  * @see #setCookiePath  */ public void removeCookie(HttpServletResponse response) {     Assert.notNull(response, "HttpServletResponse must not be null").     Cookie cookie = createCookie("").     cookie.setMaxAge(0).     if (isCookieSecure()) {         cookie.setSecure(true).     }     if (isCookieHttpOnly()) {         cookie.setHttpOnly(true).     }     response.addCookie(cookie).     if (logger.isTraceEnabled()) {         logger.trace("Removed cookie '" + getCookieName() + "'").     } }
true;protected;1;8;/**  * Create a cookie with the given value, using the cookie descriptor  * settings of this generator (except for "cookieMaxAge").  * @param cookieValue the value of the cookie to crate  * @return the cookie  * @see #setCookieName  * @see #setCookieDomain  * @see #setCookiePath  */ ;/**  * Create a cookie with the given value, using the cookie descriptor  * settings of this generator (except for "cookieMaxAge").  * @param cookieValue the value of the cookie to crate  * @return the cookie  * @see #setCookieName  * @see #setCookieDomain  * @see #setCookiePath  */ protected Cookie createCookie(String cookieValue) {     Cookie cookie = new Cookie(getCookieName(), cookieValue).     if (getCookieDomain() != null) {         cookie.setDomain(getCookieDomain()).     }     cookie.setPath(getCookiePath()).     return cookie. }
