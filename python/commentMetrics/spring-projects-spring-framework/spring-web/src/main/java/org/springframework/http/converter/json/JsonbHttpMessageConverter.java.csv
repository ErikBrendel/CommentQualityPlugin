commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@code Jsonb} instance to use.  * If not set, a default {@code Jsonb} instance will be created.  * <p>Setting a custom-configured {@code Jsonb} is one way to take further  * control of the JSON serialization process.  * @see #JsonbHttpMessageConverter(Jsonb)  * @see #JsonbHttpMessageConverter(JsonbConfig)  * @see JsonbBuilder  */ ;/**  * Set the {@code Jsonb} instance to use.  * If not set, a default {@code Jsonb} instance will be created.  * <p>Setting a custom-configured {@code Jsonb} is one way to take further  * control of the JSON serialization process.  * @see #JsonbHttpMessageConverter(Jsonb)  * @see #JsonbHttpMessageConverter(JsonbConfig)  * @see JsonbBuilder  */ public void setJsonb(Jsonb jsonb) {     Assert.notNull(jsonb, "A Jsonb instance is required").     this.jsonb = jsonb. }
true;public;0;3;/**  * Return the configured {@code Jsonb} instance for this converter.  */ ;/**  * Return the configured {@code Jsonb} instance for this converter.  */ public Jsonb getJsonb() {     return this.jsonb. }
false;protected;2;4;;@Override protected Object readInternal(Type resolvedType, Reader reader) throws Exception {     return getJsonb().fromJson(reader, resolvedType). }
false;protected;3;9;;@Override protected void writeInternal(Object o, @Nullable Type type, Writer writer) throws Exception {     if (type instanceof ParameterizedType) {         getJsonb().toJson(o, type, writer).     } else {         getJsonb().toJson(o, writer).     } }
