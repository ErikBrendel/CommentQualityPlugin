# id;timestamp;commentText;codeText;commentWords;codeWords
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1328020251;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never <code>null</code>)_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,code,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1354631886;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never <code>null</code>)_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,code,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1356735495;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never {@code null})_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1367955086;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never {@code null})_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1500495740;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never {@code null})_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1520528267;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never {@code null})_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected WebApplicationContext getWebApplicationContext(FacesContext facesContext);1530174524;Retrieve the web application context to delegate bean name resolution to._<p>Default implementation delegates to FacesContextUtils._@param facesContext the current JSF context_@return the Spring web application context (never {@code null})_@see FacesContextUtils#getRequiredWebApplicationContext;protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {_		return FacesContextUtils.getRequiredWebApplicationContext(facesContext)__	};retrieve,the,web,application,context,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,faces,context,utils,param,faces,context,the,current,jsf,context,return,the,spring,web,application,context,never,code,null,see,faces,context,utils,get,required,web,application,context;protected,web,application,context,get,web,application,context,faces,context,faces,context,return,faces,context,utils,get,required,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1328020251;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1354631886;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1356735495;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1367955086;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1500495740;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1520528267;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy();1530174524;Create a new DelegatingNavigationHandlerProxy.;public DelegatingNavigationHandlerProxy() {_	};create,a,new,delegating,navigation,handler,proxy;public,delegating,navigation,handler,proxy
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1328020251;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to <code>getWebApplicationContext</code>._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never <code>null</code>)_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,code,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,code,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1354631886;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to <code>getWebApplicationContext</code>._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never <code>null</code>)_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,code,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,code,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1356735495;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to {@code getWebApplicationContext}._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never {@code null})_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1367955086;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to {@code getWebApplicationContext}._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never {@code null})_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1500495740;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to {@code getWebApplicationContext}._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never {@code null})_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1520528267;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to {@code getWebApplicationContext}._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never {@code null})_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> protected BeanFactory getBeanFactory(FacesContext facesContext);1530174524;Retrieve the Spring BeanFactory to delegate bean name resolution to._<p>Default implementation delegates to {@code getWebApplicationContext}._Can be overridden to provide an arbitrary BeanFactory reference to resolve_against_ usually, this will be a full Spring ApplicationContext._@param facesContext the current JSF context_@return the Spring BeanFactory (never {@code null})_@see #getWebApplicationContext;protected BeanFactory getBeanFactory(FacesContext facesContext) {_		return getWebApplicationContext(facesContext)__	};retrieve,the,spring,bean,factory,to,delegate,bean,name,resolution,to,p,default,implementation,delegates,to,code,get,web,application,context,can,be,overridden,to,provide,an,arbitrary,bean,factory,reference,to,resolve,against,usually,this,will,be,a,full,spring,application,context,param,faces,context,the,current,jsf,context,return,the,spring,bean,factory,never,code,null,see,get,web,application,context;protected,bean,factory,get,bean,factory,faces,context,faces,context,return,get,web,application,context,faces,context
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1328020251;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_<code>handleNavigation</code> method with the original NavigationHandler_as argument will be used. Else, the standard <code>handleNavigation</code>_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,code,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,code,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1354631886;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_<code>handleNavigation</code> method with the original NavigationHandler_as argument will be used. Else, the standard <code>handleNavigation</code>_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,code,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,code,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1356735495;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_{@code handleNavigation} method with the original NavigationHandler_as argument will be used. Else, the standard {@code handleNavigation}_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1367955086;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_{@code handleNavigation} method with the original NavigationHandler_as argument will be used. Else, the standard {@code handleNavigation}_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1500495740;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_{@code handleNavigation} method with the original NavigationHandler_as argument will be used. Else, the standard {@code handleNavigation}_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1520528267;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_{@code handleNavigation} method with the original NavigationHandler_as argument will be used. Else, the standard {@code handleNavigation}_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> @Override 	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1530174524;Handle the navigation request implied by the specified parameters,_through delegating to the target bean in the Spring application context._<p>The target bean needs to extend the JSF NavigationHandler class._If it extends Spring's DecoratingNavigationHandler, the overloaded_{@code handleNavigation} method with the original NavigationHandler_as argument will be used. Else, the standard {@code handleNavigation}_method will be called.;@Override_	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		NavigationHandler handler = getDelegate(facesContext)__		if (handler instanceof DecoratingNavigationHandler) {_			((DecoratingNavigationHandler) handler).handleNavigation(_					facesContext, fromAction, outcome, this.originalNavigationHandler)__		}_		else {_			handler.handleNavigation(facesContext, fromAction, outcome)__		}_	};handle,the,navigation,request,implied,by,the,specified,parameters,through,delegating,to,the,target,bean,in,the,spring,application,context,p,the,target,bean,needs,to,extend,the,jsf,navigation,handler,class,if,it,extends,spring,s,decorating,navigation,handler,the,overloaded,code,handle,navigation,method,with,the,original,navigation,handler,as,argument,will,be,used,else,the,standard,code,handle,navigation,method,will,be,called;override,public,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,handler,get,delegate,faces,context,if,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,handler,handle,navigation,faces,context,from,action,outcome,this,original,navigation,handler,else,handler,handle,navigation,faces,context,from,action,outcome
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1328020251;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1354631886;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1356735495;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1367955086;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1500495740;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1520528267;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> protected String getTargetBeanName(FacesContext facesContext);1530174524;Return the name of the target NavigationHandler bean in the BeanFactory._Default is "jsfNavigationHandler"._@param facesContext the current JSF context_@return the name of the target bean;protected String getTargetBeanName(FacesContext facesContext) {_		return DEFAULT_TARGET_BEAN_NAME__	};return,the,name,of,the,target,navigation,handler,bean,in,the,bean,factory,default,is,jsf,navigation,handler,param,faces,context,the,current,jsf,context,return,the,name,of,the,target,bean;protected,string,get,target,bean,name,faces,context,faces,context,return
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1328020251;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1354631886;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1356735495;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1367955086;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1500495740;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1520528267;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler);1530174524;Create a new DelegatingNavigationHandlerProxy._@param originalNavigationHandler the original NavigationHandler;public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {_		this.originalNavigationHandler = originalNavigationHandler__	};create,a,new,delegating,navigation,handler,proxy,param,original,navigation,handler,the,original,navigation,handler;public,delegating,navigation,handler,proxy,navigation,handler,original,navigation,handler,this,original,navigation,handler,original,navigation,handler
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1328020251;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return (NavigationHandler) getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,navigation,handler,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1354631886;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1356735495;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1367955086;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1500495740;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1520528267;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
DelegatingNavigationHandlerProxy -> protected NavigationHandler getDelegate(FacesContext facesContext);1530174524;Return the target NavigationHandler to delegate to._<p>By default, a bean with the name "jsfNavigationHandler" is obtained_from the Spring root WebApplicationContext, for every invocation._@param facesContext the current JSF context_@return the target NavigationHandler to delegate to_@see #getTargetBeanName_@see #getBeanFactory;protected NavigationHandler getDelegate(FacesContext facesContext) {_		String targetBeanName = getTargetBeanName(facesContext)__		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class)__	};return,the,target,navigation,handler,to,delegate,to,p,by,default,a,bean,with,the,name,jsf,navigation,handler,is,obtained,from,the,spring,root,web,application,context,for,every,invocation,param,faces,context,the,current,jsf,context,return,the,target,navigation,handler,to,delegate,to,see,get,target,bean,name,see,get,bean,factory;protected,navigation,handler,get,delegate,faces,context,faces,context,string,target,bean,name,get,target,bean,name,faces,context,return,get,bean,factory,faces,context,get,bean,target,bean,name,navigation,handler,class
