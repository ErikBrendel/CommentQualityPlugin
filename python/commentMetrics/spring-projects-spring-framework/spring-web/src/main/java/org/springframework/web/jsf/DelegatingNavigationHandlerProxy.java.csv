commented;modifiers;parameterAmount;loc;comment;code
true;public;3;11;/**  * Handle the navigation request implied by the specified parameters,  * through delegating to the target bean in the Spring application context.  * <p>The target bean needs to extend the JSF NavigationHandler class.  * If it extends Spring's DecoratingNavigationHandler, the overloaded  * {@code handleNavigation} method with the original NavigationHandler  * as argument will be used. Else, the standard {@code handleNavigation}  * method will be called.  */ ;/**  * Handle the navigation request implied by the specified parameters,  * through delegating to the target bean in the Spring application context.  * <p>The target bean needs to extend the JSF NavigationHandler class.  * If it extends Spring's DecoratingNavigationHandler, the overloaded  * {@code handleNavigation} method with the original NavigationHandler  * as argument will be used. Else, the standard {@code handleNavigation}  * method will be called.  */ @Override public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {     NavigationHandler handler = getDelegate(facesContext).     if (handler instanceof DecoratingNavigationHandler) {         ((DecoratingNavigationHandler) handler).handleNavigation(facesContext, fromAction, outcome, this.originalNavigationHandler).     } else {         handler.handleNavigation(facesContext, fromAction, outcome).     } }
true;protected;1;4;/**  * Return the target NavigationHandler to delegate to.  * <p>By default, a bean with the name "jsfNavigationHandler" is obtained  * from the Spring root WebApplicationContext, for every invocation.  * @param facesContext the current JSF context  * @return the target NavigationHandler to delegate to  * @see #getTargetBeanName  * @see #getBeanFactory  */ ;/**  * Return the target NavigationHandler to delegate to.  * <p>By default, a bean with the name "jsfNavigationHandler" is obtained  * from the Spring root WebApplicationContext, for every invocation.  * @param facesContext the current JSF context  * @return the target NavigationHandler to delegate to  * @see #getTargetBeanName  * @see #getBeanFactory  */ protected NavigationHandler getDelegate(FacesContext facesContext) {     String targetBeanName = getTargetBeanName(facesContext).     return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class). }
true;protected;1;3;/**  * Return the name of the target NavigationHandler bean in the BeanFactory.  * Default is "jsfNavigationHandler".  * @param facesContext the current JSF context  * @return the name of the target bean  */ ;/**  * Return the name of the target NavigationHandler bean in the BeanFactory.  * Default is "jsfNavigationHandler".  * @param facesContext the current JSF context  * @return the name of the target bean  */ protected String getTargetBeanName(FacesContext facesContext) {     return DEFAULT_TARGET_BEAN_NAME. }
true;protected;1;3;/**  * Retrieve the Spring BeanFactory to delegate bean name resolution to.  * <p>Default implementation delegates to {@code getWebApplicationContext}.  * Can be overridden to provide an arbitrary BeanFactory reference to resolve  * against. usually, this will be a full Spring ApplicationContext.  * @param facesContext the current JSF context  * @return the Spring BeanFactory (never {@code null})  * @see #getWebApplicationContext  */ ;/**  * Retrieve the Spring BeanFactory to delegate bean name resolution to.  * <p>Default implementation delegates to {@code getWebApplicationContext}.  * Can be overridden to provide an arbitrary BeanFactory reference to resolve  * against. usually, this will be a full Spring ApplicationContext.  * @param facesContext the current JSF context  * @return the Spring BeanFactory (never {@code null})  * @see #getWebApplicationContext  */ protected BeanFactory getBeanFactory(FacesContext facesContext) {     return getWebApplicationContext(facesContext). }
true;protected;1;3;/**  * Retrieve the web application context to delegate bean name resolution to.  * <p>Default implementation delegates to FacesContextUtils.  * @param facesContext the current JSF context  * @return the Spring web application context (never {@code null})  * @see FacesContextUtils#getRequiredWebApplicationContext  */ ;/**  * Retrieve the web application context to delegate bean name resolution to.  * <p>Default implementation delegates to FacesContextUtils.  * @param facesContext the current JSF context  * @return the Spring web application context (never {@code null})  * @see FacesContextUtils#getRequiredWebApplicationContext  */ protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {     return FacesContextUtils.getRequiredWebApplicationContext(facesContext). }
