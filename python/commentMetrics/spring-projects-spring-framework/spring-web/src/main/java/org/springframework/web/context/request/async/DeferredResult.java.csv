# id;timestamp;commentText;codeText;commentWords;codeWords
DeferredResult -> @Nullable 	public Object getResult();1495868221;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1498500776;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1498503011;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1498505691;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1498811619;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1502974979;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1529721864;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1530174524;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> @Nullable 	public Object getResult();1539303961;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;@Nullable_	public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;nullable,public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> public final boolean isSetOrExpired();1355176032;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1355313310;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1362408075;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1368565306;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1372363092;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1413848647;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1433962044;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1441886675;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1444835709;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1467808333;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1481813027;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1481975838;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1495868221;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1498500776;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1498503011;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1498505691;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1498811619;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1502974979;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1529721864;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1530174524;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public final boolean isSetOrExpired();1539303961;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public final boolean isSetOrExpired() {_		return (this.result != RESULT_NONE || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,final,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> final Long getTimeoutValue();1355176032;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1355313310;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1362408075;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1368565306;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1372363092;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1413848647;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1433962044;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1441886675;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1444835709;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1467808333;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1481813027;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1481975838;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1495868221;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1498500776;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1498503011;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1498505691;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> final Long getTimeoutValue();1498811619;Return the configured timeout value in milliseconds.;final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;final,long,get,timeout,value,return,this,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1495868221;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1498500776;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1498503011;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1498505691;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1498811619;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1502974979;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1529721864;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(@Nullable Long timeout, Object timeoutResult);1530174524;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(@Nullable Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,nullable,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Object timeoutResult);1335476311;Create a new instance and also provide a default result to use if a_timeout occurs before {@link #set(Object)} is called.;public DeferredResult(Object timeoutResult) {_		this.timeoutResult = timeoutResult__	};create,a,new,instance,and,also,provide,a,default,result,to,use,if,a,timeout,occurs,before,link,set,object,is,called;public,deferred,result,object,timeout,result,this,timeout,result,timeout,result
DeferredResult -> public DeferredResult(Object timeoutResult);1336766876;Create a new instance and also provide a default result to use if a_timeout occurs before {@link #set(Object)} is called.;public DeferredResult(Object timeoutResult) {_		this.timeoutResult = timeoutResult__	};create,a,new,instance,and,also,provide,a,default,result,to,use,if,a,timeout,occurs,before,link,set,object,is,called;public,deferred,result,object,timeout,result,this,timeout,result,timeout,result
DeferredResult -> public DeferredResult(Object timeoutResult);1345223391;Create a DeferredResult with a default result to use in case of a timeout._@param timeoutResult the result to use;public DeferredResult(Object timeoutResult) {_		this.timeoutResult = timeoutResult__	};create,a,deferred,result,with,a,default,result,to,use,in,case,of,a,timeout,param,timeout,result,the,result,to,use;public,deferred,result,object,timeout,result,this,timeout,result,timeout,result
DeferredResult -> public void onError(Consumer<Throwable> callback);1498500776;Register code to invoke when an error occurred while processing the async request._<p>This method is called from a container thread when  an error occurred while_processing an async request before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,while,processing,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurred,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1498503011;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1498505691;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1498811619;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1502974979;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1529721864;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1530174524;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void onError(Consumer<Throwable> callback);1539303961;Register code to invoke when an error occurred during the async request._<p>This method is called from a container thread when an error occurs_while processing an async request before the {@code DeferredResult} has_been populated. It may invoke {@link DeferredResult#setResult setResult}_or {@link DeferredResult#setErrorResult setErrorResult} to resume_processing._@since 5.0;public void onError(Consumer<Throwable> callback) {_		this.errorCallback = callback__	};register,code,to,invoke,when,an,error,occurred,during,the,async,request,p,this,method,is,called,from,a,container,thread,when,an,error,occurs,while,processing,an,async,request,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing,since,5,0;public,void,on,error,consumer,throwable,callback,this,error,callback,callback
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1345223391;Set a handler to handle the result when set. Normally applications do not_use this method at runtime but may do so during testing.;public void setResultHandler(DeferredResultHandler resultHandler) {_		this.resultHandler = resultHandler__		this.latch.countDown()__	};set,a,handler,to,handle,the,result,when,set,normally,applications,do,not,use,this,method,at,runtime,but,may,do,so,during,testing;public,void,set,result,handler,deferred,result,handler,result,handler,this,result,handler,result,handler,this,latch,count,down
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1345223391;Set a handler to handle the result when set. Normally applications do not_use this method at runtime but may do so during testing.;public void setResultHandler(DeferredResultHandler resultHandler) {_		this.resultHandler = resultHandler__		this.latch.countDown()__	};set,a,handler,to,handle,the,result,when,set,normally,applications,do,not,use,this,method,at,runtime,but,may,do,so,during,testing;public,void,set,result,handler,deferred,result,handler,result,handler,this,result,handler,result,handler,this,latch,count,down
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1348061150;Set a handler to handle the result when set. There can be only handler_for a {@code DeferredResult}. At runtime it will be set by the framework._However applications may set it when unit testing.__<p>If you need to be called back when a {@code DeferredResult} is set or_expires, register a {@link DeferredResultProcessingInterceptor} instead.;public void setResultHandler(DeferredResultHandler resultHandler) {_		this.resultHandler = resultHandler__		this.latch.countDown()__	};set,a,handler,to,handle,the,result,when,set,there,can,be,only,handler,for,a,code,deferred,result,at,runtime,it,will,be,set,by,the,framework,however,applications,may,set,it,when,unit,testing,p,if,you,need,to,be,called,back,when,a,code,deferred,result,is,set,or,expires,register,a,link,deferred,result,processing,interceptor,instead;public,void,set,result,handler,deferred,result,handler,result,handler,this,result,handler,result,handler,this,latch,count,down
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1351178945;Provide a handler to use to handle the result value._@param resultHandler the handler_@see {@link DeferredResultProcessingInterceptor};public void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,link,deferred,result,processing,interceptor;public,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1351289067;Provide a handler to use to handle the result value._@param resultHandler the handler_@see {@link DeferredResultProcessingInterceptor};public void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,link,deferred,result,processing,interceptor;public,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1351648724;Provide a handler to use to handle the result value._@param resultHandler the handler_@see {@link DeferredResultProcessingInterceptor};public void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,link,deferred,result,processing,interceptor;public,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public void setResultHandler(DeferredResultHandler resultHandler);1353616762;Provide a handler to use to handle the result value._@param resultHandler the handler_@see {@link DeferredResultProcessingInterceptor};public void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,link,deferred,result,processing,interceptor;public,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> Runnable getTimeoutHandler();1342618983;Return a handler to use to complete processing using the default timeout value_provided via {@link #DeferredResult(Object)} or {@code null} if no timeout_value was provided.;Runnable getTimeoutHandler() {_		if (!this.timeoutValueSet) {_			return null__		}_		return new Runnable() {_			public void run() { useTimeoutValue()_ }_		}__	};return,a,handler,to,use,to,complete,processing,using,the,default,timeout,value,provided,via,link,deferred,result,object,or,code,null,if,no,timeout,value,was,provided;runnable,get,timeout,handler,if,this,timeout,value,set,return,null,return,new,runnable,public,void,run,use,timeout,value
DeferredResult -> Runnable getTimeoutHandler();1344035753;Return a handler to use to complete processing using the default timeout value_provided via {@link #DeferredResult(Object)} or {@code null} if no timeout_value was provided.;Runnable getTimeoutHandler() {_		if (!this.timeoutValueSet) {_			return null__		}_		return new Runnable() {_			public void run() { useTimeoutValue()_ }_		}__	};return,a,handler,to,use,to,complete,processing,using,the,default,timeout,value,provided,via,link,deferred,result,object,or,code,null,if,no,timeout,value,was,provided;runnable,get,timeout,handler,if,this,timeout,value,set,return,null,return,new,runnable,public,void,run,use,timeout,value
DeferredResult -> public Object getResult();1372363092;@return the result or {@code null} if the result wasn't set_ since the result can_also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method.;public Object getResult() {_		return hasResult() ? this.result : null__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method;public,object,get,result,return,has,result,this,result,null
DeferredResult -> public Object getResult();1413848647;@return the result or {@code null} if the result wasn't set_ since the result can_also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method.;public Object getResult() {_		return hasResult() ? this.result : null__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method;public,object,get,result,return,has,result,this,result,null
DeferredResult -> public Object getResult();1433962044;@return the result or {@code null} if the result wasn't set_ since the result can_also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method.;public Object getResult() {_		return hasResult() ? this.result : null__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method;public,object,get,result,return,has,result,this,result,null
DeferredResult -> public Object getResult();1441886675;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method.;public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method;public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> public Object getResult();1444835709;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> public Object getResult();1467808333;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> public Object getResult();1481813027;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> public Object getResult();1481975838;Return the result, or {@code null} if the result wasn't set. Since the result_can also be {@code null}, it is recommended to use {@link #hasResult()} first_to check if there is a result prior to calling this method._@since 4.0;public Object getResult() {_		Object resultToCheck = this.result__		return (resultToCheck != RESULT_NONE ? resultToCheck : null)__	};return,the,result,or,code,null,if,the,result,wasn,t,set,since,the,result,can,also,be,code,null,it,is,recommended,to,use,link,has,result,first,to,check,if,there,is,a,result,prior,to,calling,this,method,since,4,0;public,object,get,result,object,result,to,check,this,result,return,result,to,check,result,to,check,null
DeferredResult -> public void onCompletion(Runnable callback);1351648724;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1353616762;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1355176032;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1355313310;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1362408075;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1368565306;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1372363092;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1413848647;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1433962044;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1441886675;Register code to invoke when the async request completes. This method is_called from a container thread when an async request completed for any_reason including timeout and network error. This method is useful for_detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,method,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1444835709;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1467808333;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1481813027;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1481975838;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1495868221;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1498500776;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1498503011;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1498505691;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1498811619;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1502974979;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1529721864;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1530174524;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public void onCompletion(Runnable callback);1539303961;Register code to invoke when the async request completes._<p>This method is called from a container thread when an async request_completed for any reason including timeout and network error. This is useful_for detecting that a {@code DeferredResult} instance is no longer usable.;public void onCompletion(Runnable callback) {_		this.completionCallback = callback__	};register,code,to,invoke,when,the,async,request,completes,p,this,method,is,called,from,a,container,thread,when,an,async,request,completed,for,any,reason,including,timeout,and,network,error,this,is,useful,for,detecting,that,a,code,deferred,result,instance,is,no,longer,usable;public,void,on,completion,runnable,callback,this,completion,callback,callback
DeferredResult -> public Long getTimeoutMilliseconds();1345223391;Return the configured timeout value in milliseconds.;public Long getTimeoutMilliseconds() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;public,long,get,timeout,milliseconds,return,this,timeout
DeferredResult -> public Long getTimeoutMilliseconds();1348061150;Return the configured timeout value in milliseconds.;public Long getTimeoutMilliseconds() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;public,long,get,timeout,milliseconds,return,this,timeout
DeferredResult -> public Long getTimeoutMilliseconds();1351178945;Return the configured timeout value in milliseconds.;public Long getTimeoutMilliseconds() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;public,long,get,timeout,milliseconds,return,this,timeout
DeferredResult -> public Long getTimeoutMilliseconds();1351289067;Return the configured timeout value in milliseconds.;public Long getTimeoutMilliseconds() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;public,long,get,timeout,milliseconds,return,this,timeout
DeferredResult -> boolean expire();1351178945;Set the "expired" flag if and only if the result value was not already set._@return {@code true} if expiration succeeded, {@code false} otherwise;boolean expire() {_		synchronized (this) {_			if (!isSetOrExpired()) {_				this.expired = true__			}_		}_		return this.expired__	};set,the,expired,flag,if,and,only,if,the,result,value,was,not,already,set,return,code,true,if,expiration,succeeded,code,false,otherwise;boolean,expire,synchronized,this,if,is,set,or,expired,this,expired,true,return,this,expired
DeferredResult -> boolean expire();1351289067;Mark this instance expired so it may no longer be used._@return the previous value of the expiration flag;boolean expire() {_		synchronized (this) {_			boolean previous = this.expired__			this.expired = true__			return previous__		}_	};mark,this,instance,expired,so,it,may,no,longer,be,used,return,the,previous,value,of,the,expiration,flag;boolean,expire,synchronized,this,boolean,previous,this,expired,this,expired,true,return,previous
DeferredResult -> public void onTimeout(Runnable callback);1351648724;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1353616762;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1355176032;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1355313310;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1362408075;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1368565306;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1372363092;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1413848647;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1433962044;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1441886675;Register code to invoke when the async request times out. This method is_called from a container thread when an async request times out before the_{@code DeferredResult} has been set. It may invoke_{@link DeferredResult#setResult(Object) setResult} or_{@link DeferredResult#setErrorResult(Object) setErrorResult} to resume_processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,set,it,may,invoke,link,deferred,result,set,result,object,set,result,or,link,deferred,result,set,error,result,object,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1444835709;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1467808333;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1481813027;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1481975838;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1495868221;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1498500776;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1498503011;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1498505691;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1498811619;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1502974979;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1529721864;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1530174524;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> public void onTimeout(Runnable callback);1539303961;Register code to invoke when the async request times out._<p>This method is called from a container thread when an async request_times out before the {@code DeferredResult} has been populated._It may invoke {@link DeferredResult#setResult setResult} or_{@link DeferredResult#setErrorResult setErrorResult} to resume processing.;public void onTimeout(Runnable callback) {_		this.timeoutCallback = callback__	};register,code,to,invoke,when,the,async,request,times,out,p,this,method,is,called,from,a,container,thread,when,an,async,request,times,out,before,the,code,deferred,result,has,been,populated,it,may,invoke,link,deferred,result,set,result,set,result,or,link,deferred,result,set,error,result,set,error,result,to,resume,processing;public,void,on,timeout,runnable,callback,this,timeout,callback,callback
DeferredResult -> Long getTimeoutValue();1351648724;Return the configured timeout value in milliseconds.;Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;long,get,timeout,value,return,this,timeout
DeferredResult -> Long getTimeoutValue();1353616762;Return the configured timeout value in milliseconds.;Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;long,get,timeout,value,return,this,timeout
DeferredResult -> public void set(Object result) throws StaleAsyncWebRequestException;1335476311;Complete async processing with the given result. If the DeferredResult is_not yet fully initialized, this method will block and wait for that to_occur before proceeding. See the class level javadoc for more details.__@throws StaleAsyncWebRequestException if the underlying async request_has already timed out or ended due to a network error.;public void set(Object result) throws StaleAsyncWebRequestException {_		if (this.timeoutLock.tryLock() && (this.result != this.timeoutResult)) {_			try {_				handle(result)__			}_			finally {_				this.timeoutLock.unlock()__			}_		}_		else {_			_			throw new StaleAsyncWebRequestException("Async request already timed out")__		}_	};complete,async,processing,with,the,given,result,if,the,deferred,result,is,not,yet,fully,initialized,this,method,will,block,and,wait,for,that,to,occur,before,proceeding,see,the,class,level,javadoc,for,more,details,throws,stale,async,web,request,exception,if,the,underlying,async,request,has,already,timed,out,or,ended,due,to,a,network,error;public,void,set,object,result,throws,stale,async,web,request,exception,if,this,timeout,lock,try,lock,this,result,this,timeout,result,try,handle,result,finally,this,timeout,lock,unlock,else,throw,new,stale,async,web,request,exception,async,request,already,timed,out
DeferredResult -> public void set(Object result) throws StaleAsyncWebRequestException;1336766876;Complete async processing with the given result. If the DeferredResult is_not yet fully initialized, this method will block and wait for that to_occur before proceeding. See the class level javadoc for more details.__@throws StaleAsyncWebRequestException if the underlying async request_has already timed out or ended due to a network error.;public void set(Object result) throws StaleAsyncWebRequestException {_		if (this.timeoutLock.tryLock() && (this.result != this.timeoutResult)) {_			try {_				handle(result)__			}_			finally {_				this.timeoutLock.unlock()__			}_		}_		else {_			_			throw new StaleAsyncWebRequestException("Async request already timed out")__		}_	};complete,async,processing,with,the,given,result,if,the,deferred,result,is,not,yet,fully,initialized,this,method,will,block,and,wait,for,that,to,occur,before,proceeding,see,the,class,level,javadoc,for,more,details,throws,stale,async,web,request,exception,if,the,underlying,async,request,has,already,timed,out,or,ended,due,to,a,network,error;public,void,set,object,result,throws,stale,async,web,request,exception,if,this,timeout,lock,try,lock,this,result,this,timeout,result,try,handle,result,finally,this,timeout,lock,unlock,else,throw,new,stale,async,web,request,exception,async,request,already,timed,out
DeferredResult -> public boolean isSetOrExpired();1345223391;Whether the DeferredResult can no longer be set either because the async_request expired or because it was already set.;public boolean isSetOrExpired() {_		return (this.expired.get() || (this.result != RESULT_NONE))__	};whether,the,deferred,result,can,no,longer,be,set,either,because,the,async,request,expired,or,because,it,was,already,set;public,boolean,is,set,or,expired,return,this,expired,get,this,result
DeferredResult -> public boolean isSetOrExpired();1345223391;Whether the DeferredResult can no longer be set either because the async_request expired or because it was already set.;public boolean isSetOrExpired() {_		return (this.expired.get() || (this.result != RESULT_NONE))__	};whether,the,deferred,result,can,no,longer,be,set,either,because,the,async,request,expired,or,because,it,was,already,set;public,boolean,is,set,or,expired,return,this,expired,get,this,result
DeferredResult -> public boolean isSetOrExpired();1348061150;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request ended_before it could be set._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or following a timeout, assuming a_timeout result was provided to the constructor. The request may before_the result set due to a timeout or network error.;public boolean isSetOrExpired() {_		return this.expired.get()__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,ended,before,it,could,be,set,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,following,a,timeout,assuming,a,timeout,result,was,provided,to,the,constructor,the,request,may,before,the,result,set,due,to,a,timeout,or,network,error;public,boolean,is,set,or,expired,return,this,expired,get
DeferredResult -> public boolean isSetOrExpired();1351178945;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public boolean isSetOrExpired();1351289067;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public boolean isSetOrExpired();1351648724;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public boolean isSetOrExpired();1353616762;Return {@code true} if this DeferredResult is no longer usable either_because it was previously set or because the underlying request expired._<p>_The result may have been set with a call to {@link #setResult(Object)},_or {@link #setErrorResult(Object)}, or as a result of a timeout, if a_timeout result was provided to the constructor. The request may also_expire due to a timeout or network error.;public boolean isSetOrExpired() {_		return ((this.result != RESULT_NONE) || this.expired)__	};return,code,true,if,this,deferred,result,is,no,longer,usable,either,because,it,was,previously,set,or,because,the,underlying,request,expired,p,the,result,may,have,been,set,with,a,call,to,link,set,result,object,or,link,set,error,result,object,or,as,a,result,of,a,timeout,if,a,timeout,result,was,provided,to,the,constructor,the,request,may,also,expire,due,to,a,timeout,or,network,error;public,boolean,is,set,or,expired,return,this,result,this,expired
DeferredResult -> public boolean setErrorResult(Object result);1345223391;Set an error result value and pass it on for handling. If the result is an_{@link Exception} or {@link Throwable}, it will be processed as though the_controller raised the exception. Otherwise it will be processed as if the_controller returned the given result._@param result the error result value_@return "true" if the result was set to the error value and passed on for handling__"false" if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return processResult(result)__	};set,an,error,result,value,and,pass,it,on,for,handling,if,the,result,is,an,link,exception,or,link,throwable,it,will,be,processed,as,though,the,controller,raised,the,exception,otherwise,it,will,be,processed,as,if,the,controller,returned,the,given,result,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,process,result,result
DeferredResult -> public boolean setErrorResult(Object result);1345223391;Set an error result value and pass it on for handling. If the result is an_{@link Exception} or {@link Throwable}, it will be processed as though the_controller raised the exception. Otherwise it will be processed as if the_controller returned the given result._@param result the error result value_@return "true" if the result was set to the error value and passed on for handling__"false" if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return processResult(result)__	};set,an,error,result,value,and,pass,it,on,for,handling,if,the,result,is,an,link,exception,or,link,throwable,it,will,be,processed,as,though,the,controller,raised,the,exception,otherwise,it,will,be,processed,as,if,the,controller,returned,the,given,result,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,process,result,result
DeferredResult -> public boolean setErrorResult(Object result);1348061150;Set an error result value and pass it on for handling. If the result is an_{@link Exception} or {@link Throwable}, it will be processed as though the_controller raised the exception. Otherwise it will be processed as if the_controller returned the given result._@param result the error result value_@return "true" if the result was set to the error value and passed on for handling__"false" if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return processResult(result)__	};set,an,error,result,value,and,pass,it,on,for,handling,if,the,result,is,an,link,exception,or,link,throwable,it,will,be,processed,as,though,the,controller,raised,the,exception,otherwise,it,will,be,processed,as,if,the,controller,returned,the,given,result,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,process,result,result
DeferredResult -> public boolean setErrorResult(Object result);1351178945;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1351289067;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1351648724;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1353616762;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1355176032;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1355313310;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1362408075;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1368565306;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1372363092;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1413848647;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1433962044;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1441886675;Set an error value for the {@link DeferredResult} and handle it. The value_may be an {@link Exception} or {@link Throwable} in which case it will be_processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request_expired._@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1444835709;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1467808333;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return "true" if the result was set to the error value and passed on for_handling_ "false" if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1481813027;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1481975838;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1495868221;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1498500776;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1498503011;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1498505691;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1498811619;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1502974979;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1529721864;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1530174524;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public boolean setErrorResult(Object result);1539303961;Set an error value for the {@link DeferredResult} and handle it._The value may be an {@link Exception} or {@link Throwable} in which case_it will be processed as if a handler raised the exception._@param result the error result value_@return {@code true} if the result was set to the error value and passed on_for handling_ {@code false} if the result was already set or the async_request expired_@see #isSetOrExpired();public boolean setErrorResult(Object result) {_		return setResultInternal(result)__	};set,an,error,value,for,the,link,deferred,result,and,handle,it,the,value,may,be,an,link,exception,or,link,throwable,in,which,case,it,will,be,processed,as,if,a,handler,raised,the,exception,param,result,the,error,result,value,return,code,true,if,the,result,was,set,to,the,error,value,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,error,result,object,result,return,set,result,internal,result
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1355176032;Provide a handler to use to handle the result value._@param resultHandler the handler_@see {@link DeferredResultProcessingInterceptor};public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,link,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1355313310;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1362408075;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1368565306;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1372363092;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1413848647;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1433962044;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if ((this.result != RESULT_NONE) && (!this.expired)) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable t) {_					logger.trace("DeferredResult not handled", t)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,t,logger,trace,deferred,result,not,handled,t
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1441886675;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if (this.result != RESULT_NONE && !this.expired) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable ex) {_					logger.trace("DeferredResult not handled", ex)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,ex,logger,trace,deferred,result,not,handled,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1444835709;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if (this.result != RESULT_NONE && !this.expired) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable ex) {_					logger.trace("DeferredResult not handled", ex)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,ex,logger,trace,deferred,result,not,handled,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1467808333;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		synchronized (this) {_			this.resultHandler = resultHandler__			if (this.result != RESULT_NONE && !this.expired) {_				try {_					this.resultHandler.handleResult(this.result)__				}_				catch (Throwable ex) {_					logger.trace("DeferredResult not handled", ex)__				}_			}_		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,synchronized,this,this,result,handler,result,handler,if,this,result,this,expired,try,this,result,handler,handle,result,this,result,catch,throwable,ex,logger,trace,deferred,result,not,handled,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1481813027;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1481975838;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1495868221;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1498500776;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1498503011;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1498505691;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1498811619;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1502974979;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to handle existing result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,handle,existing,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1529721864;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to process async result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,process,async,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1530174524;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to process async result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,process,async,result,ex
DeferredResult -> public final void setResultHandler(DeferredResultHandler resultHandler);1539303961;Provide a handler to use to handle the result value._@param resultHandler the handler_@see DeferredResultProcessingInterceptor;public final void setResultHandler(DeferredResultHandler resultHandler) {_		Assert.notNull(resultHandler, "DeferredResultHandler is required")__		_		if (this.expired) {_			return__		}_		Object resultToHandle__		synchronized (this) {_			_			if (this.expired) {_				return__			}_			resultToHandle = this.result__			if (resultToHandle == RESULT_NONE) {_				_				this.resultHandler = resultHandler__				return__			}_		}_		_		_		_		try {_			resultHandler.handleResult(resultToHandle)__		}_		catch (Throwable ex) {_			logger.debug("Failed to process async result", ex)__		}_	};provide,a,handler,to,use,to,handle,the,result,value,param,result,handler,the,handler,see,deferred,result,processing,interceptor;public,final,void,set,result,handler,deferred,result,handler,result,handler,assert,not,null,result,handler,deferred,result,handler,is,required,if,this,expired,return,object,result,to,handle,synchronized,this,if,this,expired,return,result,to,handle,this,result,if,result,to,handle,this,result,handler,result,handler,return,try,result,handler,handle,result,result,to,handle,catch,throwable,ex,logger,debug,failed,to,process,async,result,ex
DeferredResult -> @Nullable 	final Long getTimeoutValue();1502974979;Return the configured timeout value in milliseconds.;@Nullable_	final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;nullable,final,long,get,timeout,value,return,this,timeout
DeferredResult -> @Nullable 	final Long getTimeoutValue();1529721864;Return the configured timeout value in milliseconds.;@Nullable_	final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;nullable,final,long,get,timeout,value,return,this,timeout
DeferredResult -> @Nullable 	final Long getTimeoutValue();1530174524;Return the configured timeout value in milliseconds.;@Nullable_	final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;nullable,final,long,get,timeout,value,return,this,timeout
DeferredResult -> @Nullable 	final Long getTimeoutValue();1539303961;Return the configured timeout value in milliseconds.;@Nullable_	final Long getTimeoutValue() {_		return this.timeout__	};return,the,configured,timeout,value,in,milliseconds;nullable,final,long,get,timeout,value,return,this,timeout
DeferredResult -> public DeferredResult(V timeoutValue);1342618983;Create a new instance also providing a default value to set if a timeout_occurs before {@link #set(Object)} is called.;public DeferredResult(V timeoutValue) {_		this.timeoutValue = timeoutValue__		this.timeoutValueSet = true__	};create,a,new,instance,also,providing,a,default,value,to,set,if,a,timeout,occurs,before,link,set,object,is,called;public,deferred,result,v,timeout,value,this,timeout,value,timeout,value,this,timeout,value,set,true
DeferredResult -> public DeferredResult(V timeoutValue);1344035753;Create a new instance also providing a default value to set if a timeout_occurs before {@link #set(Object)} is called.;public DeferredResult(V timeoutValue) {_		this.timeoutValue = timeoutValue__		this.timeoutValueSet = true__	};create,a,new,instance,also,providing,a,default,value,to,set,if,a,timeout,occurs,before,link,set,object,is,called;public,deferred,result,v,timeout,value,this,timeout,value,timeout,value,this,timeout,value,set,true
DeferredResult -> public DeferredResult(long timeout);1345223391;Create a DeferredResult with a timeout._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1348061150;Create a DeferredResult with a timeout._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1351178945;Create a DeferredResult with a timeout._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1351289067;Create a DeferredResult with a timeout._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1351648724;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1353616762;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1355176032;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1355313310;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1362408075;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1368565306;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1372363092;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(long timeout);1413848647;Create a DeferredResult with a timeout value._@param timeout timeout value in milliseconds;public DeferredResult(long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1433962044;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1441886675;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1444835709;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1467808333;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1481813027;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1481975838;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1495868221;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1498500776;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1498503011;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1498505691;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1498811619;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1502974979;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1529721864;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1530174524;Create a DeferredResult with a timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, RESULT_NONE)__	};create,a,deferred,result,with,a,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public DeferredResult(Long timeout);1539303961;Create a DeferredResult with a custom timeout value._<p>By default not set in which case the default configured in the MVC_Java Config or the MVC namespace is used, or if that's not set, then the_timeout depends on the default of the underlying server._@param timeout timeout value in milliseconds;public DeferredResult(Long timeout) {_		this(timeout, () -> RESULT_NONE)__	};create,a,deferred,result,with,a,custom,timeout,value,p,by,default,not,set,in,which,case,the,default,configured,in,the,mvc,java,config,or,the,mvc,namespace,is,used,or,if,that,s,not,set,then,the,timeout,depends,on,the,default,of,the,underlying,server,param,timeout,timeout,value,in,milliseconds;public,deferred,result,long,timeout,this,timeout
DeferredResult -> public boolean hasResult();1372363092;@return {@code true} if the DeferredResult has been set.;public boolean hasResult() {_		return this.result != RESULT_NONE__	};return,code,true,if,the,deferred,result,has,been,set;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1413848647;@return {@code true} if the DeferredResult has been set.;public boolean hasResult() {_		return this.result != RESULT_NONE__	};return,code,true,if,the,deferred,result,has,been,set;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1433962044;@return {@code true} if the DeferredResult has been set.;public boolean hasResult() {_		return this.result != RESULT_NONE__	};return,code,true,if,the,deferred,result,has,been,set;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1441886675;Return {@code true} if the DeferredResult has been set.;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1444835709;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1467808333;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1481813027;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1481975838;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1495868221;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1498500776;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1498503011;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1498505691;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1498811619;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1502974979;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1529721864;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1530174524;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> public boolean hasResult();1539303961;Return {@code true} if the DeferredResult has been set._@since 4.0;public boolean hasResult() {_		return (this.result != RESULT_NONE)__	};return,code,true,if,the,deferred,result,has,been,set,since,4,0;public,boolean,has,result,return,this,result
DeferredResult -> void handleTimeout();1335476311;Invoked to complete async processing when a timeout occurs before_{@link #set(Object)} is called. Or if {@link #set(Object)} is already in_progress, this method blocks, waits for it to complete, and then returns.;void handleTimeout() {_		Assert.state(canHandleTimeout(), "Can't handle timeout")__		this.timeoutLock.lock()__		try {_			if (this.result == null) {_				handle(this.timeoutResult)__			}_		}_		finally {_			this.timeoutLock.unlock()__		}_	};invoked,to,complete,async,processing,when,a,timeout,occurs,before,link,set,object,is,called,or,if,link,set,object,is,already,in,progress,this,method,blocks,waits,for,it,to,complete,and,then,returns;void,handle,timeout,assert,state,can,handle,timeout,can,t,handle,timeout,this,timeout,lock,lock,try,if,this,result,null,handle,this,timeout,result,finally,this,timeout,lock,unlock
DeferredResult -> void handleTimeout();1336766876;Invoked to complete async processing when a timeout occurs before_{@link #set(Object)} is called. Or if {@link #set(Object)} is already in_progress, this method blocks, waits for it to complete, and then returns.;void handleTimeout() {_		Assert.state(canHandleTimeout(), "Can't handle timeout")__		this.timeoutLock.lock()__		try {_			if (this.result == null) {_				handle(this.timeoutResult)__			}_		}_		finally {_			this.timeoutLock.unlock()__		}_	};invoked,to,complete,async,processing,when,a,timeout,occurs,before,link,set,object,is,called,or,if,link,set,object,is,already,in,progress,this,method,blocks,waits,for,it,to,complete,and,then,returns;void,handle,timeout,assert,state,can,handle,timeout,can,t,handle,timeout,this,timeout,lock,lock,try,if,this,result,null,handle,this,timeout,result,finally,this,timeout,lock,unlock
DeferredResult -> public void set(V value) throws StaleAsyncWebRequestException;1342618983;Complete async processing with the given value. If the DeferredResult is_not fully initialized yet, this method will block and wait for that to_occur before proceeding. See the class level javadoc for more details.__@throws StaleAsyncWebRequestException if the underlying async request_has already timed out or ended due to a network error.;public void set(V value) throws StaleAsyncWebRequestException {_		if (this.setLock.tryLock() && (!this.timeoutValueUsed)) {_			try {_				handle(value)__			}_			finally {_				this.setLock.unlock()__			}_		}_		else {_			_			throw new StaleAsyncWebRequestException("Async request timed out")__		}_	};complete,async,processing,with,the,given,value,if,the,deferred,result,is,not,fully,initialized,yet,this,method,will,block,and,wait,for,that,to,occur,before,proceeding,see,the,class,level,javadoc,for,more,details,throws,stale,async,web,request,exception,if,the,underlying,async,request,has,already,timed,out,or,ended,due,to,a,network,error;public,void,set,v,value,throws,stale,async,web,request,exception,if,this,set,lock,try,lock,this,timeout,value,used,try,handle,value,finally,this,set,lock,unlock,else,throw,new,stale,async,web,request,exception,async,request,timed,out
DeferredResult -> public void set(V value) throws StaleAsyncWebRequestException;1344035753;Complete async processing with the given value. If the DeferredResult is_not fully initialized yet, this method will block and wait for that to_occur before proceeding. See the class level javadoc for more details.__@throws StaleAsyncWebRequestException if the underlying async request_has already timed out or ended due to a network error.;public void set(V value) throws StaleAsyncWebRequestException {_		if (this.setLock.tryLock() && (!this.timeoutValueUsed)) {_			try {_				handle(value)__			}_			finally {_				this.setLock.unlock()__			}_		}_		else {_			_			throw new StaleAsyncWebRequestException("Async request timed out")__		}_	};complete,async,processing,with,the,given,value,if,the,deferred,result,is,not,fully,initialized,yet,this,method,will,block,and,wait,for,that,to,occur,before,proceeding,see,the,class,level,javadoc,for,more,details,throws,stale,async,web,request,exception,if,the,underlying,async,request,has,already,timed,out,or,ended,due,to,a,network,error;public,void,set,v,value,throws,stale,async,web,request,exception,if,this,set,lock,try,lock,this,timeout,value,used,try,handle,value,finally,this,set,lock,unlock,else,throw,new,stale,async,web,request,exception,async,request,timed,out
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1345223391;Create a DeferredResult with a timeout and a default result to use on timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use, possibly {@code null};public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,and,a,default,result,to,use,on,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use,possibly,code,null;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1348061150;Create a DeferredResult with a timeout and a default result to use on timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use, possibly {@code null};public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,and,a,default,result,to,use,on,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use,possibly,code,null;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1351178945;Create a DeferredResult with a timeout and a default result to use on timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use, possibly {@code null};public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,and,a,default,result,to,use,on,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use,possibly,code,null;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1351289067;Create a DeferredResult with a timeout and a default result to use on timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,and,a,default,result,to,use,on,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1351648724;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1353616762;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1355176032;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1355313310;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1362408075;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1368565306;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1372363092;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1413848647;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1433962044;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1441886675;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds_ ignored if {@code null}_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1444835709;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1467808333;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1481813027;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public DeferredResult(Long timeout, Object timeoutResult);1481975838;Create a DeferredResult with a timeout value and a default result to use_in case of timeout._@param timeout timeout value in milliseconds (ignored if {@code null})_@param timeoutResult the result to use;public DeferredResult(Long timeout, Object timeoutResult) {_		this.timeoutResult = timeoutResult__		this.timeout = timeout__	};create,a,deferred,result,with,a,timeout,value,and,a,default,result,to,use,in,case,of,timeout,param,timeout,timeout,value,in,milliseconds,ignored,if,code,null,param,timeout,result,the,result,to,use;public,deferred,result,long,timeout,object,timeout,result,this,timeout,result,timeout,result,this,timeout,timeout
DeferredResult -> public boolean setResult(T result);1345223391;Set the result value and pass it on for handling._@param result the result value_@return "true" if the result was set and passed on for handling__"false" if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return processResult(result)__	};set,the,result,value,and,pass,it,on,for,handling,param,result,the,result,value,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,process,result,result
DeferredResult -> public boolean setResult(T result);1345223391;Set the result value and pass it on for handling._@param result the result value_@return "true" if the result was set and passed on for handling__"false" if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return processResult(result)__	};set,the,result,value,and,pass,it,on,for,handling,param,result,the,result,value,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,process,result,result
DeferredResult -> public boolean setResult(T result);1348061150;Set the result value and pass it on for handling._@param result the result value_@return "true" if the result was set and passed on for handling__"false" if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return processResult(result)__	};set,the,result,value,and,pass,it,on,for,handling,param,result,the,result,value,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,process,result,result
DeferredResult -> public boolean setResult(T result);1351178945;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1351289067;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1351648724;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1353616762;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1355176032;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1355313310;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1362408075;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1368565306;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1372363092;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1413848647;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1433962044;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1441886675;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling_ "false"_if the result was already set or the async request expired._@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1444835709;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling__"false" if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1467808333;Set the value for the DeferredResult and handle it._@param result the value to set_@return "true" if the result was set and passed on for handling__"false" if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,true,if,the,result,was,set,and,passed,on,for,handling,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1481813027;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1481975838;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1495868221;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1498500776;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1498503011;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1498505691;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1498811619;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1502974979;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1529721864;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1530174524;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean setResult(T result);1539303961;Set the value for the DeferredResult and handle it._@param result the value to set_@return {@code true} if the result was set and passed on for handling__{@code false} if the result was already set or the async request expired_@see #isSetOrExpired();public boolean setResult(T result) {_		return setResultInternal(result)__	};set,the,value,for,the,deferred,result,and,handle,it,param,result,the,value,to,set,return,code,true,if,the,result,was,set,and,passed,on,for,handling,code,false,if,the,result,was,already,set,or,the,async,request,expired,see,is,set,or,expired;public,boolean,set,result,t,result,return,set,result,internal,result
DeferredResult -> public boolean trySet(V result) throws StaleAsyncWebRequestException;1342618983;An alternative to {@link #set(Object)} that absorbs a potential_{@link StaleAsyncWebRequestException}._@return {@code false} if the outcome was a {@code StaleAsyncWebRequestException};public boolean trySet(V result) throws StaleAsyncWebRequestException {_		try {_			set(result)__			return true__		}_		catch (StaleAsyncWebRequestException ex) {_			_		}_		return false__	};an,alternative,to,link,set,object,that,absorbs,a,potential,link,stale,async,web,request,exception,return,code,false,if,the,outcome,was,a,code,stale,async,web,request,exception;public,boolean,try,set,v,result,throws,stale,async,web,request,exception,try,set,result,return,true,catch,stale,async,web,request,exception,ex,return,false
DeferredResult -> public boolean trySet(V result) throws StaleAsyncWebRequestException;1344035753;An alternative to {@link #set(Object)} that absorbs a potential_{@link StaleAsyncWebRequestException}._@return {@code false} if the outcome was a {@code StaleAsyncWebRequestException};public boolean trySet(V result) throws StaleAsyncWebRequestException {_		try {_			set(result)__			return true__		}_		catch (StaleAsyncWebRequestException ex) {_			_		}_		return false__	};an,alternative,to,link,set,object,that,absorbs,a,potential,link,stale,async,web,request,exception,return,code,false,if,the,outcome,was,a,code,stale,async,web,request,exception;public,boolean,try,set,v,result,throws,stale,async,web,request,exception,try,set,result,return,true,catch,stale,async,web,request,exception,ex,return,false
DeferredResult -> public DeferredResult();1335476311;Create a new instance.;public DeferredResult() {_		this(TIMEOUT_RESULT_NONE)__	};create,a,new,instance;public,deferred,result,this
DeferredResult -> public DeferredResult();1336766876;Create a new instance.;public DeferredResult() {_		this(TIMEOUT_RESULT_NONE)__	};create,a,new,instance;public,deferred,result,this
DeferredResult -> public DeferredResult();1342618983;Create a new instance.;public DeferredResult() {_		this.timeoutValue = null__		this.timeoutValueSet = false__	};create,a,new,instance;public,deferred,result,this,timeout,value,null,this,timeout,value,set,false
DeferredResult -> public DeferredResult();1344035753;Create a new instance.;public DeferredResult() {_		this.timeoutValue = null__		this.timeoutValueSet = false__	};create,a,new,instance;public,deferred,result,this,timeout,value,null,this,timeout,value,set,false
DeferredResult -> public DeferredResult();1345223391;Create a DeferredResult instance.;public DeferredResult() {_		this(RESULT_NONE)__	};create,a,deferred,result,instance;public,deferred,result,this
DeferredResult -> public DeferredResult();1345223391;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1348061150;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1351178945;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1351289067;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1351648724;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1353616762;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1355176032;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1355313310;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1362408075;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1368565306;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1372363092;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1413848647;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1433962044;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1441886675;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1444835709;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1467808333;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1481813027;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1481975838;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1495868221;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1498500776;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1498503011;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1498505691;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1498811619;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1502974979;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1529721864;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1530174524;Create a DeferredResult.;public DeferredResult() {_		this(null, RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
DeferredResult -> public DeferredResult();1539303961;Create a DeferredResult.;public DeferredResult() {_		this(null, () -> RESULT_NONE)__	};create,a,deferred,result;public,deferred,result,this,null
