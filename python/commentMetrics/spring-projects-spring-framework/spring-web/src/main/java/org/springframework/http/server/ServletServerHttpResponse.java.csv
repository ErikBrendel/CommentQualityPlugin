commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the {@code HttpServletResponse} this object is based on.  */ ;/**  * Return the {@code HttpServletResponse} this object is based on.  */ public HttpServletResponse getServletResponse() {     return this.servletResponse. }
false;public;1;5;;@Override public void setStatusCode(HttpStatus status) {     Assert.notNull(status, "HttpStatus must not be null").     this.servletResponse.setStatus(status.value()). }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers). }
false;public;0;6;;@Override public OutputStream getBody() throws IOException {     this.bodyUsed = true.     writeHeaders().     return this.servletResponse.getOutputStream(). }
false;public;0;7;;@Override public void flush() throws IOException {     writeHeaders().     if (this.bodyUsed) {         this.servletResponse.flushBuffer().     } }
false;public;0;4;;@Override public void close() {     writeHeaders(). }
false;private;0;18;;private void writeHeaders() {     if (!this.headersWritten) {         getHeaders().forEach((headerName, headerValues) -> {             for (String headerValue : headerValues) {                 this.servletResponse.addHeader(headerName, headerValue).             }         }).         // HttpServletResponse exposes some headers as properties: we should include those if not already present         if (this.servletResponse.getContentType() == null && this.headers.getContentType() != null) {             this.servletResponse.setContentType(this.headers.getContentType().toString()).         }         if (this.servletResponse.getCharacterEncoding() == null && this.headers.getContentType() != null && this.headers.getContentType().getCharset() != null) {             this.servletResponse.setCharacterEncoding(this.headers.getContentType().getCharset().name()).         }         this.headersWritten = true.     } }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return (super.containsKey(key) || (get(key) != null)). }
false;public;1;11;;@Override @Nullable public String getFirst(String headerName) {     String value = servletResponse.getHeader(headerName).     if (value != null) {         return value.     } else {         return super.getFirst(headerName).     } }
false;public;1;26;;@Override public List<String> get(Object key) {     Assert.isInstanceOf(String.class, key, "Key must be a String-based header name").     Collection<String> values1 = servletResponse.getHeaders((String) key).     if (headersWritten) {         return new ArrayList<>(values1).     }     boolean isEmpty1 = CollectionUtils.isEmpty(values1).     List<String> values2 = super.get(key).     boolean isEmpty2 = CollectionUtils.isEmpty(values2).     if (isEmpty1 && isEmpty2) {         return null.     }     List<String> values = new ArrayList<>().     if (!isEmpty1) {         values.addAll(values1).     }     if (!isEmpty2) {         values.addAll(values2).     }     return values. }
