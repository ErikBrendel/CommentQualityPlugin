commented;modifiers;parameterAmount;loc;comment;code
false;public;2;18;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     RequestAttributes attributes = RequestContextHolder.currentRequestAttributes().     Object scopedObject = attributes.getAttribute(name, getScope()).     if (scopedObject == null) {         scopedObject = objectFactory.getObject().         attributes.setAttribute(name, scopedObject, getScope()).         // Retrieve object again, registering it for implicit session attribute updates.         // As a bonus, we also allow for potential decoration at the getAttribute level.         Object retrievedObject = attributes.getAttribute(name, getScope()).         if (retrievedObject != null) {             // Only proceed with retrieved object if still present (the expected case).             // If it disappeared concurrently, we return our locally created instance.             scopedObject = retrievedObject.         }     }     return scopedObject. }
false;public;1;13;;@Override @Nullable public Object remove(String name) {     RequestAttributes attributes = RequestContextHolder.currentRequestAttributes().     Object scopedObject = attributes.getAttribute(name, getScope()).     if (scopedObject != null) {         attributes.removeAttribute(name, getScope()).         return scopedObject.     } else {         return null.     } }
false;public;2;5;;@Override public void registerDestructionCallback(String name, Runnable callback) {     RequestAttributes attributes = RequestContextHolder.currentRequestAttributes().     attributes.registerDestructionCallback(name, callback, getScope()). }
false;public;1;6;;@Override @Nullable public Object resolveContextualObject(String key) {     RequestAttributes attributes = RequestContextHolder.currentRequestAttributes().     return attributes.resolveReference(key). }
true;protected,abstract;0;1;/**  * Template method that determines the actual target scope.  * @return the target scope, in the form of an appropriate  * {@link RequestAttributes} constant  * @see RequestAttributes#SCOPE_REQUEST  * @see RequestAttributes#SCOPE_SESSION  */ ;/**  * Template method that determines the actual target scope.  * @return the target scope, in the form of an appropriate  * {@link RequestAttributes} constant  * @see RequestAttributes#SCOPE_REQUEST  * @see RequestAttributes#SCOPE_SESSION  */ protected abstract int getScope().
