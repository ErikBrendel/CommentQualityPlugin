# id;timestamp;commentText;codeText;commentWords;codeWords
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1420734879;Indicates whether the response has an empty message body.__<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>__@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body == null) {_			return true__		}_		else if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,null,return,true,else,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,pushback,input,stream,read,if,b,1,return,true,else,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1420736520;Indicates whether the response has an empty message body.__<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>__@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body == null) {_			return true__		}_		else if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,null,return,true,else,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,pushback,input,stream,read,if,b,1,return,true,else,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1423605852;Indicates whether the response has an empty message body._<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>_@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body == null) {_			return true__		}_		else if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = this.pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				this.pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,null,return,true,else,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,this,pushback,input,stream,read,if,b,1,return,true,else,this,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1441370327;Indicates whether the response has an empty message body._<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>_@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body == null) {_			return true__		}_		else if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = this.pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				this.pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,null,return,true,else,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,this,pushback,input,stream,read,if,b,1,return,true,else,this,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1496837955;Indicates whether the response has an empty message body._<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>_@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = this.pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				this.pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,this,pushback,input,stream,read,if,b,1,return,true,else,this,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1498780456;Indicates whether the response has an empty message body._<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>_@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = this.pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				this.pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,this,pushback,input,stream,read,if,b,1,return,true,else,this,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasEmptyMessageBody() throws IOException;1505897698;Indicates whether the response has an empty message body._<p>Implementation tries to read the first bytes of the response stream:_<ul>_<li>if no bytes are available, the message body is empty</li>_<li>otherwise it is not empty and the stream is reset to its start for further reading</li>_</ul>_@return {@code true} if the response has a zero-length message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasEmptyMessageBody() throws IOException {_		InputStream body = this.response.getBody()__		if (body.markSupported()) {_			body.mark(1)__			if (body.read() == -1) {_				return true__			}_			else {_				body.reset()__				return false__			}_		}_		else {_			this.pushbackInputStream = new PushbackInputStream(body)__			int b = this.pushbackInputStream.read()__			if (b == -1) {_				return true__			}_			else {_				this.pushbackInputStream.unread(b)__				return false__			}_		}_	};indicates,whether,the,response,has,an,empty,message,body,p,implementation,tries,to,read,the,first,bytes,of,the,response,stream,ul,li,if,no,bytes,are,available,the,message,body,is,empty,li,li,otherwise,it,is,not,empty,and,the,stream,is,reset,to,its,start,for,further,reading,li,ul,return,code,true,if,the,response,has,a,zero,length,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,empty,message,body,throws,ioexception,input,stream,body,this,response,get,body,if,body,mark,supported,body,mark,1,if,body,read,1,return,true,else,body,reset,return,false,else,this,pushback,input,stream,new,pushback,input,stream,body,int,b,this,pushback,input,stream,read,if,b,1,return,true,else,this,pushback,input,stream,unread,b,return,false
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1420734879;Indicates whether the response has a message body.__<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>__@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus responseStatus = this.getStatusCode()__		if (responseStatus.is1xxInformational() || responseStatus == HttpStatus.NO_CONTENT ||_				responseStatus == HttpStatus.NOT_MODIFIED) {_			return false__		}_		else if(this.getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,response,status,this,get,status,code,if,response,status,is1xx,informational,response,status,http,status,response,status,http,status,return,false,else,if,this,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1420736520;Indicates whether the response has a message body.__<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>__@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus responseStatus = this.getStatusCode()__		if (responseStatus.is1xxInformational() || responseStatus == HttpStatus.NO_CONTENT ||_				responseStatus == HttpStatus.NOT_MODIFIED) {_			return false__		}_		else if(this.getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,response,status,this,get,status,code,if,response,status,is1xx,informational,response,status,http,status,response,status,http,status,return,false,else,if,this,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1423605852;Indicates whether the response has a message body._<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>_@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus responseStatus = this.getStatusCode()__		if (responseStatus.is1xxInformational() || responseStatus == HttpStatus.NO_CONTENT ||_				responseStatus == HttpStatus.NOT_MODIFIED) {_			return false__		}_		else if(this.getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,response,status,this,get,status,code,if,response,status,is1xx,informational,response,status,http,status,response,status,http,status,return,false,else,if,this,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1441370327;Indicates whether the response has a message body._<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>_@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus responseStatus = this.getStatusCode()__		if (responseStatus.is1xxInformational() || responseStatus == HttpStatus.NO_CONTENT ||_				responseStatus == HttpStatus.NOT_MODIFIED) {_			return false__		}_		else if (this.getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,response,status,this,get,status,code,if,response,status,is1xx,informational,response,status,http,status,response,status,http,status,return,false,else,if,this,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1496837955;Indicates whether the response has a message body._<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>_@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus responseStatus = this.getStatusCode()__		if (responseStatus.is1xxInformational() || responseStatus == HttpStatus.NO_CONTENT ||_				responseStatus == HttpStatus.NOT_MODIFIED) {_			return false__		}_		else if (getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,response,status,this,get,status,code,if,response,status,is1xx,informational,response,status,http,status,response,status,http,status,return,false,else,if,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1498780456;Indicates whether the response has a message body._<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>_@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus responseStatus = this.getStatusCode()__		if (responseStatus.is1xxInformational() || responseStatus == HttpStatus.NO_CONTENT ||_				responseStatus == HttpStatus.NOT_MODIFIED) {_			return false__		}_		else if (getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,response,status,this,get,status,code,if,response,status,is1xx,informational,response,status,http,status,response,status,http,status,return,false,else,if,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1505897698;Indicates whether the response has a message body._<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>_@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus status = HttpStatus.resolve(getRawStatusCode())__		if (status != null && (status.is1xxInformational() || status == HttpStatus.NO_CONTENT ||_				status == HttpStatus.NOT_MODIFIED)) {_			return false__		}_		if (getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,status,http,status,resolve,get,raw,status,code,if,status,null,status,is1xx,informational,status,http,status,status,http,status,return,false,if,get,headers,get,content,length,0,return,false,return,true
MessageBodyClientHttpResponseWrapper -> public boolean hasMessageBody() throws IOException;1548453711;Indicates whether the response has a message body._<p>Implementation returns {@code false} for:_<ul>_<li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>_<li>a {@code Content-Length} header of {@code 0}</li>_</ul>_@return {@code true} if the response has a message body, {@code false} otherwise_@throws IOException in case of I/O errors;public boolean hasMessageBody() throws IOException {_		HttpStatus status = HttpStatus.resolve(getRawStatusCode())__		if (status != null && (status.is1xxInformational() || status == HttpStatus.NO_CONTENT ||_				status == HttpStatus.NOT_MODIFIED)) {_			return false__		}_		if (getHeaders().getContentLength() == 0) {_			return false__		}_		return true__	};indicates,whether,the,response,has,a,message,body,p,implementation,returns,code,false,for,ul,li,a,response,status,of,code,1xx,code,204,or,code,304,li,li,a,code,content,length,header,of,code,0,li,ul,return,code,true,if,the,response,has,a,message,body,code,false,otherwise,throws,ioexception,in,case,of,i,o,errors;public,boolean,has,message,body,throws,ioexception,http,status,status,http,status,resolve,get,raw,status,code,if,status,null,status,is1xx,informational,status,http,status,status,http,status,return,false,if,get,headers,get,content,length,0,return,false,return,true
