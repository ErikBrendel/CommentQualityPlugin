commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * Indicates whether the response has a message body.  * <p>Implementation returns {@code false} for:  * <ul>  * <li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>  * <li>a {@code Content-Length} header of {@code 0}</li>  * </ul>  * @return {@code true} if the response has a message body, {@code false} otherwise  * @throws IOException in case of I/O errors  */ ;/**  * Indicates whether the response has a message body.  * <p>Implementation returns {@code false} for:  * <ul>  * <li>a response status of {@code 1XX}, {@code 204} or {@code 304}</li>  * <li>a {@code Content-Length} header of {@code 0}</li>  * </ul>  * @return {@code true} if the response has a message body, {@code false} otherwise  * @throws IOException in case of I/O errors  */ public boolean hasMessageBody() throws IOException {     HttpStatus status = HttpStatus.resolve(getRawStatusCode()).     if (status != null && (status.is1xxInformational() || status == HttpStatus.NO_CONTENT || status == HttpStatus.NOT_MODIFIED)) {         return false.     }     if (getHeaders().getContentLength() == 0) {         return false.     }     return true. }
true;public;0;29;/**  * Indicates whether the response has an empty message body.  * <p>Implementation tries to read the first bytes of the response stream:  * <ul>  * <li>if no bytes are available, the message body is empty</li>  * <li>otherwise it is not empty and the stream is reset to its start for further reading</li>  * </ul>  * @return {@code true} if the response has a zero-length message body, {@code false} otherwise  * @throws IOException in case of I/O errors  */ ;/**  * Indicates whether the response has an empty message body.  * <p>Implementation tries to read the first bytes of the response stream:  * <ul>  * <li>if no bytes are available, the message body is empty</li>  * <li>otherwise it is not empty and the stream is reset to its start for further reading</li>  * </ul>  * @return {@code true} if the response has a zero-length message body, {@code false} otherwise  * @throws IOException in case of I/O errors  */ @SuppressWarnings("ConstantConditions") public boolean hasEmptyMessageBody() throws IOException {     InputStream body = this.response.getBody().     // Per contract body shouldn't be null, but check anyway..     if (body == null) {         return true.     }     if (body.markSupported()) {         body.mark(1).         if (body.read() == -1) {             return true.         } else {             body.reset().             return false.         }     } else {         this.pushbackInputStream = new PushbackInputStream(body).         int b = this.pushbackInputStream.read().         if (b == -1) {             return true.         } else {             this.pushbackInputStream.unread(b).             return false.         }     } }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return this.response.getHeaders(). }
false;public;0;4;;@Override public InputStream getBody() throws IOException {     return (this.pushbackInputStream != null ? this.pushbackInputStream : this.response.getBody()). }
false;public;0;4;;@Override public HttpStatus getStatusCode() throws IOException {     return this.response.getStatusCode(). }
false;public;0;4;;@Override public int getRawStatusCode() throws IOException {     return this.response.getRawStatusCode(). }
false;public;0;4;;@Override public String getStatusText() throws IOException {     return this.response.getStatusText(). }
false;public;0;4;;@Override public void close() {     this.response.close(). }
