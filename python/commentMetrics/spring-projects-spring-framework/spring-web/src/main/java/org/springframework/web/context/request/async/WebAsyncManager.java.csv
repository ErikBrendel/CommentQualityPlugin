# id;timestamp;commentText;codeText;commentWords;codeWords
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1344035753;Submit a request handling task for concurrent execution. Returns immediately_and subsequent calls to {@link #isConcurrentHandlingStarted()} return "true"._<p>When concurrent handling is done, the resulting value, which may be an_Object or a raised {@code Exception} or {@code Throwable}, is saved and the_request is dispatched for further processing of that result. In the dispatched_thread, the result can be accessed via {@link #getConcurrentResult()} while_{@link #hasConcurrentResult()} returns "true" and_{@link #isConcurrentHandlingStarted()} is back to returning "false".__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save for later access via_{@link #getConcurrentResultContext()};public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable is required")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {_				List<AsyncThreadInitializer> initializers =_						new ArrayList<AsyncThreadInitializer>(threadInitializers.values())___				try {_					for (AsyncThreadInitializer initializer : initializers) {_						initializer.initialize()__					}_					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					Collections.reverse(initializers)__					for (AsyncThreadInitializer initializer : initializers) {_						initializer.reset()__					}_				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};submit,a,request,handling,task,for,concurrent,execution,returns,immediately,and,subsequent,calls,to,link,is,concurrent,handling,started,return,true,p,when,concurrent,handling,is,done,the,resulting,value,which,may,be,an,object,or,a,raised,code,exception,or,code,throwable,is,saved,and,the,request,is,dispatched,for,further,processing,of,that,result,in,the,dispatched,thread,the,result,can,be,accessed,via,link,get,concurrent,result,while,link,has,concurrent,result,returns,true,and,link,is,concurrent,handling,started,is,back,to,returning,false,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,for,later,access,via,link,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,is,required,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,list,async,thread,initializer,initializers,new,array,list,async,thread,initializer,thread,initializers,values,try,for,async,thread,initializer,initializer,initializers,initializer,initialize,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,collections,reverse,initializers,for,async,thread,initializer,initializer,initializers,initializer,reset,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1345223391;Submit a request handling task for concurrent execution. Returns immediately_and subsequent calls to {@link #isConcurrentHandlingStarted()} return "true"._<p>When concurrent handling is done, the resulting value, which may be an_Object or a raised {@code Exception} or {@code Throwable}, is saved and the_request is dispatched for further processing of that result. In the dispatched_thread, the result can be accessed via {@link #getConcurrentResult()} while_{@link #hasConcurrentResult()} returns "true" and_{@link #isConcurrentHandlingStarted()} is back to returning "false".__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save for later access via_{@link #getConcurrentResultContext()};public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable is required")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {_				List<AsyncThreadInitializer> initializers =_						new ArrayList<AsyncThreadInitializer>(threadInitializers.values())___				try {_					for (AsyncThreadInitializer initializer : initializers) {_						initializer.initialize()__					}_					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					Collections.reverse(initializers)__					for (AsyncThreadInitializer initializer : initializers) {_						initializer.reset()__					}_				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};submit,a,request,handling,task,for,concurrent,execution,returns,immediately,and,subsequent,calls,to,link,is,concurrent,handling,started,return,true,p,when,concurrent,handling,is,done,the,resulting,value,which,may,be,an,object,or,a,raised,code,exception,or,code,throwable,is,saved,and,the,request,is,dispatched,for,further,processing,of,that,result,in,the,dispatched,thread,the,result,can,be,accessed,via,link,get,concurrent,result,while,link,has,concurrent,result,returns,true,and,link,is,concurrent,handling,started,is,back,to,returning,false,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,for,later,access,via,link,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,is,required,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,list,async,thread,initializer,initializers,new,array,list,async,thread,initializer,thread,initializers,values,try,for,async,thread,initializer,initializer,initializers,initializer,initialize,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,collections,reverse,initializers,for,async,thread,initializer,initializer,initializers,initializer,reset,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1345223391;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {_				List<WebAsyncThreadInitializer> initializers =_						new ArrayList<WebAsyncThreadInitializer>(threadInitializers.values())___				try {_					for (WebAsyncThreadInitializer initializer : initializers) {_						initializer.initialize()__					}_					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					Collections.reverse(initializers)__					for (WebAsyncThreadInitializer initializer : initializers) {_						initializer.reset()__					}_				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,list,web,async,thread,initializer,initializers,new,array,list,web,async,thread,initializer,thread,initializers,values,try,for,web,async,thread,initializer,initializer,initializers,initializer,initialize,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,collections,reverse,initializers,for,web,async,thread,initializer,initializer,initializers,initializer,reset,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1347067811;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {_				List<WebAsyncThreadInitializer> initializers =_						new ArrayList<WebAsyncThreadInitializer>(threadInitializers.values())___				try {_					for (WebAsyncThreadInitializer initializer : initializers) {_						initializer.initialize()__					}_					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					Collections.reverse(initializers)__					for (WebAsyncThreadInitializer initializer : initializers) {_						initializer.reset()__					}_				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,list,web,async,thread,initializer,initializers,new,array,list,web,async,thread,initializer,thread,initializers,values,try,for,web,async,thread,initializer,initializer,initializers,initializer,initialize,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,collections,reverse,initializers,for,web,async,thread,initializer,initializer,initializers,initializer,reset,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1347908336;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {_				List<WebAsyncThreadInitializer> initializers =_						new ArrayList<WebAsyncThreadInitializer>(threadInitializers.values())___				try {_					for (WebAsyncThreadInitializer initializer : initializers) {_						initializer.initialize()__					}_					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					Collections.reverse(initializers)__					for (WebAsyncThreadInitializer initializer : initializers) {_						initializer.reset()__					}_				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,list,web,async,thread,initializer,initializers,new,array,list,web,async,thread,initializer,thread,initializers,values,try,for,web,async,thread,initializer,initializer,initializers,initializer,initialize,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,collections,reverse,initializers,for,web,async,thread,initializer,initializer,initializers,initializer,reset,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1348061150;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {__				CallableInterceptorChain chain =_						new CallableInterceptorChain(callableInterceptors.values())___				try {_					chain.applyPreProcess(asyncWebRequest, callable)__					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					chain.applyPostProcess(asyncWebRequest, callable, concurrentResult)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,callable,interceptor,chain,chain,new,callable,interceptor,chain,callable,interceptors,values,try,chain,apply,pre,process,async,web,request,callable,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,chain,apply,post,process,async,web,request,callable,concurrent,result,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1350317859;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {__				CallableInterceptorChain chain =_						new CallableInterceptorChain(callableInterceptors.values())___				try {_					chain.applyPreProcess(asyncWebRequest, callable)__					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					chain.applyPostProcess(asyncWebRequest, callable, concurrentResult)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,callable,interceptor,chain,chain,new,callable,interceptor,chain,callable,interceptors,values,try,chain,apply,pre,process,async,web,request,callable,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,chain,apply,post,process,async,web,request,callable,concurrent,result,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1351178945;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {__				CallableInterceptorChain chain =_						new CallableInterceptorChain(callableInterceptors.values())___				try {_					chain.applyPreProcess(asyncWebRequest, callable)__					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					chain.applyPostProcess(asyncWebRequest, callable, concurrentResult)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,callable,interceptor,chain,chain,new,callable,interceptor,chain,callable,interceptors,values,try,chain,apply,pre,process,async,web,request,callable,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,chain,apply,post,process,async,web,request,callable,concurrent,result,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1351182923;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {__			public void run() {__				CallableInterceptorChain chain =_						new CallableInterceptorChain(callableInterceptors.values())___				try {_					chain.applyPreProcess(asyncWebRequest, callable)__					concurrentResult = callable.call()__				}_				catch (Throwable t) {_					concurrentResult = t__				}_				finally {_					chain.applyPostProcess(asyncWebRequest, callable, concurrentResult)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Concurrent result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					logger.error("Could not complete processing due to a timeout or network error")__					return__				}__				logger.debug("Dispatching request to continue processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,callable,interceptor,chain,chain,new,callable,interceptor,chain,callable,interceptors,values,try,chain,apply,pre,process,async,web,request,callable,concurrent,result,callable,call,catch,throwable,t,concurrent,result,t,finally,chain,apply,post,process,async,web,request,callable,concurrent,result,if,logger,is,debug,enabled,logger,debug,concurrent,result,value,concurrent,result,if,async,web,request,is,async,complete,logger,error,could,not,complete,processing,due,to,a,timeout,or,network,error,return,logger,debug,dispatching,request,to,continue,processing,async,web,request,dispatch
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1351289067;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		final CallableInterceptorChain chain = new CallableInterceptorChain(this.callableInterceptors.values())___		this.asyncWebRequest.setTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = chain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				chain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					chain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = chain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,final,callable,interceptor,chain,chain,new,callable,interceptor,chain,this,callable,interceptors,values,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,chain,trigger,after,completion,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1351301394;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		final CallableInterceptorChain chain = new CallableInterceptorChain(this.callableInterceptors.values())___		this.asyncWebRequest.setTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = chain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				chain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					chain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = chain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,final,callable,interceptor,chain,chain,new,callable,interceptor,chain,this,callable,interceptors,values,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,chain,trigger,after,completion,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1351648724;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1351651119;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1353616762;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1353963857;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1354139803;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1354291807;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1355313310;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1356735495;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1357119239;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1362408075;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1368482696;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1385412762;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1411733721;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1412118625;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1452804420;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1452851471;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1467730834;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1468960983;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> WebAsyncManager();1344035753;Package private constructor_@see AsyncWebUtils;WebAsyncManager() {_	};package,private,constructor,see,async,web,utils;web,async,manager
WebAsyncManager -> WebAsyncManager();1345223391;Package private constructor_@see AsyncWebUtils;WebAsyncManager() {_	};package,private,constructor,see,async,web,utils;web,async,manager
WebAsyncManager -> WebAsyncManager();1345223391;Package private constructor._@see AsyncWebUtils#getAsyncManager(javax.servlet.ServletRequest)_@see AsyncWebUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,async,web,utils,get,async,manager,javax,servlet,servlet,request,see,async,web,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1347067811;Package private constructor._@see AsyncWebUtils#getAsyncManager(javax.servlet.ServletRequest)_@see AsyncWebUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,async,web,utils,get,async,manager,javax,servlet,servlet,request,see,async,web,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1347908336;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1348061150;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1350317859;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1351178945;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1351182923;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1351289067;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1351301394;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1351648724;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1351651119;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1353616762;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1353963857;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1354139803;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1354291807;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1355313310;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1356735495;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1357119239;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1362408075;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1368482696;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1385412762;Package private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1411733721;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1412118625;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1452804420;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1452851471;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1467730834;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1468960983;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1495868221;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1496837955;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1497341397;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1498500776;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1502868381;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1508532146;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1510200931;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1520582595;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1529361191;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1529721864;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1529948549;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1530174524;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1531321803;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> WebAsyncManager();1531322037;Package-private constructor._@see WebAsyncUtils#getAsyncManager(javax.servlet.ServletRequest)_@see WebAsyncUtils#getAsyncManager(org.springframework.web.context.request.WebRequest);WebAsyncManager() {_	};package,private,constructor,see,web,async,utils,get,async,manager,javax,servlet,servlet,request,see,web,async,utils,get,async,manager,org,springframework,web,context,request,web,request;web,async,manager
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1385412762;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1411733721;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext);1350317859;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext);1351178945;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext);1351182923;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext);1351289067;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext);1351301394;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask<?> asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1348061150;Register a {@link DeferredResultProcessingInterceptor} that will be_applied when concurrent request handling with a {@link DeferredResult}_starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,deferred,result,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1350317859;Register a {@link DeferredResultProcessingInterceptor} that will be_applied when concurrent request handling with a {@link DeferredResult}_starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,deferred,result,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1351178945;Register a {@link DeferredResultProcessingInterceptor} that will be_applied when concurrent request handling with a {@link DeferredResult}_starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,deferred,result,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1351182923;Register a {@link DeferredResultProcessingInterceptor} that will be_applied when concurrent request handling with a {@link DeferredResult}_starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,deferred,result,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1351289067;Register a {@link DeferredResultProcessingInterceptor} that will be_applied when concurrent request handling with a {@link DeferredResult}_starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,deferred,result,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1351301394;Register a {@link DeferredResultProcessingInterceptor} that will be_applied when concurrent request handling with a {@link DeferredResult}_starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,deferred,result,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1351648724;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1351651119;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1353616762;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1353963857;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1354139803;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1354291807;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1355313310;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1356735495;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1357119239;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1362408075;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1368482696;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1385412762;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1411733721;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1412118625;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1452804420;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1452851471;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1467730834;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1468960983;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1495868221;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1496837955;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1497341397;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1498500776;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1502868381;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1508532146;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1510200931;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1520582595;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1529361191;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1529721864;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1529948549;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1530174524;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1531321803;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor);1531322037;Register a {@link DeferredResultProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "DeferredResultProcessingInterceptor is required")__		this.deferredResultInterceptors.put(key, interceptor)__	};register,a,link,deferred,result,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,deferred,result,interceptor,object,key,deferred,result,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,deferred,result,processing,interceptor,is,required,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1351289067;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		final DeferredResultInterceptorChain chain =_				new DeferredResultInterceptorChain(this.deferredResultInterceptors.values())___		this.asyncWebRequest.setTimeoutHandler(new Runnable() {_			public void run() {_				if (!deferredResult.applyTimeoutResult()) {_					try {_						chain.triggerAfterTimeout(asyncWebRequest, deferredResult)__					}_					catch (Throwable t) {_						setConcurrentResultAndDispatch(t)__					}_				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				deferredResult.expire()__				chain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			chain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = chain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,final,deferred,result,interceptor,chain,chain,new,deferred,result,interceptor,chain,this,deferred,result,interceptors,values,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,if,deferred,result,apply,timeout,result,try,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,deferred,result,expire,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1351301394;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		final DeferredResultInterceptorChain chain =_				new DeferredResultInterceptorChain(this.deferredResultInterceptors.values())___		this.asyncWebRequest.setTimeoutHandler(new Runnable() {_			public void run() {_				if (!deferredResult.applyTimeoutResult()) {_					try {_						chain.triggerAfterTimeout(asyncWebRequest, deferredResult)__					}_					catch (Throwable t) {_						setConcurrentResultAndDispatch(t)__					}_				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				deferredResult.expire()__				chain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			chain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = chain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,final,deferred,result,interceptor,chain,chain,new,deferred,result,interceptor,chain,this,deferred,result,interceptors,values,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,if,deferred,result,apply,timeout,result,try,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,deferred,result,expire,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1351648724;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1351651119;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1353616762;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1353963857;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext);1354139803;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1412118625;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1452804420;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1452851471;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1467730834;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1468960983;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1495868221;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1496837955;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1497341397;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1498500776;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1502868381;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1508532146;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1510200931;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1520582595;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1529361191;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1529721864;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1529948549;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1530174524;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1531321803;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception;1531322037;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception._@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked", "rawtypes"})_	public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,rawtypes,public,void,start,callable,processing,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext);1351648724;Use the given {@link MvcAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param mvcAsyncTask an MvcAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext) {_		Assert.notNull(mvcAsyncTask, "MvcAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		final Callable<?> callable = mvcAsyncTask.getCallable()___		Long timeout = mvcAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = mvcAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(mvcAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())___		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,mvc,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,mvc,async,task,an,mvc,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,final,mvc,async,task,mvc,async,task,object,processing,context,assert,not,null,mvc,async,task,mvc,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,final,callable,callable,mvc,async,task,get,callable,long,timeout,mvc,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,mvc,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,mvc,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext);1351651119;Use the given {@link MvcAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param mvcAsyncTask an MvcAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext) {_		Assert.notNull(mvcAsyncTask, "MvcAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		final Callable<?> callable = mvcAsyncTask.getCallable()___		Long timeout = mvcAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = mvcAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(mvcAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())___		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,mvc,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,mvc,async,task,an,mvc,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,final,mvc,async,task,mvc,async,task,object,processing,context,assert,not,null,mvc,async,task,mvc,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,final,callable,callable,mvc,async,task,get,callable,long,timeout,mvc,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,mvc,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,mvc,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext);1353616762;Use the given {@link MvcAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param mvcAsyncTask an MvcAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext) {_		Assert.notNull(mvcAsyncTask, "MvcAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = mvcAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = mvcAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(mvcAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = mvcAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,mvc,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,mvc,async,task,an,mvc,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,final,mvc,async,task,mvc,async,task,object,processing,context,assert,not,null,mvc,async,task,mvc,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,mvc,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,mvc,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,mvc,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,mvc,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext);1353963857;Use the given {@link MvcAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param mvcAsyncTask an MvcAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(final MvcAsyncTask<?> mvcAsyncTask, Object... processingContext) {_		Assert.notNull(mvcAsyncTask, "MvcAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = mvcAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = mvcAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(mvcAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = mvcAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,mvc,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,mvc,async,task,an,mvc,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,final,mvc,async,task,mvc,async,task,object,processing,context,assert,not,null,mvc,async,task,mvc,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,mvc,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,mvc,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,mvc,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,mvc,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> @SuppressWarnings({"unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1356735495;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1357119239;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1362408075;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({"unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1368482696;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({"unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1344035753;Configure an AsyncTaskExecutor for use with {@link #startCallableProcessing(Callable)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used. Applications_are advised to provide a TaskExecutor configured for production use._@see org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#setAsyncTaskExecutor;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,link,start,callable,processing,callable,p,by,default,a,link,simple,async,task,executor,instance,is,used,applications,are,advised,to,provide,a,task,executor,configured,for,production,use,see,org,springframework,web,servlet,mvc,method,annotation,request,mapping,handler,adapter,set,async,task,executor;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1345223391;Configure an AsyncTaskExecutor for use with {@link #startCallableProcessing(Callable)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used. Applications_are advised to provide a TaskExecutor configured for production use._@see org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#setAsyncTaskExecutor;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,link,start,callable,processing,callable,p,by,default,a,link,simple,async,task,executor,instance,is,used,applications,are,advised,to,provide,a,task,executor,configured,for,production,use,see,org,springframework,web,servlet,mvc,method,annotation,request,mapping,handler,adapter,set,async,task,executor;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1345223391;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1347067811;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1347908336;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1348061150;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1350317859;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1351178945;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1351182923;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1351289067;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1351301394;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1351648724;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1351651119;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1353616762;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1353963857;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1354139803;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1354291807;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1355313310;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1356735495;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1357119239;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1362408075;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1368482696;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1385412762;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1411733721;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1412118625;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1452804420;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1452851471;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1467730834;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1468960983;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1495868221;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1496837955;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1497341397;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1498500776;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1502868381;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1508532146;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1510200931;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1520582595;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1529361191;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1529721864;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1529948549;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1530174524;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1531321803;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void setTaskExecutor(AsyncTaskExecutor taskExecutor);1531322037;Configure an AsyncTaskExecutor for use with concurrent processing via_{@link #startCallableProcessing(Callable, Object...)}._<p>By default a {@link SimpleAsyncTaskExecutor} instance is used.;public void setTaskExecutor(AsyncTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};configure,an,async,task,executor,for,use,with,concurrent,processing,via,link,start,callable,processing,callable,object,p,by,default,a,link,simple,async,task,executor,instance,is,used;public,void,set,task,executor,async,task,executor,task,executor,this,task,executor,task,executor
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1508532146;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)__		interceptors.add(errorCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Processing timeout")__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(t -> {_			logger.debug("Processing error")__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, t)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,interceptors,add,error,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,t,logger,debug,processing,error,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,t,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1510200931;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Processing timeout")__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Processing error")__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,processing,error,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1520582595;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Processing timeout")__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Processing error")__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,processing,error,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1529361191;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Async request timeout for " + formatRequestUri())__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Async request error for " + formatRequestUri() + ": " + ex)__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,async,request,timeout,for,format,request,uri,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,async,request,error,for,format,request,uri,ex,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1529721864;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Async request timeout for " + formatRequestUri())__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Async request error for " + formatRequestUri() + ": " + ex)__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,async,request,timeout,for,format,request,uri,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,async,request,error,for,format,request,uri,ex,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1529948549;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Async request timeout for " + formatRequestUri())__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Async request error for " + formatRequestUri() + ": " + ex)__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,async,request,timeout,for,format,request,uri,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,async,request,error,for,format,request,uri,ex,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1530174524;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Async request timeout for " + formatRequestUri())__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Async request error for " + formatRequestUri() + ": " + ex)__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,async,request,timeout,for,format,request,uri,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,async,request,error,for,format,request,uri,ex,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1531321803;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}_		else {_			logExecutorWarning()__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Async request timeout for " + formatRequestUri())__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Async request error for " + formatRequestUri() + ": " + ex)__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,else,log,executor,warning,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,async,request,timeout,for,format,request,uri,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,async,request,error,for,format,request,uri,ex,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) 			throws Exception;1531322037;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)_			throws Exception {__		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}_		else {_			logExecutorWarning()__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Async request timeout for " + formatRequestUri())__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			logger.debug("Async request error for " + formatRequestUri() + ": " + ex)__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, ex)__			result = (result != CallableProcessingInterceptor.RESULT_NONE ? result : ex)__			setConcurrentResultAndDispatch(result)__		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,else,log,executor,warning,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,async,request,timeout,for,format,request,uri,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,ex,logger,debug,async,request,error,for,format,request,uri,ex,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,ex,result,result,callable,processing,interceptor,result,ex,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public boolean initializeAsyncThread(Object key);1345223391;Invoke the {@linkplain WebAsyncThreadInitializer#initialize() initialize()}_method of the named {@link WebAsyncThreadInitializer}._@param key the key under which the initializer was registered_@return whether an initializer was found and applied;public boolean initializeAsyncThread(Object key) {_		WebAsyncThreadInitializer initializer = this.threadInitializers.get(key)__		if (initializer != null) {_			initializer.initialize()__			return true__		}_		return false__	};invoke,the,linkplain,web,async,thread,initializer,initialize,initialize,method,of,the,named,link,web,async,thread,initializer,param,key,the,key,under,which,the,initializer,was,registered,return,whether,an,initializer,was,found,and,applied;public,boolean,initialize,async,thread,object,key,web,async,thread,initializer,initializer,this,thread,initializers,get,key,if,initializer,null,initializer,initialize,return,true,return,false
WebAsyncManager -> public boolean initializeAsyncThread(Object key);1347067811;Invoke the {@linkplain WebAsyncThreadInitializer#initialize() initialize()}_method of the named {@link WebAsyncThreadInitializer}._@param key the key under which the initializer was registered_@return whether an initializer was found and applied;public boolean initializeAsyncThread(Object key) {_		WebAsyncThreadInitializer initializer = this.threadInitializers.get(key)__		if (initializer != null) {_			initializer.initialize()__			return true__		}_		return false__	};invoke,the,linkplain,web,async,thread,initializer,initialize,initialize,method,of,the,named,link,web,async,thread,initializer,param,key,the,key,under,which,the,initializer,was,registered,return,whether,an,initializer,was,found,and,applied;public,boolean,initialize,async,thread,object,key,web,async,thread,initializer,initializer,this,thread,initializers,get,key,if,initializer,null,initializer,initialize,return,true,return,false
WebAsyncManager -> public boolean initializeAsyncThread(Object key);1347908336;Invoke the {@linkplain WebAsyncThreadInitializer#initialize() initialize()}_method of the named {@link WebAsyncThreadInitializer}._@param key the key under which the initializer was registered_@return whether an initializer was found and applied;public boolean initializeAsyncThread(Object key) {_		WebAsyncThreadInitializer initializer = this.threadInitializers.get(key)__		if (initializer != null) {_			initializer.initialize()__			return true__		}_		return false__	};invoke,the,linkplain,web,async,thread,initializer,initialize,initialize,method,of,the,named,link,web,async,thread,initializer,param,key,the,key,under,which,the,initializer,was,registered,return,whether,an,initializer,was,found,and,applied;public,boolean,initialize,async,thread,object,key,web,async,thread,initializer,initializer,this,thread,initializers,get,key,if,initializer,null,initializer,initialize,return,true,return,false
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1495868221;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1496837955;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1497341397;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1498500776;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1502868381;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1508532146;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1510200931;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1520582595;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1529361191;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1529721864;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1529948549;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1530174524;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1531321803;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> @Nullable 	public CallableProcessingInterceptor getCallableInterceptor(Object key);1531322037;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, 			Object... processingContext) throws Exception;1348061150;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult,_			Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		final DeferredResultInterceptorChain chain =_				new DeferredResultInterceptorChain(this.deferredResultInterceptors.values())___		chain.applyPreProcess(this.asyncWebRequest, deferredResult)___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				if (!deferredResult.getAndSetExpired()) {_					chain.triggerAfterExpiration(asyncWebRequest, deferredResult)__				}_			}_		})___		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				chain.applyPostProcess(asyncWebRequest, deferredResult, result)___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,final,deferred,result,interceptor,chain,chain,new,deferred,result,interceptor,chain,this,deferred,result,interceptors,values,chain,apply,pre,process,this,async,web,request,deferred,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,if,deferred,result,get,and,set,expired,chain,trigger,after,expiration,async,web,request,deferred,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,chain,apply,post,process,async,web,request,deferred,result,result,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, 			Object... processingContext) throws Exception;1350317859;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult,_			Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		final DeferredResultInterceptorChain chain =_				new DeferredResultInterceptorChain(this.deferredResultInterceptors.values())___		chain.applyPreProcess(this.asyncWebRequest, deferredResult)___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				if (!deferredResult.getAndSetExpired()) {_					chain.triggerAfterExpiration(asyncWebRequest, deferredResult)__				}_			}_		})___		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				chain.applyPostProcess(asyncWebRequest, deferredResult, result)___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,final,deferred,result,interceptor,chain,chain,new,deferred,result,interceptor,chain,this,deferred,result,interceptors,values,chain,apply,pre,process,this,async,web,request,deferred,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,if,deferred,result,get,and,set,expired,chain,trigger,after,expiration,async,web,request,deferred,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,chain,apply,post,process,async,web,request,deferred,result,result,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, 			Object... processingContext) throws Exception;1351178945;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult,_			Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		final DeferredResultInterceptorChain chain =_				new DeferredResultInterceptorChain(this.deferredResultInterceptors.values())___		chain.applyPreProcess(this.asyncWebRequest, deferredResult)___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				if (deferredResult.expire()) {_					chain.triggerAfterExpiration(asyncWebRequest, deferredResult)__				}_			}_		})___		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				chain.applyPostProcess(asyncWebRequest, deferredResult, result)___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,final,deferred,result,interceptor,chain,chain,new,deferred,result,interceptor,chain,this,deferred,result,interceptors,values,chain,apply,pre,process,this,async,web,request,deferred,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,if,deferred,result,expire,chain,trigger,after,expiration,async,web,request,deferred,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,chain,apply,post,process,async,web,request,deferred,result,result,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, 			Object... processingContext) throws Exception;1351182923;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult,_			Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		final DeferredResultInterceptorChain chain =_				new DeferredResultInterceptorChain(this.deferredResultInterceptors.values())___		chain.applyPreProcess(this.asyncWebRequest, deferredResult)___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				if (deferredResult.expire()) {_					chain.triggerAfterExpiration(asyncWebRequest, deferredResult)__				}_			}_		})___		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				chain.applyPostProcess(asyncWebRequest, deferredResult, result)___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,final,deferred,result,interceptor,chain,chain,new,deferred,result,interceptor,chain,this,deferred,result,interceptors,values,chain,apply,pre,process,this,async,web,request,deferred,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,if,deferred,result,expire,chain,trigger,after,expiration,async,web,request,deferred,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,chain,apply,post,process,async,web,request,deferred,result,result,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1495868221;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1496837955;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1497341397;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1498500776;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1502868381;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1508532146;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1510200931;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1520582595;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1529361191;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1529721864;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1529948549;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1530174524;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1531321803;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> @Nullable 	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key);1531322037;Get the {@link DeferredResultProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key, or {@code null} if none;@Nullable_	public DeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key) {_		return this.deferredResultInterceptors.get(key)__	};get,the,link,deferred,result,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null,if,none;nullable,public,deferred,result,processing,interceptor,get,deferred,result,interceptor,object,key,return,this,deferred,result,interceptors,get,key
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1353963857;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param key the key_@param interceptors the interceptor to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,key,the,key,param,interceptors,the,interceptor,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1354139803;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param key the key_@param interceptors the interceptor to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,key,the,key,param,interceptors,the,interceptor,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1354291807;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param key the key_@param interceptors the interceptor to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,key,the,key,param,interceptors,the,interceptor,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1355313310;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1356735495;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1357119239;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1362408075;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1368482696;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1385412762;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1411733721;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1412118625;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1452804420;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1452851471;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1467730834;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1468960983;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1495868221;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1496837955;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1497341397;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1498500776;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1502868381;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1508532146;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1510200931;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1520582595;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1529361191;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1529721864;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1529948549;Register one or more {@link DeferredResultProcessingInterceptor}s without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,s,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1530174524;Register one or more {@link DeferredResultProcessingInterceptor DeferredResultProcessingInterceptors} without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,deferred,result,processing,interceptors,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1531321803;Register one or more {@link DeferredResultProcessingInterceptor DeferredResultProcessingInterceptors} without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,deferred,result,processing,interceptors,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors);1531322037;Register one or more {@link DeferredResultProcessingInterceptor DeferredResultProcessingInterceptors} without a specified key._The default key is derived from the interceptor class name and hash code._@param interceptors one or more interceptors to register;public void registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,one,or,more,link,deferred,result,processing,interceptor,deferred,result,processing,interceptors,without,a,specified,key,the,default,key,is,derived,from,the,interceptor,class,name,and,hash,code,param,interceptors,one,or,more,interceptors,to,register;public,void,register,deferred,result,interceptors,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1353963857;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptor the interceptor to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1354139803;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptor the interceptor to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1354291807;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptor the interceptor to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1355313310;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1356735495;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1357119239;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1362408075;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1368482696;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1385412762;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1411733721;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1412118625;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1452804420;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1452851471;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1467730834;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1468960983;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1495868221;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1496837955;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1497341397;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1498500776;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1502868381;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1508532146;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1510200931;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1520582595;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1529361191;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1529721864;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1529948549;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1530174524;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1531321803;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors);1531322037;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptors one or more interceptors to register;public void registerCallableInterceptors(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptors,one,or,more,interceptors,to,register;public,void,register,callable,interceptors,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1354291807;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask an WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,an,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1355313310;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask an WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,an,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1356735495;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask an WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			@Override_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,an,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1357119239;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask an WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,an,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1362408075;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1368482696;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			@Override_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1385412762;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, callable)___		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			@Override_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable t) {_					result = t__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,t,result,t,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1411733721;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			@Override_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1412118625;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)___		this.taskExecutor.submit(new Runnable() {_			@Override_			public void run() {_				Object result = null__				try {_					interceptorChain.applyPreProcess(asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			}_		})__	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1452804420;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(new Runnable() {_				@Override_				public void run() {_					Object result = null__					try {_						interceptorChain.applyPreProcess(asyncWebRequest, callable)__						result = callable.call()__					}_					catch (Throwable ex) {_						result = ex__					}_					finally {_						result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__					}_					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1452851471;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<CallableProcessingInterceptor>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(new Runnable() {_				@Override_				public void run() {_					Object result = null__					try {_						interceptorChain.applyPreProcess(asyncWebRequest, callable)__						result = callable.call()__					}_					catch (Throwable ex) {_						result = ex__					}_					finally {_						result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__					}_					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,callable,processing,interceptor,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1467730834;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(new Runnable() {_				@Override_				public void run() {_					Object result = null__					try {_						interceptorChain.applyPreProcess(asyncWebRequest, callable)__						result = callable.call()__					}_					catch (Throwable ex) {_						result = ex__					}_					finally {_						result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__					}_					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1468960983;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(new Runnable() {_				@Override_				public void run() {_					Object result = null__					try {_						interceptorChain.applyPreProcess(asyncWebRequest, callable)__						result = callable.call()__					}_					catch (Throwable ex) {_						result = ex__					}_					finally {_						result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__					}_					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1495868221;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(new Runnable() {_				@Override_				public void run() {_					Object result = null__					try {_						interceptorChain.applyPreProcess(asyncWebRequest, callable)__						result = callable.call()__					}_					catch (Throwable ex) {_						result = ex__					}_					finally {_						result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__					}_					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1496837955;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				logger.debug("Processing timeout")__				Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable)__				if (result != CallableProcessingInterceptor.RESULT_NONE) {_					setConcurrentResultAndDispatch(result)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, callable)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(new Runnable() {_				@Override_				public void run() {_					Object result = null__					try {_						interceptorChain.applyPreProcess(asyncWebRequest, callable)__						result = callable.call()__					}_					catch (Throwable ex) {_						result = ex__					}_					finally {_						result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result)__					}_					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,new,runnable,override,public,void,run,object,result,null,try,interceptor,chain,apply,pre,process,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1497341397;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Processing timeout")__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1498500776;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)__		interceptors.add(errorCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Processing timeout")__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(t -> {_			logger.debug("Processing error")__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, t)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,interceptors,add,error,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,t,logger,debug,processing,error,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,t,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception;1502868381;Use the given {@link WebAsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param webAsyncTask a WebAsyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start;public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) throws Exception {_		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = webAsyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = webAsyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		List<CallableProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(webAsyncTask.getInterceptor())__		interceptors.addAll(this.callableInterceptors.values())__		interceptors.add(timeoutCallableInterceptor)__		interceptors.add(errorCallableInterceptor)___		final Callable<?> callable = webAsyncTask.getCallable()__		final CallableInterceptorChain interceptorChain = new CallableInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			logger.debug("Processing timeout")__			Object result = interceptorChain.triggerAfterTimeout(this.asyncWebRequest, callable)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addErrorHandler(t -> {_			logger.debug("Processing error")__			Object result = interceptorChain.triggerAfterError(this.asyncWebRequest, callable, t)__			if (result != CallableProcessingInterceptor.RESULT_NONE) {_				setConcurrentResultAndDispatch(result)__			}_		})___		this.asyncWebRequest.addCompletionHandler(() ->_				interceptorChain.triggerAfterCompletion(this.asyncWebRequest, callable))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable)__		startAsyncProcessing(processingContext)__		try {_			Future<?> future = this.taskExecutor.submit(() -> {_				Object result = null__				try {_					interceptorChain.applyPreProcess(this.asyncWebRequest, callable)__					result = callable.call()__				}_				catch (Throwable ex) {_					result = ex__				}_				finally {_					result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result)__				}_				setConcurrentResultAndDispatch(result)__			})__			interceptorChain.setTaskFuture(future)__		}_		catch (RejectedExecutionException ex) {_			Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex)__			setConcurrentResultAndDispatch(result)__			throw ex__		}_	};use,the,given,link,web,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,web,async,task,a,web,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start;public,void,start,callable,processing,final,web,async,task,web,async,task,object,processing,context,throws,exception,assert,not,null,web,async,task,web,async,task,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,web,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,web,async,task,get,executor,if,executor,null,this,task,executor,executor,list,callable,processing,interceptor,interceptors,new,array,list,interceptors,add,web,async,task,get,interceptor,interceptors,add,all,this,callable,interceptors,values,interceptors,add,timeout,callable,interceptor,interceptors,add,error,callable,interceptor,final,callable,callable,web,async,task,get,callable,final,callable,interceptor,chain,interceptor,chain,new,callable,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,logger,debug,processing,timeout,object,result,interceptor,chain,trigger,after,timeout,this,async,web,request,callable,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,error,handler,t,logger,debug,processing,error,object,result,interceptor,chain,trigger,after,error,this,async,web,request,callable,t,if,result,callable,processing,interceptor,set,concurrent,result,and,dispatch,result,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,callable,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,callable,start,async,processing,processing,context,try,future,future,this,task,executor,submit,object,result,null,try,interceptor,chain,apply,pre,process,this,async,web,request,callable,result,callable,call,catch,throwable,ex,result,ex,finally,result,interceptor,chain,apply,post,process,this,async,web,request,callable,result,set,concurrent,result,and,dispatch,result,interceptor,chain,set,task,future,future,catch,rejected,execution,exception,ex,object,result,interceptor,chain,apply,post,process,this,async,web,request,callable,ex,set,concurrent,result,and,dispatch,result,throw,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1354291807;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1355313310;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1356735495;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1357119239;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1362408075;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1368482696;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1385412762;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable t) {_					setConcurrentResultAndDispatch(t)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(asyncWebRequest, deferredResult)___		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable t) {_			setConcurrentResultAndDispatch(t)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,t,set,concurrent,result,and,dispatch,t,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,t,set,concurrent,result,and,dispatch,t
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1411733721;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1412118625;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1452804420;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1452851471;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<DeferredResultProcessingInterceptor>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,deferred,result,processing,interceptor,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1467730834;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1468960983;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1495868221;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1496837955;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(new Runnable() {_			@Override_			public void run() {_				try {_					interceptorChain.triggerAfterTimeout(asyncWebRequest, deferredResult)__				}_				catch (Throwable ex) {_					setConcurrentResultAndDispatch(ex)__				}_			}_		})___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				interceptorChain.triggerAfterCompletion(asyncWebRequest, deferredResult)__			}_		})___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(new DeferredResultHandler() {_				@Override_				public void handleResult(Object result) {_					result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result)__					setConcurrentResultAndDispatch(result)__				}_			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,new,runnable,override,public,void,run,try,interceptor,chain,trigger,after,timeout,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,interceptor,chain,trigger,after,completion,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,new,deferred,result,handler,override,public,void,handle,result,object,result,result,interceptor,chain,apply,post,process,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1497341397;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1498500776;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)__		interceptors.add(errorDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(t -> {_			try {_				interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, t)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,interceptors,add,error,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,t,try,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,t,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1502868381;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)__		interceptors.add(errorDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(t -> {_			try {_				interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, t)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,interceptors,add,error,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,t,try,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,t,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1508532146;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)__		interceptors.add(errorDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(t -> {_			try {_				interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, t)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,interceptors,add,error,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,t,try,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,t,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1510200931;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1520582595;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1529361191;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1529721864;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1529948549;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1530174524;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1531321803;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public void startDeferredResultProcessing( 			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception;1531322037;Start concurrent request processing and initialize the given_{@link DeferredResult} with a {@link DeferredResultHandler} that saves_the result and dispatches the request to resume processing of that_result. The {@code AsyncWebRequest} is also updated with a completion_handler that expires the {@code DeferredResult} and a timeout handler_assuming the {@code DeferredResult} has a default timeout result._@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception if concurrent processing failed to start_@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(_			final DeferredResult<?> deferredResult, Object... processingContext) throws Exception {__		Assert.notNull(deferredResult, "DeferredResult must not be null")__		Assert.state(this.asyncWebRequest != null, "AsyncWebRequest must not be null")___		Long timeout = deferredResult.getTimeoutValue()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		List<DeferredResultProcessingInterceptor> interceptors = new ArrayList<>()__		interceptors.add(deferredResult.getInterceptor())__		interceptors.addAll(this.deferredResultInterceptors.values())__		interceptors.add(timeoutDeferredResultInterceptor)___		final DeferredResultInterceptorChain interceptorChain = new DeferredResultInterceptorChain(interceptors)___		this.asyncWebRequest.addTimeoutHandler(() -> {_			try {_				interceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult)__			}_			catch (Throwable ex) {_				setConcurrentResultAndDispatch(ex)__			}_		})___		this.asyncWebRequest.addErrorHandler(ex -> {_			try {_				if (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {_					return__				}_				deferredResult.setErrorResult(ex)__			}_			catch (Throwable interceptorEx) {_				setConcurrentResultAndDispatch(interceptorEx)__			}_		})___		this.asyncWebRequest.addCompletionHandler(()_				-> interceptorChain.triggerAfterCompletion(this.asyncWebRequest, deferredResult))___		interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, deferredResult)__		startAsyncProcessing(processingContext)___		try {_			interceptorChain.applyPreProcess(this.asyncWebRequest, deferredResult)__			deferredResult.setResultHandler(result -> {_				result = interceptorChain.applyPostProcess(this.asyncWebRequest, deferredResult, result)__				setConcurrentResultAndDispatch(result)__			})__		}_		catch (Throwable ex) {_			setConcurrentResultAndDispatch(ex)__		}_	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,throws,exception,assert,not,null,deferred,result,deferred,result,must,not,be,null,assert,state,this,async,web,request,null,async,web,request,must,not,be,null,long,timeout,deferred,result,get,timeout,value,if,timeout,null,this,async,web,request,set,timeout,timeout,list,deferred,result,processing,interceptor,interceptors,new,array,list,interceptors,add,deferred,result,get,interceptor,interceptors,add,all,this,deferred,result,interceptors,values,interceptors,add,timeout,deferred,result,interceptor,final,deferred,result,interceptor,chain,interceptor,chain,new,deferred,result,interceptor,chain,interceptors,this,async,web,request,add,timeout,handler,try,interceptor,chain,trigger,after,timeout,this,async,web,request,deferred,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex,this,async,web,request,add,error,handler,ex,try,if,interceptor,chain,trigger,after,error,this,async,web,request,deferred,result,ex,return,deferred,result,set,error,result,ex,catch,throwable,interceptor,ex,set,concurrent,result,and,dispatch,interceptor,ex,this,async,web,request,add,completion,handler,interceptor,chain,trigger,after,completion,this,async,web,request,deferred,result,interceptor,chain,apply,before,concurrent,handling,this,async,web,request,deferred,result,start,async,processing,processing,context,try,interceptor,chain,apply,pre,process,this,async,web,request,deferred,result,deferred,result,set,result,handler,result,result,interceptor,chain,apply,post,process,this,async,web,request,deferred,result,result,set,concurrent,result,and,dispatch,result,catch,throwable,ex,set,concurrent,result,and,dispatch,ex
WebAsyncManager -> public Object getConcurrentResult();1344035753;Return the result of concurrent handler execution. This may be an Object_value on successful return or an {@code Exception} or {@code Throwable}.;public Object getConcurrentResult() {_		return this.concurrentResult__	};return,the,result,of,concurrent,handler,execution,this,may,be,an,object,value,on,successful,return,or,an,code,exception,or,code,throwable;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1345223391;Return the result of concurrent handler execution. This may be an Object_value on successful return or an {@code Exception} or {@code Throwable}.;public Object getConcurrentResult() {_		return this.concurrentResult__	};return,the,result,of,concurrent,handler,execution,this,may,be,an,object,value,on,successful,return,or,an,code,exception,or,code,throwable;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1345223391;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one.;public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1347067811;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one.;public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1347908336;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one.;public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1348061150;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1350317859;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1351178945;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1351182923;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1351289067;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1351301394;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1351648724;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1351651119;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1353616762;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1353963857;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1354139803;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1354291807;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1355313310;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1356735495;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1357119239;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1362408075;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1368482696;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1385412762;Provides access to the result from concurrent handling.__@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1411733721;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1412118625;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1452804420;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1452851471;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1467730834;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1468960983;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1495868221;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1496837955;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1497341397;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1498500776;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1502868381;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1508532146;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1510200931;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1520582595;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1529361191;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1529721864;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1529948549;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1530174524;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1531321803;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public Object getConcurrentResult();1531322037;Provides access to the result from concurrent handling._@return an Object, possibly an {@code Exception} or {@code Throwable} if_concurrent handling raised one._@see #clearConcurrentResult();public Object getConcurrentResult() {_		return this.concurrentResult__	};provides,access,to,the,result,from,concurrent,handling,return,an,object,possibly,an,code,exception,or,code,throwable,if,concurrent,handling,raised,one,see,clear,concurrent,result;public,object,get,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean applyAsyncThreadInitializer(Object key);1344035753;Invoke the {@linkplain AsyncThreadInitializer#initialize() initialize()}_method of the named {@link AsyncThreadInitializer}._@param key the key under which the initializer was registered_@return whether an initializer was found and applied;public boolean applyAsyncThreadInitializer(Object key) {_		AsyncThreadInitializer initializer = this.threadInitializers.get(key)__		if (initializer != null) {_			initializer.initialize()__			return true__		}_		return false__	};invoke,the,linkplain,async,thread,initializer,initialize,initialize,method,of,the,named,link,async,thread,initializer,param,key,the,key,under,which,the,initializer,was,registered,return,whether,an,initializer,was,found,and,applied;public,boolean,apply,async,thread,initializer,object,key,async,thread,initializer,initializer,this,thread,initializers,get,key,if,initializer,null,initializer,initialize,return,true,return,false
WebAsyncManager -> public boolean applyAsyncThreadInitializer(Object key);1345223391;Invoke the {@linkplain AsyncThreadInitializer#initialize() initialize()}_method of the named {@link AsyncThreadInitializer}._@param key the key under which the initializer was registered_@return whether an initializer was found and applied;public boolean applyAsyncThreadInitializer(Object key) {_		AsyncThreadInitializer initializer = this.threadInitializers.get(key)__		if (initializer != null) {_			initializer.initialize()__			return true__		}_		return false__	};invoke,the,linkplain,async,thread,initializer,initialize,initialize,method,of,the,named,link,async,thread,initializer,param,key,the,key,under,which,the,initializer,was,registered,return,whether,an,initializer,was,found,and,applied;public,boolean,apply,async,thread,initializer,object,key,async,thread,initializer,initializer,this,thread,initializers,get,key,if,initializer,null,initializer,initialize,return,true,return,false
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext);1344035753;Initialize the given given {@link DeferredResult} so that whenever the_DeferredResult is set, the resulting value, which may be an Object or a_raised {@code Exception} or {@code Throwable}, is saved and the request_is dispatched for further processing of the result. In the dispatch_thread, the result value can be accessed via {@link #getConcurrentResult()}._<p>The method returns immediately and it's up to the caller to set the_DeferredResult. Subsequent calls to {@link #isConcurrentHandlingStarted()}_return "true" until after the dispatch when {@link #hasConcurrentResult()}_returns "true" and {@link #isConcurrentHandlingStarted()} is back to "false".__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save for later access via_{@link #getConcurrentResultContext()};public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext) {_		Assert.notNull(deferredResult, "DeferredResult is required")___		startAsyncProcessing(processingContext)___		deferredResult.init(new DeferredResultHandler() {__			public void handle(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				if (asyncWebRequest.isAsyncComplete()) {_					throw new StaleAsyncWebRequestException("Could not complete processing due to a timeout or network error")__				}__				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})___		this.asyncWebRequest.setTimeoutHandler(deferredResult.getTimeoutHandler())__	};initialize,the,given,given,link,deferred,result,so,that,whenever,the,deferred,result,is,set,the,resulting,value,which,may,be,an,object,or,a,raised,code,exception,or,code,throwable,is,saved,and,the,request,is,dispatched,for,further,processing,of,the,result,in,the,dispatch,thread,the,result,value,can,be,accessed,via,link,get,concurrent,result,p,the,method,returns,immediately,and,it,s,up,to,the,caller,to,set,the,deferred,result,subsequent,calls,to,link,is,concurrent,handling,started,return,true,until,after,the,dispatch,when,link,has,concurrent,result,returns,true,and,link,is,concurrent,handling,started,is,back,to,false,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,for,later,access,via,link,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,is,required,start,async,processing,processing,context,deferred,result,init,new,deferred,result,handler,public,void,handle,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,if,async,web,request,is,async,complete,throw,new,stale,async,web,request,exception,could,not,complete,processing,due,to,a,timeout,or,network,error,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch,this,async,web,request,set,timeout,handler,deferred,result,get,timeout,handler
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext);1345223391;Initialize the given given {@link DeferredResult} so that whenever the_DeferredResult is set, the resulting value, which may be an Object or a_raised {@code Exception} or {@code Throwable}, is saved and the request_is dispatched for further processing of the result. In the dispatch_thread, the result value can be accessed via {@link #getConcurrentResult()}._<p>The method returns immediately and it's up to the caller to set the_DeferredResult. Subsequent calls to {@link #isConcurrentHandlingStarted()}_return "true" until after the dispatch when {@link #hasConcurrentResult()}_returns "true" and {@link #isConcurrentHandlingStarted()} is back to "false".__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save for later access via_{@link #getConcurrentResultContext()};public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext) {_		Assert.notNull(deferredResult, "DeferredResult is required")___		startAsyncProcessing(processingContext)___		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				deferredResult.setExpired()__			}_		})___		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				Assert.state(!asyncWebRequest.isAsyncComplete(),_						"Cannot handle DeferredResult [ " + deferredResult + " ] due to a timeout or network error")___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};initialize,the,given,given,link,deferred,result,so,that,whenever,the,deferred,result,is,set,the,resulting,value,which,may,be,an,object,or,a,raised,code,exception,or,code,throwable,is,saved,and,the,request,is,dispatched,for,further,processing,of,the,result,in,the,dispatch,thread,the,result,value,can,be,accessed,via,link,get,concurrent,result,p,the,method,returns,immediately,and,it,s,up,to,the,caller,to,set,the,deferred,result,subsequent,calls,to,link,is,concurrent,handling,started,return,true,until,after,the,dispatch,when,link,has,concurrent,result,returns,true,and,link,is,concurrent,handling,started,is,back,to,false,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,for,later,access,via,link,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,is,required,start,async,processing,processing,context,this,async,web,request,add,completion,handler,new,runnable,public,void,run,deferred,result,set,expired,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,assert,state,async,web,request,is,async,complete,cannot,handle,deferred,result,deferred,result,due,to,a,timeout,or,network,error,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext);1345223391;Start concurrent request processing and initialize the given {@link DeferredResult}_with a {@link DeferredResultHandler} that saves the result and dispatches_the request to resume processing of that result._The {@code AsyncWebRequest} is also updated with a completion handler that_expires the {@code DeferredResult} and a timeout handler assuming the_{@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext) {_		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				deferredResult.setExpired()__			}_		})___		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				Assert.state(!asyncWebRequest.isAsyncComplete(),_						"Cannot handle DeferredResult [ " + deferredResult + " ] due to a timeout or network error")___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,this,async,web,request,add,completion,handler,new,runnable,public,void,run,deferred,result,set,expired,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,assert,state,async,web,request,is,async,complete,cannot,handle,deferred,result,deferred,result,due,to,a,timeout,or,network,error,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext);1347067811;Start concurrent request processing and initialize the given {@link DeferredResult}_with a {@link DeferredResultHandler} that saves the result and dispatches_the request to resume processing of that result._The {@code AsyncWebRequest} is also updated with a completion handler that_expires the {@code DeferredResult} and a timeout handler assuming the_{@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext) {_		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				deferredResult.setExpired()__			}_		})___		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				Assert.state(!asyncWebRequest.isAsyncComplete(),_						"Cannot handle DeferredResult [ " + deferredResult + " ] due to a timeout or network error")___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,this,async,web,request,add,completion,handler,new,runnable,public,void,run,deferred,result,set,expired,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,assert,state,async,web,request,is,async,complete,cannot,handle,deferred,result,deferred,result,due,to,a,timeout,or,network,error,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext);1347908336;Start concurrent request processing and initialize the given {@link DeferredResult}_with a {@link DeferredResultHandler} that saves the result and dispatches_the request to resume processing of that result._The {@code AsyncWebRequest} is also updated with a completion handler that_expires the {@code DeferredResult} and a timeout handler assuming the_{@code DeferredResult} has a default timeout result.__@param deferredResult the DeferredResult instance to initialize_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();public void startDeferredResultProcessing(final DeferredResult<?> deferredResult, Object... processingContext) {_		Assert.notNull(deferredResult, "DeferredResult must not be null")___		Long timeout = deferredResult.getTimeoutMilliseconds()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				deferredResult.setExpired()__			}_		})___		if (deferredResult.hasTimeoutResult()) {_			this.asyncWebRequest.setTimeoutHandler(new Runnable() {_				public void run() {_					deferredResult.applyTimeoutResult()__				}_			})__		}__		startAsyncProcessing(processingContext)___		deferredResult.setResultHandler(new DeferredResultHandler() {__			public void handleResult(Object result) {_				concurrentResult = result__				if (logger.isDebugEnabled()) {_					logger.debug("Deferred result value [" + concurrentResult + "]")__				}__				Assert.state(!asyncWebRequest.isAsyncComplete(),_						"Cannot handle DeferredResult [ " + deferredResult + " ] due to a timeout or network error")___				logger.debug("Dispatching request to complete processing")__				asyncWebRequest.dispatch()__			}_		})__	};start,concurrent,request,processing,and,initialize,the,given,link,deferred,result,with,a,link,deferred,result,handler,that,saves,the,result,and,dispatches,the,request,to,resume,processing,of,that,result,the,code,async,web,request,is,also,updated,with,a,completion,handler,that,expires,the,code,deferred,result,and,a,timeout,handler,assuming,the,code,deferred,result,has,a,default,timeout,result,param,deferred,result,the,deferred,result,instance,to,initialize,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;public,void,start,deferred,result,processing,final,deferred,result,deferred,result,object,processing,context,assert,not,null,deferred,result,deferred,result,must,not,be,null,long,timeout,deferred,result,get,timeout,milliseconds,if,timeout,null,this,async,web,request,set,timeout,timeout,this,async,web,request,add,completion,handler,new,runnable,public,void,run,deferred,result,set,expired,if,deferred,result,has,timeout,result,this,async,web,request,set,timeout,handler,new,runnable,public,void,run,deferred,result,apply,timeout,result,start,async,processing,processing,context,deferred,result,set,result,handler,new,deferred,result,handler,public,void,handle,result,object,result,concurrent,result,result,if,logger,is,debug,enabled,logger,debug,deferred,result,value,concurrent,result,assert,state,async,web,request,is,async,complete,cannot,handle,deferred,result,deferred,result,due,to,a,timeout,or,network,error,logger,debug,dispatching,request,to,complete,processing,async,web,request,dispatch
WebAsyncManager -> public void registerAsyncThreadInitializer(Object key, WebAsyncThreadInitializer initializer);1345223391;Register an {@link WebAsyncThreadInitializer} for the current request. It may_later be accessed and applied via {@link #initializeAsyncThread(String)}_and will also be used to initialize and reset threads for concurrent handler execution._@param key a unique the key under which to keep the initializer_@param initializer the initializer  instance;public void registerAsyncThreadInitializer(Object key, WebAsyncThreadInitializer initializer) {_		Assert.notNull(initializer, "WebAsyncThreadInitializer must not be null")__		this.threadInitializers.put(key, initializer)__	};register,an,link,web,async,thread,initializer,for,the,current,request,it,may,later,be,accessed,and,applied,via,link,initialize,async,thread,string,and,will,also,be,used,to,initialize,and,reset,threads,for,concurrent,handler,execution,param,key,a,unique,the,key,under,which,to,keep,the,initializer,param,initializer,the,initializer,instance;public,void,register,async,thread,initializer,object,key,web,async,thread,initializer,initializer,assert,not,null,initializer,web,async,thread,initializer,must,not,be,null,this,thread,initializers,put,key,initializer
WebAsyncManager -> public void registerAsyncThreadInitializer(Object key, WebAsyncThreadInitializer initializer);1347067811;Register an {@link WebAsyncThreadInitializer} for the current request. It may_later be accessed and applied via {@link #initializeAsyncThread(String)}_and will also be used to initialize and reset threads for concurrent handler execution._@param key a unique the key under which to keep the initializer_@param initializer the initializer  instance;public void registerAsyncThreadInitializer(Object key, WebAsyncThreadInitializer initializer) {_		Assert.notNull(initializer, "WebAsyncThreadInitializer must not be null")__		this.threadInitializers.put(key, initializer)__	};register,an,link,web,async,thread,initializer,for,the,current,request,it,may,later,be,accessed,and,applied,via,link,initialize,async,thread,string,and,will,also,be,used,to,initialize,and,reset,threads,for,concurrent,handler,execution,param,key,a,unique,the,key,under,which,to,keep,the,initializer,param,initializer,the,initializer,instance;public,void,register,async,thread,initializer,object,key,web,async,thread,initializer,initializer,assert,not,null,initializer,web,async,thread,initializer,must,not,be,null,this,thread,initializers,put,key,initializer
WebAsyncManager -> public void registerAsyncThreadInitializer(Object key, WebAsyncThreadInitializer initializer);1347908336;Register an {@link WebAsyncThreadInitializer} for the current request. It may_later be accessed and applied via {@link #initializeAsyncThread(String)}_and will also be used to initialize and reset threads for concurrent handler execution._@param key a unique the key under which to keep the initializer_@param initializer the initializer  instance;public void registerAsyncThreadInitializer(Object key, WebAsyncThreadInitializer initializer) {_		Assert.notNull(initializer, "WebAsyncThreadInitializer must not be null")__		this.threadInitializers.put(key, initializer)__	};register,an,link,web,async,thread,initializer,for,the,current,request,it,may,later,be,accessed,and,applied,via,link,initialize,async,thread,string,and,will,also,be,used,to,initialize,and,reset,threads,for,concurrent,handler,execution,param,key,a,unique,the,key,under,which,to,keep,the,initializer,param,initializer,the,initializer,instance;public,void,register,async,thread,initializer,object,key,web,async,thread,initializer,initializer,assert,not,null,initializer,web,async,thread,initializer,must,not,be,null,this,thread,initializers,put,key,initializer
WebAsyncManager -> public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors);1351651119;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptor the interceptor to register;public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors);1353616762;Register a {@link CallableProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param interceptor the interceptor to register;public void registerCallableInterceptor(CallableProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A CallableProcessingInterceptor is required")__		for (CallableProcessingInterceptor interceptor : interceptors) {_			String key = interceptor.getClass().getName() + ":" + interceptor.hashCode()__			this.callableInterceptors.put(key, interceptor)__		}_	};register,a,link,callable,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,callable,processing,interceptor,interceptors,assert,not,null,interceptors,a,callable,processing,interceptor,is,required,for,callable,processing,interceptor,interceptor,interceptors,string,key,interceptor,get,class,get,name,interceptor,hash,code,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext);1345223391;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext);1347067811;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext);1347908336;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}._@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext);1348061150;Use the given {@link AsyncTask} to configure the task executor as well as_the timeout value of the {@code AsyncWebRequest} before delegating to_{@link #startCallableProcessing(Callable, Object...)}.__@param asyncTask an asyncTask containing the target {@code Callable}_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()};public void startCallableProcessing(AsyncTask asyncTask, Object... processingContext) {_		Assert.notNull(asyncTask, "AsyncTask must not be null")___		Long timeout = asyncTask.getTimeout()__		if (timeout != null) {_			this.asyncWebRequest.setTimeout(timeout)__		}__		AsyncTaskExecutor executor = asyncTask.getExecutor()__		if (executor != null) {_			this.taskExecutor = executor__		}__		startCallableProcessing(asyncTask.getCallable(), processingContext)__	};use,the,given,link,async,task,to,configure,the,task,executor,as,well,as,the,timeout,value,of,the,code,async,web,request,before,delegating,to,link,start,callable,processing,callable,object,param,async,task,an,async,task,containing,the,target,code,callable,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context;public,void,start,callable,processing,async,task,async,task,object,processing,context,assert,not,null,async,task,async,task,must,not,be,null,long,timeout,async,task,get,timeout,if,timeout,null,this,async,web,request,set,timeout,timeout,async,task,executor,executor,async,task,get,executor,if,executor,null,this,task,executor,executor,start,callable,processing,async,task,get,callable,processing,context
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1520582595;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1529361191;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1529721864;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1529948549;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1530174524;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1531321803;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest);1531322037;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1351648724;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1351651119;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1353616762;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1353963857;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1354139803;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1354291807;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1355313310;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1356735495;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1357119239;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1362408075;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1368482696;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1385412762;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1411733721;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1412118625;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1452804420;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1452851471;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1467730834;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public CallableProcessingInterceptor getCallableInterceptor(Object key);1468960983;Get the {@link CallableProcessingInterceptor} registered under the given key._@param key the key_@return the interceptor registered under that key or {@code null};public CallableProcessingInterceptor getCallableInterceptor(Object key) {_		return this.callableInterceptors.get(key)__	};get,the,link,callable,processing,interceptor,registered,under,the,given,key,param,key,the,key,return,the,interceptor,registered,under,that,key,or,code,null;public,callable,processing,interceptor,get,callable,interceptor,object,key,return,this,callable,interceptors,get,key
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1344035753;Provide an {@link AsyncWebRequest} to use to start and to dispatch request._This property must be set before the start of concurrent handling._@param asyncWebRequest the request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "Expected AsyncWebRequest")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(AsyncWebUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};provide,an,link,async,web,request,to,use,to,start,and,to,dispatch,request,this,property,must,be,set,before,the,start,of,concurrent,handling,param,async,web,request,the,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,expected,async,web,request,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,async,web,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1345223391;Provide an {@link AsyncWebRequest} to use to start and to dispatch request._This property must be set before the start of concurrent handling._@param asyncWebRequest the request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "Expected AsyncWebRequest")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(AsyncWebUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};provide,an,link,async,web,request,to,use,to,start,and,to,dispatch,request,this,property,must,be,set,before,the,start,of,concurrent,handling,param,async,web,request,the,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,expected,async,web,request,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,async,web,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1345223391;Configure the {@link AsyncWebRequest} to use. This property may be_set more than once during a single request to accurately reflect the_current state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling is_in progress, i.e. while {@link #isConcurrentHandlingStarted()} is {@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(AsyncWebUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,async,web,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1347067811;Configure the {@link AsyncWebRequest} to use. This property may be_set more than once during a single request to accurately reflect the_current state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling is_in progress, i.e. while {@link #isConcurrentHandlingStarted()} is {@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(AsyncWebUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,async,web,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1347908336;Configure the {@link AsyncWebRequest} to use. This property may be_set more than once during a single request to accurately reflect the_current state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling is_in progress, i.e. while {@link #isConcurrentHandlingStarted()} is {@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1348061150;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1350317859;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1351178945;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1351182923;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1351289067;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1351301394;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1351648724;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1351651119;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1353616762;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1353963857;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1354139803;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1354291807;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1355313310;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1356735495;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1357119239;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1362408075;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1368482696;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1385412762;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}.__@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1411733721;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1412118625;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1452804420;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1452851471;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1467730834;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		Assert.state(!isConcurrentHandlingStarted(), "Can't set AsyncWebRequest with concurrent handling in progress")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,assert,state,is,concurrent,handling,started,can,t,set,async,web,request,with,concurrent,handling,in,progress,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1468960983;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1495868221;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1496837955;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(new Runnable() {_			@Override_			public void run() {_				asyncWebRequest.removeAttribute(WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST)__			}_		})__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,new,runnable,override,public,void,run,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1497341397;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1498500776;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1502868381;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1508532146;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest);1510200931;Configure the {@link AsyncWebRequest} to use. This property may be set_more than once during a single request to accurately reflect the current_state of the request (e.g. following a forward, request/response_wrapping, etc). However, it should not be set while concurrent handling_is in progress, i.e. while {@link #isConcurrentHandlingStarted()} is_{@code true}._@param asyncWebRequest the web request to use;public void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {_		Assert.notNull(asyncWebRequest, "AsyncWebRequest must not be null")__		this.asyncWebRequest = asyncWebRequest__		this.asyncWebRequest.addCompletionHandler(() -> asyncWebRequest.removeAttribute(_				WebAsyncUtils.WEB_ASYNC_MANAGER_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST))__	};configure,the,link,async,web,request,to,use,this,property,may,be,set,more,than,once,during,a,single,request,to,accurately,reflect,the,current,state,of,the,request,e,g,following,a,forward,request,response,wrapping,etc,however,it,should,not,be,set,while,concurrent,handling,is,in,progress,i,e,while,link,is,concurrent,handling,started,is,code,true,param,async,web,request,the,web,request,to,use;public,void,set,async,web,request,final,async,web,request,async,web,request,assert,not,null,async,web,request,async,web,request,must,not,be,null,this,async,web,request,async,web,request,this,async,web,request,add,completion,handler,async,web,request,remove,attribute,web,async,utils,request,attributes
WebAsyncManager -> public Object[] getConcurrentResultContext();1344035753;Return the processing context saved at the start of concurrent handling.;public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};return,the,processing,context,saved,at,the,start,of,concurrent,handling;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1345223391;Return the processing context saved at the start of concurrent handling.;public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};return,the,processing,context,saved,at,the,start,of,concurrent,handling;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1345223391;Provides access to additional processing context saved at the start of_concurrent handling.;public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1347067811;Provides access to additional processing context saved at the start of_concurrent handling.;public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1347908336;Provides access to additional processing context saved at the start of_concurrent handling.;public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1348061150;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1350317859;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1351178945;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1351182923;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1351289067;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1351301394;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1351648724;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1351651119;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1353616762;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1353963857;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1354139803;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1354291807;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1355313310;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1356735495;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1357119239;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1362408075;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1368482696;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1385412762;Provides access to additional processing context saved at the start of_concurrent handling.__@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1411733721;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1412118625;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1452804420;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1452851471;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1467730834;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1468960983;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1495868221;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1496837955;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1497341397;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1498500776;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1502868381;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1508532146;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1510200931;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1520582595;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1529361191;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1529721864;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1529948549;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1530174524;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1531321803;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> public Object[] getConcurrentResultContext();1531322037;Provides access to additional processing context saved at the start of_concurrent handling._@see #clearConcurrentResult();public Object[] getConcurrentResultContext() {_		return this.concurrentResultContext__	};provides,access,to,additional,processing,context,saved,at,the,start,of,concurrent,handling,see,clear,concurrent,result;public,object,get,concurrent,result,context,return,this,concurrent,result,context
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1351648724;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new MvcAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,mvc,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1351651119;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new MvcAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,mvc,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1353616762;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new MvcAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,mvc,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1353963857;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new MvcAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,mvc,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext);1354139803;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> public boolean hasConcurrentResult();1344035753;Whether the current thread was dispatched to continue processing the result_of concurrent handler execution.;public boolean hasConcurrentResult() {__		_		_		__		return this.concurrentResult != RESULT_NONE__	};whether,the,current,thread,was,dispatched,to,continue,processing,the,result,of,concurrent,handler,execution;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1345223391;Whether the current thread was dispatched to continue processing the result_of concurrent handler execution.;public boolean hasConcurrentResult() {__		_		_		__		return this.concurrentResult != RESULT_NONE__	};whether,the,current,thread,was,dispatched,to,continue,processing,the,result,of,concurrent,handler,execution;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1345223391;Whether the request was dispatched to resume processing the result of_concurrent handling.;public boolean hasConcurrentResult() {__		_		_		__		return this.concurrentResult != RESULT_NONE__	};whether,the,request,was,dispatched,to,resume,processing,the,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1347067811;Whether the request has been dispatched to process the result of_concurrent handling.;public boolean hasConcurrentResult() {_		return ((this.concurrentResult != RESULT_NONE) && this.asyncWebRequest.isDispatched())__	};whether,the,request,has,been,dispatched,to,process,the,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result,this,async,web,request,is,dispatched
WebAsyncManager -> public boolean hasConcurrentResult();1347908336;Whether the request has been dispatched to process the result of_concurrent handling.;public boolean hasConcurrentResult() {_		return ((this.concurrentResult != RESULT_NONE) && this.asyncWebRequest.isDispatched())__	};whether,the,request,has,been,dispatched,to,process,the,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result,this,async,web,request,is,dispatched
WebAsyncManager -> public boolean hasConcurrentResult();1348061150;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1350317859;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1351178945;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1351182923;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1351289067;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1351301394;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1351648724;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1351651119;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1353616762;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1353963857;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1354139803;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1354291807;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1355313310;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1356735495;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1357119239;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1362408075;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1368482696;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1385412762;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1411733721;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1412118625;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1452804420;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1452851471;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1467730834;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1468960983;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1495868221;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1496837955;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1497341397;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1498500776;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1502868381;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1508532146;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1510200931;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1520582595;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1529361191;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1529721864;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1529948549;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1530174524;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1531321803;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean hasConcurrentResult();1531322037;Whether a result value exists as a result of concurrent handling.;public boolean hasConcurrentResult() {_		return (this.concurrentResult != RESULT_NONE)__	};whether,a,result,value,exists,as,a,result,of,concurrent,handling;public,boolean,has,concurrent,result,return,this,concurrent,result
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1344035753;Whether the handler for the current request is executed concurrently._Once concurrent handling is done, the result is saved, and the request_dispatched again to resume processing where the result of concurrent_handling is available via {@link #getConcurrentResult()}.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && (this.asyncWebRequest.isAsyncStarted()))__	};whether,the,handler,for,the,current,request,is,executed,concurrently,once,concurrent,handling,is,done,the,result,is,saved,and,the,request,dispatched,again,to,resume,processing,where,the,result,of,concurrent,handling,is,available,via,link,get,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1345223391;Whether the handler for the current request is executed concurrently._Once concurrent handling is done, the result is saved, and the request_dispatched again to resume processing where the result of concurrent_handling is available via {@link #getConcurrentResult()}.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && (this.asyncWebRequest.isAsyncStarted()))__	};whether,the,handler,for,the,current,request,is,executed,concurrently,once,concurrent,handling,is,done,the,result,is,saved,and,the,request,dispatched,again,to,resume,processing,where,the,result,of,concurrent,handling,is,available,via,link,get,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1345223391;Whether the target handler chose to handle the request asynchronously._A return value of "true" indicates concurrent handling is under way and the_response will remain open. A return value of "false" will be returned again after concurrent_handling produces a result and the request is dispatched to resume processing.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && (this.asyncWebRequest.isAsyncStarted()))__	};whether,the,target,handler,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,will,be,returned,again,after,concurrent,handling,produces,a,result,and,the,request,is,dispatched,to,resume,processing;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1347067811;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1347908336;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1348061150;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1350317859;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1351178945;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1351182923;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1351289067;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1351301394;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1351648724;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1351651119;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1353616762;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1353963857;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1354139803;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1354291807;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1355313310;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1356735495;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1357119239;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1362408075;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1368482696;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1385412762;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1411733721;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1412118625;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1452804420;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1452851471;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1467730834;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1468960983;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1495868221;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1496837955;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1497341397;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1498500776;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1502868381;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1508532146;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1510200931;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return ((this.asyncWebRequest != null) && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1520582595;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1529361191;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1529721864;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1529948549;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1530174524;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1531321803;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public boolean isConcurrentHandlingStarted();1531322037;Whether the selected handler for the current request chose to handle the_request asynchronously. A return value of "true" indicates concurrent_handling is under way and the response will remain open. A return value_of "false" means concurrent handling was either not started or possibly_that it has completed and the request was dispatched for further_processing of the concurrent result.;public boolean isConcurrentHandlingStarted() {_		return (this.asyncWebRequest != null && this.asyncWebRequest.isAsyncStarted())__	};whether,the,selected,handler,for,the,current,request,chose,to,handle,the,request,asynchronously,a,return,value,of,true,indicates,concurrent,handling,is,under,way,and,the,response,will,remain,open,a,return,value,of,false,means,concurrent,handling,was,either,not,started,or,possibly,that,it,has,completed,and,the,request,was,dispatched,for,further,processing,of,the,concurrent,result;public,boolean,is,concurrent,handling,started,return,this,async,web,request,null,this,async,web,request,is,async,started
WebAsyncManager -> public void resetConcurrentResult();1344035753;Reset the {@linkplain #getConcurrentResult() concurrentResult} and the_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void resetConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};reset,the,linkplain,get,concurrent,result,concurrent,result,and,the,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,reset,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void resetConcurrentResult();1345223391;Reset the {@linkplain #getConcurrentResult() concurrentResult} and the_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void resetConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};reset,the,linkplain,get,concurrent,result,concurrent,result,and,the,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,reset,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1348061150;Register a {@link CallableProcessingInterceptor} that will be applied_when concurrent request handling with a {@link Callable} starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,callable,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1350317859;Register a {@link CallableProcessingInterceptor} that will be applied_when concurrent request handling with a {@link Callable} starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,callable,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1351178945;Register a {@link CallableProcessingInterceptor} that will be applied_when concurrent request handling with a {@link Callable} starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,callable,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1351182923;Register a {@link CallableProcessingInterceptor} that will be applied_when concurrent request handling with a {@link Callable} starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,callable,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1351289067;Register a {@link CallableProcessingInterceptor} that will be applied_when concurrent request handling with a {@link Callable} starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,callable,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1351301394;Register a {@link CallableProcessingInterceptor} that will be applied_when concurrent request handling with a {@link Callable} starts.__@param key a unique the key under which to register the interceptor_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,that,will,be,applied,when,concurrent,request,handling,with,a,link,callable,starts,param,key,a,unique,the,key,under,which,to,register,the,interceptor,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1351648724;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(interceptor, "interceptor is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,interceptor,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1351651119;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1353616762;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1353963857;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1354139803;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1354291807;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1355313310;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1356735495;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1357119239;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1362408075;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1368482696;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1385412762;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1411733721;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1412118625;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1452804420;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1452851471;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1467730834;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1468960983;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1495868221;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1496837955;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1497341397;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1498500776;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1502868381;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1508532146;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1510200931;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1520582595;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1529361191;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1529721864;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1529948549;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1530174524;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1531321803;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor);1531322037;Register a {@link CallableProcessingInterceptor} under the given key._@param key the key_@param interceptor the interceptor to register;public void registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor) {_		Assert.notNull(key, "Key is required")__		Assert.notNull(interceptor, "CallableProcessingInterceptor  is required")__		this.callableInterceptors.put(key, interceptor)__	};register,a,link,callable,processing,interceptor,under,the,given,key,param,key,the,key,param,interceptor,the,interceptor,to,register;public,void,register,callable,interceptor,object,key,callable,processing,interceptor,interceptor,assert,not,null,key,key,is,required,assert,not,null,interceptor,callable,processing,interceptor,is,required,this,callable,interceptors,put,key,interceptor
WebAsyncManager -> public void registerAsyncThreadInitializer(Object key, AsyncThreadInitializer initializer);1344035753;Register an {@link AsyncThreadInitializer} with the WebAsyncManager instance_for the current request. It may later be accessed and applied via_{@link #applyAsyncThreadInitializer(String)} and will also be used to_initialize and reset threads for concurrent handler execution._@param key a unique the key under which to keep the initializer_@param initializer the initializer  instance;public void registerAsyncThreadInitializer(Object key, AsyncThreadInitializer initializer) {_		Assert.notNull(initializer, "An AsyncThreadInitializer instance is required")__		this.threadInitializers.put(key, initializer)__	};register,an,link,async,thread,initializer,with,the,web,async,manager,instance,for,the,current,request,it,may,later,be,accessed,and,applied,via,link,apply,async,thread,initializer,string,and,will,also,be,used,to,initialize,and,reset,threads,for,concurrent,handler,execution,param,key,a,unique,the,key,under,which,to,keep,the,initializer,param,initializer,the,initializer,instance;public,void,register,async,thread,initializer,object,key,async,thread,initializer,initializer,assert,not,null,initializer,an,async,thread,initializer,instance,is,required,this,thread,initializers,put,key,initializer
WebAsyncManager -> public void registerAsyncThreadInitializer(Object key, AsyncThreadInitializer initializer);1345223391;Register an {@link AsyncThreadInitializer} with the WebAsyncManager instance_for the current request. It may later be accessed and applied via_{@link #applyAsyncThreadInitializer(String)} and will also be used to_initialize and reset threads for concurrent handler execution._@param key a unique the key under which to keep the initializer_@param initializer the initializer  instance;public void registerAsyncThreadInitializer(Object key, AsyncThreadInitializer initializer) {_		Assert.notNull(initializer, "An AsyncThreadInitializer instance is required")__		this.threadInitializers.put(key, initializer)__	};register,an,link,async,thread,initializer,with,the,web,async,manager,instance,for,the,current,request,it,may,later,be,accessed,and,applied,via,link,apply,async,thread,initializer,string,and,will,also,be,used,to,initialize,and,reset,threads,for,concurrent,handler,execution,param,key,a,unique,the,key,under,which,to,keep,the,initializer,param,initializer,the,initializer,instance;public,void,register,async,thread,initializer,object,key,async,thread,initializer,initializer,assert,not,null,initializer,an,async,thread,initializer,instance,is,required,this,thread,initializers,put,key,initializer
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1354291807;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception;1355313310;Start concurrent request processing and execute the given task with an_{@link #setTaskExecutor(AsyncTaskExecutor) AsyncTaskExecutor}. The result_from the task execution is saved and the request dispatched in order to_resume processing of that result. If the task raises an Exception then_the saved result will be the raised Exception.__@param callable a unit of work to be executed asynchronously_@param processingContext additional context to save that can be accessed_via {@link #getConcurrentResultContext()}_@throws Exception If concurrent processing failed to start__@see #getConcurrentResult()_@see #getConcurrentResultContext();@SuppressWarnings({ "rawtypes", "unchecked" })_	public void startCallableProcessing(final Callable<?> callable, Object... processingContext) throws Exception {_		Assert.notNull(callable, "Callable must not be null")__		startCallableProcessing(new WebAsyncTask(callable), processingContext)__	};start,concurrent,request,processing,and,execute,the,given,task,with,an,link,set,task,executor,async,task,executor,async,task,executor,the,result,from,the,task,execution,is,saved,and,the,request,dispatched,in,order,to,resume,processing,of,that,result,if,the,task,raises,an,exception,then,the,saved,result,will,be,the,raised,exception,param,callable,a,unit,of,work,to,be,executed,asynchronously,param,processing,context,additional,context,to,save,that,can,be,accessed,via,link,get,concurrent,result,context,throws,exception,if,concurrent,processing,failed,to,start,see,get,concurrent,result,see,get,concurrent,result,context;suppress,warnings,rawtypes,unchecked,public,void,start,callable,processing,final,callable,callable,object,processing,context,throws,exception,assert,not,null,callable,callable,must,not,be,null,start,callable,processing,new,web,async,task,callable,processing,context
WebAsyncManager -> public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors);1351651119;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param key the key_@param interceptors the interceptor to register;public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,key,the,key,param,interceptors,the,interceptor,to,register;public,void,register,deferred,result,interceptor,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors);1353616762;Register a {@link DeferredResultProcessingInterceptor} without a key._The key is derived from the class name and hashcode._@param key the key_@param interceptors the interceptor to register;public void registerDeferredResultInterceptor(DeferredResultProcessingInterceptor... interceptors) {_		Assert.notNull(interceptors, "A DeferredResultProcessingInterceptor is required")__		for (DeferredResultProcessingInterceptor interceptor : interceptors) {_			String key = interceptors.getClass().getName() + ":" + interceptors.hashCode()__			this.deferredResultInterceptors.put(key, interceptor)__		}_	};register,a,link,deferred,result,processing,interceptor,without,a,key,the,key,is,derived,from,the,class,name,and,hashcode,param,key,the,key,param,interceptors,the,interceptor,to,register;public,void,register,deferred,result,interceptor,deferred,result,processing,interceptor,interceptors,assert,not,null,interceptors,a,deferred,result,processing,interceptor,is,required,for,deferred,result,processing,interceptor,interceptor,interceptors,string,key,interceptors,get,class,get,name,interceptors,hash,code,this,deferred,result,interceptors,put,key,interceptor
WebAsyncManager -> public void clearConcurrentResult();1345223391;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1347067811;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1347908336;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1348061150;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1350317859;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1351178945;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1351182923;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1351289067;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1351301394;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1351648724;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1351651119;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1353616762;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1353963857;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1354139803;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1354291807;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1355313310;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1356735495;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1357119239;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1362408075;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1368482696;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1385412762;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1411733721;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1412118625;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1452804420;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1452851471;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1467730834;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1468960983;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1495868221;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1496837955;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1497341397;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1498500776;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1502868381;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1508532146;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1510200931;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		this.concurrentResult = RESULT_NONE__		this.concurrentResultContext = null__	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1520582595;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1529361191;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1529721864;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1529948549;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1530174524;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1531321803;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
WebAsyncManager -> public void clearConcurrentResult();1531322037;Clear {@linkplain #getConcurrentResult() concurrentResult} and_{@linkplain #getConcurrentResultContext() concurrentResultContext}.;public void clearConcurrentResult() {_		synchronized (WebAsyncManager.this) {_			this.concurrentResult = RESULT_NONE__			this.concurrentResultContext = null__		}_	};clear,linkplain,get,concurrent,result,concurrent,result,and,linkplain,get,concurrent,result,context,concurrent,result,context;public,void,clear,concurrent,result,synchronized,web,async,manager,this,this,concurrent,result,this,concurrent,result,context,null
