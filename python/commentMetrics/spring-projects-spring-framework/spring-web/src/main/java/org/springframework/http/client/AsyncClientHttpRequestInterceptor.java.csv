# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncClientHttpRequestInterceptor -> ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body, 			AsyncClientHttpRequestExecution execution) throws IOException_;1465306936;Intercept the given request, and return a response future. The given_{@link AsyncClientHttpRequestExecution} allows the interceptor to pass on_the request to the next entity in the chain._<p>An implementation might follow this pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper_wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li>One of the following:_<ul>_<li>execute the request through {@link ClientHttpRequestExecution}</li>_<li>don't execute the request to block the execution altogether</li>_</ul>_<li>Optionally adapt the response to filter HTTP attributes with the help of_{@link org.springframework.util.concurrent.ListenableFutureAdapter_ListenableFutureAdapter}.</li>_</ol>_@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response future_@throws IOException in case of I/O errors;ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body,_			AsyncClientHttpRequestExecution execution) throws IOException_;intercept,the,given,request,and,return,a,response,future,the,given,link,async,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,to,the,next,entity,in,the,chain,p,an,implementation,might,follow,this,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,one,of,the,following,ul,li,execute,the,request,through,link,client,http,request,execution,li,li,don,t,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,adapt,the,response,to,filter,http,attributes,with,the,help,of,link,org,springframework,util,concurrent,listenable,future,adapter,listenable,future,adapter,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,future,throws,ioexception,in,case,of,i,o,errors;listenable,future,client,http,response,intercept,http,request,request,byte,body,async,client,http,request,execution,execution,throws,ioexception
AsyncClientHttpRequestInterceptor -> ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body, 			AsyncClientHttpRequestExecution execution) throws IOException_;1490795646;Intercept the given request, and return a response future. The given_{@link AsyncClientHttpRequestExecution} allows the interceptor to pass on_the request to the next entity in the chain._<p>An implementation might follow this pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper_wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li>One of the following:_<ul>_<li>execute the request through {@link ClientHttpRequestExecution}</li>_<li>don't execute the request to block the execution altogether</li>_</ul>_<li>Optionally adapt the response to filter HTTP attributes with the help of_{@link org.springframework.util.concurrent.ListenableFutureAdapter_ListenableFutureAdapter}.</li>_</ol>_@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response future_@throws IOException in case of I/O errors;ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body,_			AsyncClientHttpRequestExecution execution) throws IOException_;intercept,the,given,request,and,return,a,response,future,the,given,link,async,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,to,the,next,entity,in,the,chain,p,an,implementation,might,follow,this,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,one,of,the,following,ul,li,execute,the,request,through,link,client,http,request,execution,li,li,don,t,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,adapt,the,response,to,filter,http,attributes,with,the,help,of,link,org,springframework,util,concurrent,listenable,future,adapter,listenable,future,adapter,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,future,throws,ioexception,in,case,of,i,o,errors;listenable,future,client,http,response,intercept,http,request,request,byte,body,async,client,http,request,execution,execution,throws,ioexception
AsyncClientHttpRequestInterceptor -> ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body, 			AsyncClientHttpRequestExecution execution) throws IOException_;1508532146;Intercept the given request, and return a response future. The given_{@link AsyncClientHttpRequestExecution} allows the interceptor to pass on_the request to the next entity in the chain._<p>An implementation might follow this pattern:_<ol>_<li>Examine the {@linkplain HttpRequest request} and body</li>_<li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper_wrap} the request to filter HTTP attributes.</li>_<li>Optionally modify the body of the request.</li>_<li>One of the following:_<ul>_<li>execute the request through {@link ClientHttpRequestExecution}</li>_<li>don't execute the request to block the execution altogether</li>_</ul>_<li>Optionally adapt the response to filter HTTP attributes with the help of_{@link org.springframework.util.concurrent.ListenableFutureAdapter_ListenableFutureAdapter}.</li>_</ol>_@param request the request, containing method, URI, and headers_@param body the body of the request_@param execution the request execution_@return the response future_@throws IOException in case of I/O errors;ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body,_			AsyncClientHttpRequestExecution execution) throws IOException_;intercept,the,given,request,and,return,a,response,future,the,given,link,async,client,http,request,execution,allows,the,interceptor,to,pass,on,the,request,to,the,next,entity,in,the,chain,p,an,implementation,might,follow,this,pattern,ol,li,examine,the,linkplain,http,request,request,and,body,li,li,optionally,linkplain,org,springframework,http,client,support,http,request,wrapper,wrap,the,request,to,filter,http,attributes,li,li,optionally,modify,the,body,of,the,request,li,li,one,of,the,following,ul,li,execute,the,request,through,link,client,http,request,execution,li,li,don,t,execute,the,request,to,block,the,execution,altogether,li,ul,li,optionally,adapt,the,response,to,filter,http,attributes,with,the,help,of,link,org,springframework,util,concurrent,listenable,future,adapter,listenable,future,adapter,li,ol,param,request,the,request,containing,method,uri,and,headers,param,body,the,body,of,the,request,param,execution,the,request,execution,return,the,response,future,throws,ioexception,in,case,of,i,o,errors;listenable,future,client,http,response,intercept,http,request,request,byte,body,async,client,http,request,execution,execution,throws,ioexception
