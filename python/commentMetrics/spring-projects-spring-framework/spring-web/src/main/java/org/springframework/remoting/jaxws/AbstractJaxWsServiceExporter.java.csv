commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the property bag for the endpoint, including properties such as  * "javax.xml.ws.wsdl.service" or "javax.xml.ws.wsdl.port".  * @see javax.xml.ws.Endpoint#setProperties  * @see javax.xml.ws.Endpoint#WSDL_SERVICE  * @see javax.xml.ws.Endpoint#WSDL_PORT  */ ;/**  * Set the property bag for the endpoint, including properties such as  * "javax.xml.ws.wsdl.service" or "javax.xml.ws.wsdl.port".  * @see javax.xml.ws.Endpoint#setProperties  * @see javax.xml.ws.Endpoint#WSDL_SERVICE  * @see javax.xml.ws.Endpoint#WSDL_PORT  */ public void setEndpointProperties(Map<String, Object> endpointProperties) {     this.endpointProperties = endpointProperties. }
true;public;1;3;/**  * Set the JDK concurrent executor to use for dispatching incoming requests  * to exported service instances.  * @see javax.xml.ws.Endpoint#setExecutor  */ ;/**  * Set the JDK concurrent executor to use for dispatching incoming requests  * to exported service instances.  * @see javax.xml.ws.Endpoint#setExecutor  */ public void setExecutor(Executor executor) {     this.executor = executor. }
true;public;1;3;/**  * Specify the binding type to use, overriding the value of  * the JAX-WS {@link javax.xml.ws.BindingType} annotation.  */ ;/**  * Specify the binding type to use, overriding the value of  * the JAX-WS {@link javax.xml.ws.BindingType} annotation.  */ public void setBindingType(String bindingType) {     this.bindingType = bindingType. }
true;public;1;3;/**  * Specify WebServiceFeature objects (e.g. as inner bean definitions)  * to apply to JAX-WS endpoint creation.  * @since 4.0  */ ;/**  * Specify WebServiceFeature objects (e.g. as inner bean definitions)  * to apply to JAX-WS endpoint creation.  * @since 4.0  */ public void setEndpointFeatures(WebServiceFeature... endpointFeatures) {     this.endpointFeatures = endpointFeatures. }
true;public;1;7;/**  * Obtains all web service beans and publishes them as JAX-WS endpoints.  */ ;/**  * Obtains all web service beans and publishes them as JAX-WS endpoints.  */ @Override public void setBeanFactory(BeanFactory beanFactory) {     if (!(beanFactory instanceof ListableBeanFactory)) {         throw new IllegalStateException(getClass().getSimpleName() + " requires a ListableBeanFactory").     }     this.beanFactory = (ListableBeanFactory) beanFactory. }
true;public;0;4;/**  * Immediately publish all endpoints when fully configured.  * @see #publishEndpoints()  */ ;/**  * Immediately publish all endpoints when fully configured.  * @see #publishEndpoints()  */ @Override public void afterPropertiesSet() throws Exception {     publishEndpoints(). }
true;public;0;38;/**  * Publish all {@link javax.jws.WebService} annotated beans in the  * containing BeanFactory.  * @see #publishEndpoint  */ ;/**  * Publish all {@link javax.jws.WebService} annotated beans in the  * containing BeanFactory.  * @see #publishEndpoint  */ public void publishEndpoints() {     Assert.state(this.beanFactory != null, "No BeanFactory set").     Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount()).     Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames()).     if (this.beanFactory instanceof ConfigurableBeanFactory) {         Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()).     }     for (String beanName : beanNames) {         try {             Class<?> type = this.beanFactory.getType(beanName).             if (type != null && !type.isInterface()) {                 WebService wsAnnotation = type.getAnnotation(WebService.class).                 WebServiceProvider wsProviderAnnotation = type.getAnnotation(WebServiceProvider.class).                 if (wsAnnotation != null || wsProviderAnnotation != null) {                     Endpoint endpoint = createEndpoint(this.beanFactory.getBean(beanName)).                     if (this.endpointProperties != null) {                         endpoint.setProperties(this.endpointProperties).                     }                     if (this.executor != null) {                         endpoint.setExecutor(this.executor).                     }                     if (wsAnnotation != null) {                         publishEndpoint(endpoint, wsAnnotation).                     } else {                         publishEndpoint(endpoint, wsProviderAnnotation).                     }                     this.publishedEndpoints.add(endpoint).                 }             }         } catch (CannotLoadBeanClassException ex) {         // ignore beans where the class is not resolvable         }     } }
true;protected;1;5;/**  * Create the actual Endpoint instance.  * @param bean the service object to wrap  * @return the Endpoint instance  * @see Endpoint#create(Object)  * @see Endpoint#create(String, Object)  */ ;/**  * Create the actual Endpoint instance.  * @param bean the service object to wrap  * @return the Endpoint instance  * @see Endpoint#create(Object)  * @see Endpoint#create(String, Object)  */ protected Endpoint createEndpoint(Object bean) {     return (this.endpointFeatures != null ? Endpoint.create(this.bindingType, bean, this.endpointFeatures) : Endpoint.create(this.bindingType, bean)). }
true;protected,abstract;2;1;/**  * Actually publish the given endpoint. To be implemented by subclasses.  * @param endpoint the JAX-WS Endpoint object  * @param annotation the service bean's WebService annotation  */ ;/**  * Actually publish the given endpoint. To be implemented by subclasses.  * @param endpoint the JAX-WS Endpoint object  * @param annotation the service bean's WebService annotation  */ protected abstract void publishEndpoint(Endpoint endpoint, WebService annotation).
true;protected,abstract;2;1;/**  * Actually publish the given provider endpoint. To be implemented by subclasses.  * @param endpoint the JAX-WS Provider Endpoint object  * @param annotation the service bean's WebServiceProvider annotation  */ ;/**  * Actually publish the given provider endpoint. To be implemented by subclasses.  * @param endpoint the JAX-WS Provider Endpoint object  * @param annotation the service bean's WebServiceProvider annotation  */ protected abstract void publishEndpoint(Endpoint endpoint, WebServiceProvider annotation).
true;public;0;6;/**  * Stops all published endpoints, taking the web services offline.  */ ;/**  * Stops all published endpoints, taking the web services offline.  */ @Override public void destroy() {     for (Endpoint endpoint : this.publishedEndpoints) {         endpoint.stop().     } }
