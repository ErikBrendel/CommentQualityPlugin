commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link WebDataBinderFactory} to be passed to argument resolvers allowing them to create  * a {@link WebDataBinder} for data binding and type conversion purposes.  * @param dataBinderFactory the data binder factory.  */ ;/**  * Set the {@link WebDataBinderFactory} to be passed to argument resolvers allowing them to create  * a {@link WebDataBinder} for data binding and type conversion purposes.  * @param dataBinderFactory the data binder factory.  */ public void setDataBinderFactory(WebDataBinderFactory dataBinderFactory) {     this.dataBinderFactory = dataBinderFactory. }
true;public;1;3;/**  * Set {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers} to use to use for resolving method argument values.  */ ;/**  * Set {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers} to use to use for resolving method argument values.  */ public void setHandlerMethodArgumentResolvers(HandlerMethodArgumentResolverComposite argumentResolvers) {     this.resolvers = argumentResolvers. }
true;public;1;3;/**  * Set the ParameterNameDiscoverer for resolving parameter names when needed  * (e.g. default request attribute name).  * <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}.  */ ;/**  * Set the ParameterNameDiscoverer for resolving parameter names when needed  * (e.g. default request attribute name).  * <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}.  */ public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {     this.parameterNameDiscoverer = parameterNameDiscoverer. }
true;public;3;10;/**  * Invoke the method after resolving its argument values in the context of the given request.  * <p>Argument values are commonly resolved through  * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.  * The {@code providedArgs} parameter however may supply argument values to be used directly,  * i.e. without argument resolution. Examples of provided argument values include a  * {@link WebDataBinder}, a {@link SessionStatus}, or a thrown exception instance.  * Provided argument values are checked before argument resolvers.  * <p>Delegates to {@link #getMethodArgumentValues} and calls {@link #doInvoke} with the  * resolved arguments.  * @param request the current request  * @param mavContainer the ModelAndViewContainer for this request  * @param providedArgs "given" arguments matched by type, not resolved  * @return the raw value returned by the invoked method  * @throws Exception raised if no suitable argument resolver can be found,  * or if the method raised an exception  * @see #getMethodArgumentValues  * @see #doInvoke  */ ;/**  * Invoke the method after resolving its argument values in the context of the given request.  * <p>Argument values are commonly resolved through  * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.  * The {@code providedArgs} parameter however may supply argument values to be used directly,  * i.e. without argument resolution. Examples of provided argument values include a  * {@link WebDataBinder}, a {@link SessionStatus}, or a thrown exception instance.  * Provided argument values are checked before argument resolvers.  * <p>Delegates to {@link #getMethodArgumentValues} and calls {@link #doInvoke} with the  * resolved arguments.  * @param request the current request  * @param mavContainer the ModelAndViewContainer for this request  * @param providedArgs "given" arguments matched by type, not resolved  * @return the raw value returned by the invoked method  * @throws Exception raised if no suitable argument resolver can be found,  * or if the method raised an exception  * @see #getMethodArgumentValues  * @see #doInvoke  */ @Nullable public Object invokeForRequest(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {     Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs).     if (logger.isTraceEnabled()) {         logger.trace("Arguments: " + Arrays.toString(args)).     }     return doInvoke(args). }
true;protected;3;34;/**  * Get the method argument values for the current request, checking the provided  * argument values and falling back to the configured argument resolvers.  * <p>The resulting array will be passed into {@link #doInvoke}.  * @since 5.1.2  */ ;/**  * Get the method argument values for the current request, checking the provided  * argument values and falling back to the configured argument resolvers.  * <p>The resulting array will be passed into {@link #doInvoke}.  * @since 5.1.2  */ protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {     if (ObjectUtils.isEmpty(getMethodParameters())) {         return EMPTY_ARGS.     }     MethodParameter[] parameters = getMethodParameters().     Object[] args = new Object[parameters.length].     for (int i = 0. i < parameters.length. i++) {         MethodParameter parameter = parameters[i].         parameter.initParameterNameDiscovery(this.parameterNameDiscoverer).         args[i] = findProvidedArgument(parameter, providedArgs).         if (args[i] != null) {             continue.         }         if (!this.resolvers.supportsParameter(parameter)) {             throw new IllegalStateException(formatArgumentError(parameter, "No suitable resolver")).         }         try {             args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory).         } catch (Exception ex) {             // Leave stack trace for later, exception may actually be resolved and handled..             if (logger.isDebugEnabled()) {                 String error = ex.getMessage().                 if (error != null && !error.contains(parameter.getExecutable().toGenericString())) {                     logger.debug(formatArgumentError(parameter, error)).                 }             }             throw ex.         }     }     return args. }
true;protected;1;28;/**  * Invoke the handler method with the given argument values.  */ ;/**  * Invoke the handler method with the given argument values.  */ @Nullable protected Object doInvoke(Object... args) throws Exception {     ReflectionUtils.makeAccessible(getBridgedMethod()).     try {         return getBridgedMethod().invoke(getBean(), args).     } catch (IllegalArgumentException ex) {         assertTargetBean(getBridgedMethod(), getBean(), args).         String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument").         throw new IllegalStateException(formatInvokeError(text, args), ex).     } catch (InvocationTargetException ex) {         // Unwrap for HandlerExceptionResolvers ...         Throwable targetException = ex.getTargetException().         if (targetException instanceof RuntimeException) {             throw (RuntimeException) targetException.         } else if (targetException instanceof Error) {             throw (Error) targetException.         } else if (targetException instanceof Exception) {             throw (Exception) targetException.         } else {             throw new IllegalStateException(formatInvokeError("Invocation failure", args), targetException).         }     } }
