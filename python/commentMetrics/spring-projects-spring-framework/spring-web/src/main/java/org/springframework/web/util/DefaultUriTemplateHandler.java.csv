# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1461356483;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
DefaultUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1461422944;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1457033868;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1461356478;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1461356483;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1461422944;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1461691955;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1461761752;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1467730834;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1484793933;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1485553611;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setStrictEncoding(boolean strictEncoding);1517280802;Whether to encode characters outside the unreserved set as defined in_<a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>._This ensures a URI variable value will not contain any characters with a_reserved purpose._<p>By default this is set to {@code false} in which case only characters_illegal for the given URI component are encoded. For example when expanding_a URI variable into a path segment the "/" character is illegal and_encoded. The "_" character however is legal and not encoded even though_it has a reserved purpose._<p><strong>Note:</strong> this property supersedes the need to also set_the {@link #setParsePath parsePath} property._@param strictEncoding whether to perform strict encoding_@since 4.3;public void setStrictEncoding(boolean strictEncoding) {_		this.strictEncoding = strictEncoding__	};whether,to,encode,characters,outside,the,unreserved,set,as,defined,in,a,href,https,tools,ietf,org,html,rfc3986,section,2,rfc,3986,section,2,a,this,ensures,a,uri,variable,value,will,not,contain,any,characters,with,a,reserved,purpose,p,by,default,this,is,set,to,code,false,in,which,case,only,characters,illegal,for,the,given,uri,component,are,encoded,for,example,when,expanding,a,uri,variable,into,a,path,segment,the,character,is,illegal,and,encoded,the,character,however,is,legal,and,not,encoded,even,though,it,has,a,reserved,purpose,p,strong,note,strong,this,property,supersedes,the,need,to,also,set,the,link,set,parse,path,parse,path,property,param,strict,encoding,whether,to,perform,strict,encoding,since,4,3;public,void,set,strict,encoding,boolean,strict,encoding,this,strict,encoding,strict,encoding
DefaultUriTemplateHandler -> public void setDefaultUriVariables(Map<String, ?> defaultUriVariables);1461356483;Configure default URI variable values to use with every expanded URI_template. This default values apply only when expanding with a Map, and_not with an array, where the Map supplied to expand can override the_default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,this,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,expand,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
DefaultUriTemplateHandler -> public void setDefaultUriVariables(Map<String, ?> defaultUriVariables);1461422944;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
DefaultUriTemplateHandler -> public boolean shouldParsePath();1431629400;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1432149152;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1438251419;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1454099942;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1457030025;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1457033868;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1461356478;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1461356483;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1461422944;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1461691955;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1461761752;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1467730834;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1484793933;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1485553611;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public boolean shouldParsePath();1517280802;Whether the handler is configured to parse the path into path segments.;public boolean shouldParsePath() {_		return this.parsePath__	};whether,the,handler,is,configured,to,parse,the,path,into,path,segments;public,boolean,should,parse,path,return,this,parse,path
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1432149152;Configure a base URL to prepend URI templates with. The base URL should_have a scheme and host but may also contain a port and a partial path._Individual URI templates then may provide the remaining part of the URL_including additional path, query and fragment.__<p><strong>Note: </strong>Individual URI templates are expanded and_encoded before being appended to the base URL. Therefore the base URL is_expected to be fully expanded and encoded, which can be done with the help_of {@link UriComponentsBuilder}.__@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,should,have,a,scheme,and,host,but,may,also,contain,a,port,and,a,partial,path,individual,uri,templates,then,may,provide,the,remaining,part,of,the,url,including,additional,path,query,and,fragment,p,strong,note,strong,individual,uri,templates,are,expanded,and,encoded,before,being,appended,to,the,base,url,therefore,the,base,url,is,expected,to,be,fully,expanded,and,encoded,which,can,be,done,with,the,help,of,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1438251419;Configure a base URL to prepend URI templates with. The base URL should_have a scheme and host but may also contain a port and a partial path._Individual URI templates then may provide the remaining part of the URL_including additional path, query and fragment._<p><strong>Note: </strong>Individual URI templates are expanded and_encoded before being appended to the base URL. Therefore the base URL is_expected to be fully expanded and encoded, which can be done with the help_of {@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,should,have,a,scheme,and,host,but,may,also,contain,a,port,and,a,partial,path,individual,uri,templates,then,may,provide,the,remaining,part,of,the,url,including,additional,path,query,and,fragment,p,strong,note,strong,individual,uri,templates,are,expanded,and,encoded,before,being,appended,to,the,base,url,therefore,the,base,url,is,expected,to,be,fully,expanded,and,encoded,which,can,be,done,with,the,help,of,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1454099942;Configure a base URL to prepend URI templates with. The base URL should_have a scheme and host but may also contain a port and a partial path._Individual URI templates then may provide the remaining part of the URL_including additional path, query and fragment._<p><strong>Note: </strong>Individual URI templates are expanded and_encoded before being appended to the base URL. Therefore the base URL is_expected to be fully expanded and encoded, which can be done with the help_of {@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,should,have,a,scheme,and,host,but,may,also,contain,a,port,and,a,partial,path,individual,uri,templates,then,may,provide,the,remaining,part,of,the,url,including,additional,path,query,and,fragment,p,strong,note,strong,individual,uri,templates,are,expanded,and,encoded,before,being,appended,to,the,base,url,therefore,the,base,url,is,expected,to,be,fully,expanded,and,encoded,which,can,be,done,with,the,help,of,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1457030025;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1457033868;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1461356478;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1461356483;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> public void setBaseUrl(String baseUrl);1461422944;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1457030025;Create a {@code UriComponentsBuilder} from the UriTemplate string. The_default implementation also parses the path into path segments if_{@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,the,default,implementation,also,parses,the,path,into,path,segments,if,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1457033868;Create a {@code UriComponentsBuilder} from the UriTemplate string. The_default implementation also parses the path into path segments if_{@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,the,default,implementation,also,parses,the,path,into,path,segments,if,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1461356478;Create a {@code UriComponentsBuilder} from the UriTemplate string. The_default implementation also parses the path into path segments if_{@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,the,default,implementation,also,parses,the,path,into,path,segments,if,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1461356483;Create a {@code UriComponentsBuilder} from the UriTemplate string. The_default implementation also parses the path into path segments if_{@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,the,default,implementation,also,parses,the,path,into,path,segments,if,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1461422944;Create a {@code UriComponentsBuilder} from the UriTemplate string. The_default implementation also parses the path into path segments if_{@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,the,default,implementation,also,parses,the,path,into,path,segments,if,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1461691955;Create a {@code UriComponentsBuilder} from the URI template string._This implementation also breaks up the path into path segments depending_on whether {@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,this,implementation,also,breaks,up,the,path,into,path,segments,depending,on,whether,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1461761752;Create a {@code UriComponentsBuilder} from the URI template string._This implementation also breaks up the path into path segments depending_on whether {@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,this,implementation,also,breaks,up,the,path,into,path,segments,depending,on,whether,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1467730834;Create a {@code UriComponentsBuilder} from the URI template string._This implementation also breaks up the path into path segments depending_on whether {@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,this,implementation,also,breaks,up,the,path,into,path,segments,depending,on,whether,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1484793933;Create a {@code UriComponentsBuilder} from the URI template string._This implementation also breaks up the path into path segments depending_on whether {@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,this,implementation,also,breaks,up,the,path,into,path,segments,depending,on,whether,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1485553611;Create a {@code UriComponentsBuilder} from the URI template string._This implementation also breaks up the path into path segments depending_on whether {@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,this,implementation,also,breaks,up,the,path,into,path,segments,depending,on,whether,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate);1517280802;Create a {@code UriComponentsBuilder} from the URI template string._This implementation also breaks up the path into path segments depending_on whether {@link #setParsePath parsePath} is enabled.;protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {_		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate)__		if (shouldParsePath() && !isStrictEncoding()) {_			List<String> pathSegments = builder.build().getPathSegments()__			builder.replacePath(null)__			for (String pathSegment : pathSegments) {_				builder.pathSegment(pathSegment)__			}_		}_		return builder__	};create,a,code,uri,components,builder,from,the,uri,template,string,this,implementation,also,breaks,up,the,path,into,path,segments,depending,on,whether,link,set,parse,path,parse,path,is,enabled;protected,uri,components,builder,init,uri,components,builder,string,uri,template,uri,components,builder,builder,uri,components,builder,from,uri,string,uri,template,if,should,parse,path,is,strict,encoding,list,string,path,segments,builder,build,get,path,segments,builder,replace,path,null,for,string,path,segment,path,segments,builder,path,segment,path,segment,return,builder
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1431629400;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the path of parsed URI templates is decomposed_into path segments so that URI variables expanded into the path are_treated according to path segment encoding rules. In effect that means the_"/" character is percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,path,of,parsed,uri,templates,is,decomposed,into,path,segments,so,that,uri,variables,expanded,into,the,path,are,treated,according,to,path,segment,encoding,rules,in,effect,that,means,the,character,is,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1432149152;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the path of parsed URI templates is decomposed_into path segments so that URI variables expanded into the path are_treated according to path segment encoding rules. In effect that means the_"/" character is percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,path,of,parsed,uri,templates,is,decomposed,into,path,segments,so,that,uri,variables,expanded,into,the,path,are,treated,according,to,path,segment,encoding,rules,in,effect,that,means,the,character,is,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1438251419;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the path of parsed URI templates is decomposed_into path segments so that URI variables expanded into the path are_treated according to path segment encoding rules. In effect that means the_"/" character is percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,path,of,parsed,uri,templates,is,decomposed,into,path,segments,so,that,uri,variables,expanded,into,the,path,are,treated,according,to,path,segment,encoding,rules,in,effect,that,means,the,character,is,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1454099942;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the path of parsed URI templates is decomposed_into path segments so that URI variables expanded into the path are_treated according to path segment encoding rules. In effect that means the_"/" character is percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,path,of,parsed,uri,templates,is,decomposed,into,path,segments,so,that,uri,variables,expanded,into,the,path,are,treated,according,to,path,segment,encoding,rules,in,effect,that,means,the,character,is,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1457030025;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1457033868;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1461356478;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1461356483;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1461422944;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1461691955;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1461761752;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1467730834;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1484793933;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1485553611;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public void setParsePath(boolean parsePath);1517280802;Whether to parse the path of a URI template string into path segments._<p>If set to {@code true} the URI template path is immediately decomposed_into path segments any URI variables expanded into it are then subject to_path segment encoding rules. In effect URI variables in the path have any_"/" characters percent encoded._<p>By default this is set to {@code false} in which case the path is kept_as a full path and expanded URI variables will preserve "/" characters._@param parsePath whether to parse the path into path segments;public void setParsePath(boolean parsePath) {_		this.parsePath = parsePath__	};whether,to,parse,the,path,of,a,uri,template,string,into,path,segments,p,if,set,to,code,true,the,uri,template,path,is,immediately,decomposed,into,path,segments,any,uri,variables,expanded,into,it,are,then,subject,to,path,segment,encoding,rules,in,effect,uri,variables,in,the,path,have,any,characters,percent,encoded,p,by,default,this,is,set,to,code,false,in,which,case,the,path,is,kept,as,a,full,path,and,expanded,uri,variables,will,preserve,characters,param,parse,path,whether,to,parse,the,path,into,path,segments;public,void,set,parse,path,boolean,parse,path,this,parse,path,parse,path
DefaultUriTemplateHandler -> public String getBaseUrl();1432149152;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1438251419;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1454099942;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1457030025;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1457033868;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1461356478;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1461356483;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> public String getBaseUrl();1461422944;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
DefaultUriTemplateHandler -> protected URI insertBaseUrl(UriComponents uriComponents);1457030025;Invoked after the URI template has been expanded and encoded to prepend_the configured {@link #setBaseUrl(String) baseUrl} if any._@param uriComponents the expanded and encoded URI_@return the final URI;protected URI insertBaseUrl(UriComponents uriComponents) {_		if (getBaseUrl() == null || uriComponents.getHost() != null) {_			return uriComponents.toUri()__		}_		String url = getBaseUrl() + uriComponents.toUriString()__		try {_			return new URI(url)__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};invoked,after,the,uri,template,has,been,expanded,and,encoded,to,prepend,the,configured,link,set,base,url,string,base,url,if,any,param,uri,components,the,expanded,and,encoded,uri,return,the,final,uri;protected,uri,insert,base,url,uri,components,uri,components,if,get,base,url,null,uri,components,get,host,null,return,uri,components,to,uri,string,url,get,base,url,uri,components,to,uri,string,try,return,new,uri,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
DefaultUriTemplateHandler -> protected URI insertBaseUrl(UriComponents uriComponents);1457033868;Invoked after the URI template has been expanded and encoded to prepend_the configured {@link #setBaseUrl(String) baseUrl} if any._@param uriComponents the expanded and encoded URI_@return the final URI;protected URI insertBaseUrl(UriComponents uriComponents) {_		String url = uriComponents.toUriString()__		if (getBaseUrl() != null && uriComponents.getHost() == null) {_			url = getBaseUrl() + url__		}_		try {_			return new URI(url)__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};invoked,after,the,uri,template,has,been,expanded,and,encoded,to,prepend,the,configured,link,set,base,url,string,base,url,if,any,param,uri,components,the,expanded,and,encoded,uri,return,the,final,uri;protected,uri,insert,base,url,uri,components,uri,components,string,url,uri,components,to,uri,string,if,get,base,url,null,uri,components,get,host,null,url,get,base,url,url,try,return,new,uri,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
DefaultUriTemplateHandler -> protected URI insertBaseUrl(UriComponents uriComponents);1461356478;Invoked after the URI template has been expanded and encoded to prefix it_with the configured {@link #setBaseUrl(String) baseUrl}, if any._@param uriComponents the expanded and encoded URI_@return the final URI;protected URI insertBaseUrl(UriComponents uriComponents) {_		String url = uriComponents.toUriString()__		if (getBaseUrl() != null && uriComponents.getHost() == null) {_			url = getBaseUrl() + url__		}_		try {_			return new URI(url)__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};invoked,after,the,uri,template,has,been,expanded,and,encoded,to,prefix,it,with,the,configured,link,set,base,url,string,base,url,if,any,param,uri,components,the,expanded,and,encoded,uri,return,the,final,uri;protected,uri,insert,base,url,uri,components,uri,components,string,url,uri,components,to,uri,string,if,get,base,url,null,uri,components,get,host,null,url,get,base,url,url,try,return,new,uri,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
DefaultUriTemplateHandler -> protected URI insertBaseUrl(UriComponents uriComponents);1461356483;Invoked after the URI template has been expanded and encoded to prefix it_with the configured {@link #setBaseUrl(String) baseUrl}, if any._@param uriComponents the expanded and encoded URI_@return the final URI;protected URI insertBaseUrl(UriComponents uriComponents) {_		String url = uriComponents.toUriString()__		if (getBaseUrl() != null && uriComponents.getHost() == null) {_			url = getBaseUrl() + url__		}_		try {_			return new URI(url)__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};invoked,after,the,uri,template,has,been,expanded,and,encoded,to,prefix,it,with,the,configured,link,set,base,url,string,base,url,if,any,param,uri,components,the,expanded,and,encoded,uri,return,the,final,uri;protected,uri,insert,base,url,uri,components,uri,components,string,url,uri,components,to,uri,string,if,get,base,url,null,uri,components,get,host,null,url,get,base,url,url,try,return,new,uri,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
DefaultUriTemplateHandler -> protected URI insertBaseUrl(UriComponents uriComponents);1461422944;Invoked after the URI template has been expanded and encoded to prefix it_with the configured {@link #setBaseUrl(String) baseUrl}, if any._@param uriComponents the expanded and encoded URI_@return the final URI;protected URI insertBaseUrl(UriComponents uriComponents) {_		String url = uriComponents.toUriString()__		if (getBaseUrl() != null && uriComponents.getHost() == null) {_			url = getBaseUrl() + url__		}_		try {_			return new URI(url)__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};invoked,after,the,uri,template,has,been,expanded,and,encoded,to,prefix,it,with,the,configured,link,set,base,url,string,base,url,if,any,param,uri,components,the,expanded,and,encoded,uri,return,the,final,uri;protected,uri,insert,base,url,uri,components,uri,components,string,url,uri,components,to,uri,string,if,get,base,url,null,uri,components,get,host,null,url,get,base,url,url,try,return,new,uri,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1457033868;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1461356478;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1461356483;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1461422944;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1461691955;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1461761752;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1467730834;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1484793933;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1485553611;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
DefaultUriTemplateHandler -> public boolean isStrictEncoding();1517280802;Whether to strictly encode any character outside the unreserved set.;public boolean isStrictEncoding() {_		return this.strictEncoding__	};whether,to,strictly,encode,any,character,outside,the,unreserved,set;public,boolean,is,strict,encoding,return,this,strict,encoding
