commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Configure supported locales to check against the requested locales  * determined via {@link HttpHeaders#getAcceptLanguageAsLocales()}.  * @param locales the supported locales  */ ;/**  * Configure supported locales to check against the requested locales  * determined via {@link HttpHeaders#getAcceptLanguageAsLocales()}.  * @param locales the supported locales  */ public void setSupportedLocales(List<Locale> locales) {     this.supportedLocales.clear().     this.supportedLocales.addAll(locales). }
true;public;0;3;/**  * Return the configured list of supported locales.  */ ;/**  * Return the configured list of supported locales.  */ public List<Locale> getSupportedLocales() {     return this.supportedLocales. }
true;public;1;3;/**  * Configure a fixed default locale to fall back on if the request does not  * have an "Accept-Language" header (not set by default).  * @param defaultLocale the default locale to use  */ ;/**  * Configure a fixed default locale to fall back on if the request does not  * have an "Accept-Language" header (not set by default).  * @param defaultLocale the default locale to use  */ public void setDefaultLocale(@Nullable Locale defaultLocale) {     this.defaultLocale = defaultLocale. }
true;public;0;4;/**  * The configured default locale, if any.  */ ;/**  * The configured default locale, if any.  */ @Nullable public Locale getDefaultLocale() {     return this.defaultLocale. }
false;public;1;11;;@Override public LocaleContext resolveLocaleContext(ServerWebExchange exchange) {     List<Locale> requestLocales = null.     try {         requestLocales = exchange.getRequest().getHeaders().getAcceptLanguageAsLocales().     } catch (IllegalArgumentException ex) {     // Invalid Accept-Language header: treat as empty for matching purposes     }     return new SimpleLocaleContext(resolveSupportedLocale(requestLocales)). }
false;private;1;35;;@Nullable private Locale resolveSupportedLocale(@Nullable List<Locale> requestLocales) {     if (CollectionUtils.isEmpty(requestLocales)) {         // may be null         return this.defaultLocale.     }     List<Locale> supportedLocales = getSupportedLocales().     if (supportedLocales.isEmpty()) {         // never null         return requestLocales.get(0).     }     Locale languageMatch = null.     for (Locale locale : requestLocales) {         if (supportedLocales.contains(locale)) {             if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {                 // Full match: language + country, possibly narrowed from earlier language-only match                 return locale.             }         } else if (languageMatch == null) {             // Let's try to find a language-only match as a fallback             for (Locale candidate : supportedLocales) {                 if (!StringUtils.hasLength(candidate.getCountry()) && candidate.getLanguage().equals(locale.getLanguage())) {                     languageMatch = candidate.                     break.                 }             }         }     }     if (languageMatch != null) {         return languageMatch.     }     return (this.defaultLocale != null ? this.defaultLocale : requestLocales.get(0)). }
false;public;2;5;;@Override public void setLocaleContext(ServerWebExchange exchange, @Nullable LocaleContext locale) {     throw new UnsupportedOperationException("Cannot change HTTP accept header - use a different locale context resolution strategy"). }
