commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the name of the cookie to use for the session id.  * <p>By default set to "SESSION".  * @param cookieName the cookie name  */ ;/**  * Set the name of the cookie to use for the session id.  * <p>By default set to "SESSION".  * @param cookieName the cookie name  */ public void setCookieName(String cookieName) {     Assert.hasText(cookieName, "'cookieName' must not be empty").     this.cookieName = cookieName. }
true;public;0;3;/**  * Return the configured cookie name.  */ ;/**  * Return the configured cookie name.  */ public String getCookieName() {     return this.cookieName. }
true;public;1;3;/**  * Set the value for the "Max-Age" attribute of the cookie that holds the  * session id. For the range of values see {@link ResponseCookie#getMaxAge()}.  * <p>By default set to -1.  * @param maxAge the maxAge duration value  */ ;/**  * Set the value for the "Max-Age" attribute of the cookie that holds the  * session id. For the range of values see {@link ResponseCookie#getMaxAge()}.  * <p>By default set to -1.  * @param maxAge the maxAge duration value  */ public void setCookieMaxAge(Duration maxAge) {     this.cookieMaxAge = maxAge. }
true;public;0;3;/**  * Return the configured "Max-Age" attribute value for the session cookie.  */ ;/**  * Return the configured "Max-Age" attribute value for the session cookie.  */ public Duration getCookieMaxAge() {     return this.cookieMaxAge. }
true;public;1;4;/**  * Add a {@link Consumer} for a {@code ResponseCookieBuilder} that will be invoked  * for each cookie being built, just before the call to {@code build()}.  * @param initializer consumer for a cookie builder  * @since 5.1  */ ;/**  * Add a {@link Consumer} for a {@code ResponseCookieBuilder} that will be invoked  * for each cookie being built, just before the call to {@code build()}.  * @param initializer consumer for a cookie builder  * @since 5.1  */ public void addCookieInitializer(Consumer<ResponseCookie.ResponseCookieBuilder> initializer) {     this.cookieInitializer = this.cookieInitializer != null ? this.cookieInitializer.andThen(initializer) : initializer. }
false;public;1;9;;@Override public List<String> resolveSessionIds(ServerWebExchange exchange) {     MultiValueMap<String, HttpCookie> cookieMap = exchange.getRequest().getCookies().     List<HttpCookie> cookies = cookieMap.get(getCookieName()).     if (cookies == null) {         return Collections.emptyList().     }     return cookies.stream().map(HttpCookie::getValue).collect(Collectors.toList()). }
false;public;2;6;;@Override public void setSessionId(ServerWebExchange exchange, String id) {     Assert.notNull(id, "'id' is required").     ResponseCookie cookie = initSessionCookie(exchange, id, getCookieMaxAge()).     exchange.getResponse().getCookies().set(this.cookieName, cookie). }
false;public;1;5;;@Override public void expireSession(ServerWebExchange exchange) {     ResponseCookie cookie = initSessionCookie(exchange, "", Duration.ZERO).     exchange.getResponse().getCookies().set(this.cookieName, cookie). }
false;private;3;16;;private ResponseCookie initSessionCookie(ServerWebExchange exchange, String id, Duration maxAge) {     ResponseCookie.ResponseCookieBuilder cookieBuilder = ResponseCookie.from(this.cookieName, id).path(exchange.getRequest().getPath().contextPath().value() + "/").maxAge(maxAge).httpOnly(true).secure("https".equalsIgnoreCase(exchange.getRequest().getURI().getScheme())).sameSite("Lax").     if (this.cookieInitializer != null) {         this.cookieInitializer.accept(cookieBuilder).     }     return cookieBuilder.build(). }
