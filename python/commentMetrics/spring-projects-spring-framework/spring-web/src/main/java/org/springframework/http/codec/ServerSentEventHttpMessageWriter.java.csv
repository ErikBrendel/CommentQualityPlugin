commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the configured {@code Encoder}, if any.  */ ;/**  * Return the configured {@code Encoder}, if any.  */ @Nullable public Encoder<?> getEncoder() {     return this.encoder. }
false;public;0;4;;@Override public List<MediaType> getWritableMediaTypes() {     return WRITABLE_MEDIA_TYPES. }
false;public;2;5;;@Override public boolean canWrite(ResolvableType elementType, @Nullable MediaType mediaType) {     return (mediaType == null || MediaType.TEXT_EVENT_STREAM.includes(mediaType) || ServerSentEvent.class.isAssignableFrom(elementType.toClass())). }
false;public;5;10;;@Override public Mono<Void> write(Publisher<?> input, ResolvableType elementType, @Nullable MediaType mediaType, ReactiveHttpOutputMessage message, Map<String, Object> hints) {     mediaType = (mediaType != null && mediaType.getCharset() != null ? mediaType : DEFAULT_MEDIA_TYPE).     DataBufferFactory bufferFactory = message.bufferFactory().     message.getHeaders().setContentType(mediaType).     return message.writeAndFlushWith(encode(input, elementType, mediaType, bufferFactory, hints)). }
false;private;5;39;;private Flux<Publisher<DataBuffer>> encode(Publisher<?> input, ResolvableType elementType, MediaType mediaType, DataBufferFactory factory, Map<String, Object> hints) {     ResolvableType valueType = (ServerSentEvent.class.isAssignableFrom(elementType.toClass()) ? elementType.getGeneric() : elementType).     return Flux.from(input).map(element -> {         ServerSentEvent<?> sse = (element instanceof ServerSentEvent ? (ServerSentEvent<?>) element : ServerSentEvent.builder().data(element).build()).         StringBuilder sb = new StringBuilder().         String id = sse.id().         String event = sse.event().         Duration retry = sse.retry().         String comment = sse.comment().         Object data = sse.data().         if (id != null) {             writeField("id", id, sb).         }         if (event != null) {             writeField("event", event, sb).         }         if (retry != null) {             writeField("retry", retry.toMillis(), sb).         }         if (comment != null) {             sb.append(':').append(StringUtils.replace(comment, "\n", "\n:")).append("\n").         }         if (data != null) {             sb.append("data:").         }         return Flux.concat(encodeText(sb, mediaType, factory), encodeData(data, valueType, mediaType, factory, hints), encodeText("\n", mediaType, factory)).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release).     }). }
false;private;3;6;;private void writeField(String fieldName, Object fieldValue, StringBuilder stringBuilder) {     stringBuilder.append(fieldName).     stringBuilder.append(':').     stringBuilder.append(fieldValue.toString()).     stringBuilder.append("\n"). }
false;private;5;21;;@SuppressWarnings("unchecked") private <T> Flux<DataBuffer> encodeData(@Nullable T data, ResolvableType valueType, MediaType mediaType, DataBufferFactory factory, Map<String, Object> hints) {     if (data == null) {         return Flux.empty().     }     if (data instanceof String) {         String text = (String) data.         return Flux.from(encodeText(StringUtils.replace(text, "\n", "\ndata:") + "\n", mediaType, factory)).     }     if (this.encoder == null) {         return Flux.error(new CodecException("No SSE encoder configured and the data is not String.")).     }     return ((Encoder<T>) this.encoder).encode(Mono.just(data), factory, valueType, mediaType, hints).concatWith(encodeText("\n", mediaType, factory)). }
false;private;3;6;;private Mono<DataBuffer> encodeText(CharSequence text, MediaType mediaType, DataBufferFactory bufferFactory) {     Assert.notNull(mediaType.getCharset(), "Expected MediaType with charset").     byte[] bytes = text.toString().getBytes(mediaType.getCharset()).     return Mono.defer(() -> Mono.just(bufferFactory.allocateBuffer(bytes.length).write(bytes))). }
false;public;7;10;;@Override public Mono<Void> write(Publisher<?> input, ResolvableType actualType, ResolvableType elementType, @Nullable MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {     Map<String, Object> allHints = Hints.merge(hints, getEncodeHints(actualType, elementType, mediaType, request, response)).     return write(input, elementType, mediaType, response, allHints). }
false;private;5;9;;private Map<String, Object> getEncodeHints(ResolvableType actualType, ResolvableType elementType, @Nullable MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response) {     if (this.encoder instanceof HttpMessageEncoder) {         HttpMessageEncoder<?> encoder = (HttpMessageEncoder<?>) this.encoder.         return encoder.getEncodeHints(actualType, elementType, mediaType, request, response).     }     return Hints.none(). }
