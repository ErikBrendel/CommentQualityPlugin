# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1481666281;Implement this method to apply header changes from {@link #getHeaders()}_to the underlying response. This method is called once only.;protected abstract void applyHeaders()_;implement,this,method,to,apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1485810955;Implement this method to apply header changes from {@link #getHeaders()}_to the underlying response. This method is called once only.;protected abstract void applyHeaders()_;implement,this,method,to,apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1485885027;Implement this method to apply header changes from {@link #getHeaders()}_to the underlying response. This method is called once only.;protected abstract void applyHeaders()_;implement,this,method,to,apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1494586217;Apply header changes from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyHeaders()_;apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1495868221;Apply header changes from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyHeaders()_;apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1497380366;Apply header changes from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyHeaders()_;apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1499155916;Apply header changes from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyHeaders()_;apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected abstract void applyHeaders()_;1529401905;Apply header changes from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyHeaders()_;apply,header,changes,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,headers
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1481666281;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return (this.state.get() == State.NEW ? doCommit(null) : Mono.empty())__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,this,state,get,state,new,do,commit,null,mono,empty
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1485810955;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return (this.state.get() == State.NEW ? doCommit(null) : Mono.empty())__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,this,state,get,state,new,do,commit,null,mono,empty
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1485885027;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return doCommit(null)__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,do,commit,null
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1494586217;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return doCommit(null)__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,do,commit,null
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1495868221;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return doCommit(null)__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,do,commit,null
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1497380366;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return doCommit(null)__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,do,commit,null
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1499155916;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return doCommit(null)__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,do,commit,null
AbstractClientHttpRequest -> protected Mono<Void> doCommit();1529401905;A variant of {@link #doCommit(Supplier)} for a request without body._@return a completion publisher;protected Mono<Void> doCommit() {_		return doCommit(null)__	};a,variant,of,link,do,commit,supplier,for,a,request,without,body,return,a,completion,publisher;protected,mono,void,do,commit,return,do,commit,null
AbstractClientHttpRequest -> protected Mono<Void> doCommit(@Nullable Supplier<? extends Publisher<Void>> writeAction);1499155916;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body (may be {@code null})_@return a completion publisher;protected Mono<Void> doCommit(@Nullable Supplier<? extends Publisher<Void>> writeAction) {_		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Publisher<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Mono.fromDirect(Flux.concat(actions))__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,may,be,code,null,return,a,completion,publisher;protected,mono,void,do,commit,nullable,supplier,extends,publisher,void,write,action,if,this,state,compare,and,set,state,new,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,publisher,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,mono,from,direct,flux,concat,actions
AbstractClientHttpRequest -> protected Mono<Void> doCommit(@Nullable Supplier<? extends Publisher<Void>> writeAction);1529401905;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body (may be {@code null})_@return a completion publisher;protected Mono<Void> doCommit(@Nullable Supplier<? extends Publisher<Void>> writeAction) {_		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() ->_				Mono.fromRunnable(() -> {_					applyHeaders()__					applyCookies()__					this.state.set(State.COMMITTED)__				}))___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Publisher<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).then()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,may,be,code,null,return,a,completion,publisher;protected,mono,void,do,commit,nullable,supplier,extends,publisher,void,write,action,if,this,state,compare,and,set,state,new,state,committing,return,mono,empty,this,commit,actions,add,mono,from,runnable,apply,headers,apply,cookies,this,state,set,state,committed,if,write,action,null,this,commit,actions,add,write,action,list,extends,publisher,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,then
AbstractClientHttpRequest -> protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction);1481666281;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body or {@code null}_@return a completion publisher;protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction) {__		if (!this.state.compareAndSet(AbstractClientHttpRequest.State.NEW, AbstractClientHttpRequest.State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(AbstractClientHttpRequest.State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Mono<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).next()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,or,code,null,return,a,completion,publisher;protected,mono,void,do,commit,supplier,extends,mono,void,write,action,if,this,state,compare,and,set,abstract,client,http,request,state,new,abstract,client,http,request,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,abstract,client,http,request,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,mono,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,next
AbstractClientHttpRequest -> protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction);1485810955;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body or {@code null}_@return a completion publisher;protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction) {__		if (!this.state.compareAndSet(AbstractClientHttpRequest.State.NEW, AbstractClientHttpRequest.State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(AbstractClientHttpRequest.State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Mono<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).next()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,or,code,null,return,a,completion,publisher;protected,mono,void,do,commit,supplier,extends,mono,void,write,action,if,this,state,compare,and,set,abstract,client,http,request,state,new,abstract,client,http,request,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,abstract,client,http,request,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,mono,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,next
AbstractClientHttpRequest -> protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction);1485885027;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body or {@code null}_@return a completion publisher;protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction) {__		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Mono<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).next()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,or,code,null,return,a,completion,publisher;protected,mono,void,do,commit,supplier,extends,mono,void,write,action,if,this,state,compare,and,set,state,new,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,mono,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,next
AbstractClientHttpRequest -> protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction);1494586217;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body (may be {@code null})_@return a completion publisher;protected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction) {_		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Mono<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).next()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,may,be,code,null,return,a,completion,publisher;protected,mono,void,do,commit,supplier,extends,mono,void,write,action,if,this,state,compare,and,set,state,new,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,mono,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,next
AbstractClientHttpRequest -> protected Mono<Void> doCommit(@Nullable Supplier<? extends Mono<Void>> writeAction);1495868221;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body (may be {@code null})_@return a completion publisher;protected Mono<Void> doCommit(@Nullable Supplier<? extends Mono<Void>> writeAction) {_		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Mono<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).next()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,may,be,code,null,return,a,completion,publisher;protected,mono,void,do,commit,nullable,supplier,extends,mono,void,write,action,if,this,state,compare,and,set,state,new,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,mono,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,next
AbstractClientHttpRequest -> protected Mono<Void> doCommit(@Nullable Supplier<? extends Mono<Void>> writeAction);1497380366;Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the_request headers/cookies, and write the request body._@param writeAction the action to write the request body (may be {@code null})_@return a completion publisher;protected Mono<Void> doCommit(@Nullable Supplier<? extends Mono<Void>> writeAction) {_		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {_			return Mono.empty()__		}__		this.commitActions.add(() -> {_			applyHeaders()__			applyCookies()__			this.state.set(State.COMMITTED)__			return Mono.empty()__		})___		if (writeAction != null) {_			this.commitActions.add(writeAction)__		}__		List<? extends Mono<Void>> actions = this.commitActions.stream()_				.map(Supplier::get).collect(Collectors.toList())___		return Flux.concat(actions).next()__	};apply,link,before,commit,supplier,before,commit,actions,apply,the,request,headers,cookies,and,write,the,request,body,param,write,action,the,action,to,write,the,request,body,may,be,code,null,return,a,completion,publisher;protected,mono,void,do,commit,nullable,supplier,extends,mono,void,write,action,if,this,state,compare,and,set,state,new,state,committing,return,mono,empty,this,commit,actions,add,apply,headers,apply,cookies,this,state,set,state,committed,return,mono,empty,if,write,action,null,this,commit,actions,add,write,action,list,extends,mono,void,actions,this,commit,actions,stream,map,supplier,get,collect,collectors,to,list,return,flux,concat,actions,next
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1481666281;Implement this method to add cookies from {@link #getHeaders()} to the_underlying response. This method is called once only.;protected abstract void applyCookies()_;implement,this,method,to,add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1485810955;Implement this method to add cookies from {@link #getHeaders()} to the_underlying response. This method is called once only.;protected abstract void applyCookies()_;implement,this,method,to,add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1485885027;Implement this method to add cookies from {@link #getHeaders()} to the_underlying response. This method is called once only.;protected abstract void applyCookies()_;implement,this,method,to,add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1494586217;Add cookies from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyCookies()_;add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1495868221;Add cookies from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyCookies()_;add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1497380366;Add cookies from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyCookies()_;add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1499155916;Add cookies from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyCookies()_;add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
AbstractClientHttpRequest -> protected abstract void applyCookies()_;1529401905;Add cookies from {@link #getHeaders()} to the underlying response._This method is called once only.;protected abstract void applyCookies()_;add,cookies,from,link,get,headers,to,the,underlying,response,this,method,is,called,once,only;protected,abstract,void,apply,cookies
