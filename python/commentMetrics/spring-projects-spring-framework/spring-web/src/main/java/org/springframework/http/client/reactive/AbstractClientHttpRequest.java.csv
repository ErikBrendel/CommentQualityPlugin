commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public HttpHeaders getHeaders() {     if (State.COMMITTED.equals(this.state.get())) {         return HttpHeaders.readOnlyHttpHeaders(this.headers).     }     return this.headers. }
false;public;0;7;;@Override public MultiValueMap<String, HttpCookie> getCookies() {     if (State.COMMITTED.equals(this.state.get())) {         return CollectionUtils.unmodifiableMultiValueMap(this.cookies).     }     return this.cookies. }
false;public;1;5;;@Override public void beforeCommit(Supplier<? extends Mono<Void>> action) {     Assert.notNull(action, "Action must not be null").     this.commitActions.add(action). }
false;public;0;4;;@Override public boolean isCommitted() {     return (this.state.get() != State.NEW). }
true;protected;0;3;/**  * A variant of {@link #doCommit(Supplier)} for a request without body.  * @return a completion publisher  */ ;/**  * A variant of {@link #doCommit(Supplier)} for a request without body.  * @return a completion publisher  */ protected Mono<Void> doCommit() {     return doCommit(null). }
true;protected;1;21;/**  * Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the  * request headers/cookies, and write the request body.  * @param writeAction the action to write the request body (may be {@code null})  * @return a completion publisher  */ ;/**  * Apply {@link #beforeCommit(Supplier) beforeCommit} actions, apply the  * request headers/cookies, and write the request body.  * @param writeAction the action to write the request body (may be {@code null})  * @return a completion publisher  */ protected Mono<Void> doCommit(@Nullable Supplier<? extends Publisher<Void>> writeAction) {     if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {         return Mono.empty().     }     this.commitActions.add(() -> Mono.fromRunnable(() -> {         applyHeaders().         applyCookies().         this.state.set(State.COMMITTED).     })).     if (writeAction != null) {         this.commitActions.add(writeAction).     }     List<? extends Publisher<Void>> actions = this.commitActions.stream().map(Supplier::get).collect(Collectors.toList()).     return Flux.concat(actions).then(). }
true;protected,abstract;0;1;/**  * Apply header changes from {@link #getHeaders()} to the underlying response.  * This method is called once only.  */ ;/**  * Apply header changes from {@link #getHeaders()} to the underlying response.  * This method is called once only.  */ protected abstract void applyHeaders().
true;protected,abstract;0;1;/**  * Add cookies from {@link #getHeaders()} to the underlying response.  * This method is called once only.  */ ;/**  * Add cookies from {@link #getHeaders()} to the underlying response.  * This method is called once only.  */ protected abstract void applyCookies().
