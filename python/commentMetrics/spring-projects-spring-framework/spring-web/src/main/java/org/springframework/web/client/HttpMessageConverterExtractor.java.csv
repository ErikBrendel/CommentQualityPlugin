commented;modifiers;parameterAmount;loc;comment;code
false;public;1;41;;@Override @SuppressWarnings({ "unchecked", "rawtypes", "resource" }) public T extractData(ClientHttpResponse response) throws IOException {     MessageBodyClientHttpResponseWrapper responseWrapper = new MessageBodyClientHttpResponseWrapper(response).     if (!responseWrapper.hasMessageBody() || responseWrapper.hasEmptyMessageBody()) {         return null.     }     MediaType contentType = getContentType(responseWrapper).     try {         for (HttpMessageConverter<?> messageConverter : this.messageConverters) {             if (messageConverter instanceof GenericHttpMessageConverter) {                 GenericHttpMessageConverter<?> genericMessageConverter = (GenericHttpMessageConverter<?>) messageConverter.                 if (genericMessageConverter.canRead(this.responseType, null, contentType)) {                     if (logger.isDebugEnabled()) {                         ResolvableType resolvableType = ResolvableType.forType(this.responseType).                         logger.debug("Reading to [" + resolvableType + "]").                     }                     return (T) genericMessageConverter.read(this.responseType, null, responseWrapper).                 }             }             if (this.responseClass != null) {                 if (messageConverter.canRead(this.responseClass, contentType)) {                     if (logger.isDebugEnabled()) {                         String className = this.responseClass.getName().                         logger.debug("Reading to [" + className + "] as \"" + contentType + "\"").                     }                     return (T) messageConverter.read((Class) this.responseClass, responseWrapper).                 }             }         }     } catch (IOException | HttpMessageNotReadableException ex) {         throw new RestClientException("Error while extracting response for type [" + this.responseType + "] and content type [" + contentType + "]", ex).     }     throw new RestClientException("Could not extract response: no suitable HttpMessageConverter found " + "for response type [" + this.responseType + "] and content type [" + contentType + "]"). }
true;protected;1;11;/**  * Determine the Content-Type of the response based on the "Content-Type"  * header or otherwise default to {@link MediaType#APPLICATION_OCTET_STREAM}.  * @param response the response  * @return the MediaType, possibly {@code null}.  */ ;/**  * Determine the Content-Type of the response based on the "Content-Type"  * header or otherwise default to {@link MediaType#APPLICATION_OCTET_STREAM}.  * @param response the response  * @return the MediaType, possibly {@code null}.  */ @Nullable protected MediaType getContentType(ClientHttpResponse response) {     MediaType contentType = response.getHeaders().getContentType().     if (contentType == null) {         if (logger.isTraceEnabled()) {             logger.trace("No content-type, using 'application/octet-stream'").         }         contentType = MediaType.APPLICATION_OCTET_STREAM.     }     return contentType. }
