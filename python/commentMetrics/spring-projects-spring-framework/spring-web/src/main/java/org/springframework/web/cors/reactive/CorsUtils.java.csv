# id;timestamp;commentText;codeText;commentWords;codeWords
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1476136805;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded} and {@code X-Forwarded-Host} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request.;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		UriComponents actualUrl = urlBuilder.build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl)__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,and,code,x,forwarded,host,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1515504834;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request.;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		UriComponents actualUrl = urlBuilder.build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl)__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1515504834;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request.;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		UriComponents actualUrl = urlBuilder.build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort())__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,get,scheme,actual,url,get,port,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1516361410;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of cross-origin request.;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		UriComponents actualUrl = urlBuilder.build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort())__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,get,scheme,actual,url,get,port,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1518987682;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of a cross-origin request;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}_		UriComponentsBuilder urlBuilder = UriComponentsBuilder.fromHttpRequest(request)__		UriComponents actualUrl = urlBuilder.build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort())__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")__		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) &&_				actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,a,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,builder,url,builder,uri,components,builder,from,http,request,request,uri,components,actual,url,url,builder,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,get,scheme,actual,url,get,port,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1522332352;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of a cross-origin request;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}__		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort())__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")___		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) &&_				actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,a,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,actual,url,uri,components,builder,from,http,request,request,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,get,scheme,actual,url,get,port,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1522354261;Check if the request is a same-origin one, based on {@code Origin}, {@code Host},_{@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and_@code X-Forwarded-Port} headers._@return {@code true} if the request is a same-origin one, {@code false} in case_of a cross-origin request_<p><strong>Note:</strong> this method uses values from "Forwarded"_(<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>),_"X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" headers,_if present, in order to reflect the client-originated address._Consider using the {@code ForwardedHeaderFilter} in order to choose from a_central place whether to extract and use, or to discard such headers._See the Spring Framework reference for more on this filter.;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}__		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build()__		String actualHost = actualUrl.getHost()__		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort())__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")___		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) &&_				actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,code,host,code,forwarded,code,x,forwarded,proto,code,x,forwarded,host,and,code,x,forwarded,port,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,a,cross,origin,request,p,strong,note,strong,this,method,uses,values,from,forwarded,a,href,http,tools,ietf,org,html,rfc7239,rfc,7239,a,x,forwarded,host,x,forwarded,port,and,x,forwarded,proto,headers,if,present,in,order,to,reflect,the,client,originated,address,consider,using,the,code,forwarded,header,filter,in,order,to,choose,from,a,central,place,whether,to,extract,and,use,or,to,discard,such,headers,see,the,spring,framework,reference,for,more,on,this,filter;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,components,actual,url,uri,components,builder,from,http,request,request,build,string,actual,host,actual,url,get,host,int,actual,port,get,port,actual,url,get,scheme,actual,url,get,port,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1526045499;Check if the request is a same-origin one, based on {@code Origin}, and_{@code Host} headers.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request is a same-origin one, {@code false} in case_of a cross-origin request;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}__		URI uri = request.getURI()__		String actualHost = uri.getHost()__		int actualPort = getPort(uri.getScheme(), uri.getPort())__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")___		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualHost.equals(originUrl.getHost()) &&_				actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,and,code,host,headers,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,a,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,uri,request,get,uri,string,actual,host,uri,get,host,int,actual,port,get,port,uri,get,scheme,uri,get,port,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isSameOrigin(ServerHttpRequest request);1533723582;Check if the request is a same-origin one, based on {@code Origin}, and_{@code Host} headers.__<p><strong>Note:</strong> as of 5.1 this method ignores_{@code "Forwarded"} and {@code "X-Forwarded-*"} headers that specify the_client-originated address. Consider using the {@code ForwardedHeaderFilter}_to extract and use, or to discard such headers.__@return {@code true} if the request is a same-origin one, {@code false} in case_of a cross-origin request;public static boolean isSameOrigin(ServerHttpRequest request) {_		String origin = request.getHeaders().getOrigin()__		if (origin == null) {_			return true__		}__		URI uri = request.getURI()__		String actualScheme = uri.getScheme()__		String actualHost = uri.getHost()__		int actualPort = getPort(uri.getScheme(), uri.getPort())__		Assert.notNull(actualScheme, "Actual request scheme must not be null")__		Assert.notNull(actualHost, "Actual request host must not be null")__		Assert.isTrue(actualPort != -1, "Actual request port must not be undefined")___		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build()__		return (actualScheme.equals(originUrl.getScheme()) &&_				actualHost.equals(originUrl.getHost()) &&_				actualPort == getPort(originUrl.getScheme(), originUrl.getPort()))__	};check,if,the,request,is,a,same,origin,one,based,on,code,origin,and,code,host,headers,p,strong,note,strong,as,of,5,1,this,method,ignores,code,forwarded,and,code,x,forwarded,headers,that,specify,the,client,originated,address,consider,using,the,code,forwarded,header,filter,to,extract,and,use,or,to,discard,such,headers,return,code,true,if,the,request,is,a,same,origin,one,code,false,in,case,of,a,cross,origin,request;public,static,boolean,is,same,origin,server,http,request,request,string,origin,request,get,headers,get,origin,if,origin,null,return,true,uri,uri,request,get,uri,string,actual,scheme,uri,get,scheme,string,actual,host,uri,get,host,int,actual,port,get,port,uri,get,scheme,uri,get,port,assert,not,null,actual,scheme,actual,request,scheme,must,not,be,null,assert,not,null,actual,host,actual,request,host,must,not,be,null,assert,is,true,actual,port,1,actual,request,port,must,not,be,undefined,uri,components,origin,url,uri,components,builder,from,origin,header,origin,build,return,actual,scheme,equals,origin,url,get,scheme,actual,host,equals,origin,url,get,host,actual,port,get,port,origin,url,get,scheme,origin,url,get,port
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1476136805;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1515504834;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1515504834;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1516361410;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1518987682;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1522332352;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1522354261;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1526045499;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isCorsRequest(ServerHttpRequest request);1533723582;Returns {@code true} if the request is a valid CORS one.;public static boolean isCorsRequest(ServerHttpRequest request) {_		return (request.getHeaders().get(HttpHeaders.ORIGIN) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,one;public,static,boolean,is,cors,request,server,http,request,request,return,request,get,headers,get,http,headers,origin,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1476136805;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (isCorsRequest(request) && HttpMethod.OPTIONS == request.getMethod() &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,is,cors,request,request,http,method,options,request,get,method,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1515504834;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (isCorsRequest(request) && HttpMethod.OPTIONS == request.getMethod() &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,is,cors,request,request,http,method,options,request,get,method,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1515504834;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (isCorsRequest(request) && HttpMethod.OPTIONS == request.getMethod() &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,is,cors,request,request,http,method,options,request,get,method,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1516361410;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (isCorsRequest(request) && HttpMethod.OPTIONS == request.getMethod() &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,is,cors,request,request,http,method,options,request,get,method,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1518987682;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,request,get,method,http,method,options,is,cors,request,request,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1522332352;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,request,get,method,http,method,options,is,cors,request,request,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1522354261;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,request,get,method,http,method,options,is,cors,request,request,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1526045499;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,request,get,method,http,method,options,is,cors,request,request,request,get,headers,get,http,headers,null
CorsUtils -> public static boolean isPreFlightRequest(ServerHttpRequest request);1533723582;Returns {@code true} if the request is a valid CORS pre-flight one.;public static boolean isPreFlightRequest(ServerHttpRequest request) {_		return (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&_				request.getHeaders().get(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null)__	};returns,code,true,if,the,request,is,a,valid,cors,pre,flight,one;public,static,boolean,is,pre,flight,request,server,http,request,request,return,request,get,method,http,method,options,is,cors,request,request,request,get,headers,get,http,headers,null
