commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Set the ServletContext for this web application context.  * <p>Does not cause an initialization of the context: refresh needs to be  * called after the setting of all configuration properties.  * @see #refresh()  */ ;/**  * Set the ServletContext for this web application context.  * <p>Does not cause an initialization of the context: refresh needs to be  * called after the setting of all configuration properties.  * @see #refresh()  */ void setServletContext(@Nullable ServletContext servletContext).
true;;1;1;/**  * Set the ServletConfig for this web application context.  * Only called for a WebApplicationContext that belongs to a specific Servlet.  * @see #refresh()  */ ;/**  * Set the ServletConfig for this web application context.  * Only called for a WebApplicationContext that belongs to a specific Servlet.  * @see #refresh()  */ void setServletConfig(@Nullable ServletConfig servletConfig).
true;;0;2;/**  * Return the ServletConfig for this web application context, if any.  */ ;/**  * Return the ServletConfig for this web application context, if any.  */ @Nullable ServletConfig getServletConfig().
true;;1;1;/**  * Set the namespace for this web application context,  * to be used for building a default context config location.  * The root web application context does not have a namespace.  */ ;/**  * Set the namespace for this web application context,  * to be used for building a default context config location.  * The root web application context does not have a namespace.  */ void setNamespace(@Nullable String namespace).
true;;0;2;/**  * Return the namespace for this web application context, if any.  */ ;/**  * Return the namespace for this web application context, if any.  */ @Nullable String getNamespace().
true;;1;1;/**  * Set the config locations for this web application context in init-param style,  * i.e. with distinct locations separated by commas, semicolons or whitespace.  * <p>If not set, the implementation is supposed to use a default for the  * given namespace or the root web application context, as appropriate.  */ ;/**  * Set the config locations for this web application context in init-param style,  * i.e. with distinct locations separated by commas, semicolons or whitespace.  * <p>If not set, the implementation is supposed to use a default for the  * given namespace or the root web application context, as appropriate.  */ void setConfigLocation(String configLocation).
true;;1;1;/**  * Set the config locations for this web application context.  * <p>If not set, the implementation is supposed to use a default for the  * given namespace or the root web application context, as appropriate.  */ ;/**  * Set the config locations for this web application context.  * <p>If not set, the implementation is supposed to use a default for the  * given namespace or the root web application context, as appropriate.  */ void setConfigLocations(String... configLocations).
true;;0;2;/**  * Return the config locations for this web application context,  * or {@code null} if none specified.  */ ;/**  * Return the config locations for this web application context,  * or {@code null} if none specified.  */ @Nullable String[] getConfigLocations().
