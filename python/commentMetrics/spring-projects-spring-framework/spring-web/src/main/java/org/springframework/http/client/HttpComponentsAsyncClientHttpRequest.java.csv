commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getMethodValue() {     return this.httpRequest.getMethod(). }
false;public;0;4;;@Override public URI getURI() {     return this.httpRequest.getURI(). }
false;;0;3;;HttpContext getHttpContext() {     return this.httpContext. }
false;protected;2;16;;@Override protected ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {     HttpComponentsClientHttpRequest.addHeaders(this.httpRequest, headers).     if (this.httpRequest instanceof HttpEntityEnclosingRequest) {         HttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) this.httpRequest.         HttpEntity requestEntity = new NByteArrayEntity(bufferedOutput).         entityEnclosingRequest.setEntity(requestEntity).     }     HttpResponseFutureCallback callback = new HttpResponseFutureCallback(this.httpRequest).     Future<HttpResponse> futureResponse = this.httpClient.execute(this.httpRequest, this.httpContext, callback).     return new ClientHttpResponseFuture(futureResponse, callback). }
false;public;1;3;;public void addCallback(ListenableFutureCallback<? super ClientHttpResponse> callback) {     this.callbacks.addCallback(callback). }
false;public;1;3;;public void addSuccessCallback(SuccessCallback<? super ClientHttpResponse> callback) {     this.callbacks.addSuccessCallback(callback). }
false;public;1;3;;public void addFailureCallback(FailureCallback callback) {     this.callbacks.addFailureCallback(callback). }
false;public;1;4;;@Override public void completed(HttpResponse result) {     this.callbacks.success(new HttpComponentsAsyncClientHttpResponse(result)). }
false;public;1;4;;@Override public void failed(Exception ex) {     this.callbacks.failure(ex). }
false;public;0;4;;@Override public void cancelled() {     this.request.abort(). }
false;protected;1;4;;@Override protected ClientHttpResponse adapt(HttpResponse response) {     return new HttpComponentsAsyncClientHttpResponse(response). }
false;public;1;4;;@Override public void addCallback(ListenableFutureCallback<? super ClientHttpResponse> callback) {     this.callback.addCallback(callback). }
false;public;2;7;;@Override public void addCallback(SuccessCallback<? super ClientHttpResponse> successCallback, FailureCallback failureCallback) {     this.callback.addSuccessCallback(successCallback).     this.callback.addFailureCallback(failureCallback). }
