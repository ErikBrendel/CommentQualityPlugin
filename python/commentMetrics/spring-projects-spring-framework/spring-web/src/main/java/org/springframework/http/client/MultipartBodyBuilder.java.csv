# id;timestamp;commentText;codeText;commentWords;codeWords
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			Class<T> elementClass);1513874427;Adds a {@link Publisher} part to this builder, allowing for further header customization with_the returned {@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param publisher the contents of the part to add_@param elementClass the class of elements contained in the publisher_@return a builder that allows for further header customization;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			Class<T> elementClass) {__		Assert.notNull(elementClass, "'elementClass' must not be null")__		ResolvableType elementType = ResolvableType.forClass(elementClass)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")___		HttpHeaders partHeaders = new HttpHeaders()__		PublisherClassPartBuilder<T, P> builder =_				new PublisherClassPartBuilder<>(publisher, elementClass, partHeaders)__		this.parts.add(name, builder)__		return builder___	};adds,a,link,publisher,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,publisher,the,contents,of,the,part,to,add,param,element,class,the,class,of,elements,contained,in,the,publisher,return,a,builder,that,allows,for,further,header,customization;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,resolvable,type,element,type,resolvable,type,for,class,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,http,headers,part,headers,new,http,headers,publisher,class,part,builder,t,p,builder,new,publisher,class,part,builder,publisher,element,class,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			Class<T> elementClass);1513946641;Adds a {@link Publisher} part to this builder, allowing for further header customization with_the returned {@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param publisher the contents of the part to add_@param elementClass the class of elements contained in the publisher_@return a builder that allows for further header customization;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			Class<T> elementClass) {__		Assert.notNull(elementClass, "'elementClass' must not be null")__		ResolvableType elementType = ResolvableType.forClass(elementClass)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")___		HttpHeaders partHeaders = new HttpHeaders()__		PublisherPartBuilder<T, P> builder =_				new PublisherPartBuilder<>(publisher, elementClass, partHeaders)__		this.parts.add(name, builder)__		return builder___	};adds,a,link,publisher,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,publisher,the,contents,of,the,part,to,add,param,element,class,the,class,of,elements,contained,in,the,publisher,return,a,builder,that,allows,for,further,header,customization;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,resolvable,type,element,type,resolvable,type,for,class,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,http,headers,part,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,publisher,element,class,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			Class<T> elementClass);1516457900;Adds a {@link Publisher} part to this builder, allowing for further header customization with_the returned {@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param publisher the contents of the part to add_@param elementClass the class of elements contained in the publisher_@return a builder that allows for further header customization;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			Class<T> elementClass) {__		Assert.notNull(elementClass, "'elementClass' must not be null")__		ResolvableType elementType = ResolvableType.forClass(elementClass)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")___		HttpHeaders partHeaders = new HttpHeaders()__		PublisherPartBuilder<T, P> builder =_				new PublisherPartBuilder<>(publisher, elementClass, partHeaders)__		this.parts.add(name, builder)__		return builder___	};adds,a,link,publisher,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,publisher,the,contents,of,the,part,to,add,param,element,class,the,class,of,elements,contained,in,the,publisher,return,a,builder,that,allows,for,further,header,customization;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,resolvable,type,element,type,resolvable,type,for,class,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,http,headers,part,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,publisher,element,class,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			Class<T> elementClass);1521231485;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			Class<T> elementClass) {__		Assert.notNull(elementClass, "'elementClass' must not be null")__		ResolvableType elementType = ResolvableType.forClass(elementClass)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass)__		this.parts.add(name, builder)__		return builder___	};add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,resolvable,type,element,type,resolvable,type,for,class,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,element,class,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			Class<T> elementClass);1521231485;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			Class<T> elementClass) {__		Assert.notNull(elementClass, "'elementClass' must not be null")__		ResolvableType elementType = ResolvableType.forClass(elementClass)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass)__		this.parts.add(name, builder)__		return builder___	};add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,resolvable,type,element,type,resolvable,type,for,class,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,element,class,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			ParameterizedTypeReference<T> typeReference);1513946641;Adds a {@link Publisher} part to this builder, allowing for further header customization with_the returned {@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param publisher the contents of the part to add_@param typeReference the type of elements contained in the publisher_@return a builder that allows for further header customization;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(typeReference, "'typeReference' must not be null")__		ResolvableType elementType1 = ResolvableType.forType(typeReference)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType1, "'typeReference' must not be null")___		HttpHeaders partHeaders = new HttpHeaders()__		PublisherPartBuilder<T, P> builder =_				new PublisherPartBuilder<>(publisher, typeReference, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,link,publisher,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,publisher,the,contents,of,the,part,to,add,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,a,builder,that,allows,for,further,header,customization;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,resolvable,type,element,type1,resolvable,type,for,type,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type1,type,reference,must,not,be,null,http,headers,part,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,publisher,type,reference,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			ParameterizedTypeReference<T> typeReference);1516457900;Adds a {@link Publisher} part to this builder, allowing for further header customization with_the returned {@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param publisher the contents of the part to add_@param typeReference the type of elements contained in the publisher_@return a builder that allows for further header customization;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(typeReference, "'typeReference' must not be null")__		ResolvableType elementType1 = ResolvableType.forType(typeReference)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType1, "'typeReference' must not be null")___		HttpHeaders partHeaders = new HttpHeaders()__		PublisherPartBuilder<T, P> builder =_				new PublisherPartBuilder<>(publisher, typeReference, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,link,publisher,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,publisher,the,contents,of,the,part,to,add,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,a,builder,that,allows,for,further,header,customization;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,resolvable,type,element,type1,resolvable,type,for,type,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type1,type,reference,must,not,be,null,http,headers,part,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,publisher,type,reference,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			ParameterizedTypeReference<T> typeReference);1521231485;Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the name of the part to add_@param publisher the part contents_@param typeReference the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(typeReference, "'typeReference' must not be null")__		ResolvableType elementType1 = ResolvableType.forType(typeReference)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType1, "'typeReference' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(publisher, typeReference, headers)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,async,part,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,resolvable,type,element,type1,resolvable,type,for,type,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type1,type,reference,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,publisher,type,reference,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, 			ParameterizedTypeReference<T> typeReference);1521231485;Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the name of the part to add_@param publisher the part contents_@param typeReference the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher,_			ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(typeReference, "'typeReference' must not be null")__		ResolvableType elementType1 = ResolvableType.forType(typeReference)__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType1, "'typeReference' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,async,part,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,resolvable,type,element,type1,resolvable,type,for,type,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type1,type,reference,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,type,reference,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass);1524865018;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass)__		this.parts.add(name, builder)__		return builder___	};add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,element,class,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass);1530174524;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass)__		this.parts.add(name, builder)__		return builder___	};add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,element,class,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass);1530190293;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass)__		this.parts.add(name, builder)__		return builder___	};add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,class,t,element,class,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,element,class,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1509961331;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@param contentType the {@code Content-Type} header for the part (may be {@code null})_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}_		DefaultPartBuilder builder = new DefaultPartBuilder(partBody, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,param,content,type,the,code,content,type,header,for,the,part,may,be,code,null,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,body,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1509980418;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@param contentType the {@code Content-Type} header for the part (may be {@code null})_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}_		DefaultPartBuilder builder = new DefaultPartBuilder(partBody, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,param,content,type,the,code,content,type,header,for,the,part,may,be,code,null,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,body,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1513874427;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@param contentType the {@code Content-Type} header for the part (may be {@code null})_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}_		DefaultPartBuilder builder = new DefaultPartBuilder(partBody, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,param,content,type,the,code,content,type,header,for,the,part,may,be,code,null,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,body,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1513946641;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@param contentType the {@code Content-Type} header for the part (may be {@code null})_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}_		DefaultPartBuilder builder = new DefaultPartBuilder(partBody, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,param,content,type,the,code,content,type,header,for,the,part,may,be,code,null,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,body,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1516457900;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@param contentType the {@code Content-Type} header for the part (may be {@code null})_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}_		DefaultPartBuilder builder = new DefaultPartBuilder(partBody, partHeaders)__		this.parts.add(name, builder)__		return builder__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,param,content,type,the,code,content,type,header,for,the,part,may,be,code,null,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,body,part,headers,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1521231485;Variant of {@link #part(String, Object)} that also accepts a MediaType_which is used to determine how to encode the part._@param name the name of the part to add_@param part the part data_@param contentType the media type for the part_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}__		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,part,string,object,that,also,accepts,a,media,type,which,is,used,to,determine,how,to,encode,the,part,param,name,the,name,of,the,part,to,add,param,part,the,part,data,param,content,type,the,media,type,for,the,part,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,headers,part,body,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1521231485;Variant of {@link #part(String, Object)} that also accepts a MediaType_which is used to determine how to encode the part._@param name the name of the part to add_@param part the part data_@param contentType the media type for the part_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		if (part instanceof PublisherEntity<?,?>) {_			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part)__			this.parts.add(name, builder)__			return builder__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}__		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,part,string,object,that,also,accepts,a,media,type,which,is,used,to,determine,how,to,encode,the,part,param,name,the,name,of,the,part,to,add,param,part,the,part,data,param,content,type,the,media,type,for,the,part,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,if,part,instanceof,publisher,entity,publisher,part,builder,builder,new,publisher,part,builder,publisher,entity,part,this,parts,add,name,builder,return,builder,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,headers,part,body,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1524865018;Variant of {@link #part(String, Object)} that also accepts a MediaType_which is used to determine how to encode the part._@param name the name of the part to add_@param part the part data_@param contentType the media type for the part_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		if (part instanceof PublisherEntity<?,?>) {_			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part)__			this.parts.add(name, builder)__			return builder__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}__		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,part,string,object,that,also,accepts,a,media,type,which,is,used,to,determine,how,to,encode,the,part,param,name,the,name,of,the,part,to,add,param,part,the,part,data,param,content,type,the,media,type,for,the,part,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,if,part,instanceof,publisher,entity,publisher,part,builder,builder,new,publisher,part,builder,publisher,entity,part,this,parts,add,name,builder,return,builder,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,headers,part,body,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1530174524;Variant of {@link #part(String, Object)} that also accepts a MediaType_which is used to determine how to encode the part._@param name the name of the part to add_@param part the part data_@param contentType the media type for the part_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		if (part instanceof PublisherEntity<?,?>) {_			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part)__			this.parts.add(name, builder)__			return builder__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> other = (HttpEntity<?>) part__			partBody = other.getBody()__			partHeaders.addAll(other.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}__		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,part,string,object,that,also,accepts,a,media,type,which,is,used,to,determine,how,to,encode,the,part,param,name,the,name,of,the,part,to,add,param,part,the,part,data,param,content,type,the,media,type,for,the,part,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,if,part,instanceof,publisher,entity,publisher,part,builder,builder,new,publisher,part,builder,publisher,entity,part,this,parts,add,name,builder,return,builder,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,other,http,entity,part,part,body,other,get,body,part,headers,add,all,other,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,headers,part,body,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public PartBuilder part(String name, Object part, @Nullable MediaType contentType);1530190293;Variant of {@link #part(String, Object)} that also accepts a MediaType_which is used to determine how to encode the part._@param name the name of the part to add_@param part the part data_@param contentType the media type for the part_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part, @Nullable MediaType contentType) {_		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(part, "'part' must not be null")___		if (part instanceof Publisher) {_			throw new IllegalArgumentException("Use publisher(String, Publisher, Class) or " +_				"publisher(String, Publisher, ParameterizedTypeReference) for adding Publisher parts")__		}__		if (part instanceof PublisherEntity<?,?>) {_			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part)__			this.parts.add(name, builder)__			return builder__		}__		Object partBody__		HttpHeaders partHeaders = new HttpHeaders()___		if (part instanceof HttpEntity) {_			HttpEntity<?> httpEntity = (HttpEntity<?>) part__			partBody = httpEntity.getBody()__			partHeaders.addAll(httpEntity.getHeaders())__		}_		else {_			partBody = part__		}__		if (contentType != null) {_			partHeaders.setContentType(contentType)__		}__		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,part,string,object,that,also,accepts,a,media,type,which,is,used,to,determine,how,to,encode,the,part,param,name,the,name,of,the,part,to,add,param,part,the,part,data,param,content,type,the,media,type,for,the,part,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,nullable,media,type,content,type,assert,has,length,name,name,must,not,be,empty,assert,not,null,part,part,must,not,be,null,if,part,instanceof,publisher,throw,new,illegal,argument,exception,use,publisher,string,publisher,class,or,publisher,string,publisher,parameterized,type,reference,for,adding,publisher,parts,if,part,instanceof,publisher,entity,publisher,part,builder,builder,new,publisher,part,builder,publisher,entity,part,this,parts,add,name,builder,return,builder,object,part,body,http,headers,part,headers,new,http,headers,if,part,instanceof,http,entity,http,entity,http,entity,http,entity,part,part,body,http,entity,get,body,part,headers,add,all,http,entity,get,headers,else,part,body,part,if,content,type,null,part,headers,set,content,type,content,type,default,part,builder,builder,new,default,part,builder,part,headers,part,body,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1509961331;Builds the multipart body._@return the built body;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};builds,the,multipart,body,return,the,built,body;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1509980418;Builds the multipart body._@return the built body;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};builds,the,multipart,body,return,the,built,body;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1513874427;Builds the multipart body._@return the built body;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};builds,the,multipart,body,return,the,built,body;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1513946641;Builds the multipart body._@return the built body;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};builds,the,multipart,body,return,the,built,body;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1516457900;Builds the multipart body._@return the built body;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};builds,the,multipart,body,return,the,built,body;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1521231485;Return a {@code MultiValueMap} with the configured parts.;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};return,a,code,multi,value,map,with,the,configured,parts;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1521231485;Return a {@code MultiValueMap} with the configured parts.;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};return,a,code,multi,value,map,with,the,configured,parts;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1524865018;Return a {@code MultiValueMap} with the configured parts.;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};return,a,code,multi,value,map,with,the,configured,parts;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1530174524;Return a {@code MultiValueMap} with the configured parts.;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};return,a,code,multi,value,map,with,the,configured,parts;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public MultiValueMap<String, HttpEntity<?>> build();1530190293;Return a {@code MultiValueMap} with the configured parts.;public MultiValueMap<String, HttpEntity<?>> build() {_		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size())__		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {_			for (DefaultPartBuilder builder : entry.getValue()) {_				HttpEntity<?> entity = builder.build()__				result.add(entry.getKey(), entity)__			}_		}_		return result__	};return,a,code,multi,value,map,with,the,configured,parts;public,multi,value,map,string,http,entity,build,multi,value,map,string,http,entity,result,new,linked,multi,value,map,this,parts,size,for,map,entry,string,list,default,part,builder,entry,this,parts,entry,set,for,default,part,builder,builder,entry,get,value,http,entity,entity,builder,build,result,add,entry,get,key,entity,return,result
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1509961331;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1509980418;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1513874427;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1513946641;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1516457900;Adds a part to this builder, allowing for further header customization with the returned_{@link PartBuilder}._@param name the name of the part to add (may not be empty)_@param part the part to add_@return a builder that allows for further header customization;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};adds,a,part,to,this,builder,allowing,for,further,header,customization,with,the,returned,link,part,builder,param,name,the,name,of,the,part,to,add,may,not,be,empty,param,part,the,part,to,add,return,a,builder,that,allows,for,further,header,customization;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1521231485;Add a part from an Object._@param name the name of the part to add_@param part the part data_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};add,a,part,from,an,object,param,name,the,name,of,the,part,to,add,param,part,the,part,data,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1521231485;Add a part from an Object._@param name the name of the part to add_@param part the part data_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};add,a,part,from,an,object,param,name,the,name,of,the,part,to,add,param,part,the,part,data,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1524865018;Add a part from an Object._@param name the name of the part to add_@param part the part data_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};add,a,part,from,an,object,param,name,the,name,of,the,part,to,add,param,part,the,part,data,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1530174524;Add a part from an Object._@param name the name of the part to add_@param part the part data_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};add,a,part,from,an,object,param,name,the,name,of,the,part,to,add,param,part,the,part,data,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> public PartBuilder part(String name, Object part);1530190293;Add a part from an Object._@param name the name of the part to add_@param part the part data_@return builder that allows for further customization of part headers;public PartBuilder part(String name, Object part) {_		return part(name, part, null)__	};add,a,part,from,an,object,param,name,the,name,of,the,part,to,add,param,part,the,part,data,return,builder,that,allows,for,further,customization,of,part,headers;public,part,builder,part,string,name,object,part,return,part,name,part,null
MultipartBodyBuilder -> PartBuilder -> PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;1516457900;Manipulate the part's headers with the given consumer._@param headersConsumer a function that consumes the {@code HttpHeaders}_@return this builder;PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;manipulate,the,part,s,headers,with,the,given,consumer,param,headers,consumer,a,function,that,consumes,the,code,http,headers,return,this,builder;part,builder,headers,consumer,http,headers,headers,consumer
MultipartBodyBuilder -> PartBuilder -> PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;1521231485;Manipulate the part headers through the given consumer._@param headersConsumer consumer to manipulate the part headers with_@return this builder;PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;manipulate,the,part,headers,through,the,given,consumer,param,headers,consumer,consumer,to,manipulate,the,part,headers,with,return,this,builder;part,builder,headers,consumer,http,headers,headers,consumer
MultipartBodyBuilder -> PartBuilder -> PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;1521231485;Manipulate the part headers through the given consumer._@param headersConsumer consumer to manipulate the part headers with_@return this builder;PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;manipulate,the,part,headers,through,the,given,consumer,param,headers,consumer,consumer,to,manipulate,the,part,headers,with,return,this,builder;part,builder,headers,consumer,http,headers,headers,consumer
MultipartBodyBuilder -> PartBuilder -> PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;1524865018;Manipulate the part headers through the given consumer._@param headersConsumer consumer to manipulate the part headers with_@return this builder;PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;manipulate,the,part,headers,through,the,given,consumer,param,headers,consumer,consumer,to,manipulate,the,part,headers,with,return,this,builder;part,builder,headers,consumer,http,headers,headers,consumer
MultipartBodyBuilder -> PartBuilder -> PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;1530174524;Manipulate the part headers through the given consumer._@param headersConsumer consumer to manipulate the part headers with_@return this builder;PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;manipulate,the,part,headers,through,the,given,consumer,param,headers,consumer,consumer,to,manipulate,the,part,headers,with,return,this,builder;part,builder,headers,consumer,http,headers,headers,consumer
MultipartBodyBuilder -> PartBuilder -> PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;1530190293;Manipulate the part headers through the given consumer._@param headersConsumer consumer to manipulate the part headers with_@return this builder;PartBuilder headers(Consumer<HttpHeaders> headersConsumer)_;manipulate,the,part,headers,through,the,given,consumer,param,headers,consumer,consumer,to,manipulate,the,part,headers,with,return,this,builder;part,builder,headers,consumer,http,headers,headers,consumer
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1509961331;Add the given part-specific header values under the given name._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#add(String, String);PartBuilder header(String headerName, String... headerValues)_;add,the,given,part,specific,header,values,under,the,given,name,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,string,string;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1509980418;Add the given part-specific header values under the given name._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#add(String, String);PartBuilder header(String headerName, String... headerValues)_;add,the,given,part,specific,header,values,under,the,given,name,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,string,string;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1513874427;Add the given part-specific header values under the given name._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#add(String, String);PartBuilder header(String headerName, String... headerValues)_;add,the,given,part,specific,header,values,under,the,given,name,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,string,string;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1513946641;Add the given part-specific header values under the given name._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#add(String, String);PartBuilder header(String headerName, String... headerValues)_;add,the,given,part,specific,header,values,under,the,given,name,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,string,string;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1516457900;Add the given part-specific header values under the given name._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#add(String, String);PartBuilder header(String headerName, String... headerValues)_;add,the,given,part,specific,header,values,under,the,given,name,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,string,string;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1521231485;Add part header values._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#addAll(String, List);PartBuilder header(String headerName, String... headerValues)_;add,part,header,values,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,all,string,list;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1521231485;Add part header values._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#addAll(String, List);PartBuilder header(String headerName, String... headerValues)_;add,part,header,values,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,all,string,list;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1524865018;Add part header values._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#addAll(String, List);PartBuilder header(String headerName, String... headerValues)_;add,part,header,values,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,all,string,list;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1530174524;Add part header values._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#addAll(String, List);PartBuilder header(String headerName, String... headerValues)_;add,part,header,values,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,all,string,list;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> PartBuilder -> PartBuilder header(String headerName, String... headerValues)_;1530190293;Add part header values._@param headerName the part header name_@param headerValues the part header value(s)_@return this builder_@see HttpHeaders#addAll(String, List);PartBuilder header(String headerName, String... headerValues)_;add,part,header,values,param,header,name,the,part,header,name,param,header,values,the,part,header,value,s,return,this,builder,see,http,headers,add,all,string,list;part,builder,header,string,header,name,string,header,values
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1524865018;Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the name of the part to add_@param publisher the part contents_@param typeReference the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,async,part,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,type,reference,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1530174524;Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the name of the part to add_@param publisher the part contents_@param typeReference the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,async,part,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,type,reference,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> public <T, P extends Publisher<T>> PartBuilder asyncPart( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1530190293;Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the name of the part to add_@param publisher the part contents_@param typeReference the type of elements contained in the publisher_@return builder that allows for further customization of part headers;public <T, P extends Publisher<T>> PartBuilder asyncPart(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.hasLength(name, "'name' must not be empty")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		HttpHeaders headers = new HttpHeaders()__		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference)__		this.parts.add(name, builder)__		return builder__	};variant,of,link,async,part,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,type,reference,the,type,of,elements,contained,in,the,publisher,return,builder,that,allows,for,further,customization,of,part,headers;public,t,p,extends,publisher,t,part,builder,async,part,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,has,length,name,name,must,not,be,empty,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,http,headers,headers,new,http,headers,publisher,part,builder,t,p,builder,new,publisher,part,builder,headers,publisher,type,reference,this,parts,add,name,builder,return,builder
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1513946641;Return the resolvable type for this entry.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,resolvable,type,for,this,entry;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1516457900;Return the resolvable type for this entry.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,resolvable,type,for,this,entry;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1521231485;Return the element type for the {@code Publisher} body.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,element,type,for,the,code,publisher,body;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1521231485;Return the element type for the {@code Publisher} body.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,element,type,for,the,code,publisher,body;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1524865018;Return the element type for the {@code Publisher} body.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,element,type,for,the,code,publisher,body;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1530174524;Return the element type for the {@code Publisher} body.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,element,type,for,the,code,publisher,body;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> PublisherEntity -> public ResolvableType getResolvableType();1530190293;Return the element type for the {@code Publisher} body.;public ResolvableType getResolvableType() {_			return this.resolvableType__		};return,the,element,type,for,the,code,publisher,body;public,resolvable,type,get,resolvable,type,return,this,resolvable,type
MultipartBodyBuilder -> public MultipartBodyBuilder();1509961331;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1509980418;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1513874427;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1513946641;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1516457900;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1521231485;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1521231485;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1524865018;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1530174524;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
MultipartBodyBuilder -> public MultipartBodyBuilder();1530190293;Creates a new, empty instance of the {@code MultipartBodyBuilder}.;public MultipartBodyBuilder() {_	};creates,a,new,empty,instance,of,the,code,multipart,body,builder;public,multipart,body,builder
