# id;timestamp;commentText;codeText;commentWords;codeWords
HttpRange -> public static String toString(Collection<HttpRange> ranges);1426880143;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			range.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,range,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1426880143;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notNull(ranges)__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			range.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,null,ranges,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,range,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1426897141;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1438251419;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1462208452;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1462528971;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1465306936;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1467730834;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1470831642;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1472594218;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1472602111;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1491319010;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1496259743;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1496837955;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1498780456;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static String toString(Collection<HttpRange> ranges);1539571765;Return a string representation of the given list of {@code HttpRange} objects._<p>This method can be used to for an {@code Range} header._@param ranges the ranges to create a string of_@return the string representation;public static String toString(Collection<HttpRange> ranges) {_		Assert.notEmpty(ranges, "Ranges Collection must not be empty")__		StringBuilder builder = new StringBuilder(BYTE_RANGE_PREFIX)__		for (Iterator<HttpRange> iterator = ranges.iterator()_ iterator.hasNext()_ ) {_			HttpRange range = iterator.next()__			builder.append(range)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,http,range,objects,p,this,method,can,be,used,to,for,an,code,range,header,param,ranges,the,ranges,to,create,a,string,of,return,the,string,representation;public,static,string,to,string,collection,http,range,ranges,assert,not,empty,ranges,ranges,collection,must,not,be,empty,string,builder,builder,new,string,builder,for,iterator,http,range,iterator,ranges,iterator,iterator,has,next,http,range,range,iterator,next,builder,append,range,if,iterator,has,next,builder,append,return,builder,to,string
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1426880143;Creates a {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};creates,a,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1426880143;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1426897141;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1438251419;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1462208452;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1462528971;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1465306936;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1467730834;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1470831642;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1472594218;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1472602111;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1491319010;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1496259743;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1496837955;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1498780456;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static HttpRange createSuffixRange(long suffixLength);1539571765;Create an {@code HttpRange} that ranges over the last given number of bytes._@param suffixLength the number of bytes for the range_@return a byte range that ranges over the last {@code suffixLength} number of bytes_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createSuffixRange(long suffixLength) {_		return new SuffixByteRange(suffixLength)__	};create,an,code,http,range,that,ranges,over,the,last,given,number,of,bytes,param,suffix,length,the,number,of,bytes,for,the,range,return,a,byte,range,that,ranges,over,the,last,code,suffix,length,number,of,bytes,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,suffix,range,long,suffix,length,return,new,suffix,byte,range,suffix,length
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1462208452;Convert each {@code HttpRange} into a {@code ResourceRegion},_selecting the appropriate segment of the given {@code Resource}_using the HTTP Range information.__@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if(ranges == null || ranges.size() == 0) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<ResourceRegion>(ranges.size())__		for(HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,the,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,ranges,null,ranges,size,0,return,collections,empty,list,list,resource,region,regions,new,array,list,resource,region,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1462528971;Convert each {@code HttpRange} into a {@code ResourceRegion},_selecting the appropriate segment of the given {@code Resource}_using the HTTP Range information.__@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if(ranges == null || ranges.size() == 0) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<ResourceRegion>(ranges.size())__		for(HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,the,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,ranges,null,ranges,size,0,return,collections,empty,list,list,resource,region,regions,new,array,list,resource,region,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1465306936;Convert each {@code HttpRange} into a {@code ResourceRegion},_selecting the appropriate segment of the given {@code Resource}_using the HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if(ranges == null || ranges.size() == 0) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<ResourceRegion>(ranges.size())__		for(HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,the,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,ranges,null,ranges,size,0,return,collections,empty,list,list,resource,region,regions,new,array,list,resource,region,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1467730834;Convert each {@code HttpRange} into a {@code ResourceRegion},_selecting the appropriate segment of the given {@code Resource}_using the HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if(ranges == null || ranges.size() == 0) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for(HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,the,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,ranges,null,ranges,size,0,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1470831642;Convert each {@code HttpRange} into a {@code ResourceRegion},_selecting the appropriate segment of the given {@code Resource}_using the HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,the,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1472594218;Convert each {@code HttpRange} into a {@code ResourceRegion},_selecting the appropriate segment of the given {@code Resource}_using the HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,the,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1472602111;Convert each {@code HttpRange} into a {@code ResourceRegion}, selecting the_appropriate segment of the given {@code Resource} using HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource_@since 4.3;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource,since,4,3;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1491319010;Convert each {@code HttpRange} into a {@code ResourceRegion}, selecting the_appropriate segment of the given {@code Resource} using HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource_@since 4.3;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource,since,4,3;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1496259743;Convert each {@code HttpRange} into a {@code ResourceRegion}, selecting the_appropriate segment of the given {@code Resource} using HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource_@since 4.3;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource,since,4,3;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1496837955;Convert each {@code HttpRange} into a {@code ResourceRegion}, selecting the_appropriate segment of the given {@code Resource} using HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource_@since 4.3;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource,since,4,3;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1498780456;Convert each {@code HttpRange} into a {@code ResourceRegion}, selecting the_appropriate segment of the given {@code Resource} using HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource_@since 4.3;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource,since,4,3;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,return,regions
HttpRange -> public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource);1539571765;Convert each {@code HttpRange} into a {@code ResourceRegion}, selecting the_appropriate segment of the given {@code Resource} using HTTP Range information._@param ranges the list of ranges_@param resource the resource to select the regions from_@return the list of regions for the given resource_@throws IllegalArgumentException if the sum of all ranges exceeds the_resource length._@since 4.3;public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {_		if (CollectionUtils.isEmpty(ranges)) {_			return Collections.emptyList()__		}_		List<ResourceRegion> regions = new ArrayList<>(ranges.size())__		for (HttpRange range : ranges) {_			regions.add(range.toResourceRegion(resource))__		}_		if (ranges.size() > 1) {_			long length = getLengthFor(resource)__			long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count)__			Assert.isTrue(total < length,_					() -> "The sum of all ranges (" + total + ") " +_							"should be less than the resource length (" + length + ")")__		}_		return regions__	};convert,each,code,http,range,into,a,code,resource,region,selecting,the,appropriate,segment,of,the,given,code,resource,using,http,range,information,param,ranges,the,list,of,ranges,param,resource,the,resource,to,select,the,regions,from,return,the,list,of,regions,for,the,given,resource,throws,illegal,argument,exception,if,the,sum,of,all,ranges,exceeds,the,resource,length,since,4,3;public,static,list,resource,region,to,resource,regions,list,http,range,ranges,resource,resource,if,collection,utils,is,empty,ranges,return,collections,empty,list,list,resource,region,regions,new,array,list,ranges,size,for,http,range,range,ranges,regions,add,range,to,resource,region,resource,if,ranges,size,1,long,length,get,length,for,resource,long,total,regions,stream,map,resource,region,get,count,reduce,0l,count,sum,sum,count,assert,is,true,total,length,the,sum,of,all,ranges,total,should,be,less,than,the,resource,length,length,return,regions
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1426880143;Creates a {@code HttpRange} that ranges from the given position to the end of the_representation._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstBytePos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};creates,a,code,http,range,that,ranges,from,the,given,position,to,the,end,of,the,representation,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,byte,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1426880143;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1426897141;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1438251419;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1462208452;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1462528971;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1465306936;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1467730834;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1470831642;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1472594218;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1472602111;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1491319010;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1496259743;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1496837955;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1498780456;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public static HttpRange createByteRange(long firstBytePos);1539571765;Create an {@code HttpRange} from the given position to the end._@param firstBytePos the first byte position_@return a byte range that ranges from {@code firstPos} till the end_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos) {_		return new ByteRange(firstBytePos, null)__	};create,an,code,http,range,from,the,given,position,to,the,end,param,first,byte,pos,the,first,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,the,end,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,return,new,byte,range,first,byte,pos,null
HttpRange -> public abstract long getRangeEnd(long length)_;1426880143;Return the end of this range (inclusive), given the total length of the_representation._@param length the length of the representation._@return the end of this range;public abstract long getRangeEnd(long length)_;return,the,end,of,this,range,inclusive,given,the,total,length,of,the,representation,param,length,the,length,of,the,representation,return,the,end,of,this,range;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1426880143;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1426897141;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1438251419;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1462208452;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1462528971;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1465306936;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1467730834;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1470831642;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1472594218;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1472602111;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1491319010;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1496259743;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1496837955;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1498780456;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public abstract long getRangeEnd(long length)_;1539571765;Return the end of the range (inclusive) given the total length of a representation._@param length the length of the representation_@return the end of the range for the representation;public abstract long getRangeEnd(long length)_;return,the,end,of,the,range,inclusive,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,end,of,the,range,for,the,representation;public,abstract,long,get,range,end,long,length
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1462208452;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3.0;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(InputStreamResource.class != resource.getClass(),_				"Can't convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException exc) {_			throw new IllegalArgumentException("Can't convert this Resource to a ResourceRegion", exc)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3,0;public,resource,region,to,resource,region,resource,resource,assert,is,true,input,stream,resource,class,resource,get,class,can,t,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,exc,throw,new,illegal,argument,exception,can,t,convert,this,resource,to,a,resource,region,exc
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1462528971;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(InputStreamResource.class != resource.getClass(),_				"Can't convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException exc) {_			throw new IllegalArgumentException("Can't convert this Resource to a ResourceRegion", exc)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,input,stream,resource,class,resource,get,class,can,t,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,exc,throw,new,illegal,argument,exception,can,t,convert,this,resource,to,a,resource,region,exc
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1465306936;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(InputStreamResource.class != resource.getClass(),_				"Can't convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,input,stream,resource,class,resource,get,class,can,t,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1467730834;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(InputStreamResource.class != resource.getClass(),_				"Can't convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,input,stream,resource,class,resource,get,class,can,t,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1470831642;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(InputStreamResource.class != resource.getClass(),_				"Can't convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,input,stream,resource,class,resource,get,class,can,t,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1472594218;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(InputStreamResource.class != resource.getClass(),_				"Can't convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,input,stream,resource,class,resource,get,class,can,t,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1472602111;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(resource.getClass() != InputStreamResource.class,_				"Cannot convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,resource,get,class,input,stream,resource,class,cannot,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1491319010;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(resource.getClass() != InputStreamResource.class,_				"Cannot convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,resource,get,class,input,stream,resource,class,cannot,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1496259743;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(resource.getClass() != InputStreamResource.class,_				"Cannot convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,resource,get,class,input,stream,resource,class,cannot,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1496837955;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(resource.getClass() != InputStreamResource.class,_				"Cannot convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,resource,get,class,input,stream,resource,class,cannot,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1498780456;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(resource.getClass() != InputStreamResource.class,_				"Cannot convert an InputStreamResource to a ResourceRegion")__		try {_			long contentLength = resource.contentLength()__			Assert.isTrue(contentLength > 0, "Resource content length should be > 0")__			long start = getRangeStart(contentLength)__			long end = getRangeEnd(contentLength)__			return new ResourceRegion(resource, start, end - start + 1)__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex)__		}_	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,resource,get,class,input,stream,resource,class,cannot,convert,an,input,stream,resource,to,a,resource,region,try,long,content,length,resource,content,length,assert,is,true,content,length,0,resource,content,length,should,be,0,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1,catch,ioexception,ex,throw,new,illegal,argument,exception,failed,to,convert,resource,to,resource,region,ex
HttpRange -> public ResourceRegion toResourceRegion(Resource resource);1539571765;Turn a {@code Resource} into a {@link ResourceRegion} using the range_information contained in the current {@code HttpRange}._@param resource the {@code Resource} to select the region from_@return the selected region of the given {@code Resource}_@since 4.3;public ResourceRegion toResourceRegion(Resource resource) {_		_		_		Assert.isTrue(resource.getClass() != InputStreamResource.class,_				"Cannot convert an InputStreamResource to a ResourceRegion")__		long contentLength = getLengthFor(resource)__		long start = getRangeStart(contentLength)__		long end = getRangeEnd(contentLength)__		return new ResourceRegion(resource, start, end - start + 1)__	};turn,a,code,resource,into,a,link,resource,region,using,the,range,information,contained,in,the,current,code,http,range,param,resource,the,code,resource,to,select,the,region,from,return,the,selected,region,of,the,given,code,resource,since,4,3;public,resource,region,to,resource,region,resource,resource,assert,is,true,resource,get,class,input,stream,resource,class,cannot,convert,an,input,stream,resource,to,a,resource,region,long,content,length,get,length,for,resource,long,start,get,range,start,content,length,long,end,get,range,end,content,length,return,new,resource,region,resource,start,end,start,1
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1426880143;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range \"" + ranges + "\" does not " +_					"start with \"" + BYTE_RANGE_PREFIX + "\"")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1426880143;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1426897141;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1438251419;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1462208452;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1462528971;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1465306936;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,http,range,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1467730834;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1470831642;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = ranges.split(",\\s*")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,ranges,split,s,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1472594218;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1472602111;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1491319010;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(String ranges);1496259743;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1426880143;Creates a {@code HttpRange} that ranges from the given fist position to the given_last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstBytePos} till {@code lastBytePos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		Assert.isTrue(firstBytePos <= lastBytePos,_				"\"firstBytePost\" should be " + "less then or equal to \"lastBytePos\"")__		return new ByteRange(firstBytePos, lastBytePos)__	};creates,a,code,http,range,that,ranges,from,the,given,fist,position,to,the,given,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,byte,pos,till,code,last,byte,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,assert,is,true,first,byte,pos,last,byte,pos,first,byte,post,should,be,less,then,or,equal,to,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1426880143;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1426897141;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1438251419;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1462208452;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1462528971;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1465306936;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1467730834;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1470831642;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1472594218;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1472602111;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1491319010;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1496259743;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1496837955;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1498780456;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static HttpRange createByteRange(long firstBytePos, long lastBytePos);1539571765;Create a {@code HttpRange} from the given fist to last position._@param firstBytePos the first byte position_@param lastBytePos the last byte position_@return a byte range that ranges from {@code firstPos} till {@code lastPos}_@see <a href="http://tools.ietf.org/html/rfc7233#section-2.1">Byte Ranges</a>;public static HttpRange createByteRange(long firstBytePos, long lastBytePos) {_		return new ByteRange(firstBytePos, lastBytePos)__	};create,a,code,http,range,from,the,given,fist,to,last,position,param,first,byte,pos,the,first,byte,position,param,last,byte,pos,the,last,byte,position,return,a,byte,range,that,ranges,from,code,first,pos,till,code,last,pos,see,a,href,http,tools,ietf,org,html,rfc7233,section,2,1,byte,ranges,a;public,static,http,range,create,byte,range,long,first,byte,pos,long,last,byte,pos,return,new,byte,range,first,byte,pos,last,byte,pos
HttpRange -> public static List<HttpRange> parseRanges(@Nullable String ranges);1496837955;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(@Nullable String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,nullable,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(@Nullable String ranges);1498780456;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed;public static List<HttpRange> parseRanges(@Nullable String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,http,range,parse,ranges,nullable,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public static List<HttpRange> parseRanges(@Nullable String ranges);1539571765;Parse the given, comma-separated string into a list of {@code HttpRange} objects._<p>This method can be used to parse an {@code Range} header._@param ranges the string to parse_@return the list of ranges_@throws IllegalArgumentException if the string cannot be parsed, or if_the number of ranges is greater than 100.;public static List<HttpRange> parseRanges(@Nullable String ranges) {_		if (!StringUtils.hasLength(ranges)) {_			return Collections.emptyList()__		}_		if (!ranges.startsWith(BYTE_RANGE_PREFIX)) {_			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='")__		}_		ranges = ranges.substring(BYTE_RANGE_PREFIX.length())___		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",")__		Assert.isTrue(tokens.length <= MAX_RANGES, () -> "Too many ranges " + tokens.length)__		List<HttpRange> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseRange(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,http,range,objects,p,this,method,can,be,used,to,parse,an,code,range,header,param,ranges,the,string,to,parse,return,the,list,of,ranges,throws,illegal,argument,exception,if,the,string,cannot,be,parsed,or,if,the,number,of,ranges,is,greater,than,100;public,static,list,http,range,parse,ranges,nullable,string,ranges,if,string,utils,has,length,ranges,return,collections,empty,list,if,ranges,starts,with,throw,new,illegal,argument,exception,range,ranges,does,not,start,with,bytes,ranges,ranges,substring,length,string,tokens,string,utils,tokenize,to,string,array,ranges,assert,is,true,tokens,length,too,many,ranges,tokens,length,list,http,range,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,range,token,return,result
HttpRange -> public abstract long getRangeStart(long length)_;1426880143;Return the start of this range, given the total length of the representation._@param length the length of the representation._@return the start of this range;public abstract long getRangeStart(long length)_;return,the,start,of,this,range,given,the,total,length,of,the,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1426880143;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1426897141;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1438251419;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1462208452;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1462528971;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1465306936;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1467730834;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1470831642;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1472594218;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1472602111;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1491319010;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1496259743;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1496837955;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1498780456;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
HttpRange -> public abstract long getRangeStart(long length)_;1539571765;Return the start of the range given the total length of a representation._@param length the length of the representation_@return the start of this range for the representation;public abstract long getRangeStart(long length)_;return,the,start,of,the,range,given,the,total,length,of,a,representation,param,length,the,length,of,the,representation,return,the,start,of,this,range,for,the,representation;public,abstract,long,get,range,start,long,length
