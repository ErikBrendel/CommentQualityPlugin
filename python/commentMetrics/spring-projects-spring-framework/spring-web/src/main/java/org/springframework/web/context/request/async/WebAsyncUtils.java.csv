# id;timestamp;commentText;codeText;commentWords;codeWords
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1347908336;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1348061150;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1374163982;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1413848647;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1434010431;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1467667881;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1467677340;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = (WebAsyncManager) webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,web,async,manager,web,request,get,attribute,scope,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1498780410;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = null__		Object asyncManagerAttr = webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManagerAttr instanceof WebAsyncManager) {_			asyncManager = (WebAsyncManager) asyncManagerAttr__		}_		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,null,object,async,manager,attr,web,request,get,attribute,scope,if,async,manager,attr,instanceof,web,async,manager,async,manager,web,async,manager,async,manager,attr,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(WebRequest webRequest);1530174524;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(WebRequest webRequest) {_		int scope = RequestAttributes.SCOPE_REQUEST__		WebAsyncManager asyncManager = null__		Object asyncManagerAttr = webRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, scope)__		if (asyncManagerAttr instanceof WebAsyncManager) {_			asyncManager = (WebAsyncManager) asyncManagerAttr__		}_		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			webRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager, scope)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,web,request,web,request,int,scope,request,attributes,web,async,manager,async,manager,null,object,async,manager,attr,web,request,get,attribute,scope,if,async,manager,attr,instanceof,web,async,manager,async,manager,web,async,manager,async,manager,attr,if,async,manager,null,async,manager,new,web,async,manager,web,request,set,attribute,async,manager,scope,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1347908336;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1348061150;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1374163982;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1413848647;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1434010431;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1467667881;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1467677340;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = (WebAsyncManager) servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,web,async,manager,servlet,request,get,attribute,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1498780410;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = null__		Object asyncManagerAttr = servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManagerAttr instanceof WebAsyncManager) {_			asyncManager = (WebAsyncManager) asyncManagerAttr__		}_		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,null,object,async,manager,attr,servlet,request,get,attribute,if,async,manager,attr,instanceof,web,async,manager,async,manager,web,async,manager,async,manager,attr,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static WebAsyncManager getAsyncManager(ServletRequest servletRequest);1530174524;Obtain the {@link WebAsyncManager} for the current request, or if not_found, create and associate it with the request.;public static WebAsyncManager getAsyncManager(ServletRequest servletRequest) {_		WebAsyncManager asyncManager = null__		Object asyncManagerAttr = servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE)__		if (asyncManagerAttr instanceof WebAsyncManager) {_			asyncManager = (WebAsyncManager) asyncManagerAttr__		}_		if (asyncManager == null) {_			asyncManager = new WebAsyncManager()__			servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager)__		}_		return asyncManager__	};obtain,the,link,web,async,manager,for,the,current,request,or,if,not,found,create,and,associate,it,with,the,request;public,static,web,async,manager,get,async,manager,servlet,request,servlet,request,web,async,manager,async,manager,null,object,async,manager,attr,servlet,request,get,attribute,if,async,manager,attr,instanceof,web,async,manager,async,manager,web,async,manager,async,manager,attr,if,async,manager,null,async,manager,new,web,async,manager,servlet,request,set,attribute,async,manager,return,async,manager
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1347908336;Create an AsyncWebRequest instance._<p>By default an instance of {@link StandardServletAsyncWebRequest} is created_if running in Servlet 3.0 (or higher) environment or as a fallback option an_instance of {@link NoSupportAsyncWebRequest} is returned._@param request the current request_@param response the current response_@return an AsyncWebRequest instance, never {@code null};public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return ClassUtils.hasMethod(ServletRequest.class, "startAsync") ?_				createStandardServletAsyncWebRequest(request, response) : new NoSupportAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,p,by,default,an,instance,of,link,standard,servlet,async,web,request,is,created,if,running,in,servlet,3,0,or,higher,environment,or,as,a,fallback,option,an,instance,of,link,no,support,async,web,request,is,returned,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,class,utils,has,method,servlet,request,class,start,async,create,standard,servlet,async,web,request,request,response,new,no,support,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1348061150;Create an AsyncWebRequest instance. By default an instance of_{@link StandardServletAsyncWebRequest} is created if running in Servlet_3.0 (or higher) environment or as a fallback, an instance of_{@link NoSupportAsyncWebRequest} is returned.__@param request the current request_@param response the current response_@return an AsyncWebRequest instance, never {@code null};public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return ClassUtils.hasMethod(ServletRequest.class, "startAsync") ?_				createStandardServletAsyncWebRequest(request, response) : new NoSupportAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,is,created,if,running,in,servlet,3,0,or,higher,environment,or,as,a,fallback,an,instance,of,link,no,support,async,web,request,is,returned,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,class,utils,has,method,servlet,request,class,start,async,create,standard,servlet,async,web,request,request,response,new,no,support,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1374163982;Create an AsyncWebRequest instance. By default an instance of_{@link StandardServletAsyncWebRequest} is created if running in Servlet_3.0 (or higher) environment or as a fallback, an instance of_{@link NoSupportAsyncWebRequest} is returned.__@param request the current request_@param response the current response_@return an AsyncWebRequest instance, never {@code null};public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return ClassUtils.hasMethod(ServletRequest.class, "startAsync") ?_				createStandardServletAsyncWebRequest(request, response) : new NoSupportAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,is,created,if,running,in,servlet,3,0,or,higher,environment,or,as,a,fallback,an,instance,of,link,no,support,async,web,request,is,returned,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,class,utils,has,method,servlet,request,class,start,async,create,standard,servlet,async,web,request,request,response,new,no,support,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1413848647;Create an AsyncWebRequest instance. By default an instance of_{@link StandardServletAsyncWebRequest} is created if running in Servlet_3.0 (or higher) environment or as a fallback, an instance of_{@link NoSupportAsyncWebRequest} is returned.__@param request the current request_@param response the current response_@return an AsyncWebRequest instance, never {@code null};public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return ClassUtils.hasMethod(ServletRequest.class, "startAsync") ?_				createStandardServletAsyncWebRequest(request, response) : new NoSupportAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,is,created,if,running,in,servlet,3,0,or,higher,environment,or,as,a,fallback,an,instance,of,link,no,support,async,web,request,is,returned,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,class,utils,has,method,servlet,request,class,start,async,create,standard,servlet,async,web,request,request,response,new,no,support,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1434010431;Create an AsyncWebRequest instance. By default, an instance of_{@link StandardServletAsyncWebRequest} gets created when running in_Servlet 3.0 (or higher) environment - as a fallback, an instance_of {@link NoSupportAsyncWebRequest} will be returned._@param request the current request_@param response the current response_@return an AsyncWebRequest instance (never {@code null});public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return (startAsyncAvailable ? AsyncWebRequestFactory.createStandardAsyncWebRequest(request, response) :_				new NoSupportAsyncWebRequest(request, response))__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,gets,created,when,running,in,servlet,3,0,or,higher,environment,as,a,fallback,an,instance,of,link,no,support,async,web,request,will,be,returned,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,start,async,available,async,web,request,factory,create,standard,async,web,request,request,response,new,no,support,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1467667881;Create an AsyncWebRequest instance. By default, an instance of_{@link StandardServletAsyncWebRequest} gets created when running in_Servlet 3.0 (or higher) environment - as a fallback, an instance_of {@link NoSupportAsyncWebRequest} will be returned._@param request the current request_@param response the current response_@return an AsyncWebRequest instance (never {@code null});public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return new StandardServletAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,gets,created,when,running,in,servlet,3,0,or,higher,environment,as,a,fallback,an,instance,of,link,no,support,async,web,request,will,be,returned,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,new,standard,servlet,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1467677340;Create an AsyncWebRequest instance. By default, an instance of_{@link StandardServletAsyncWebRequest} gets created._@param request the current request_@param response the current response_@return an AsyncWebRequest instance (never {@code null});public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return new StandardServletAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,gets,created,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,new,standard,servlet,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1498780410;Create an AsyncWebRequest instance. By default, an instance of_{@link StandardServletAsyncWebRequest} gets created._@param request the current request_@param response the current response_@return an AsyncWebRequest instance (never {@code null});public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return new StandardServletAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,gets,created,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,new,standard,servlet,async,web,request,request,response
WebAsyncUtils -> public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response);1530174524;Create an AsyncWebRequest instance. By default, an instance of_{@link StandardServletAsyncWebRequest} gets created._@param request the current request_@param response the current response_@return an AsyncWebRequest instance (never {@code null});public static AsyncWebRequest createAsyncWebRequest(HttpServletRequest request, HttpServletResponse response) {_		return new StandardServletAsyncWebRequest(request, response)__	};create,an,async,web,request,instance,by,default,an,instance,of,link,standard,servlet,async,web,request,gets,created,param,request,the,current,request,param,response,the,current,response,return,an,async,web,request,instance,never,code,null;public,static,async,web,request,create,async,web,request,http,servlet,request,request,http,servlet,response,response,return,new,standard,servlet,async,web,request,request,response
