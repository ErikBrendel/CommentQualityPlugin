# id;timestamp;commentText;codeText;commentWords;codeWords
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1328020251;Return the request factory that this accessor uses for obtaining {@link ClientHttpRequest HttpRequests}.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,client,http,request,http,requests;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1413848647;Return the request factory that this accessor uses for obtaining {@link ClientHttpRequest HttpRequests}.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,client,http,request,http,requests;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1440554606;Return the request factory that this accessor uses for obtaining {@link ClientHttpRequest HttpRequests}.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,link,client,http,request,http,requests;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1482841963;Return the request factory that this accessor uses for obtaining client request handles.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1509464018;Return the request factory that this accessor uses for obtaining client request handles.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1529721864;Return the request factory that this accessor uses for obtaining client request handles.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1530174524;Return the request factory that this accessor uses for obtaining client request handles.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> public ClientHttpRequestFactory getRequestFactory();1531942370;Return the request factory that this accessor uses for obtaining client request handles.;public ClientHttpRequestFactory getRequestFactory() {_		return this.requestFactory__	};return,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles;public,client,http,request,factory,get,request,factory,return,this,request,factory
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1328020251;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to exectute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,exectute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,created,method,name,request,for,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1413848647;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to exectute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,exectute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,created,method,name,request,for,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1440554606;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to exectute (GET, POST, etc.)_@return the created request_@throws IOException in case of I/O errors;protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,exectute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,created,method,name,request,for,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1482841963;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc)_@return the created request_@throws IOException in case of I/O errors_@see #getRequestFactory()_@see ClientHttpRequestFactory#createRequest(URI, HttpMethod);protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors,see,get,request,factory,see,client,http,request,factory,create,request,uri,http,method;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,created,method,name,request,for,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1509464018;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc)_@return the created request_@throws IOException in case of I/O errors_@see #getRequestFactory()_@see ClientHttpRequestFactory#createRequest(URI, HttpMethod);protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("Created " + method.name() + " request for \"" + url + "\"")__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors,see,get,request,factory,see,client,http,request,factory,create,request,uri,http,method;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,created,method,name,request,for,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1529721864;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc)_@return the created request_@throws IOException in case of I/O errors_@see #getRequestFactory()_@see ClientHttpRequestFactory#createRequest(URI, HttpMethod);protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("HTTP " + method.name() + " " + url)__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors,see,get,request,factory,see,client,http,request,factory,create,request,uri,http,method;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,http,method,name,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1530174524;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc)_@return the created request_@throws IOException in case of I/O errors_@see #getRequestFactory()_@see ClientHttpRequestFactory#createRequest(URI, HttpMethod);protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("HTTP " + method.name() + " " + url)__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors,see,get,request,factory,see,client,http,request,factory,create,request,uri,http,method;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,http,method,name,url,return,request
HttpAccessor -> protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException;1531942370;Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}._@param url the URL to connect to_@param method the HTTP method to execute (GET, POST, etc)_@return the created request_@throws IOException in case of I/O errors_@see #getRequestFactory()_@see ClientHttpRequestFactory#createRequest(URI, HttpMethod);protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {_		ClientHttpRequest request = getRequestFactory().createRequest(url, method)__		if (logger.isDebugEnabled()) {_			logger.debug("HTTP " + method.name() + " " + url)__		}_		return request__	};create,a,new,link,client,http,request,via,this,template,s,link,client,http,request,factory,param,url,the,url,to,connect,to,param,method,the,http,method,to,execute,get,post,etc,return,the,created,request,throws,ioexception,in,case,of,i,o,errors,see,get,request,factory,see,client,http,request,factory,create,request,uri,http,method;protected,client,http,request,create,request,uri,url,http,method,method,throws,ioexception,client,http,request,request,get,request,factory,create,request,url,method,if,logger,is,debug,enabled,logger,debug,http,method,name,url,return,request
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1328020251;Set the request factory that this accessor uses for obtaining {@link ClientHttpRequest HttpRequests}.;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,client,http,request,http,requests;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1413848647;Set the request factory that this accessor uses for obtaining {@link ClientHttpRequest HttpRequests}.;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,client,http,request,http,requests;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1440554606;Set the request factory that this accessor uses for obtaining_{@link ClientHttpRequest HttpRequests}.;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "'requestFactory' must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,link,client,http,request,http,requests;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1482841963;Set the request factory that this accessor uses for obtaining client request handles._<p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own_HTTP libraries ({@link java.net.HttpURLConnection})._<p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method._Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>_@see #createRequest(URI, HttpMethod)_@see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory_@see org.springframework.http.client.OkHttp3ClientHttpRequestFactory;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles,p,the,default,is,a,link,simple,client,http,request,factory,based,on,the,jdk,s,own,http,libraries,link,java,net,http,urlconnection,p,b,note,that,the,standard,jdk,http,library,does,not,support,the,http,patch,method,configure,the,apache,http,components,or,ok,http,request,factory,to,enable,patch,b,see,create,request,uri,http,method,see,org,springframework,http,client,http,components,async,client,http,request,factory,see,org,springframework,http,client,ok,http3client,http,request,factory;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,client,http,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1509464018;Set the request factory that this accessor uses for obtaining client request handles._<p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own_HTTP libraries ({@link java.net.HttpURLConnection})._<p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method._Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>_@see #createRequest(URI, HttpMethod)_@see SimpleClientHttpRequestFactory_@see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory_@see org.springframework.http.client.OkHttp3ClientHttpRequestFactory;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles,p,the,default,is,a,link,simple,client,http,request,factory,based,on,the,jdk,s,own,http,libraries,link,java,net,http,urlconnection,p,b,note,that,the,standard,jdk,http,library,does,not,support,the,http,patch,method,configure,the,apache,http,components,or,ok,http,request,factory,to,enable,patch,b,see,create,request,uri,http,method,see,simple,client,http,request,factory,see,org,springframework,http,client,http,components,async,client,http,request,factory,see,org,springframework,http,client,ok,http3client,http,request,factory;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,client,http,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1529721864;Set the request factory that this accessor uses for obtaining client request handles._<p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own_HTTP libraries ({@link java.net.HttpURLConnection})._<p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method._Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>_@see #createRequest(URI, HttpMethod)_@see SimpleClientHttpRequestFactory_@see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory_@see org.springframework.http.client.OkHttp3ClientHttpRequestFactory;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles,p,the,default,is,a,link,simple,client,http,request,factory,based,on,the,jdk,s,own,http,libraries,link,java,net,http,urlconnection,p,b,note,that,the,standard,jdk,http,library,does,not,support,the,http,patch,method,configure,the,apache,http,components,or,ok,http,request,factory,to,enable,patch,b,see,create,request,uri,http,method,see,simple,client,http,request,factory,see,org,springframework,http,client,http,components,async,client,http,request,factory,see,org,springframework,http,client,ok,http3client,http,request,factory;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,client,http,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1530174524;Set the request factory that this accessor uses for obtaining client request handles._<p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own_HTTP libraries ({@link java.net.HttpURLConnection})._<p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method._Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>_@see #createRequest(URI, HttpMethod)_@see SimpleClientHttpRequestFactory_@see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory_@see org.springframework.http.client.OkHttp3ClientHttpRequestFactory;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles,p,the,default,is,a,link,simple,client,http,request,factory,based,on,the,jdk,s,own,http,libraries,link,java,net,http,urlconnection,p,b,note,that,the,standard,jdk,http,library,does,not,support,the,http,patch,method,configure,the,apache,http,components,or,ok,http,request,factory,to,enable,patch,b,see,create,request,uri,http,method,see,simple,client,http,request,factory,see,org,springframework,http,client,http,components,async,client,http,request,factory,see,org,springframework,http,client,ok,http3client,http,request,factory;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,client,http,request,factory,must,not,be,null,this,request,factory,request,factory
HttpAccessor -> public void setRequestFactory(ClientHttpRequestFactory requestFactory);1531942370;Set the request factory that this accessor uses for obtaining client request handles._<p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own_HTTP libraries ({@link java.net.HttpURLConnection})._<p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method._Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>_@see #createRequest(URI, HttpMethod)_@see SimpleClientHttpRequestFactory_@see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory_@see org.springframework.http.client.OkHttp3ClientHttpRequestFactory;public void setRequestFactory(ClientHttpRequestFactory requestFactory) {_		Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null")__		this.requestFactory = requestFactory__	};set,the,request,factory,that,this,accessor,uses,for,obtaining,client,request,handles,p,the,default,is,a,link,simple,client,http,request,factory,based,on,the,jdk,s,own,http,libraries,link,java,net,http,urlconnection,p,b,note,that,the,standard,jdk,http,library,does,not,support,the,http,patch,method,configure,the,apache,http,components,or,ok,http,request,factory,to,enable,patch,b,see,create,request,uri,http,method,see,simple,client,http,request,factory,see,org,springframework,http,client,http,components,async,client,http,request,factory,see,org,springframework,http,client,ok,http3client,http,request,factory;public,void,set,request,factory,client,http,request,factory,request,factory,assert,not,null,request,factory,client,http,request,factory,must,not,be,null,this,request,factory,request,factory
