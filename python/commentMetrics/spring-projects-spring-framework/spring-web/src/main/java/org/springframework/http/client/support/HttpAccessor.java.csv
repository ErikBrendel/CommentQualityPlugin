commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the request factory that this accessor uses for obtaining client request handles.  * <p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own  * HTTP libraries ({@link java.net.HttpURLConnection}).  * <p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method.  * Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>  * @see #createRequest(URI, HttpMethod)  * @see SimpleClientHttpRequestFactory  * @see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory  * @see org.springframework.http.client.OkHttp3ClientHttpRequestFactory  */ ;/**  * Set the request factory that this accessor uses for obtaining client request handles.  * <p>The default is a {@link SimpleClientHttpRequestFactory} based on the JDK's own  * HTTP libraries ({@link java.net.HttpURLConnection}).  * <p><b>Note that the standard JDK HTTP library does not support the HTTP PATCH method.  * Configure the Apache HttpComponents or OkHttp request factory to enable PATCH.</b>  * @see #createRequest(URI, HttpMethod)  * @see SimpleClientHttpRequestFactory  * @see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory  * @see org.springframework.http.client.OkHttp3ClientHttpRequestFactory  */ public void setRequestFactory(ClientHttpRequestFactory requestFactory) {     Assert.notNull(requestFactory, "ClientHttpRequestFactory must not be null").     this.requestFactory = requestFactory. }
true;public;0;3;/**  * Return the request factory that this accessor uses for obtaining client request handles.  */ ;/**  * Return the request factory that this accessor uses for obtaining client request handles.  */ public ClientHttpRequestFactory getRequestFactory() {     return this.requestFactory. }
true;protected;2;7;/**  * Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}.  * @param url the URL to connect to  * @param method the HTTP method to execute (GET, POST, etc)  * @return the created request  * @throws IOException in case of I/O errors  * @see #getRequestFactory()  * @see ClientHttpRequestFactory#createRequest(URI, HttpMethod)  */ ;/**  * Create a new {@link ClientHttpRequest} via this template's {@link ClientHttpRequestFactory}.  * @param url the URL to connect to  * @param method the HTTP method to execute (GET, POST, etc)  * @return the created request  * @throws IOException in case of I/O errors  * @see #getRequestFactory()  * @see ClientHttpRequestFactory#createRequest(URI, HttpMethod)  */ protected ClientHttpRequest createRequest(URI url, HttpMethod method) throws IOException {     ClientHttpRequest request = getRequestFactory().createRequest(url, method).     if (logger.isDebugEnabled()) {         logger.debug("HTTP " + method.name() + " " + url).     }     return request. }
