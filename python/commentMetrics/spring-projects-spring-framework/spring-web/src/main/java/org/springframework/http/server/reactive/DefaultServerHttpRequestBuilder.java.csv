commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;3;;private static <K, V> void copyMultiValueMap(MultiValueMap<K, V> source, MultiValueMap<K, V> target) {     source.forEach((key, value) -> target.put(key, new LinkedList<>(value))). }
false;public;1;5;;@Override public ServerHttpRequest.Builder method(HttpMethod httpMethod) {     this.httpMethodValue = httpMethod.name().     return this. }
false;public;1;5;;@Override public ServerHttpRequest.Builder uri(URI uri) {     this.uri = uri.     return this. }
false;public;1;6;;@Override public ServerHttpRequest.Builder path(String path) {     Assert.isTrue(path.startsWith("/"), "The path does not have a leading slash.").     this.uriPath = path.     return this. }
false;public;1;5;;@Override public ServerHttpRequest.Builder contextPath(String contextPath) {     this.contextPath = contextPath.     return this. }
false;public;2;5;;@Override public ServerHttpRequest.Builder header(String key, String value) {     this.httpHeaders.add(key, value).     return this. }
false;public;1;6;;@Override public ServerHttpRequest.Builder headers(Consumer<HttpHeaders> headersConsumer) {     Assert.notNull(headersConsumer, "'headersConsumer' must not be null").     headersConsumer.accept(this.httpHeaders).     return this. }
false;public;1;5;;@Override public ServerHttpRequest.Builder sslInfo(SslInfo sslInfo) {     this.sslInfo = sslInfo.     return this. }
false;public;0;5;;@Override public ServerHttpRequest build() {     return new MutatedServerHttpRequest(getUriToUse(), this.contextPath, this.httpHeaders, this.httpMethodValue, this.cookies, this.sslInfo, this.body, this.originalRequest). }
false;private;0;37;;private URI getUriToUse() {     if (this.uriPath == null) {         return this.uri.     }     StringBuilder uriBuilder = new StringBuilder().     if (this.uri.getScheme() != null) {         uriBuilder.append(this.uri.getScheme()).append(':').     }     if (this.uri.getRawUserInfo() != null || this.uri.getHost() != null) {         uriBuilder.append("//").         if (this.uri.getRawUserInfo() != null) {             uriBuilder.append(this.uri.getRawUserInfo()).append('@').         }         if (this.uri.getHost() != null) {             uriBuilder.append(this.uri.getHost()).         }         if (this.uri.getPort() != -1) {             uriBuilder.append(':').append(this.uri.getPort()).         }     }     if (StringUtils.hasLength(this.uriPath)) {         uriBuilder.append(this.uriPath).     }     if (this.uri.getRawQuery() != null) {         uriBuilder.append('?').append(this.uri.getRawQuery()).     }     if (this.uri.getRawFragment() != null) {         uriBuilder.append('#').append(this.uri.getRawFragment()).     }     try {         return new URI(uriBuilder.toString()).     } catch (URISyntaxException ex) {         throw new IllegalStateException("Invalid URI path: \"" + this.uriPath + "\"", ex).     } }
false;public;0;4;;@Override public String getMethodValue() {     return this.methodValue. }
false;protected;0;4;;@Override protected MultiValueMap<String, HttpCookie> initCookies() {     return this.cookies. }
false;public;0;5;;@Nullable @Override public InetSocketAddress getRemoteAddress() {     return this.remoteAddress. }
false;protected;0;5;;@Nullable @Override protected SslInfo initSslInfo() {     return this.sslInfo. }
false;public;0;4;;@Override public Flux<DataBuffer> getBody() {     return this.body. }
false;public;0;5;;@SuppressWarnings("unchecked") @Override public <T> T getNativeRequest() {     return (T) this.originalRequest. }
false;public;0;4;;@Override public String getId() {     return this.originalRequest.getId(). }
