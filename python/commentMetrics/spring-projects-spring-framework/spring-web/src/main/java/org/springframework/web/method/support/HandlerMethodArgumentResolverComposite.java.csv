commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add the given {@link HandlerMethodArgumentResolver}.  */ ;/**  * Add the given {@link HandlerMethodArgumentResolver}.  */ public HandlerMethodArgumentResolverComposite addResolver(HandlerMethodArgumentResolver resolver) {     this.argumentResolvers.add(resolver).     return this. }
true;public;1;6;/**  * Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.  * @since 4.3  */ ;/**  * Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.  * @since 4.3  */ public HandlerMethodArgumentResolverComposite addResolvers(@Nullable HandlerMethodArgumentResolver... resolvers) {     if (resolvers != null) {         Collections.addAll(this.argumentResolvers, resolvers).     }     return this. }
true;public;1;8;/**  * Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.  */ ;/**  * Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.  */ public HandlerMethodArgumentResolverComposite addResolvers(@Nullable List<? extends HandlerMethodArgumentResolver> resolvers) {     if (resolvers != null) {         this.argumentResolvers.addAll(resolvers).     }     return this. }
true;public;0;3;/**  * Return a read-only list with the contained resolvers, or an empty list.  */ ;/**  * Return a read-only list with the contained resolvers, or an empty list.  */ public List<HandlerMethodArgumentResolver> getResolvers() {     return Collections.unmodifiableList(this.argumentResolvers). }
true;public;0;3;/**  * Clear the list of configured resolvers.  * @since 4.3  */ ;/**  * Clear the list of configured resolvers.  * @since 4.3  */ public void clear() {     this.argumentResolvers.clear(). }
true;public;1;4;/**  * Whether the given {@linkplain MethodParameter method parameter} is  * supported by any registered {@link HandlerMethodArgumentResolver}.  */ ;/**  * Whether the given {@linkplain MethodParameter method parameter} is  * supported by any registered {@link HandlerMethodArgumentResolver}.  */ @Override public boolean supportsParameter(MethodParameter parameter) {     return getArgumentResolver(parameter) != null. }
true;public;4;13;/**  * Iterate over registered  * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers} and  * invoke the one that supports it.  * @throws IllegalStateException if no suitable  * {@link HandlerMethodArgumentResolver} is found.  */ ;/**  * Iterate over registered  * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers} and  * invoke the one that supports it.  * @throws IllegalStateException if no suitable  * {@link HandlerMethodArgumentResolver} is found.  */ @Override @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter).     if (resolver == null) {         throw new IllegalArgumentException("Unsupported parameter type [" + parameter.getParameterType().getName() + "]." + " supportsParameter should be called first.").     }     return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory). }
true;private;1;14;/**  * Find a registered {@link HandlerMethodArgumentResolver} that supports  * the given method parameter.  */ ;/**  * Find a registered {@link HandlerMethodArgumentResolver} that supports  * the given method parameter.  */ @Nullable private HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) {     HandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter).     if (result == null) {         for (HandlerMethodArgumentResolver methodArgumentResolver : this.argumentResolvers) {             if (methodArgumentResolver.supportsParameter(parameter)) {                 result = methodArgumentResolver.                 this.argumentResolverCache.put(parameter, result).                 break.             }         }     }     return result. }
