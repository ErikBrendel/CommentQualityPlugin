# id;timestamp;commentText;codeText;commentWords;codeWords
RequestAttributes -> Object getAttribute(String name, int scope)_;1328020251;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or <code>null</code> if not found;Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,code,if,not,found;object,get,attribute,string,name,int,scope
RequestAttributes -> Object getAttribute(String name, int scope)_;1356735495;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or {@code null} if not found;Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,if,not,found;object,get,attribute,string,name,int,scope
RequestAttributes -> Object getAttribute(String name, int scope)_;1363208506;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or {@code null} if not found;Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,if,not,found;object,get,attribute,string,name,int,scope
RequestAttributes -> Object getAttribute(String name, int scope)_;1467668027;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or {@code null} if not found;Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,if,not,found;object,get,attribute,string,name,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1328020251;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1356735495;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1363208506;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1467668027;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1495868221;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1496837955;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> String[] getAttributeNames(int scope)_;1527090734;Retrieve the names of all attributes in the scope._@param scope the scope identifier_@return the attribute names as String array;String[] getAttributeNames(int scope)_;retrieve,the,names,of,all,attributes,in,the,scope,param,scope,the,scope,identifier,return,the,attribute,names,as,string,array;string,get,attribute,names,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1328020251;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1356735495;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1363208506;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1467668027;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1495868221;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1496837955;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> void setAttribute(String name, Object value, int scope)_;1527090734;Set the value for the scoped attribute of the given name,_replacing an existing value (if any)._@param name the name of the attribute_@param scope the scope identifier_@param value the value for the attribute;void setAttribute(String name, Object value, int scope)_;set,the,value,for,the,scoped,attribute,of,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,param,value,the,value,for,the,attribute;void,set,attribute,string,name,object,value,int,scope
RequestAttributes -> @Nullable 	Object resolveReference(String key)_;1495868221;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest/PortletRequest reference for key_"request", and the HttpSession/PortletSession reference for key "session"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;@Nullable_	Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,portlet,request,reference,for,key,request,and,the,http,session,portlet,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;nullable,object,resolve,reference,string,key
RequestAttributes -> @Nullable 	Object resolveReference(String key)_;1496837955;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest/PortletRequest reference for key_"request", and the HttpSession/PortletSession reference for key "session"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;@Nullable_	Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,portlet,request,reference,for,key,request,and,the,http,session,portlet,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;nullable,object,resolve,reference,string,key
RequestAttributes -> @Nullable 	Object resolveReference(String key)_;1527090734;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest reference for key "request", and_the HttpSession reference for key "session"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;@Nullable_	Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,reference,for,key,request,and,the,http,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;nullable,object,resolve,reference,string,key
RequestAttributes -> Object resolveReference(String key)_;1328020251;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest/PortletRequest reference for key_"request", and the HttpSession/PortletSession reference for key "session"._@param key the contextual key_@return the corresponding object, or <code>null</code> if none found;Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,portlet,request,reference,for,key,request,and,the,http,session,portlet,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,code,if,none,found;object,resolve,reference,string,key
RequestAttributes -> Object resolveReference(String key)_;1356735495;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest/PortletRequest reference for key_"request", and the HttpSession/PortletSession reference for key "session"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,portlet,request,reference,for,key,request,and,the,http,session,portlet,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;object,resolve,reference,string,key
RequestAttributes -> Object resolveReference(String key)_;1363208506;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest/PortletRequest reference for key_"request", and the HttpSession/PortletSession reference for key "session"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,portlet,request,reference,for,key,request,and,the,http,session,portlet,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;object,resolve,reference,string,key
RequestAttributes -> Object resolveReference(String key)_;1467668027;Resolve the contextual reference for the given key, if any._<p>At a minimum: the HttpServletRequest/PortletRequest reference for key_"request", and the HttpSession/PortletSession reference for key "session"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;Object resolveReference(String key)_;resolve,the,contextual,reference,for,the,given,key,if,any,p,at,a,minimum,the,http,servlet,request,portlet,request,reference,for,key,request,and,the,http,session,portlet,session,reference,for,key,session,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;object,resolve,reference,string,key
RequestAttributes -> @Nullable 	Object getAttribute(String name, int scope)_;1495868221;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or {@code null} if not found;@Nullable_	Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,if,not,found;nullable,object,get,attribute,string,name,int,scope
RequestAttributes -> @Nullable 	Object getAttribute(String name, int scope)_;1496837955;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or {@code null} if not found;@Nullable_	Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,if,not,found;nullable,object,get,attribute,string,name,int,scope
RequestAttributes -> @Nullable 	Object getAttribute(String name, int scope)_;1527090734;Return the value for the scoped attribute of the given name, if any._@param name the name of the attribute_@param scope the scope identifier_@return the current attribute value, or {@code null} if not found;@Nullable_	Object getAttribute(String name, int scope)_;return,the,value,for,the,scoped,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier,return,the,current,attribute,value,or,code,null,if,not,found;nullable,object,get,attribute,string,name,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1328020251;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1356735495;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1363208506;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1467668027;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1495868221;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1496837955;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> void registerDestructionCallback(String name, Runnable callback, int scope)_;1527090734;Register a callback to be executed on destruction of the_specified attribute in the given scope._<p>Implementations should do their best to execute the callback_at the appropriate time: that is, at request completion or session_termination, respectively. If such a callback is not supported by the_underlying runtime environment, the callback <i>must be ignored</i>_and a corresponding warning should be logged._<p>Note that 'destruction' usually corresponds to destruction of the_entire scope, not to the individual attribute having been explicitly_removed by the application. If an attribute gets removed via this_facade's {@link #removeAttribute(String, int)} method, any registered_destruction callback should be disabled as well, assuming that the_removed object will be reused or manually destroyed._<p><b>NOTE:</b> Callback objects should generally be serializable if_they are being registered for a session scope. Otherwise the callback_(or even the entire session) might not survive web app restarts._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed_@param scope the scope identifier;void registerDestructionCallback(String name, Runnable callback, int scope)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,attribute,in,the,given,scope,p,implementations,should,do,their,best,to,execute,the,callback,at,the,appropriate,time,that,is,at,request,completion,or,session,termination,respectively,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,the,callback,i,must,be,ignored,i,and,a,corresponding,warning,should,be,logged,p,note,that,destruction,usually,corresponds,to,destruction,of,the,entire,scope,not,to,the,individual,attribute,having,been,explicitly,removed,by,the,application,if,an,attribute,gets,removed,via,this,facade,s,link,remove,attribute,string,int,method,any,registered,destruction,callback,should,be,disabled,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,p,b,note,b,callback,objects,should,generally,be,serializable,if,they,are,being,registered,for,a,session,scope,otherwise,the,callback,or,even,the,entire,session,might,not,survive,web,app,restarts,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed,param,scope,the,scope,identifier;void,register,destruction,callback,string,name,runnable,callback,int,scope
RequestAttributes -> Object getSessionMutex()_;1328020251;Expose the best available mutex for the underlying session:_that is, an object to synchronize on for the underlying session._@return the session mutex to use (never <code>null</code>;Object getSessionMutex()_;expose,the,best,available,mutex,for,the,underlying,session,that,is,an,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null,code;object,get,session,mutex
RequestAttributes -> Object getSessionMutex()_;1356735495;Expose the best available mutex for the underlying session:_that is, an object to synchronize on for the underlying session._@return the session mutex to use (never {@code null};Object getSessionMutex()_;expose,the,best,available,mutex,for,the,underlying,session,that,is,an,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;object,get,session,mutex
RequestAttributes -> Object getSessionMutex()_;1363208506;Expose the best available mutex for the underlying session:_that is, an object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});Object getSessionMutex()_;expose,the,best,available,mutex,for,the,underlying,session,that,is,an,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;object,get,session,mutex
RequestAttributes -> Object getSessionMutex()_;1467668027;Expose the best available mutex for the underlying session:_that is, an object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});Object getSessionMutex()_;expose,the,best,available,mutex,for,the,underlying,session,that,is,an,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;object,get,session,mutex
RequestAttributes -> Object getSessionMutex()_;1496837955;Expose the best available mutex for the underlying session:_that is, an object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});Object getSessionMutex()_;expose,the,best,available,mutex,for,the,underlying,session,that,is,an,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;object,get,session,mutex
RequestAttributes -> Object getSessionMutex()_;1527090734;Expose the best available mutex for the underlying session:_that is, an object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});Object getSessionMutex()_;expose,the,best,available,mutex,for,the,underlying,session,that,is,an,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;object,get,session,mutex
RequestAttributes -> void removeAttribute(String name, int scope)_;1328020251;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> void removeAttribute(String name, int scope)_;1356735495;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> void removeAttribute(String name, int scope)_;1363208506;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> void removeAttribute(String name, int scope)_;1467668027;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> void removeAttribute(String name, int scope)_;1495868221;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> void removeAttribute(String name, int scope)_;1496837955;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> void removeAttribute(String name, int scope)_;1527090734;Remove the scoped attribute of the given name, if it exists._<p>Note that an implementation should also remove a registered destruction_callback for the specified attribute, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._@param name the name of the attribute_@param scope the scope identifier;void removeAttribute(String name, int scope)_;remove,the,scoped,attribute,of,the,given,name,if,it,exists,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,attribute,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,param,name,the,name,of,the,attribute,param,scope,the,scope,identifier;void,remove,attribute,string,name,int,scope
RequestAttributes -> String getSessionId()_;1328020251;Return an id for the current underlying session._@return the session id as String (never <code>null</code>;String getSessionId()_;return,an,id,for,the,current,underlying,session,return,the,session,id,as,string,never,code,null,code;string,get,session,id
RequestAttributes -> String getSessionId()_;1356735495;Return an id for the current underlying session._@return the session id as String (never {@code null};String getSessionId()_;return,an,id,for,the,current,underlying,session,return,the,session,id,as,string,never,code,null;string,get,session,id
RequestAttributes -> String getSessionId()_;1363208506;Return an id for the current underlying session._@return the session id as String (never {@code null});String getSessionId()_;return,an,id,for,the,current,underlying,session,return,the,session,id,as,string,never,code,null;string,get,session,id
RequestAttributes -> String getSessionId()_;1467668027;Return an id for the current underlying session._@return the session id as String (never {@code null});String getSessionId()_;return,an,id,for,the,current,underlying,session,return,the,session,id,as,string,never,code,null;string,get,session,id
RequestAttributes -> String getSessionId()_;1496837955;Return an id for the current underlying session._@return the session id as String (never {@code null});String getSessionId()_;return,an,id,for,the,current,underlying,session,return,the,session,id,as,string,never,code,null;string,get,session,id
RequestAttributes -> String getSessionId()_;1527090734;Return an id for the current underlying session._@return the session id as String (never {@code null});String getSessionId()_;return,an,id,for,the,current,underlying,session,return,the,session,id,as,string,never,code,null;string,get,session,id
