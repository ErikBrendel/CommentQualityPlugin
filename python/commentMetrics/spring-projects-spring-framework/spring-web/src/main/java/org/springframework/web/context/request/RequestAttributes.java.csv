commented;modifiers;parameterAmount;loc;comment;code
true;;2;2;/**  * Return the value for the scoped attribute of the given name, if any.  * @param name the name of the attribute  * @param scope the scope identifier  * @return the current attribute value, or {@code null} if not found  */ ;/**  * Return the value for the scoped attribute of the given name, if any.  * @param name the name of the attribute  * @param scope the scope identifier  * @return the current attribute value, or {@code null} if not found  */ @Nullable Object getAttribute(String name, int scope).
true;;3;1;/**  * Set the value for the scoped attribute of the given name,  * replacing an existing value (if any).  * @param name the name of the attribute  * @param scope the scope identifier  * @param value the value for the attribute  */ ;/**  * Set the value for the scoped attribute of the given name,  * replacing an existing value (if any).  * @param name the name of the attribute  * @param scope the scope identifier  * @param value the value for the attribute  */ void setAttribute(String name, Object value, int scope).
true;;2;1;/**  * Remove the scoped attribute of the given name, if it exists.  * <p>Note that an implementation should also remove a registered destruction  * callback for the specified attribute, if any. It does, however, <i>not</i>  * need to <i>execute</i> a registered destruction callback in this case,  * since the object will be destroyed by the caller (if appropriate).  * @param name the name of the attribute  * @param scope the scope identifier  */ ;/**  * Remove the scoped attribute of the given name, if it exists.  * <p>Note that an implementation should also remove a registered destruction  * callback for the specified attribute, if any. It does, however, <i>not</i>  * need to <i>execute</i> a registered destruction callback in this case,  * since the object will be destroyed by the caller (if appropriate).  * @param name the name of the attribute  * @param scope the scope identifier  */ void removeAttribute(String name, int scope).
true;;1;1;/**  * Retrieve the names of all attributes in the scope.  * @param scope the scope identifier  * @return the attribute names as String array  */ ;/**  * Retrieve the names of all attributes in the scope.  * @param scope the scope identifier  * @return the attribute names as String array  */ String[] getAttributeNames(int scope).
true;;3;1;/**  * Register a callback to be executed on destruction of the  * specified attribute in the given scope.  * <p>Implementations should do their best to execute the callback  * at the appropriate time: that is, at request completion or session  * termination, respectively. If such a callback is not supported by the  * underlying runtime environment, the callback <i>must be ignored</i>  * and a corresponding warning should be logged.  * <p>Note that 'destruction' usually corresponds to destruction of the  * entire scope, not to the individual attribute having been explicitly  * removed by the application. If an attribute gets removed via this  * facade's {@link #removeAttribute(String, int)} method, any registered  * destruction callback should be disabled as well, assuming that the  * removed object will be reused or manually destroyed.  * <p><b>NOTE:</b> Callback objects should generally be serializable if  * they are being registered for a session scope. Otherwise the callback  * (or even the entire session) might not survive web app restarts.  * @param name the name of the attribute to register the callback for  * @param callback the destruction callback to be executed  * @param scope the scope identifier  */ ;/**  * Register a callback to be executed on destruction of the  * specified attribute in the given scope.  * <p>Implementations should do their best to execute the callback  * at the appropriate time: that is, at request completion or session  * termination, respectively. If such a callback is not supported by the  * underlying runtime environment, the callback <i>must be ignored</i>  * and a corresponding warning should be logged.  * <p>Note that 'destruction' usually corresponds to destruction of the  * entire scope, not to the individual attribute having been explicitly  * removed by the application. If an attribute gets removed via this  * facade's {@link #removeAttribute(String, int)} method, any registered  * destruction callback should be disabled as well, assuming that the  * removed object will be reused or manually destroyed.  * <p><b>NOTE:</b> Callback objects should generally be serializable if  * they are being registered for a session scope. Otherwise the callback  * (or even the entire session) might not survive web app restarts.  * @param name the name of the attribute to register the callback for  * @param callback the destruction callback to be executed  * @param scope the scope identifier  */ void registerDestructionCallback(String name, Runnable callback, int scope).
true;;1;2;/**  * Resolve the contextual reference for the given key, if any.  * <p>At a minimum: the HttpServletRequest reference for key "request", and  * the HttpSession reference for key "session".  * @param key the contextual key  * @return the corresponding object, or {@code null} if none found  */ ;/**  * Resolve the contextual reference for the given key, if any.  * <p>At a minimum: the HttpServletRequest reference for key "request", and  * the HttpSession reference for key "session".  * @param key the contextual key  * @return the corresponding object, or {@code null} if none found  */ @Nullable Object resolveReference(String key).
true;;0;1;/**  * Return an id for the current underlying session.  * @return the session id as String (never {@code null})  */ ;/**  * Return an id for the current underlying session.  * @return the session id as String (never {@code null})  */ String getSessionId().
true;;0;1;/**  * Expose the best available mutex for the underlying session:  * that is, an object to synchronize on for the underlying session.  * @return the session mutex to use (never {@code null})  */ ;/**  * Expose the best available mutex for the underlying session:  * that is, an object to synchronize on for the underlying session.  * @return the session mutex to use (never {@code null})  */ Object getSessionMutex().
