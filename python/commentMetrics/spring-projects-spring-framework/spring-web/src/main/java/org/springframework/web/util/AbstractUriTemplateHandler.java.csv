commented;modifiers;parameterAmount;loc;comment;code
true;public;1;10;/**  * Configure a base URL to prepend URI templates with. The base URL must  * have a scheme and host but may optionally contain a port and a path.  * The base URL must be fully expanded and encoded which can be done via  * {@link UriComponentsBuilder}.  * @param baseUrl the base URL.  */ ;/**  * Configure a base URL to prepend URI templates with. The base URL must  * have a scheme and host but may optionally contain a port and a path.  * The base URL must be fully expanded and encoded which can be done via  * {@link UriComponentsBuilder}.  * @param baseUrl the base URL.  */ public void setBaseUrl(@Nullable String baseUrl) {     if (baseUrl != null) {         UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build().         Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme").         Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host").         Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query").         Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment").     }     this.baseUrl = baseUrl. }
true;public;0;4;/**  * Return the configured base URL.  */ ;/**  * Return the configured base URL.  */ @Nullable public String getBaseUrl() {     return this.baseUrl. }
true;public;1;6;/**  * Configure default URI variable values to use with every expanded URI  * template. These default values apply only when expanding with a Map, and  * not with an array, where the Map supplied to {@link #expand(String, Map)}  * can override the default values.  * @param defaultUriVariables the default URI variable values  * @since 4.3  */ ;/**  * Configure default URI variable values to use with every expanded URI  * template. These default values apply only when expanding with a Map, and  * not with an array, where the Map supplied to {@link #expand(String, Map)}  * can override the default values.  * @param defaultUriVariables the default URI variable values  * @since 4.3  */ public void setDefaultUriVariables(@Nullable Map<String, ?> defaultUriVariables) {     this.defaultUriVariables.clear().     if (defaultUriVariables != null) {         this.defaultUriVariables.putAll(defaultUriVariables).     } }
true;public;0;3;/**  * Return a read-only copy of the configured default URI variables.  */ ;/**  * Return a read-only copy of the configured default URI variables.  */ public Map<String, ?> getDefaultUriVariables() {     return Collections.unmodifiableMap(this.defaultUriVariables). }
false;public;2;11;;@Override public URI expand(String uriTemplate, Map<String, ?> uriVariables) {     if (!getDefaultUriVariables().isEmpty()) {         Map<String, Object> map = new HashMap<>().         map.putAll(getDefaultUriVariables()).         map.putAll(uriVariables).         uriVariables = map.     }     URI url = expandInternal(uriTemplate, uriVariables).     return insertBaseUrl(url). }
false;public;2;5;;@Override public URI expand(String uriTemplate, Object... uriVariables) {     URI url = expandInternal(uriTemplate, uriVariables).     return insertBaseUrl(url). }
true;protected,abstract;2;1;/**  * Actually expand and encode the URI template.  */ ;/**  * Actually expand and encode the URI template.  */ protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables).
true;protected,abstract;2;1;/**  * Actually expand and encode the URI template.  */ ;/**  * Actually expand and encode the URI template.  */ protected abstract URI expandInternal(String uriTemplate, Object... uriVariables).
true;private;1;12;/**  * Insert a base URL (if configured) unless the given URL has a host already.  */ ;/**  * Insert a base URL (if configured) unless the given URL has a host already.  */ private URI insertBaseUrl(URI url) {     try {         String baseUrl = getBaseUrl().         if (baseUrl != null && url.getHost() == null) {             url = new URI(baseUrl + url.toString()).         }         return url.     } catch (URISyntaxException ex) {         throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex).     } }
