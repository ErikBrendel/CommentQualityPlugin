# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;1461691955;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,map,string,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;1465306936;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,map,string,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;1467730834;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,map,string,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;1485553611;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,map,string,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;1496837955;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,map,string,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;1498780456;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Map<String, ?> uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,map,string,uri,variables
AbstractUriTemplateHandler -> @Nullable 	public String getBaseUrl();1496837955;Return the configured base URL.;@Nullable_	public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;nullable,public,string,get,base,url,return,this,base,url
AbstractUriTemplateHandler -> @Nullable 	public String getBaseUrl();1498780456;Return the configured base URL.;@Nullable_	public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;nullable,public,string,get,base,url,return,this,base,url
AbstractUriTemplateHandler -> public void setBaseUrl(String baseUrl);1461691955;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
AbstractUriTemplateHandler -> public void setBaseUrl(String baseUrl);1465306936;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
AbstractUriTemplateHandler -> public void setBaseUrl(String baseUrl);1467730834;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
AbstractUriTemplateHandler -> public void setBaseUrl(String baseUrl);1485553611;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
AbstractUriTemplateHandler -> public void setDefaultUriVariables(@Nullable Map<String, ?> defaultUriVariables);1496837955;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(@Nullable Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,nullable,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
AbstractUriTemplateHandler -> public void setDefaultUriVariables(@Nullable Map<String, ?> defaultUriVariables);1498780456;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(@Nullable Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,nullable,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
AbstractUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1461691955;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
AbstractUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1465306936;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
AbstractUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1467730834;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
AbstractUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1485553611;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
AbstractUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1496837955;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
AbstractUriTemplateHandler -> public Map<String, ?> getDefaultUriVariables();1498780456;Return a read-only copy of the configured default URI variables.;public Map<String, ?> getDefaultUriVariables() {_		return Collections.unmodifiableMap(this.defaultUriVariables)__	};return,a,read,only,copy,of,the,configured,default,uri,variables;public,map,string,get,default,uri,variables,return,collections,unmodifiable,map,this,default,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;1461691955;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,object,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;1465306936;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,object,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;1467730834;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,object,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;1485553611;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,object,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;1496837955;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,object,uri,variables
AbstractUriTemplateHandler -> protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;1498780456;Actually expand and encode the URI template.;protected abstract URI expandInternal(String uriTemplate, Object... uriVariables)_;actually,expand,and,encode,the,uri,template;protected,abstract,uri,expand,internal,string,uri,template,object,uri,variables
AbstractUriTemplateHandler -> private URI insertBaseUrl(URI url);1461691955;Insert a base URL (if configured) unless the given URL has a host already.;private URI insertBaseUrl(URI url) {_		try {_			if (getBaseUrl() != null && url.getHost() == null) {_				url = new URI(getBaseUrl() + url.toString())__			}_			return url__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};insert,a,base,url,if,configured,unless,the,given,url,has,a,host,already;private,uri,insert,base,url,uri,url,try,if,get,base,url,null,url,get,host,null,url,new,uri,get,base,url,url,to,string,return,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
AbstractUriTemplateHandler -> private URI insertBaseUrl(URI url);1465306936;Insert a base URL (if configured) unless the given URL has a host already.;private URI insertBaseUrl(URI url) {_		try {_			String baseUrl = getBaseUrl()__			if (baseUrl != null && url.getHost() == null) {_				url = new URI(baseUrl + url.toString())__			}_			return url__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};insert,a,base,url,if,configured,unless,the,given,url,has,a,host,already;private,uri,insert,base,url,uri,url,try,string,base,url,get,base,url,if,base,url,null,url,get,host,null,url,new,uri,base,url,url,to,string,return,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
AbstractUriTemplateHandler -> private URI insertBaseUrl(URI url);1467730834;Insert a base URL (if configured) unless the given URL has a host already.;private URI insertBaseUrl(URI url) {_		try {_			String baseUrl = getBaseUrl()__			if (baseUrl != null && url.getHost() == null) {_				url = new URI(baseUrl + url.toString())__			}_			return url__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};insert,a,base,url,if,configured,unless,the,given,url,has,a,host,already;private,uri,insert,base,url,uri,url,try,string,base,url,get,base,url,if,base,url,null,url,get,host,null,url,new,uri,base,url,url,to,string,return,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
AbstractUriTemplateHandler -> private URI insertBaseUrl(URI url);1485553611;Insert a base URL (if configured) unless the given URL has a host already.;private URI insertBaseUrl(URI url) {_		try {_			String baseUrl = getBaseUrl()__			if (baseUrl != null && url.getHost() == null) {_				url = new URI(baseUrl + url.toString())__			}_			return url__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};insert,a,base,url,if,configured,unless,the,given,url,has,a,host,already;private,uri,insert,base,url,uri,url,try,string,base,url,get,base,url,if,base,url,null,url,get,host,null,url,new,uri,base,url,url,to,string,return,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
AbstractUriTemplateHandler -> private URI insertBaseUrl(URI url);1496837955;Insert a base URL (if configured) unless the given URL has a host already.;private URI insertBaseUrl(URI url) {_		try {_			String baseUrl = getBaseUrl()__			if (baseUrl != null && url.getHost() == null) {_				url = new URI(baseUrl + url.toString())__			}_			return url__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};insert,a,base,url,if,configured,unless,the,given,url,has,a,host,already;private,uri,insert,base,url,uri,url,try,string,base,url,get,base,url,if,base,url,null,url,get,host,null,url,new,uri,base,url,url,to,string,return,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
AbstractUriTemplateHandler -> private URI insertBaseUrl(URI url);1498780456;Insert a base URL (if configured) unless the given URL has a host already.;private URI insertBaseUrl(URI url) {_		try {_			String baseUrl = getBaseUrl()__			if (baseUrl != null && url.getHost() == null) {_				url = new URI(baseUrl + url.toString())__			}_			return url__		}_		catch (URISyntaxException ex) {_			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex)__		}_	};insert,a,base,url,if,configured,unless,the,given,url,has,a,host,already;private,uri,insert,base,url,uri,url,try,string,base,url,get,base,url,if,base,url,null,url,get,host,null,url,new,uri,base,url,url,to,string,return,url,catch,urisyntax,exception,ex,throw,new,illegal,argument,exception,invalid,url,after,inserting,base,url,url,ex
AbstractUriTemplateHandler -> public void setDefaultUriVariables(Map<String, ?> defaultUriVariables);1461691955;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
AbstractUriTemplateHandler -> public void setDefaultUriVariables(Map<String, ?> defaultUriVariables);1465306936;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
AbstractUriTemplateHandler -> public void setDefaultUriVariables(Map<String, ?> defaultUriVariables);1467730834;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
AbstractUriTemplateHandler -> public void setDefaultUriVariables(Map<String, ?> defaultUriVariables);1485553611;Configure default URI variable values to use with every expanded URI_template. These default values apply only when expanding with a Map, and_not with an array, where the Map supplied to {@link #expand(String, Map)}_can override the default values._@param defaultUriVariables the default URI variable values_@since 4.3;public void setDefaultUriVariables(Map<String, ?> defaultUriVariables) {_		this.defaultUriVariables.clear()__		if (defaultUriVariables != null) {_			this.defaultUriVariables.putAll(defaultUriVariables)__		}_	};configure,default,uri,variable,values,to,use,with,every,expanded,uri,template,these,default,values,apply,only,when,expanding,with,a,map,and,not,with,an,array,where,the,map,supplied,to,link,expand,string,map,can,override,the,default,values,param,default,uri,variables,the,default,uri,variable,values,since,4,3;public,void,set,default,uri,variables,map,string,default,uri,variables,this,default,uri,variables,clear,if,default,uri,variables,null,this,default,uri,variables,put,all,default,uri,variables
AbstractUriTemplateHandler -> public void setBaseUrl(@Nullable String baseUrl);1496837955;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(@Nullable String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,nullable,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
AbstractUriTemplateHandler -> public void setBaseUrl(@Nullable String baseUrl);1498780456;Configure a base URL to prepend URI templates with. The base URL must_have a scheme and host but may optionally contain a port and a path._The base URL must be fully expanded and encoded which can be done via_{@link UriComponentsBuilder}._@param baseUrl the base URL.;public void setBaseUrl(@Nullable String baseUrl) {_		if (baseUrl != null) {_			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build()__			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme")__			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host")__			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query")__			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment")__		}_		this.baseUrl = baseUrl__	};configure,a,base,url,to,prepend,uri,templates,with,the,base,url,must,have,a,scheme,and,host,but,may,optionally,contain,a,port,and,a,path,the,base,url,must,be,fully,expanded,and,encoded,which,can,be,done,via,link,uri,components,builder,param,base,url,the,base,url;public,void,set,base,url,nullable,string,base,url,if,base,url,null,uri,components,uri,components,uri,components,builder,from,uri,string,base,url,build,assert,has,text,uri,components,get,scheme,base,url,must,have,a,scheme,assert,has,text,uri,components,get,host,base,url,must,have,a,host,assert,is,null,uri,components,get,query,base,url,cannot,have,a,query,assert,is,null,uri,components,get,fragment,base,url,cannot,have,a,fragment,this,base,url,base,url
AbstractUriTemplateHandler -> public String getBaseUrl();1461691955;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
AbstractUriTemplateHandler -> public String getBaseUrl();1465306936;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
AbstractUriTemplateHandler -> public String getBaseUrl();1467730834;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
AbstractUriTemplateHandler -> public String getBaseUrl();1485553611;Return the configured base URL.;public String getBaseUrl() {_		return this.baseUrl__	};return,the,configured,base,url;public,string,get,base,url,return,this,base,url
