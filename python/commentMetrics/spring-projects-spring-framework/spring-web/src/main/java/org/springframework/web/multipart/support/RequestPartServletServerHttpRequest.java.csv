commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return this.headers. }
false;public;0;21;;@Override public InputStream getBody() throws IOException {     if (this.multipartRequest instanceof StandardMultipartHttpServletRequest) {         try {             return this.multipartRequest.getPart(this.partName).getInputStream().         } catch (Exception ex) {             throw new MultipartException("Could not parse multipart servlet request", ex).         }     } else {         MultipartFile file = this.multipartRequest.getFile(this.partName).         if (file != null) {             return file.getInputStream().         } else {             String paramValue = this.multipartRequest.getParameter(this.partName).             return new ByteArrayInputStream(paramValue.getBytes(determineCharset())).         }     } }
false;private;0;11;;private Charset determineCharset() {     MediaType contentType = getHeaders().getContentType().     if (contentType != null) {         Charset charset = contentType.getCharset().         if (charset != null) {             return charset.         }     }     String encoding = this.multipartRequest.getCharacterEncoding().     return (encoding != null ? Charset.forName(encoding) : FORM_CHARSET). }
