# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1328020251;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1340398642;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1356735495;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1357119239;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1362408075;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1368482696;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1377627757;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1378298362;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1410872601;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1414442939;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1449660489;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1479746164;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1485810955;Sets the number of bytes to write in each chunk when not buffering request bodies locally._<p>Note that this parameter is only used when {@link #setBufferRequestBody(boolean) bufferRequestBody} is set_to {@code false}, and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};sets,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1490114687;Set the number of bytes to write in each chunk when not buffering request_bodies locally._<p>Note that this parameter is only used when_{@link #setBufferRequestBody(boolean) bufferRequestBody} is set to {@code false},_and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};set,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1490795646;Set the number of bytes to write in each chunk when not buffering request_bodies locally._<p>Note that this parameter is only used when_{@link #setBufferRequestBody(boolean) bufferRequestBody} is set to {@code false},_and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};set,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1495868221;Set the number of bytes to write in each chunk when not buffering request_bodies locally._<p>Note that this parameter is only used when_{@link #setBufferRequestBody(boolean) bufferRequestBody} is set to {@code false},_and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};set,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setChunkSize(int chunkSize);1498780456;Set the number of bytes to write in each chunk when not buffering request_bodies locally._<p>Note that this parameter is only used when_{@link #setBufferRequestBody(boolean) bufferRequestBody} is set to {@code false},_and the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is not known in advance._@see #setBufferRequestBody(boolean);public void setChunkSize(int chunkSize) {_		this.chunkSize = chunkSize__	};set,the,number,of,bytes,to,write,in,each,chunk,when,not,buffering,request,bodies,locally,p,note,that,this,parameter,is,only,used,when,link,set,buffer,request,body,boolean,buffer,request,body,is,set,to,code,false,and,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,not,known,in,advance,see,set,buffer,request,body,boolean;public,void,set,chunk,size,int,chunk,size,this,chunk,size,chunk,size
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1328020251;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1340398642;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1356735495;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1357119239;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1362408075;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1368482696;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1377627757;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1378298362;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1410872601;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1414442939;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1449660489;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1479746164;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1485810955;Indicates whether this request factory should buffer the {@linkplain ClientHttpRequest#getBody() request body}_internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT, it is recommended_to change this property to {@code false}, so as not to run out of memory. This will result in a_{@link ClientHttpRequest} that either streams directly to the underlying {@link HttpURLConnection}_(if the {@link org.springframework.http.HttpHeaders#getContentLength() Content-Length} is known in advance),_or that will use "Chunked transfer encoding" (if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicates,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1490114687;Indicate whether this request factory should buffer the_{@linkplain ClientHttpRequest#getBody() request body} internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT,_it is recommended to change this property to {@code false}, so as not to run_out of memory. This will result in a {@link ClientHttpRequest} that either_streams directly to the underlying {@link HttpURLConnection} (if the_{@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is known in advance), or that will use "Chunked transfer encoding"_(if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicate,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1490795646;Indicate whether this request factory should buffer the_{@linkplain ClientHttpRequest#getBody() request body} internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT,_it is recommended to change this property to {@code false}, so as not to run_out of memory. This will result in a {@link ClientHttpRequest} that either_streams directly to the underlying {@link HttpURLConnection} (if the_{@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is known in advance), or that will use "Chunked transfer encoding"_(if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicate,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1495868221;Indicate whether this request factory should buffer the_{@linkplain ClientHttpRequest#getBody() request body} internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT,_it is recommended to change this property to {@code false}, so as not to run_out of memory. This will result in a {@link ClientHttpRequest} that either_streams directly to the underlying {@link HttpURLConnection} (if the_{@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is known in advance), or that will use "Chunked transfer encoding"_(if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicate,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> public void setBufferRequestBody(boolean bufferRequestBody);1498780456;Indicate whether this request factory should buffer the_{@linkplain ClientHttpRequest#getBody() request body} internally._<p>Default is {@code true}. When sending large amounts of data via POST or PUT,_it is recommended to change this property to {@code false}, so as not to run_out of memory. This will result in a {@link ClientHttpRequest} that either_streams directly to the underlying {@link HttpURLConnection} (if the_{@link org.springframework.http.HttpHeaders#getContentLength() Content-Length}_is known in advance), or that will use "Chunked transfer encoding"_(if the {@code Content-Length} is not known in advance)._@see #setChunkSize(int)_@see HttpURLConnection#setFixedLengthStreamingMode(int);public void setBufferRequestBody(boolean bufferRequestBody) {_		this.bufferRequestBody = bufferRequestBody__	};indicate,whether,this,request,factory,should,buffer,the,linkplain,client,http,request,get,body,request,body,internally,p,default,is,code,true,when,sending,large,amounts,of,data,via,post,or,put,it,is,recommended,to,change,this,property,to,code,false,so,as,not,to,run,out,of,memory,this,will,result,in,a,link,client,http,request,that,either,streams,directly,to,the,underlying,link,http,urlconnection,if,the,link,org,springframework,http,http,headers,get,content,length,content,length,is,known,in,advance,or,that,will,use,chunked,transfer,encoding,if,the,code,content,length,is,not,known,in,advance,see,set,chunk,size,int,see,http,urlconnection,set,fixed,length,streaming,mode,int;public,void,set,buffer,request,body,boolean,buffer,request,body,this,buffer,request,body,buffer,request,body
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1328020251;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1340398642;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1356735495;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1357119239;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1362408075;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1368482696;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1377627757;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1378298362;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1410872601;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1414442939;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1449660489;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1479746164;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		Assert.isInstanceOf(HttpURLConnection.class, urlConnection)__		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,assert,is,instance,of,http,urlconnection,class,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1485810955;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		if (!HttpURLConnection.class.isInstance(urlConnection)) {_			throw new IllegalStateException("HttpURLConnection required for [" + url + "] but got: " + urlConnection)__		}_		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,if,http,urlconnection,class,is,instance,url,connection,throw,new,illegal,state,exception,http,urlconnection,required,for,url,but,got,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1490114687;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		if (!HttpURLConnection.class.isInstance(urlConnection)) {_			throw new IllegalStateException("HttpURLConnection required for [" + url + "] but got: " + urlConnection)__		}_		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,if,http,urlconnection,class,is,instance,url,connection,throw,new,illegal,state,exception,http,urlconnection,required,for,url,but,got,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException;1490795646;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		if (!HttpURLConnection.class.isInstance(urlConnection)) {_			throw new IllegalStateException("HttpURLConnection required for [" + url + "] but got: " + urlConnection)__		}_		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,if,http,urlconnection,class,is,instance,url,connection,throw,new,illegal,state,exception,http,urlconnection,required,for,url,but,got,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1410872601;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor) taskExecutor} property_is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires an AsyncTaskExecutor to be set")__		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())__		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(connection, this.chunkSize,_					this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,org,springframework,core,task,async,listenable,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,an,async,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1414442939;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor) taskExecutor} property_is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires an AsyncTaskExecutor to be set")__		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())__		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(connection, this.chunkSize,_					this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,org,springframework,core,task,async,listenable,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,an,async,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1449660489;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null,_				"Asynchronous execution requires an AsyncTaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,an,async,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1479746164;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1485810955;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1490114687;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1490795646;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1495868221;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException;1498780456;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor taskExecutor} property is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires TaskExecutor to be set")___		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())___		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(_					connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(_					connection, this.chunkSize, this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, @Nullable Proxy proxy) throws IOException;1495868221;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, @Nullable Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		if (!HttpURLConnection.class.isInstance(urlConnection)) {_			throw new IllegalStateException("HttpURLConnection required for [" + url + "] but got: " + urlConnection)__		}_		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,nullable,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,if,http,urlconnection,class,is,instance,url,connection,throw,new,illegal,state,exception,http,urlconnection,required,for,url,but,got,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> protected HttpURLConnection openConnection(URL url, @Nullable Proxy proxy) throws IOException;1498780456;Opens and returns a connection to the given URL._<p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} -_if any - to open a connection._@param url the URL to open a connection to_@param proxy the proxy to use, may be {@code null}_@return the opened connection_@throws IOException in case of I/O errors;protected HttpURLConnection openConnection(URL url, @Nullable Proxy proxy) throws IOException {_		URLConnection urlConnection = (proxy != null ? url.openConnection(proxy) : url.openConnection())__		if (!HttpURLConnection.class.isInstance(urlConnection)) {_			throw new IllegalStateException("HttpURLConnection required for [" + url + "] but got: " + urlConnection)__		}_		return (HttpURLConnection) urlConnection__	};opens,and,returns,a,connection,to,the,given,url,p,the,default,implementation,uses,the,given,linkplain,set,proxy,java,net,proxy,proxy,if,any,to,open,a,connection,param,url,the,url,to,open,a,connection,to,param,proxy,the,proxy,to,use,may,be,code,null,return,the,opened,connection,throws,ioexception,in,case,of,i,o,errors;protected,http,urlconnection,open,connection,url,url,nullable,proxy,proxy,throws,ioexception,urlconnection,url,connection,proxy,null,url,open,connection,proxy,url,open,connection,if,http,urlconnection,class,is,instance,url,connection,throw,new,illegal,state,exception,http,urlconnection,required,for,url,but,got,url,connection,return,http,urlconnection,url,connection
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) 			throws IOException;1377627757;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor(AsyncTaskExecutor) taskExecutor} property_is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod)_			throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires an " +_				"AsyncTaskExecutor to be set")__		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())__		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(connection, this.chunkSize,_					this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,async,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,an,async,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> @Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) 			throws IOException;1378298362;{@inheritDoc}_<p>Setting the {@link #setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor) taskExecutor} property_is required before calling this method.;@Override_	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod)_			throws IOException {_		Assert.state(this.taskExecutor != null, "Asynchronous execution requires an " +_				"AsyncTaskExecutor to be set")__		HttpURLConnection connection = openConnection(uri.toURL(), this.proxy)__		prepareConnection(connection, httpMethod.name())__		if (this.bufferRequestBody) {_			return new SimpleBufferingAsyncClientHttpRequest(connection, this.outputStreaming, this.taskExecutor)__		}_		else {_			return new SimpleStreamingAsyncClientHttpRequest(connection, this.chunkSize,_					this.outputStreaming, this.taskExecutor)__		}_	};inherit,doc,p,setting,the,link,set,task,executor,org,springframework,core,task,async,listenable,task,executor,task,executor,property,is,required,before,calling,this,method;override,public,async,client,http,request,create,async,request,uri,uri,http,method,http,method,throws,ioexception,assert,state,this,task,executor,null,asynchronous,execution,requires,an,async,task,executor,to,be,set,http,urlconnection,connection,open,connection,uri,to,url,this,proxy,prepare,connection,connection,http,method,name,if,this,buffer,request,body,return,new,simple,buffering,async,client,http,request,connection,this,output,streaming,this,task,executor,else,return,new,simple,streaming,async,client,http,request,connection,this,chunk,size,this,output,streaming,this,task,executor
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1328020251;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1340398642;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1356735495;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1357119239;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1362408075;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1368482696;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1377627757;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1378298362;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1410872601;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1414442939;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1449660489;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1479746164;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1485810955;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1490114687;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1490795646;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1495868221;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setConnectTimeout(int connectTimeout);1498780456;Set the underlying URLConnection's connect timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setConnectTimeout(int);public void setConnectTimeout(int connectTimeout) {_		this.connectTimeout = connectTimeout__	};set,the,underlying,urlconnection,s,connect,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,connect,timeout,int;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1328020251;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1340398642;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1356735495;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1357119239;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1362408075;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1368482696;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1377627757;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1378298362;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1410872601;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1414442939;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1449660489;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1479746164;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1485810955;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1490114687;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1490795646;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1495868221;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setProxy(Proxy proxy);1498780456;Set the {@link Proxy} to use for this request factory.;public void setProxy(Proxy proxy) {_		this.proxy = proxy__	};set,the,link,proxy,to,use,for,this,request,factory;public,void,set,proxy,proxy,proxy,this,proxy,proxy
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1328020251;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1340398642;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1356735495;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1357119239;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1362408075;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1368482696;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1377627757;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1378298362;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1410872601;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1414442939;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1449660489;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1479746164;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1485810955;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1490114687;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1490795646;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1495868221;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setReadTimeout(int readTimeout);1498780456;Set the underlying URLConnection's read timeout (in milliseconds)._A timeout value of 0 specifies an infinite timeout._<p>Default is the system's default timeout._@see URLConnection#setReadTimeout(int);public void setReadTimeout(int readTimeout) {_		this.readTimeout = readTimeout__	};set,the,underlying,urlconnection,s,read,timeout,in,milliseconds,a,timeout,value,of,0,specifies,an,infinite,timeout,p,default,is,the,system,s,default,timeout,see,urlconnection,set,read,timeout,int;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1378298362;Sets the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous_request}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};sets,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,request,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1410872601;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1414442939;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1449660489;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1479746164;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1485810955;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1490114687;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1490795646;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1495868221;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor);1498780456;Set the task executor for this request factory. Setting this property is required_for {@linkplain #createAsyncRequest(URI, HttpMethod) creating asynchronous requests}._@param taskExecutor the task executor;public void setTaskExecutor(AsyncListenableTaskExecutor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,for,this,request,factory,setting,this,property,is,required,for,linkplain,create,async,request,uri,http,method,creating,asynchronous,requests,param,task,executor,the,task,executor;public,void,set,task,executor,async,listenable,task,executor,task,executor,this,task,executor,task,executor
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1328020251;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1340398642;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1356735495;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1357119239;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1362408075;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1368482696;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1377627757;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1378298362;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1410872601;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1414442939;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}_		connection.setDoInput(true)__		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}_		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}_		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,put,equals,http,method,post,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1449660489;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1479746164;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1485810955;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1490114687;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1490795646;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1495868221;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException;1498780456;Template method for preparing the given {@link HttpURLConnection}._<p>The default implementation prepares the connection for input and output, and sets the HTTP method._@param connection the connection to prepare_@param httpMethod the HTTP request method ({@code GET}, {@code POST}, etc.)_@throws IOException in case of I/O errors;protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {_		if (this.connectTimeout >= 0) {_			connection.setConnectTimeout(this.connectTimeout)__		}_		if (this.readTimeout >= 0) {_			connection.setReadTimeout(this.readTimeout)__		}__		connection.setDoInput(true)___		if ("GET".equals(httpMethod)) {_			connection.setInstanceFollowRedirects(true)__		}_		else {_			connection.setInstanceFollowRedirects(false)__		}__		if ("POST".equals(httpMethod) || "PUT".equals(httpMethod) ||_				"PATCH".equals(httpMethod) || "DELETE".equals(httpMethod)) {_			connection.setDoOutput(true)__		}_		else {_			connection.setDoOutput(false)__		}__		connection.setRequestMethod(httpMethod)__	};template,method,for,preparing,the,given,link,http,urlconnection,p,the,default,implementation,prepares,the,connection,for,input,and,output,and,sets,the,http,method,param,connection,the,connection,to,prepare,param,http,method,the,http,request,method,code,get,code,post,etc,throws,ioexception,in,case,of,i,o,errors;protected,void,prepare,connection,http,urlconnection,connection,string,http,method,throws,ioexception,if,this,connect,timeout,0,connection,set,connect,timeout,this,connect,timeout,if,this,read,timeout,0,connection,set,read,timeout,this,read,timeout,connection,set,do,input,true,if,get,equals,http,method,connection,set,instance,follow,redirects,true,else,connection,set,instance,follow,redirects,false,if,post,equals,http,method,put,equals,http,method,patch,equals,http,method,delete,equals,http,method,connection,set,do,output,true,else,connection,set,do,output,false,connection,set,request,method,http,method
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1362408075;Set if the underlying URLConnection can be set to 'output streaming' mode. When_output streaming is enabled, authentication and redirection cannot be handled_automatically. If output streaming is disabled the_{@link HttpURLConnection#setFixedLengthStreamingMode(int)_setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode(int) setChunkedStreamingMode}_methods of the underlying connection will never be called._<p>Default is {@code true}._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,int,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,int,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,p,default,is,code,true,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1368482696;Set if the underlying URLConnection can be set to 'output streaming' mode. When_output streaming is enabled, authentication and redirection cannot be handled_automatically. If output streaming is disabled the_{@link HttpURLConnection#setFixedLengthStreamingMode(int)_setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode(int) setChunkedStreamingMode}_methods of the underlying connection will never be called._<p>Default is {@code true}._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,int,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,int,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,p,default,is,code,true,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1377627757;Set if the underlying URLConnection can be set to 'output streaming' mode. When_output streaming is enabled, authentication and redirection cannot be handled_automatically. If output streaming is disabled the_{@link HttpURLConnection#setFixedLengthStreamingMode(int)_setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode(int) setChunkedStreamingMode}_methods of the underlying connection will never be called._<p>Default is {@code true}._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,int,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,int,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,p,default,is,code,true,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1378298362;Set if the underlying URLConnection can be set to 'output streaming' mode. When_output streaming is enabled, authentication and redirection cannot be handled_automatically. If output streaming is disabled the_{@link HttpURLConnection#setFixedLengthStreamingMode(int)_setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode(int) setChunkedStreamingMode}_methods of the underlying connection will never be called._<p>Default is {@code true}._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,int,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,int,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,p,default,is,code,true,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1410872601;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1414442939;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1449660489;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1479746164;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1485810955;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1490114687;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1490795646;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1495868221;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
SimpleClientHttpRequestFactory -> public void setOutputStreaming(boolean outputStreaming);1498780456;Set if the underlying URLConnection can be set to 'output streaming' mode._Default is {@code true}._<p>When output streaming is enabled, authentication and redirection cannot be handled automatically._If output streaming is disabled, the {@link HttpURLConnection#setFixedLengthStreamingMode} and_{@link HttpURLConnection#setChunkedStreamingMode} methods of the underlying connection will never_be called._@param outputStreaming if output streaming is enabled;public void setOutputStreaming(boolean outputStreaming) {_		this.outputStreaming = outputStreaming__	};set,if,the,underlying,urlconnection,can,be,set,to,output,streaming,mode,default,is,code,true,p,when,output,streaming,is,enabled,authentication,and,redirection,cannot,be,handled,automatically,if,output,streaming,is,disabled,the,link,http,urlconnection,set,fixed,length,streaming,mode,and,link,http,urlconnection,set,chunked,streaming,mode,methods,of,the,underlying,connection,will,never,be,called,param,output,streaming,if,output,streaming,is,enabled;public,void,set,output,streaming,boolean,output,streaming,this,output,streaming,output,streaming
