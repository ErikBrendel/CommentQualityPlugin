commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@code Gson} instance to use.  * If not set, a default {@link Gson#Gson() Gson} instance will be used.  * <p>Setting a custom-configured {@code Gson} is one way to take further  * control of the JSON serialization process.  * @see #GsonHttpMessageConverter(Gson)  */ ;/**  * Set the {@code Gson} instance to use.  * If not set, a default {@link Gson#Gson() Gson} instance will be used.  * <p>Setting a custom-configured {@code Gson} is one way to take further  * control of the JSON serialization process.  * @see #GsonHttpMessageConverter(Gson)  */ public void setGson(Gson gson) {     Assert.notNull(gson, "A Gson instance is required").     this.gson = gson. }
true;public;0;3;/**  * Return the configured {@code Gson} instance for this converter.  */ ;/**  * Return the configured {@code Gson} instance for this converter.  */ public Gson getGson() {     return this.gson. }
false;protected;2;4;;@Override protected Object readInternal(Type resolvedType, Reader reader) throws Exception {     return getGson().fromJson(reader, resolvedType). }
false;protected;3;14;;@Override protected void writeInternal(Object o, @Nullable Type type, Writer writer) throws Exception {     // which might contain extra generics that the object instance doesn't retain.     if (type instanceof ParameterizedType) {         getGson().toJson(o, type, writer).     } else {         getGson().toJson(o, writer).     } }
