commented;modifiers;parameterAmount;loc;comment;code
false;public;2;33;;@Override public boolean process(@Nullable CorsConfiguration config, ServerWebExchange exchange) {     ServerHttpRequest request = exchange.getRequest().     ServerHttpResponse response = exchange.getResponse().     if (!CorsUtils.isCorsRequest(request)) {         return true.     }     if (responseHasCors(response)) {         logger.trace("Skip: response already contains \"Access-Control-Allow-Origin\"").         return true.     }     if (CorsUtils.isSameOrigin(request)) {         logger.trace("Skip: request is from same origin").         return true.     }     boolean preFlightRequest = CorsUtils.isPreFlightRequest(request).     if (config == null) {         if (preFlightRequest) {             rejectRequest(response).             return false.         } else {             return true.         }     }     return handleInternal(exchange, config, preFlightRequest). }
false;private;1;3;;private boolean responseHasCors(ServerHttpResponse response) {     return response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN) != null. }
true;protected;1;3;/**  * Invoked when one of the CORS checks failed.  */ ;/**  * Invoked when one of the CORS checks failed.  */ protected void rejectRequest(ServerHttpResponse response) {     response.setStatusCode(HttpStatus.FORBIDDEN). }
true;protected;3;58;/**  * Handle the given request.  */ ;/**  * Handle the given request.  */ protected boolean handleInternal(ServerWebExchange exchange, CorsConfiguration config, boolean preFlightRequest) {     ServerHttpRequest request = exchange.getRequest().     ServerHttpResponse response = exchange.getResponse().     HttpHeaders responseHeaders = response.getHeaders().     response.getHeaders().addAll(HttpHeaders.VARY, Arrays.asList(HttpHeaders.ORIGIN, HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS)).     String requestOrigin = request.getHeaders().getOrigin().     String allowOrigin = checkOrigin(config, requestOrigin).     if (allowOrigin == null) {         logger.debug("Reject: '" + requestOrigin + "' origin is not allowed").         rejectRequest(response).         return false.     }     HttpMethod requestMethod = getMethodToUse(request, preFlightRequest).     List<HttpMethod> allowMethods = checkMethods(config, requestMethod).     if (allowMethods == null) {         logger.debug("Reject: HTTP '" + requestMethod + "' is not allowed").         rejectRequest(response).         return false.     }     List<String> requestHeaders = getHeadersToUse(request, preFlightRequest).     List<String> allowHeaders = checkHeaders(config, requestHeaders).     if (preFlightRequest && allowHeaders == null) {         logger.debug("Reject: headers '" + requestHeaders + "' are not allowed").         rejectRequest(response).         return false.     }     responseHeaders.setAccessControlAllowOrigin(allowOrigin).     if (preFlightRequest) {         responseHeaders.setAccessControlAllowMethods(allowMethods).     }     if (preFlightRequest && !allowHeaders.isEmpty()) {         responseHeaders.setAccessControlAllowHeaders(allowHeaders).     }     if (!CollectionUtils.isEmpty(config.getExposedHeaders())) {         responseHeaders.setAccessControlExposeHeaders(config.getExposedHeaders()).     }     if (Boolean.TRUE.equals(config.getAllowCredentials())) {         responseHeaders.setAccessControlAllowCredentials(true).     }     if (preFlightRequest && config.getMaxAge() != null) {         responseHeaders.setAccessControlMaxAge(config.getMaxAge()).     }     return true. }
true;protected;2;4;/**  * Check the origin and determine the origin for the response. The default  * implementation simply delegates to  * {@link CorsConfiguration#checkOrigin(String)}.  */ ;/**  * Check the origin and determine the origin for the response. The default  * implementation simply delegates to  * {@link CorsConfiguration#checkOrigin(String)}.  */ @Nullable protected String checkOrigin(CorsConfiguration config, @Nullable String requestOrigin) {     return config.checkOrigin(requestOrigin). }
true;protected;2;4;/**  * Check the HTTP method and determine the methods for the response of a  * pre-flight request. The default implementation simply delegates to  * {@link CorsConfiguration#checkOrigin(String)}.  */ ;/**  * Check the HTTP method and determine the methods for the response of a  * pre-flight request. The default implementation simply delegates to  * {@link CorsConfiguration#checkOrigin(String)}.  */ @Nullable protected List<HttpMethod> checkMethods(CorsConfiguration config, @Nullable HttpMethod requestMethod) {     return config.checkHttpMethod(requestMethod). }
false;private;2;4;;@Nullable private HttpMethod getMethodToUse(ServerHttpRequest request, boolean isPreFlight) {     return (isPreFlight ? request.getHeaders().getAccessControlRequestMethod() : request.getMethod()). }
true;protected;2;5;/**  * Check the headers and determine the headers for the response of a  * pre-flight request. The default implementation simply delegates to  * {@link CorsConfiguration#checkOrigin(String)}.  */ ;/**  * Check the headers and determine the headers for the response of a  * pre-flight request. The default implementation simply delegates to  * {@link CorsConfiguration#checkOrigin(String)}.  */ @Nullable protected List<String> checkHeaders(CorsConfiguration config, List<String> requestHeaders) {     return config.checkHeaders(requestHeaders). }
false;private;2;4;;private List<String> getHeadersToUse(ServerHttpRequest request, boolean isPreFlight) {     HttpHeaders headers = request.getHeaders().     return (isPreFlight ? headers.getAccessControlRequestHeaders() : new ArrayList<>(headers.keySet())). }
