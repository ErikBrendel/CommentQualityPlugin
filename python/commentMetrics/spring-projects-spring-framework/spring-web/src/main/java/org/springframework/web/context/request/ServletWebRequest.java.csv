commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Object getNativeRequest() {     return getRequest(). }
false;public;0;4;;@Override public Object getNativeResponse() {     return getResponse(). }
false;public;1;4;;@Override public <T> T getNativeRequest(@Nullable Class<T> requiredType) {     return WebUtils.getNativeRequest(getRequest(), requiredType). }
false;public;1;5;;@Override public <T> T getNativeResponse(@Nullable Class<T> requiredType) {     HttpServletResponse response = getResponse().     return (response != null ? WebUtils.getNativeResponse(response, requiredType) : null). }
true;public;0;4;/**  * Return the HTTP method of the request.  * @since 4.0.2  */ ;/**  * Return the HTTP method of the request.  * @since 4.0.2  */ @Nullable public HttpMethod getHttpMethod() {     return HttpMethod.resolve(getRequest().getMethod()). }
false;public;1;5;;@Override @Nullable public String getHeader(String headerName) {     return getRequest().getHeader(headerName). }
false;public;1;6;;@Override @Nullable public String[] getHeaderValues(String headerName) {     String[] headerValues = StringUtils.toStringArray(getRequest().getHeaders(headerName)).     return (!ObjectUtils.isEmpty(headerValues) ? headerValues : null). }
false;public;0;4;;@Override public Iterator<String> getHeaderNames() {     return CollectionUtils.toIterator(getRequest().getHeaderNames()). }
false;public;1;5;;@Override @Nullable public String getParameter(String paramName) {     return getRequest().getParameter(paramName). }
false;public;1;5;;@Override @Nullable public String[] getParameterValues(String paramName) {     return getRequest().getParameterValues(paramName). }
false;public;0;4;;@Override public Iterator<String> getParameterNames() {     return CollectionUtils.toIterator(getRequest().getParameterNames()). }
false;public;0;4;;@Override public Map<String, String[]> getParameterMap() {     return getRequest().getParameterMap(). }
false;public;0;4;;@Override public Locale getLocale() {     return getRequest().getLocale(). }
false;public;0;4;;@Override public String getContextPath() {     return getRequest().getContextPath(). }
false;public;0;5;;@Override @Nullable public String getRemoteUser() {     return getRequest().getRemoteUser(). }
false;public;0;5;;@Override @Nullable public Principal getUserPrincipal() {     return getRequest().getUserPrincipal(). }
false;public;1;4;;@Override public boolean isUserInRole(String role) {     return getRequest().isUserInRole(role). }
false;public;0;4;;@Override public boolean isSecure() {     return getRequest().isSecure(). }
false;public;1;4;;@Override public boolean checkNotModified(long lastModifiedTimestamp) {     return checkNotModified(null, lastModifiedTimestamp). }
false;public;1;4;;@Override public boolean checkNotModified(String etag) {     return checkNotModified(etag, -1). }
false;public;2;41;;@Override public boolean checkNotModified(@Nullable String etag, long lastModifiedTimestamp) {     HttpServletResponse response = getResponse().     if (this.notModified || (response != null && HttpStatus.OK.value() != response.getStatus())) {         return this.notModified.     }     if (validateIfUnmodifiedSince(lastModifiedTimestamp)) {         if (this.notModified && response != null) {             response.setStatus(HttpStatus.PRECONDITION_FAILED.value()).         }         return this.notModified.     }     boolean validated = validateIfNoneMatch(etag).     if (!validated) {         validateIfModifiedSince(lastModifiedTimestamp).     }     // Update response     if (response != null) {         boolean isHttpGetOrHead = SAFE_METHODS.contains(getRequest().getMethod()).         if (this.notModified) {             response.setStatus(isHttpGetOrHead ? HttpStatus.NOT_MODIFIED.value() : HttpStatus.PRECONDITION_FAILED.value()).         }         if (isHttpGetOrHead) {             if (lastModifiedTimestamp > 0 && parseDateValue(response.getHeader(LAST_MODIFIED)) == -1) {                 response.setDateHeader(LAST_MODIFIED, lastModifiedTimestamp).             }             if (StringUtils.hasLength(etag) && response.getHeader(ETAG) == null) {                 response.setHeader(ETAG, padEtagIfNecessary(etag)).             }         }     }     return this.notModified. }
false;private;1;12;;private boolean validateIfUnmodifiedSince(long lastModifiedTimestamp) {     if (lastModifiedTimestamp < 0) {         return false.     }     long ifUnmodifiedSince = parseDateHeader(IF_UNMODIFIED_SINCE).     if (ifUnmodifiedSince == -1) {         return false.     }     // We will perform this validation...     this.notModified = (ifUnmodifiedSince < (lastModifiedTimestamp / 1000 * 1000)).     return true. }
false;private;1;35;;private boolean validateIfNoneMatch(@Nullable String etag) {     if (!StringUtils.hasLength(etag)) {         return false.     }     Enumeration<String> ifNoneMatch.     try {         ifNoneMatch = getRequest().getHeaders(IF_NONE_MATCH).     } catch (IllegalArgumentException ex) {         return false.     }     if (!ifNoneMatch.hasMoreElements()) {         return false.     }     // We will perform this validation...     etag = padEtagIfNecessary(etag).     if (etag.startsWith("W/")) {         etag = etag.substring(2).     }     while (ifNoneMatch.hasMoreElements()) {         String clientETags = ifNoneMatch.nextElement().         Matcher etagMatcher = ETAG_HEADER_VALUE_PATTERN.matcher(clientETags).         // Compare weak/strong ETags as per https://tools.ietf.org/html/rfc7232#section-2.3         while (etagMatcher.find()) {             if (StringUtils.hasLength(etagMatcher.group()) && etag.equals(etagMatcher.group(3))) {                 this.notModified = true.                 break.             }         }     }     return true. }
false;private;1;9;;private String padEtagIfNecessary(String etag) {     if (!StringUtils.hasLength(etag)) {         return etag.     }     if ((etag.startsWith("\"") || etag.startsWith("W/\"")) && etag.endsWith("\"")) {         return etag.     }     return "\"" + etag + "\"". }
false;private;1;12;;private boolean validateIfModifiedSince(long lastModifiedTimestamp) {     if (lastModifiedTimestamp < 0) {         return false.     }     long ifModifiedSince = parseDateHeader(IF_MODIFIED_SINCE).     if (ifModifiedSince == -1) {         return false.     }     // We will perform this validation...     this.notModified = ifModifiedSince >= (lastModifiedTimestamp / 1000 * 1000).     return true. }
false;public;0;3;;public boolean isNotModified() {     return this.notModified. }
false;private;1;18;;private long parseDateHeader(String headerName) {     long dateValue = -1.     try {         dateValue = getRequest().getDateHeader(headerName).     } catch (IllegalArgumentException ex) {         String headerValue = getHeader(headerName).         // Possibly an IE 10 style value: "Wed, 09 Apr 2014 09:57:42 GMT. length=13774"         if (headerValue != null) {             int separatorIndex = headerValue.indexOf('.').             if (separatorIndex != -1) {                 String datePart = headerValue.substring(0, separatorIndex).                 dateValue = parseDateValue(datePart).             }         }     }     return dateValue. }
false;private;1;21;;private long parseDateValue(@Nullable String headerValue) {     if (headerValue == null) {         // No header value sent at all         return -1.     }     if (headerValue.length() >= 3) {         // Let's only bother with SimpleDateFormat parsing for long enough values.         for (String dateFormat : DATE_FORMATS) {             SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat, Locale.US).             simpleDateFormat.setTimeZone(GMT).             try {                 return simpleDateFormat.parse(headerValue).getTime().             } catch (ParseException ex) {             // ignore             }         }     }     return -1. }
false;public;1;21;;@Override public String getDescription(boolean includeClientInfo) {     HttpServletRequest request = getRequest().     StringBuilder sb = new StringBuilder().     sb.append("uri=").append(request.getRequestURI()).     if (includeClientInfo) {         String client = request.getRemoteAddr().         if (StringUtils.hasLength(client)) {             sb.append(".client=").append(client).         }         HttpSession session = request.getSession(false).         if (session != null) {             sb.append(".session=").append(session.getId()).         }         String user = request.getRemoteUser().         if (StringUtils.hasLength(user)) {             sb.append(".user=").append(user).         }     }     return sb.toString(). }
false;public;0;4;;@Override public String toString() {     return "ServletWebRequest: " + getDescription(true). }
