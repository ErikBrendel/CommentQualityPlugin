commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public TestCompilationTask getTask(Class<?>... types) {     List<String> names = Arrays.stream(types).map(Class::getName).collect(Collectors.toList()).     return getTask(names.toArray(new String[names.size()])). }
false;public;1;4;;public TestCompilationTask getTask(String... types) {     Iterable<? extends JavaFileObject> javaFileObjects = getJavaFileObjects(types).     return getTask(javaFileObjects). }
false;private;1;4;;private TestCompilationTask getTask(Iterable<? extends JavaFileObject> javaFileObjects) {     return new TestCompilationTask(this.compiler.getTask(null, this.fileManager, null, null, null, javaFileObjects)). }
false;public;0;3;;public File getOutputLocation() {     return this.outputLocation. }
false;private;1;7;;private Iterable<? extends JavaFileObject> getJavaFileObjects(String... types) {     File[] files = new File[types.length].     for (int i = 0. i < types.length. i++) {         files[i] = getFile(types[i]).     }     return this.fileManager.getJavaFileObjects(files). }
false;private;1;3;;private File getFile(String type) {     return new File(getSourceFolder(), sourcePathFor(type)). }
false;private,static;1;3;;private static String sourcePathFor(String type) {     return type.replace(".", "/") + ".java". }
false;private;0;3;;private File getSourceFolder() {     return ORIGINAL_SOURCE_FOLDER. }
false;public;1;6;;public void call(Processor... processors) {     this.task.setProcessors(Arrays.asList(processors)).     if (!this.task.call()) {         throw new IllegalStateException("Compilation failed").     } }
