# id;timestamp;commentText;codeText;commentWords;codeWords
TypeHelper -> public List<Element> getDirectInterfaces(Element element);1530633324;Return the interfaces that are <strong>directly</strong> implemented by the_specified {@link Element} or an empty list if this {@code element} does not_implement any interface.;public List<Element> getDirectInterfaces(Element element) {_		List<? extends TypeMirror> superTypes = this.types.directSupertypes(element.asType())__		List<Element> directInterfaces = new ArrayList<>()__		if (superTypes.size() > 1) { _			for (int i = 1_ i < superTypes.size()_ i++) {_				Element e = this.types.asElement(superTypes.get(i))__				if (e != null) {_					directInterfaces.add(e)__				}_			}_		}_		return directInterfaces__	};return,the,interfaces,that,are,strong,directly,strong,implemented,by,the,specified,link,element,or,an,empty,list,if,this,code,element,does,not,implement,any,interface;public,list,element,get,direct,interfaces,element,element,list,extends,type,mirror,super,types,this,types,direct,supertypes,element,as,type,list,element,direct,interfaces,new,array,list,if,super,types,size,1,for,int,i,1,i,super,types,size,i,element,e,this,types,as,element,super,types,get,i,if,e,null,direct,interfaces,add,e,return,direct,interfaces
TypeHelper -> public List<Element> getDirectInterfaces(Element element);1550135926;Return the interfaces that are <strong>directly</strong> implemented by the_specified {@link Element} or an empty list if this {@code element} does not_implement any interface.;public List<Element> getDirectInterfaces(Element element) {_		List<? extends TypeMirror> superTypes = this.types.directSupertypes(element.asType())__		List<Element> directInterfaces = new ArrayList<>()__		if (superTypes.size() > 1) { _			for (int i = 1_ i < superTypes.size()_ i++) {_				Element e = this.types.asElement(superTypes.get(i))__				if (e != null) {_					directInterfaces.add(e)__				}_			}_		}_		return directInterfaces__	};return,the,interfaces,that,are,strong,directly,strong,implemented,by,the,specified,link,element,or,an,empty,list,if,this,code,element,does,not,implement,any,interface;public,list,element,get,direct,interfaces,element,element,list,extends,type,mirror,super,types,this,types,direct,supertypes,element,as,type,list,element,direct,interfaces,new,array,list,if,super,types,size,1,for,int,i,1,i,super,types,size,i,element,e,this,types,as,element,super,types,get,i,if,e,null,direct,interfaces,add,e,return,direct,interfaces
TypeHelper -> public List<Element> getDirectInterfaces(Element element);1551272260;Return the interfaces that are <strong>directly</strong> implemented by the_specified {@link Element} or an empty list if this {@code element} does not_implement any interface.;public List<Element> getDirectInterfaces(Element element) {_		List<? extends TypeMirror> superTypes = this.types.directSupertypes(element.asType())__		List<Element> directInterfaces = new ArrayList<>()__		if (superTypes.size() > 1) { _			for (int i = 1_ i < superTypes.size()_ i++) {_				Element e = this.types.asElement(superTypes.get(i))__				if (e != null) {_					directInterfaces.add(e)__				}_			}_		}_		return directInterfaces__	};return,the,interfaces,that,are,strong,directly,strong,implemented,by,the,specified,link,element,or,an,empty,list,if,this,code,element,does,not,implement,any,interface;public,list,element,get,direct,interfaces,element,element,list,extends,type,mirror,super,types,this,types,direct,supertypes,element,as,type,list,element,direct,interfaces,new,array,list,if,super,types,size,1,for,int,i,1,i,super,types,size,i,element,e,this,types,as,element,super,types,get,i,if,e,null,direct,interfaces,add,e,return,direct,interfaces
TypeHelper -> public Element getSuperClass(Element element);1530633324;Return the super class of the specified {@link Element} or null if this_{@code element} represents {@link Object}.;public Element getSuperClass(Element element) {_		List<? extends TypeMirror> superTypes = this.types.directSupertypes(element.asType())__		if (superTypes.isEmpty()) {_			return null_  _		}_		return this.types.asElement(superTypes.get(0))__	};return,the,super,class,of,the,specified,link,element,or,null,if,this,code,element,represents,link,object;public,element,get,super,class,element,element,list,extends,type,mirror,super,types,this,types,direct,supertypes,element,as,type,if,super,types,is,empty,return,null,return,this,types,as,element,super,types,get,0
TypeHelper -> public Element getSuperClass(Element element);1550135926;Return the super class of the specified {@link Element} or null if this_{@code element} represents {@link Object}.;public Element getSuperClass(Element element) {_		List<? extends TypeMirror> superTypes = this.types.directSupertypes(element.asType())__		if (superTypes.isEmpty()) {_			return null_  _		}_		return this.types.asElement(superTypes.get(0))__	};return,the,super,class,of,the,specified,link,element,or,null,if,this,code,element,represents,link,object;public,element,get,super,class,element,element,list,extends,type,mirror,super,types,this,types,direct,supertypes,element,as,type,if,super,types,is,empty,return,null,return,this,types,as,element,super,types,get,0
TypeHelper -> public Element getSuperClass(Element element);1551272260;Return the super class of the specified {@link Element} or null if this_{@code element} represents {@link Object}.;public Element getSuperClass(Element element) {_		List<? extends TypeMirror> superTypes = this.types.directSupertypes(element.asType())__		if (superTypes.isEmpty()) {_			return null_  _		}_		return this.types.asElement(superTypes.get(0))__	};return,the,super,class,of,the,specified,link,element,or,null,if,this,code,element,represents,link,object;public,element,get,super,class,element,element,list,extends,type,mirror,super,types,this,types,direct,supertypes,element,as,type,if,super,types,is,empty,return,null,return,this,types,as,element,super,types,get,0
