commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {     return parseComponentElement(element). }
false;private,static;1;11;;private static AbstractBeanDefinition parseComponentElement(Element element) {     BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ComponentFactoryBean.class).     factory.addPropertyValue("parent", parseComponent(element)).     List<Element> childElements = DomUtils.getChildElementsByTagName(element, "component").     if (!CollectionUtils.isEmpty(childElements)) {         parseChildComponents(childElements, factory).     }     return factory.getBeanDefinition(). }
false;private,static;1;5;;private static BeanDefinition parseComponent(Element element) {     BeanDefinitionBuilder component = BeanDefinitionBuilder.rootBeanDefinition(Component.class).     component.addPropertyValue("name", element.getAttribute("name")).     return component.getBeanDefinition(). }
false;private,static;2;7;;private static void parseChildComponents(List<Element> childElements, BeanDefinitionBuilder factory) {     ManagedList<BeanDefinition> children = new ManagedList<>(childElements.size()).     for (Element element : childElements) {         children.add(parseComponentElement(element)).     }     factory.addPropertyValue("children", children). }
