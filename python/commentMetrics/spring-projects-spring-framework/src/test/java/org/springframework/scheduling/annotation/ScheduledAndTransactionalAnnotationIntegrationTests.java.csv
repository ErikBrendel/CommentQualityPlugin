commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void assumePerformanceTests() {     Assume.group(TestGroup.PERFORMANCE). }
false;public;0;12;;@Test public void failsWhenJdkProxyAndScheduledMethodNotPresentOnInterface() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, JdkProxyTxConfig.class, RepoConfigA.class).     try {         ctx.refresh().         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         assertTrue(ex.getRootCause() instanceof IllegalStateException).     } }
false;public;0;14;;@Test public void succeedsWhenSubclassProxyAndScheduledMethodNotPresentOnInterface() throws InterruptedException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, SubclassProxyTxConfig.class, RepoConfigA.class).     ctx.refresh().     // allow @Scheduled method to be called several times     Thread.sleep(100).     MyRepository repository = ctx.getBean(MyRepository.class).     CallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class).     assertThat("repository is not a proxy", AopUtils.isCglibProxy(repository), equalTo(true)).     assertThat("@Scheduled method never called", repository.getInvocationCount(), greaterThan(0)).     assertThat("no transactions were committed", txManager.commits, greaterThan(0)). }
false;public;0;14;;@Test public void succeedsWhenJdkProxyAndScheduledMethodIsPresentOnInterface() throws InterruptedException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, JdkProxyTxConfig.class, RepoConfigB.class).     ctx.refresh().     // allow @Scheduled method to be called several times     Thread.sleep(100).     MyRepositoryWithScheduledMethod repository = ctx.getBean(MyRepositoryWithScheduledMethod.class).     CallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class).     assertThat("repository is not a proxy", AopUtils.isJdkDynamicProxy(repository), is(true)).     assertThat("@Scheduled method never called", repository.getInvocationCount(), greaterThan(0)).     assertThat("no transactions were committed", txManager.commits, greaterThan(0)). }
false;public;0;12;;@Test public void withAspectConfig() throws InterruptedException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AspectConfig.class, MyRepositoryWithScheduledMethodImpl.class).     ctx.refresh().     // allow @Scheduled method to be called several times     Thread.sleep(100).     MyRepositoryWithScheduledMethod repository = ctx.getBean(MyRepositoryWithScheduledMethod.class).     assertThat("repository is not a proxy", AopUtils.isCglibProxy(repository), is(true)).     assertThat("@Scheduled method never called", repository.getInvocationCount(), greaterThan(0)). }
false;public;0;4;;@Bean public MyRepository repository() {     return new MyRepositoryImpl(). }
false;public;0;4;;@Bean public MyRepositoryWithScheduledMethod repository() {     return new MyRepositoryWithScheduledMethodImpl(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Bean public PersistenceExceptionTranslator peTranslator() {     return mock(PersistenceExceptionTranslator.class). }
false;public,static;0;4;;@Bean public static PersistenceExceptionTranslationPostProcessor peTranslationPostProcessor() {     return new PersistenceExceptionTranslationPostProcessor(). }
false;public,static;0;6;;@Bean public static AnnotationAwareAspectJAutoProxyCreator autoProxyCreator() {     AnnotationAwareAspectJAutoProxyCreator apc = new AnnotationAwareAspectJAutoProxyCreator().     apc.setProxyTargetClass(true).     return apc. }
false;public,static;0;4;;@Bean public static MyAspect myAspect() {     return new MyAspect(). }
false;public;0;4;;@org.aspectj.lang.annotation.Before("execution(* scheduled())") public void checkTransaction() {     this.count.incrementAndGet(). }
false;;0;1;;int getInvocationCount().
false;public;0;5;;@Transactional @Scheduled(fixedDelay = 5) public void scheduled() {     this.count.incrementAndGet(). }
false;public;0;4;;@Override public int getInvocationCount() {     return this.count.get(). }
false;;0;1;;int getInvocationCount().
false;;0;1;;void scheduled().
false;public;0;6;;@Override @Transactional @Scheduled(fixedDelay = 5) public void scheduled() {     this.count.incrementAndGet(). }
false;public;0;7;;@Override public int getInvocationCount() {     if (this.myAspect != null) {         assertEquals(this.count.get(), this.myAspect.count.get()).     }     return this.count.get(). }
