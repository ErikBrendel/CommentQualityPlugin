commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void annotatedServiceWithoutInterface_PTC_true() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(PTCTrue.class, AnnotatedServiceWithoutInterface.class).     ctx.refresh().     AnnotatedServiceWithoutInterface s = ctx.getBean(AnnotatedServiceWithoutInterface.class).     assertTrue("expected a subclass proxy", AopUtils.isCglibProxy(s)).     assertThat(s, instanceOf(AnnotatedServiceWithoutInterface.class)). }
false;public;0;9;;@Test public void annotatedServiceWithoutInterface_PTC_false() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(PTCFalse.class, AnnotatedServiceWithoutInterface.class).     ctx.refresh().     AnnotatedServiceWithoutInterface s = ctx.getBean(AnnotatedServiceWithoutInterface.class).     assertTrue("expected a subclass proxy", AopUtils.isCglibProxy(s)).     assertThat(s, instanceOf(AnnotatedServiceWithoutInterface.class)). }
false;public;0;9;;@Test public void nonAnnotatedService_PTC_true() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(PTCTrue.class, AnnotatedServiceImpl.class).     ctx.refresh().     NonAnnotatedService s = ctx.getBean(NonAnnotatedService.class).     assertTrue("expected a subclass proxy", AopUtils.isCglibProxy(s)).     assertThat(s, instanceOf(AnnotatedServiceImpl.class)). }
false;public;0;9;;@Test public void nonAnnotatedService_PTC_false() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(PTCFalse.class, AnnotatedServiceImpl.class).     ctx.refresh().     NonAnnotatedService s = ctx.getBean(NonAnnotatedService.class).     assertTrue("expected a jdk proxy", AopUtils.isJdkDynamicProxy(s)).     assertThat(s, not(instanceOf(AnnotatedServiceImpl.class))). }
false;public;0;9;;@Test public void annotatedService_PTC_true() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(PTCTrue.class, NonAnnotatedServiceImpl.class).     ctx.refresh().     AnnotatedService s = ctx.getBean(AnnotatedService.class).     assertTrue("expected a subclass proxy", AopUtils.isCglibProxy(s)).     assertThat(s, instanceOf(NonAnnotatedServiceImpl.class)). }
false;public;0;9;;@Test public void annotatedService_PTC_false() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(PTCFalse.class, NonAnnotatedServiceImpl.class).     ctx.refresh().     AnnotatedService s = ctx.getBean(AnnotatedService.class).     assertTrue("expected a jdk proxy", AopUtils.isJdkDynamicProxy(s)).     assertThat(s, not(instanceOf(NonAnnotatedServiceImpl.class))). }
false;;0;1;;void m().
false;;0;1;;@Transactional void m().
false;public;0;2;;@Override public void m() { }
false;public;0;2;;@Override @Transactional public void m() { }
false;public;0;1;;@Transactional public void m() { }
