commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void repositoryIsClassBasedCacheProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, ProxyTargetClassCachingConfig.class).     ctx.refresh().     assertCacheProxying(ctx).     assertThat(AopUtils.isCglibProxy(ctx.getBean(FooRepository.class)), is(true)). }
false;public;0;14;;@Test public void repositoryUsesAspectJAdviceMode() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, AspectJCacheConfig.class).     try {         ctx.refresh().     } catch (Exception ex) {         // this test is a bit fragile, but gets the job done, proving that an         // attempt was made to look up the AJ aspect. It's due to classpath issues         // in .integration-tests that it's not found.         assertTrue(ex.getMessage().contains("AspectJCachingConfiguration")).     } }
false;private;1;14;;private void assertCacheProxying(AnnotationConfigApplicationContext ctx) {     FooRepository repo = ctx.getBean(FooRepository.class).     boolean isCacheProxy = false.     if (AopUtils.isAopProxy(repo)) {         for (Advisor advisor : ((Advised) repo).getAdvisors()) {             if (advisor instanceof BeanFactoryCacheOperationSourceAdvisor) {                 isCacheProxy = true.                 break.             }         }     }     assertTrue("FooRepository is not a cache proxy", isCacheProxy). }
false;;0;4;;@Bean CacheManager mgr() {     return new NoOpCacheManager(). }
false;;0;4;;@Bean FooRepository fooRepository() {     return new DummyFooRepository(). }
false;;0;4;;@Bean CacheManager cacheManager() {     return new NoOpCacheManager(). }
false;;0;1;;List<Object> findAll().
false;public;0;5;;@Override @Cacheable("primary") public List<Object> findAll() {     return Collections.emptyList(). }
