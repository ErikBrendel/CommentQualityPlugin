commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setConversionService(ConversionService conversionService) {     this.conversionService = conversionService. }
false;public;1;9;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     if (beanFactory instanceof ConfigurableBeanFactory) {         Object typeConverter = ((ConfigurableBeanFactory) beanFactory).getTypeConverter().         if (typeConverter instanceof SimpleTypeConverter) {             delegate = (SimpleTypeConverter) typeConverter.         }     } }
false;public;2;13;;public boolean canConvert(Class<?> sourceType, Class<?> targetType) {     if (conversionService.canConvert(sourceType, targetType)) {         return true.     }     if (!String.class.isAssignableFrom(sourceType) && !String.class.isAssignableFrom(targetType)) {         // PropertyEditor cannot convert non-Strings         return false.     }     if (!String.class.isAssignableFrom(sourceType)) {         return delegate.findCustomEditor(sourceType, null) != null || delegate.getDefaultEditor(sourceType) != null.     }     return delegate.findCustomEditor(targetType, null) != null || delegate.getDefaultEditor(targetType) != null. }
false;public;2;10;;@Override public boolean canConvert(TypeDescriptor sourceTypeDescriptor, TypeDescriptor targetTypeDescriptor) {     if (conversionService.canConvert(sourceTypeDescriptor, targetTypeDescriptor)) {         return true.     }     // TODO: what does this mean? This method is not used in SpEL so probably ignorable?     Class<?> sourceType = sourceTypeDescriptor.getObjectType().     Class<?> targetType = targetTypeDescriptor.getObjectType().     return canConvert(sourceType, targetType). }
false;public;3;15;;@Override public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (targetType.getType() == Void.class || targetType.getType() == Void.TYPE) {         return null.     }     if (conversionService.canConvert(sourceType, targetType)) {         return conversionService.convert(value, sourceType, targetType).     }     if (!String.class.isAssignableFrom(sourceType.getType())) {         PropertyEditor editor = delegate.findCustomEditor(sourceType.getType(), null).         editor.setValue(value).         return editor.getAsText().     }     return delegate.convertIfNecessary(value, targetType.getType()). }
