commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setUp() {     this.oldRequestAttributes = new ServletRequestAttributes(new MockHttpServletRequest()).     this.newRequestAttributes = new ServletRequestAttributes(new MockHttpServletRequest()).     MockHttpServletRequest oldRequestWithSession = new MockHttpServletRequest().     oldRequestWithSession.setSession(new MockHttpSession()).     this.oldRequestAttributesWithSession = new ServletRequestAttributes(oldRequestWithSession).     MockHttpServletRequest newRequestWithSession = new MockHttpServletRequest().     newRequestWithSession.setSession(new MockHttpSession()).     this.newRequestAttributesWithSession = new ServletRequestAttributes(newRequestWithSession). }
false;public;0;4;;@After public void tearDown() throws Exception {     RequestContextHolder.setRequestAttributes(null). }
false;public;0;8;;@Test public void testPrototype() {     ApplicationContext context = createContext(ScopedProxyMode.NO).     ScopedTestBean bean = (ScopedTestBean) context.getBean("prototype").     assertNotNull(bean).     assertTrue(context.isPrototype("prototype")).     assertFalse(context.isSingleton("prototype")). }
false;public;0;22;;@Test public void testSingletonScopeWithNoProxy() {     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     ApplicationContext context = createContext(ScopedProxyMode.NO).     ScopedTestBean bean = (ScopedTestBean) context.getBean("singleton").     assertTrue(context.isSingleton("singleton")).     assertFalse(context.isPrototype("singleton")).     // should not be a proxy     assertFalse(AopUtils.isAopProxy(bean)).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributes).     // not a proxy so this should not have changed     assertEquals(MODIFIED_NAME, bean.getName()).     // singleton bean, so name should be modified even after lookup     ScopedTestBean bean2 = (ScopedTestBean) context.getBean("singleton").     assertEquals(MODIFIED_NAME, bean2.getName()). }
false;public;0;20;;@Test public void testSingletonScopeIgnoresProxyInterfaces() {     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     ApplicationContext context = createContext(ScopedProxyMode.INTERFACES).     ScopedTestBean bean = (ScopedTestBean) context.getBean("singleton").     // should not be a proxy     assertFalse(AopUtils.isAopProxy(bean)).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributes).     // not a proxy so this should not have changed     assertEquals(MODIFIED_NAME, bean.getName()).     // singleton bean, so name should be modified even after lookup     ScopedTestBean bean2 = (ScopedTestBean) context.getBean("singleton").     assertEquals(MODIFIED_NAME, bean2.getName()). }
false;public;0;20;;@Test public void testSingletonScopeIgnoresProxyTargetClass() {     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     ApplicationContext context = createContext(ScopedProxyMode.TARGET_CLASS).     ScopedTestBean bean = (ScopedTestBean) context.getBean("singleton").     // should not be a proxy     assertFalse(AopUtils.isAopProxy(bean)).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributes).     // not a proxy so this should not have changed     assertEquals(MODIFIED_NAME, bean.getName()).     // singleton bean, so name should be modified even after lookup     ScopedTestBean bean2 = (ScopedTestBean) context.getBean("singleton").     assertEquals(MODIFIED_NAME, bean2.getName()). }
false;public;0;20;;@Test public void testRequestScopeWithNoProxy() {     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     ApplicationContext context = createContext(ScopedProxyMode.NO).     ScopedTestBean bean = (ScopedTestBean) context.getBean("request").     // should not be a proxy     assertFalse(AopUtils.isAopProxy(bean)).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributes).     // not a proxy so this should not have changed     assertEquals(MODIFIED_NAME, bean.getName()).     // but a newly retrieved bean should have the default name     ScopedTestBean bean2 = (ScopedTestBean) context.getBean("request").     assertEquals(DEFAULT_NAME, bean2.getName()). }
false;public;0;20;;@Test public void testRequestScopeWithProxiedInterfaces() {     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     ApplicationContext context = createContext(ScopedProxyMode.INTERFACES).     IScopedTestBean bean = (IScopedTestBean) context.getBean("request").     // should be dynamic proxy, implementing both interfaces     assertTrue(AopUtils.isJdkDynamicProxy(bean)).     assertTrue(bean instanceof AnotherScopeTestInterface).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributes).     // this is a proxy so it should be reset to default     assertEquals(DEFAULT_NAME, bean.getName()).     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     assertEquals(MODIFIED_NAME, bean.getName()). }
false;public;0;20;;@Test public void testRequestScopeWithProxiedTargetClass() {     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     ApplicationContext context = createContext(ScopedProxyMode.TARGET_CLASS).     IScopedTestBean bean = (IScopedTestBean) context.getBean("request").     // should be a class-based proxy     assertTrue(AopUtils.isCglibProxy(bean)).     assertTrue(bean instanceof RequestScopedTestBean).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributes).     // this is a proxy so it should be reset to default     assertEquals(DEFAULT_NAME, bean.getName()).     RequestContextHolder.setRequestAttributes(oldRequestAttributes).     assertEquals(MODIFIED_NAME, bean.getName()). }
false;public;0;20;;@Test public void testSessionScopeWithNoProxy() {     RequestContextHolder.setRequestAttributes(oldRequestAttributesWithSession).     ApplicationContext context = createContext(ScopedProxyMode.NO).     ScopedTestBean bean = (ScopedTestBean) context.getBean("session").     // should not be a proxy     assertFalse(AopUtils.isAopProxy(bean)).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributesWithSession).     // not a proxy so this should not have changed     assertEquals(MODIFIED_NAME, bean.getName()).     // but a newly retrieved bean should have the default name     ScopedTestBean bean2 = (ScopedTestBean) context.getBean("session").     assertEquals(DEFAULT_NAME, bean2.getName()). }
false;public;0;26;;@Test public void testSessionScopeWithProxiedInterfaces() {     RequestContextHolder.setRequestAttributes(oldRequestAttributesWithSession).     ApplicationContext context = createContext(ScopedProxyMode.INTERFACES).     IScopedTestBean bean = (IScopedTestBean) context.getBean("session").     // should be dynamic proxy, implementing both interfaces     assertTrue(AopUtils.isJdkDynamicProxy(bean)).     assertTrue(bean instanceof AnotherScopeTestInterface).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributesWithSession).     // this is a proxy so it should be reset to default     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     IScopedTestBean bean2 = (IScopedTestBean) context.getBean("session").     assertEquals(MODIFIED_NAME, bean2.getName()).     bean2.setName(DEFAULT_NAME).     assertEquals(DEFAULT_NAME, bean.getName()).     RequestContextHolder.setRequestAttributes(oldRequestAttributesWithSession).     assertEquals(MODIFIED_NAME, bean.getName()). }
false;public;0;27;;@Test public void testSessionScopeWithProxiedTargetClass() {     RequestContextHolder.setRequestAttributes(oldRequestAttributesWithSession).     ApplicationContext context = createContext(ScopedProxyMode.TARGET_CLASS).     IScopedTestBean bean = (IScopedTestBean) context.getBean("session").     // should be a class-based proxy     assertTrue(AopUtils.isCglibProxy(bean)).     assertTrue(bean instanceof ScopedTestBean).     assertTrue(bean instanceof SessionScopedTestBean).     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     RequestContextHolder.setRequestAttributes(newRequestAttributesWithSession).     // this is a proxy so it should be reset to default     assertEquals(DEFAULT_NAME, bean.getName()).     bean.setName(MODIFIED_NAME).     IScopedTestBean bean2 = (IScopedTestBean) context.getBean("session").     assertEquals(MODIFIED_NAME, bean2.getName()).     bean2.setName(DEFAULT_NAME).     assertEquals(DEFAULT_NAME, bean.getName()).     RequestContextHolder.setRequestAttributes(oldRequestAttributesWithSession).     assertEquals(MODIFIED_NAME, bean.getName()). }
false;public;1;22;;@Override public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) {     ScopeMetadata metadata = new ScopeMetadata().     if (definition instanceof AnnotatedBeanDefinition) {         AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition.         for (String type : annDef.getMetadata().getAnnotationTypes()) {             if (type.equals(javax.inject.Singleton.class.getName())) {                 metadata.setScopeName(BeanDefinition.SCOPE_SINGLETON).                 break.             } else if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) {                 metadata.setScopeName(type.substring(type.length() - 13, type.length() - 6).toLowerCase()).                 metadata.setScopedProxyMode(scopedProxyMode).                 break.             } else if (type.startsWith("javax.inject")) {                 metadata.setScopeName(BeanDefinition.SCOPE_PROTOTYPE).             }         }     }     return metadata. }
false;private;1;37;;private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) {     GenericWebApplicationContext context = new GenericWebApplicationContext().     ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context).     scanner.setIncludeAnnotationConfig(false).     scanner.setScopeMetadataResolver(new ScopeMetadataResolver() {          @Override         public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) {             ScopeMetadata metadata = new ScopeMetadata().             if (definition instanceof AnnotatedBeanDefinition) {                 AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition.                 for (String type : annDef.getMetadata().getAnnotationTypes()) {                     if (type.equals(javax.inject.Singleton.class.getName())) {                         metadata.setScopeName(BeanDefinition.SCOPE_SINGLETON).                         break.                     } else if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) {                         metadata.setScopeName(type.substring(type.length() - 13, type.length() - 6).toLowerCase()).                         metadata.setScopedProxyMode(scopedProxyMode).                         break.                     } else if (type.startsWith("javax.inject")) {                         metadata.setScopeName(BeanDefinition.SCOPE_PROTOTYPE).                     }                 }             }             return metadata.         }     }).     // Scan twice in order to find errors in the bean definition compatibility check.     scanner.scan(getClass().getPackage().getName()).     scanner.scan(getClass().getPackage().getName()).     context.registerAlias("classPathBeanDefinitionScannerJsr330ScopeIntegrationTests.SessionScopedTestBean", "session").     context.refresh().     return context. }
false;;0;1;;String getName().
false;;1;1;;void setName(String name).
false;public;0;2;;@Override public String getName() {     return this.name. }
false;public;1;2;;@Override public void setName(String name) {     this.name = name. }
