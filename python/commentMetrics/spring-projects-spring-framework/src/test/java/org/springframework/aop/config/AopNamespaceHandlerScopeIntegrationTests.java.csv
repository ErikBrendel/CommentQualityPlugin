commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() {     XmlWebApplicationContext wac = new XmlWebApplicationContext().     wac.setConfigLocations(CONTEXT).     wac.refresh().     this.context = wac. }
false;public;0;13;;@Test public void testSingletonScoping() throws Exception {     ITestBean scoped = (ITestBean) this.context.getBean("singletonScoped").     assertTrue("Should be AOP proxy", AopUtils.isAopProxy(scoped)).     assertTrue("Should be target class proxy", scoped instanceof TestBean).     String rob = "Rob Harrop".     String bram = "Bram Smeets".     assertEquals(rob, scoped.getName()).     scoped.setName(bram).     assertEquals(bram, scoped.getName()).     ITestBean deserialized = (ITestBean) SerializationTestUtils.serializeAndDeserialize(scoped).     assertEquals(bram, deserialized.getName()). }
false;public;0;27;;@Test public void testRequestScoping() throws Exception {     MockHttpServletRequest oldRequest = new MockHttpServletRequest().     MockHttpServletRequest newRequest = new MockHttpServletRequest().     RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(oldRequest)).     ITestBean scoped = (ITestBean) this.context.getBean("requestScoped").     assertTrue("Should be AOP proxy", AopUtils.isAopProxy(scoped)).     assertTrue("Should be target class proxy", scoped instanceof TestBean).     ITestBean testBean = (ITestBean) this.context.getBean("testBean").     assertTrue("Should be AOP proxy", AopUtils.isAopProxy(testBean)).     assertFalse("Regular bean should be JDK proxy", testBean instanceof TestBean).     String rob = "Rob Harrop".     String bram = "Bram Smeets".     assertEquals(rob, scoped.getName()).     scoped.setName(bram).     RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(newRequest)).     assertEquals(rob, scoped.getName()).     RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(oldRequest)).     assertEquals(bram, scoped.getName()).     assertTrue("Should have advisors", ((Advised) scoped).getAdvisors().length > 0). }
false;public;0;32;;@Test public void testSessionScoping() throws Exception {     MockHttpSession oldSession = new MockHttpSession().     MockHttpSession newSession = new MockHttpSession().     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(oldSession).     RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request)).     ITestBean scoped = (ITestBean) this.context.getBean("sessionScoped").     assertTrue("Should be AOP proxy", AopUtils.isAopProxy(scoped)).     assertFalse("Should not be target class proxy", scoped instanceof TestBean).     ITestBean scopedAlias = (ITestBean) this.context.getBean("sessionScopedAlias").     assertSame(scoped, scopedAlias).     ITestBean testBean = (ITestBean) this.context.getBean("testBean").     assertTrue("Should be AOP proxy", AopUtils.isAopProxy(testBean)).     assertFalse("Regular bean should be JDK proxy", testBean instanceof TestBean).     String rob = "Rob Harrop".     String bram = "Bram Smeets".     assertEquals(rob, scoped.getName()).     scoped.setName(bram).     request.setSession(newSession).     assertEquals(rob, scoped.getName()).     request.setSession(oldSession).     assertEquals(bram, scoped.getName()).     assertTrue("Should have advisors", ((Advised) scoped).getAdvisors().length > 0). }
