commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void repositoryIsNotTxProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class).     ctx.refresh().     try {         assertTxProxying(ctx).         fail("expected exception").     } catch (AssertionError ex) {         assertThat(ex.getMessage(), equalTo("FooRepository is not a TX proxy")).     } }
false;public;0;8;;@Test public void repositoryIsTxProxy_withDefaultTxManagerName() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, DefaultTxManagerNameConfig.class).     ctx.refresh().     assertTxProxying(ctx). }
false;public;0;8;;@Test public void repositoryIsTxProxy_withCustomTxManagerName() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, CustomTxManagerNameConfig.class).     ctx.refresh().     assertTxProxying(ctx). }
false;public;0;4;;@Test public void repositoryIsTxProxy_withNonConventionalTxManagerName_fallsBackToByTypeLookup() {     assertTxProxying(new AnnotationConfigApplicationContext(Config.class, NonConventionalTxManagerNameConfig.class)). }
false;public;0;9;;@Test public void repositoryIsClassBasedTxProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, ProxyTargetClassTxConfig.class).     ctx.refresh().     assertTxProxying(ctx).     assertThat(AopUtils.isCglibProxy(ctx.getBean(FooRepository.class)), is(true)). }
false;public;0;14;;@Test public void repositoryUsesAspectJAdviceMode() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class, AspectJTxConfig.class).     try {         ctx.refresh().     } catch (Exception ex) {         // this test is a bit fragile, but gets the job done, proving that an         // attempt was made to look up the AJ aspect. It's due to classpath issues         // in .integration-tests that it's not found.         assertTrue(ex.getMessage().contains("AspectJJtaTransactionManagementConfiguration")).     } }
false;public;0;14;;@Test public void implicitTxManager() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ImplicitTxManagerConfig.class).     ctx.refresh().     FooRepository fooRepository = ctx.getBean(FooRepository.class).     fooRepository.findAll().     CallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class).     assertThat(txManager.begun, equalTo(1)).     assertThat(txManager.commits, equalTo(1)).     assertThat(txManager.rollbacks, equalTo(0)). }
false;public;0;19;;@Test public void explicitTxManager() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ExplicitTxManagerConfig.class).     ctx.refresh().     FooRepository fooRepository = ctx.getBean(FooRepository.class).     fooRepository.findAll().     CallCountingTransactionManager txManager1 = ctx.getBean("txManager1", CallCountingTransactionManager.class).     assertThat(txManager1.begun, equalTo(1)).     assertThat(txManager1.commits, equalTo(1)).     assertThat(txManager1.rollbacks, equalTo(0)).     CallCountingTransactionManager txManager2 = ctx.getBean("txManager2", CallCountingTransactionManager.class).     assertThat(txManager2.begun, equalTo(0)).     assertThat(txManager2.commits, equalTo(0)).     assertThat(txManager2.rollbacks, equalTo(0)). }
false;public;0;6;;@Test public void apcEscalation() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(EnableTxAndCachingConfig.class).     ctx.refresh(). }
false;private;1;17;;private void assertTxProxying(AnnotationConfigApplicationContext ctx) {     FooRepository repo = ctx.getBean(FooRepository.class).     boolean isTxProxy = false.     if (AopUtils.isAopProxy(repo)) {         for (Advisor advisor : ((Advised) repo).getAdvisors()) {             if (advisor instanceof BeanFactoryTransactionAttributeSourceAdvisor) {                 isTxProxy = true.                 break.             }         }     }     assertTrue("FooRepository is not a TX proxy", isTxProxy).     // trigger a transaction     repo.findAll(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Bean public FooRepository fooRepository() {     return new DummyFooRepository(). }
false;public;0;8;;@Bean public CacheManager cacheManager() {     SimpleCacheManager mgr = new SimpleCacheManager().     ArrayList<Cache> caches = new ArrayList<>().     caches.add(new ConcurrentMapCache("")).     mgr.setCaches(caches).     return mgr. }
false;public;0;4;;@Bean public PlatformTransactionManager txManager() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Bean public FooRepository fooRepository() {     return new DummyFooRepository(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager1() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager2() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Override public PlatformTransactionManager annotationDrivenTransactionManager() {     return txManager1(). }
false;public;0;4;;@Bean public FooRepository fooRepository() {     return new DummyFooRepository(). }
false;;1;4;;@Bean PlatformTransactionManager transactionManager(DataSource dataSource) {     return new DataSourceTransactionManager(dataSource). }
false;;1;4;;@Bean PlatformTransactionManager txManager(DataSource dataSource) {     return new DataSourceTransactionManager(dataSource). }
false;;1;4;;@Bean PlatformTransactionManager txManager(DataSource dataSource) {     return new DataSourceTransactionManager(dataSource). }
false;;1;4;;@Bean PlatformTransactionManager transactionManager(DataSource dataSource) {     return new DataSourceTransactionManager(dataSource). }
false;;1;4;;@Bean PlatformTransactionManager transactionManager(DataSource dataSource) {     return new DataSourceTransactionManager(dataSource). }
false;;0;6;;@Bean FooRepository fooRepository() {     JdbcFooRepository repos = new JdbcFooRepository().     repos.setDataSource(dataSource()).     return repos. }
false;;0;6;;@Bean DataSource dataSource() {     return new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.HSQL).build(). }
false;;0;1;;List<Object> findAll().
false;public;1;2;;public void setDataSource(DataSource dataSource) { }
false;public;0;5;;@Override @Transactional public List<Object> findAll() {     return Collections.emptyList(). }
false;public;0;5;;@Override @Transactional public List<Object> findAll() {     return Collections.emptyList(). }
