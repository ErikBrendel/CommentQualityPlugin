commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Return a bean factory with attributes and EnterpriseServices configured.  */ ;/**  * Return a bean factory with attributes and EnterpriseServices configured.  */ protected BeanFactory getBeanFactory() throws IOException {     return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS). }
false;public;0;6;;@Test public void testDefaultExclusionPrefix() throws Exception {     DefaultAdvisorAutoProxyCreator aapc = (DefaultAdvisorAutoProxyCreator) getBeanFactory().getBean(ADVISOR_APC_BEAN_NAME).     assertEquals(ADVISOR_APC_BEAN_NAME + DefaultAdvisorAutoProxyCreator.SEPARATOR, aapc.getAdvisorBeanNamePrefix()).     assertFalse(aapc.isUsePrefix()). }
true;public;0;6;/**  * If no pointcuts match (no attrs) there should be proxying.  */ ;/**  * If no pointcuts match (no attrs) there should be proxying.  */ @Test public void testNoProxy() throws Exception {     BeanFactory bf = getBeanFactory().     Object o = bf.getBean("noSetters").     assertFalse(AopUtils.isAopProxy(o)). }
false;public;0;6;;@Test public void testTxIsProxied() throws Exception {     BeanFactory bf = getBeanFactory().     ITestBean test = (ITestBean) bf.getBean("test").     assertTrue(AopUtils.isAopProxy(test)). }
false;public;0;9;;@Test public void testRegexpApplied() throws Exception {     BeanFactory bf = getBeanFactory().     ITestBean test = (ITestBean) bf.getBean("test").     MethodCounter counter = (MethodCounter) bf.getBean("countingAdvice").     assertEquals(0, counter.getCalls()).     test.getName().     assertEquals(1, counter.getCalls()). }
false;public;0;18;;@Test public void testTransactionAttributeOnMethod() throws Exception {     BeanFactory bf = getBeanFactory().     ITestBean test = (ITestBean) bf.getBean("test").     CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME).     OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction").     assertEquals(0, txc.getCountingBeforeAdvice().getCalls()).     assertEquals(0, txMan.commits).     assertEquals("Initial value was correct", 4, test.getAge()).     int newAge = 5.     test.setAge(newAge).     assertEquals(1, txc.getCountingBeforeAdvice().getCalls()).     assertEquals("New value set correctly", newAge, test.getAge()).     assertEquals("Transaction counts match", 1, txMan.commits). }
true;public;0;25;/**  * Should not roll back on servlet exception.  */ ;/**  * Should not roll back on servlet exception.  */ @Test public void testRollbackRulesOnMethodCauseRollback() throws Exception {     BeanFactory bf = getBeanFactory().     Rollback rb = (Rollback) bf.getBean("rollback").     CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME).     OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction").     assertEquals(0, txc.getCountingBeforeAdvice().getCalls()).     assertEquals(0, txMan.commits).     rb.echoException(null).     // Fires only on setters     assertEquals(0, txc.getCountingBeforeAdvice().getCalls()).     assertEquals("Transaction counts match", 1, txMan.commits).     assertEquals(0, txMan.rollbacks).     Exception ex = new Exception().     try {         rb.echoException(ex).     } catch (Exception actual) {         assertEquals(ex, actual).     }     assertEquals("Transaction counts match", 1, txMan.rollbacks). }
false;public;0;17;;@Test public void testRollbackRulesOnMethodPreventRollback() throws Exception {     BeanFactory bf = getBeanFactory().     Rollback rb = (Rollback) bf.getBean("rollback").     CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME).     assertEquals(0, txMan.commits).     // Should NOT roll back on ServletException     try {         rb.echoException(new ServletException()).     } catch (ServletException ex) {     }     assertEquals("Transaction counts match", 1, txMan.commits). }
false;public;0;17;;@Test public void testProgrammaticRollback() throws Exception {     BeanFactory bf = getBeanFactory().     Object bean = bf.getBean(TXMANAGER_BEAN_NAME).     assertTrue(bean instanceof CallCountingTransactionManager).     CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME).     Rollback rb = (Rollback) bf.getBean("rollback").     assertEquals(0, txMan.commits).     rb.rollbackOnly(false).     assertEquals("Transaction counts match", 1, txMan.commits).     assertEquals(0, txMan.rollbacks).     // Will cause rollback only     rb.rollbackOnly(true).     assertEquals(1, txMan.rollbacks). }
true;public;1;3;/**  * This method is solely to allow us to create a mixture of dependencies in  * the bean definitions. The dependencies don't have any meaning, and don't  * <b>do</b> anything.  */ ;/**  * This method is solely to allow us to create a mixture of dependencies in  * the bean definitions. The dependencies don't have any meaning, and don't  * <b>do</b> anything.  */ public void setDependencies(List<?> l) { }
true;public;2;4;/**  * @see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class)  */ ;/**  * @see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class)  */ @Override public boolean matches(Method m, @Nullable Class<?> targetClass) {     return false. }
false;public;0;3;;public void A() { }
false;public;0;3;;public int getB() {     return -1. }
false;public;1;3;;public void setRequireTransactionContext(boolean requireTransactionContext) {     this.requireTransactionContext = requireTransactionContext. }
false;public;0;3;;public boolean isRequireTransactionContext() {     return requireTransactionContext. }
false;public;0;3;;public CountingBeforeAdvice getCountingBeforeAdvice() {     return (CountingBeforeAdvice) getAdvice(). }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     setAdvice(new TxCountingBeforeAdvice()). }
false;public;2;4;;@Override public boolean matches(Method method, @Nullable Class<?> targetClass) {     return method.getName().startsWith("setAge"). }
false;public;3;17;;@Override public void before(Method method, Object[] args, Object target) throws Throwable {     // do transaction checks     if (requireTransactionContext) {         TransactionInterceptor.currentTransactionStatus().     } else {         try {             TransactionInterceptor.currentTransactionStatus().             throw new RuntimeException("Shouldn't have a transaction").         } catch (NoTransactionException ex) {         // this is Ok         }     }     super.before(method, args, target). }
true;public;1;5;/**  * Inherits transaction attribute.  * Illustrates programmatic rollback.  * @param rollbackOnly  */ ;/**  * Inherits transaction attribute.  * Illustrates programmatic rollback.  * @param rollbackOnly  */ public void rollbackOnly(boolean rollbackOnly) {     if (rollbackOnly) {         setRollbackOnly().     } }
true;protected;0;3;/**  * Extracted in a protected method to facilitate testing  */ ;/**  * Extracted in a protected method to facilitate testing  */ protected void setRollbackOnly() {     TransactionInterceptor.currentTransactionStatus().setRollbackOnly(). }
true;public;1;4;/**  * @org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )  * @org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )  * @org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" )  */ ;/**  * @org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )  * @org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )  * @org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" )  */ public void echoException(Exception ex) throws Exception {     if (ex != null)         throw ex. }
