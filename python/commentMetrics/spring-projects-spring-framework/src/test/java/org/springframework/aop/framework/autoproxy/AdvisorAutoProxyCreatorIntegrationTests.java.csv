# id;timestamp;commentText;codeText;commentWords;codeWords
NeverMatchAdvisor -> @Override 	public boolean matches(Method m, Class<?> targetClass);1356735495;@see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class);@Override_	public boolean matches(Method m, Class<?> targetClass) {_		return false__	};see,org,springframework,aop,method,matcher,matches,java,lang,reflect,method,java,lang,class;override,public,boolean,matches,method,m,class,target,class,return,false
NeverMatchAdvisor -> @Override 	public boolean matches(Method m, Class<?> targetClass);1362408075;@see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class);@Override_	public boolean matches(Method m, Class<?> targetClass) {_		return false__	};see,org,springframework,aop,method,matcher,matches,java,lang,reflect,method,java,lang,class;override,public,boolean,matches,method,m,class,target,class,return,false
NeverMatchAdvisor -> @Override 	public boolean matches(Method m, Class<?> targetClass);1469546119;@see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class);@Override_	public boolean matches(Method m, Class<?> targetClass) {_		return false__	};see,org,springframework,aop,method,matcher,matches,java,lang,reflect,method,java,lang,class;override,public,boolean,matches,method,m,class,target,class,return,false
AdvisorAutoProxyCreatorIntegrationTests -> protected BeanFactory getBeanFactory() throws IOException;1328020251;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorIntegrationTests -> protected BeanFactory getBeanFactory() throws IOException;1356735495;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorIntegrationTests -> protected BeanFactory getBeanFactory() throws IOException;1362408075;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorIntegrationTests -> protected BeanFactory getBeanFactory() throws IOException;1469546119;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorIntegrationTests -> protected BeanFactory getBeanFactory() throws IOException;1496242568;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorIntegrationTests -> protected BeanFactory getBeanFactory() throws IOException;1533725446;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
Rollback -> protected void setRollbackOnly();1328020251;Extracted in a protected method to facilitate testing;protected void setRollbackOnly() {_		TransactionInterceptor.currentTransactionStatus().setRollbackOnly()__	};extracted,in,a,protected,method,to,facilitate,testing;protected,void,set,rollback,only,transaction,interceptor,current,transaction,status,set,rollback,only
Rollback -> protected void setRollbackOnly();1356735495;Extracted in a protected method to facilitate testing;protected void setRollbackOnly() {_		TransactionInterceptor.currentTransactionStatus().setRollbackOnly()__	};extracted,in,a,protected,method,to,facilitate,testing;protected,void,set,rollback,only,transaction,interceptor,current,transaction,status,set,rollback,only
Rollback -> protected void setRollbackOnly();1362408075;Extracted in a protected method to facilitate testing;protected void setRollbackOnly() {_		TransactionInterceptor.currentTransactionStatus().setRollbackOnly()__	};extracted,in,a,protected,method,to,facilitate,testing;protected,void,set,rollback,only,transaction,interceptor,current,transaction,status,set,rollback,only
Rollback -> protected void setRollbackOnly();1469546119;Extracted in a protected method to facilitate testing;protected void setRollbackOnly() {_		TransactionInterceptor.currentTransactionStatus().setRollbackOnly()__	};extracted,in,a,protected,method,to,facilitate,testing;protected,void,set,rollback,only,transaction,interceptor,current,transaction,status,set,rollback,only
Rollback -> protected void setRollbackOnly();1496242568;Extracted in a protected method to facilitate testing;protected void setRollbackOnly() {_		TransactionInterceptor.currentTransactionStatus().setRollbackOnly()__	};extracted,in,a,protected,method,to,facilitate,testing;protected,void,set,rollback,only,transaction,interceptor,current,transaction,status,set,rollback,only
Rollback -> protected void setRollbackOnly();1533725446;Extracted in a protected method to facilitate testing;protected void setRollbackOnly() {_		TransactionInterceptor.currentTransactionStatus().setRollbackOnly()__	};extracted,in,a,protected,method,to,facilitate,testing;protected,void,set,rollback,only,transaction,interceptor,current,transaction,status,set,rollback,only
NeverMatchAdvisor -> public void setDependencies(List<?> l);1328020251;This method is solely to allow us to create a mixture of dependencies in_the bean definitions. The dependencies don't have any meaning, and don't_<b>do</b> anything.;public void setDependencies(List<?> l) {_		_	};this,method,is,solely,to,allow,us,to,create,a,mixture,of,dependencies,in,the,bean,definitions,the,dependencies,don,t,have,any,meaning,and,don,t,b,do,b,anything;public,void,set,dependencies,list,l
NeverMatchAdvisor -> public void setDependencies(List<?> l);1356735495;This method is solely to allow us to create a mixture of dependencies in_the bean definitions. The dependencies don't have any meaning, and don't_<b>do</b> anything.;public void setDependencies(List<?> l) {__	};this,method,is,solely,to,allow,us,to,create,a,mixture,of,dependencies,in,the,bean,definitions,the,dependencies,don,t,have,any,meaning,and,don,t,b,do,b,anything;public,void,set,dependencies,list,l
NeverMatchAdvisor -> public void setDependencies(List<?> l);1362408075;This method is solely to allow us to create a mixture of dependencies in_the bean definitions. The dependencies don't have any meaning, and don't_<b>do</b> anything.;public void setDependencies(List<?> l) {__	};this,method,is,solely,to,allow,us,to,create,a,mixture,of,dependencies,in,the,bean,definitions,the,dependencies,don,t,have,any,meaning,and,don,t,b,do,b,anything;public,void,set,dependencies,list,l
NeverMatchAdvisor -> public void setDependencies(List<?> l);1469546119;This method is solely to allow us to create a mixture of dependencies in_the bean definitions. The dependencies don't have any meaning, and don't_<b>do</b> anything.;public void setDependencies(List<?> l) {__	};this,method,is,solely,to,allow,us,to,create,a,mixture,of,dependencies,in,the,bean,definitions,the,dependencies,don,t,have,any,meaning,and,don,t,b,do,b,anything;public,void,set,dependencies,list,l
NeverMatchAdvisor -> public void setDependencies(List<?> l);1496242568;This method is solely to allow us to create a mixture of dependencies in_the bean definitions. The dependencies don't have any meaning, and don't_<b>do</b> anything.;public void setDependencies(List<?> l) {__	};this,method,is,solely,to,allow,us,to,create,a,mixture,of,dependencies,in,the,bean,definitions,the,dependencies,don,t,have,any,meaning,and,don,t,b,do,b,anything;public,void,set,dependencies,list,l
NeverMatchAdvisor -> public void setDependencies(List<?> l);1533725446;This method is solely to allow us to create a mixture of dependencies in_the bean definitions. The dependencies don't have any meaning, and don't_<b>do</b> anything.;public void setDependencies(List<?> l) {__	};this,method,is,solely,to,allow,us,to,create,a,mixture,of,dependencies,in,the,bean,definitions,the,dependencies,don,t,have,any,meaning,and,don,t,b,do,b,anything;public,void,set,dependencies,list,l
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testRollbackRulesOnMethodCauseRollback() throws Exception;1328020251;Should not roll back on servlet exception.;@Test_	public void testRollbackRulesOnMethodCauseRollback() throws Exception {_		BeanFactory bf = getBeanFactory()__		Rollback rb = (Rollback) bf.getBean("rollback")___		CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME)__		OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction")__		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())___		assertEquals(0, txMan.commits)__		rb.echoException(null)__		_		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())__		assertEquals("Transaction counts match", 1, txMan.commits)___		assertEquals(0, txMan.rollbacks)__		Exception ex = new Exception()__		try {_			rb.echoException(ex)__		}_		catch (Exception actual) {_			assertEquals(ex, actual)__		}_		assertEquals("Transaction counts match", 1, txMan.rollbacks)__	};should,not,roll,back,on,servlet,exception;test,public,void,test,rollback,rules,on,method,cause,rollback,throws,exception,bean,factory,bf,get,bean,factory,rollback,rb,rollback,bf,get,bean,rollback,call,counting,transaction,manager,tx,man,call,counting,transaction,manager,bf,get,bean,ordered,tx,check,advisor,txc,ordered,tx,check,advisor,bf,get,bean,ordered,before,transaction,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,0,tx,man,commits,rb,echo,exception,null,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,transaction,counts,match,1,tx,man,commits,assert,equals,0,tx,man,rollbacks,exception,ex,new,exception,try,rb,echo,exception,ex,catch,exception,actual,assert,equals,ex,actual,assert,equals,transaction,counts,match,1,tx,man,rollbacks
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testRollbackRulesOnMethodCauseRollback() throws Exception;1356735495;Should not roll back on servlet exception.;@Test_	public void testRollbackRulesOnMethodCauseRollback() throws Exception {_		BeanFactory bf = getBeanFactory()__		Rollback rb = (Rollback) bf.getBean("rollback")___		CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME)__		OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction")__		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())___		assertEquals(0, txMan.commits)__		rb.echoException(null)__		_		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())__		assertEquals("Transaction counts match", 1, txMan.commits)___		assertEquals(0, txMan.rollbacks)__		Exception ex = new Exception()__		try {_			rb.echoException(ex)__		}_		catch (Exception actual) {_			assertEquals(ex, actual)__		}_		assertEquals("Transaction counts match", 1, txMan.rollbacks)__	};should,not,roll,back,on,servlet,exception;test,public,void,test,rollback,rules,on,method,cause,rollback,throws,exception,bean,factory,bf,get,bean,factory,rollback,rb,rollback,bf,get,bean,rollback,call,counting,transaction,manager,tx,man,call,counting,transaction,manager,bf,get,bean,ordered,tx,check,advisor,txc,ordered,tx,check,advisor,bf,get,bean,ordered,before,transaction,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,0,tx,man,commits,rb,echo,exception,null,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,transaction,counts,match,1,tx,man,commits,assert,equals,0,tx,man,rollbacks,exception,ex,new,exception,try,rb,echo,exception,ex,catch,exception,actual,assert,equals,ex,actual,assert,equals,transaction,counts,match,1,tx,man,rollbacks
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testRollbackRulesOnMethodCauseRollback() throws Exception;1362408075;Should not roll back on servlet exception.;@Test_	public void testRollbackRulesOnMethodCauseRollback() throws Exception {_		BeanFactory bf = getBeanFactory()__		Rollback rb = (Rollback) bf.getBean("rollback")___		CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME)__		OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction")__		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())___		assertEquals(0, txMan.commits)__		rb.echoException(null)__		_		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())__		assertEquals("Transaction counts match", 1, txMan.commits)___		assertEquals(0, txMan.rollbacks)__		Exception ex = new Exception()__		try {_			rb.echoException(ex)__		}_		catch (Exception actual) {_			assertEquals(ex, actual)__		}_		assertEquals("Transaction counts match", 1, txMan.rollbacks)__	};should,not,roll,back,on,servlet,exception;test,public,void,test,rollback,rules,on,method,cause,rollback,throws,exception,bean,factory,bf,get,bean,factory,rollback,rb,rollback,bf,get,bean,rollback,call,counting,transaction,manager,tx,man,call,counting,transaction,manager,bf,get,bean,ordered,tx,check,advisor,txc,ordered,tx,check,advisor,bf,get,bean,ordered,before,transaction,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,0,tx,man,commits,rb,echo,exception,null,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,transaction,counts,match,1,tx,man,commits,assert,equals,0,tx,man,rollbacks,exception,ex,new,exception,try,rb,echo,exception,ex,catch,exception,actual,assert,equals,ex,actual,assert,equals,transaction,counts,match,1,tx,man,rollbacks
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testRollbackRulesOnMethodCauseRollback() throws Exception;1469546119;Should not roll back on servlet exception.;@Test_	public void testRollbackRulesOnMethodCauseRollback() throws Exception {_		BeanFactory bf = getBeanFactory()__		Rollback rb = (Rollback) bf.getBean("rollback")___		CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME)__		OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction")__		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())___		assertEquals(0, txMan.commits)__		rb.echoException(null)__		_		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())__		assertEquals("Transaction counts match", 1, txMan.commits)___		assertEquals(0, txMan.rollbacks)__		Exception ex = new Exception()__		try {_			rb.echoException(ex)__		}_		catch (Exception actual) {_			assertEquals(ex, actual)__		}_		assertEquals("Transaction counts match", 1, txMan.rollbacks)__	};should,not,roll,back,on,servlet,exception;test,public,void,test,rollback,rules,on,method,cause,rollback,throws,exception,bean,factory,bf,get,bean,factory,rollback,rb,rollback,bf,get,bean,rollback,call,counting,transaction,manager,tx,man,call,counting,transaction,manager,bf,get,bean,ordered,tx,check,advisor,txc,ordered,tx,check,advisor,bf,get,bean,ordered,before,transaction,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,0,tx,man,commits,rb,echo,exception,null,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,transaction,counts,match,1,tx,man,commits,assert,equals,0,tx,man,rollbacks,exception,ex,new,exception,try,rb,echo,exception,ex,catch,exception,actual,assert,equals,ex,actual,assert,equals,transaction,counts,match,1,tx,man,rollbacks
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testRollbackRulesOnMethodCauseRollback() throws Exception;1496242568;Should not roll back on servlet exception.;@Test_	public void testRollbackRulesOnMethodCauseRollback() throws Exception {_		BeanFactory bf = getBeanFactory()__		Rollback rb = (Rollback) bf.getBean("rollback")___		CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME)__		OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction")__		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())___		assertEquals(0, txMan.commits)__		rb.echoException(null)__		_		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())__		assertEquals("Transaction counts match", 1, txMan.commits)___		assertEquals(0, txMan.rollbacks)__		Exception ex = new Exception()__		try {_			rb.echoException(ex)__		}_		catch (Exception actual) {_			assertEquals(ex, actual)__		}_		assertEquals("Transaction counts match", 1, txMan.rollbacks)__	};should,not,roll,back,on,servlet,exception;test,public,void,test,rollback,rules,on,method,cause,rollback,throws,exception,bean,factory,bf,get,bean,factory,rollback,rb,rollback,bf,get,bean,rollback,call,counting,transaction,manager,tx,man,call,counting,transaction,manager,bf,get,bean,ordered,tx,check,advisor,txc,ordered,tx,check,advisor,bf,get,bean,ordered,before,transaction,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,0,tx,man,commits,rb,echo,exception,null,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,transaction,counts,match,1,tx,man,commits,assert,equals,0,tx,man,rollbacks,exception,ex,new,exception,try,rb,echo,exception,ex,catch,exception,actual,assert,equals,ex,actual,assert,equals,transaction,counts,match,1,tx,man,rollbacks
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testRollbackRulesOnMethodCauseRollback() throws Exception;1533725446;Should not roll back on servlet exception.;@Test_	public void testRollbackRulesOnMethodCauseRollback() throws Exception {_		BeanFactory bf = getBeanFactory()__		Rollback rb = (Rollback) bf.getBean("rollback")___		CallCountingTransactionManager txMan = (CallCountingTransactionManager) bf.getBean(TXMANAGER_BEAN_NAME)__		OrderedTxCheckAdvisor txc = (OrderedTxCheckAdvisor) bf.getBean("orderedBeforeTransaction")__		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())___		assertEquals(0, txMan.commits)__		rb.echoException(null)__		_		assertEquals(0, txc.getCountingBeforeAdvice().getCalls())__		assertEquals("Transaction counts match", 1, txMan.commits)___		assertEquals(0, txMan.rollbacks)__		Exception ex = new Exception()__		try {_			rb.echoException(ex)__		}_		catch (Exception actual) {_			assertEquals(ex, actual)__		}_		assertEquals("Transaction counts match", 1, txMan.rollbacks)__	};should,not,roll,back,on,servlet,exception;test,public,void,test,rollback,rules,on,method,cause,rollback,throws,exception,bean,factory,bf,get,bean,factory,rollback,rb,rollback,bf,get,bean,rollback,call,counting,transaction,manager,tx,man,call,counting,transaction,manager,bf,get,bean,ordered,tx,check,advisor,txc,ordered,tx,check,advisor,bf,get,bean,ordered,before,transaction,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,0,tx,man,commits,rb,echo,exception,null,assert,equals,0,txc,get,counting,before,advice,get,calls,assert,equals,transaction,counts,match,1,tx,man,commits,assert,equals,0,tx,man,rollbacks,exception,ex,new,exception,try,rb,echo,exception,ex,catch,exception,actual,assert,equals,ex,actual,assert,equals,transaction,counts,match,1,tx,man,rollbacks
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testNoProxy() throws Exception;1328020251;If no pointcuts match (no attrs) there should be proxying.;@Test_	public void testNoProxy() throws Exception {_		BeanFactory bf = getBeanFactory()__		Object o = bf.getBean("noSetters")__		assertFalse(AopUtils.isAopProxy(o))__	};if,no,pointcuts,match,no,attrs,there,should,be,proxying;test,public,void,test,no,proxy,throws,exception,bean,factory,bf,get,bean,factory,object,o,bf,get,bean,no,setters,assert,false,aop,utils,is,aop,proxy,o
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testNoProxy() throws Exception;1356735495;If no pointcuts match (no attrs) there should be proxying.;@Test_	public void testNoProxy() throws Exception {_		BeanFactory bf = getBeanFactory()__		Object o = bf.getBean("noSetters")__		assertFalse(AopUtils.isAopProxy(o))__	};if,no,pointcuts,match,no,attrs,there,should,be,proxying;test,public,void,test,no,proxy,throws,exception,bean,factory,bf,get,bean,factory,object,o,bf,get,bean,no,setters,assert,false,aop,utils,is,aop,proxy,o
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testNoProxy() throws Exception;1362408075;If no pointcuts match (no attrs) there should be proxying.;@Test_	public void testNoProxy() throws Exception {_		BeanFactory bf = getBeanFactory()__		Object o = bf.getBean("noSetters")__		assertFalse(AopUtils.isAopProxy(o))__	};if,no,pointcuts,match,no,attrs,there,should,be,proxying;test,public,void,test,no,proxy,throws,exception,bean,factory,bf,get,bean,factory,object,o,bf,get,bean,no,setters,assert,false,aop,utils,is,aop,proxy,o
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testNoProxy() throws Exception;1469546119;If no pointcuts match (no attrs) there should be proxying.;@Test_	public void testNoProxy() throws Exception {_		BeanFactory bf = getBeanFactory()__		Object o = bf.getBean("noSetters")__		assertFalse(AopUtils.isAopProxy(o))__	};if,no,pointcuts,match,no,attrs,there,should,be,proxying;test,public,void,test,no,proxy,throws,exception,bean,factory,bf,get,bean,factory,object,o,bf,get,bean,no,setters,assert,false,aop,utils,is,aop,proxy,o
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testNoProxy() throws Exception;1496242568;If no pointcuts match (no attrs) there should be proxying.;@Test_	public void testNoProxy() throws Exception {_		BeanFactory bf = getBeanFactory()__		Object o = bf.getBean("noSetters")__		assertFalse(AopUtils.isAopProxy(o))__	};if,no,pointcuts,match,no,attrs,there,should,be,proxying;test,public,void,test,no,proxy,throws,exception,bean,factory,bf,get,bean,factory,object,o,bf,get,bean,no,setters,assert,false,aop,utils,is,aop,proxy,o
AdvisorAutoProxyCreatorIntegrationTests -> @Test 	public void testNoProxy() throws Exception;1533725446;If no pointcuts match (no attrs) there should be proxying.;@Test_	public void testNoProxy() throws Exception {_		BeanFactory bf = getBeanFactory()__		Object o = bf.getBean("noSetters")__		assertFalse(AopUtils.isAopProxy(o))__	};if,no,pointcuts,match,no,attrs,there,should,be,proxying;test,public,void,test,no,proxy,throws,exception,bean,factory,bf,get,bean,factory,object,o,bf,get,bean,no,setters,assert,false,aop,utils,is,aop,proxy,o
NeverMatchAdvisor -> @Override 	public boolean matches(Method m, @Nullable Class<?> targetClass);1496242568;@see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class);@Override_	public boolean matches(Method m, @Nullable Class<?> targetClass) {_		return false__	};see,org,springframework,aop,method,matcher,matches,java,lang,reflect,method,java,lang,class;override,public,boolean,matches,method,m,nullable,class,target,class,return,false
NeverMatchAdvisor -> @Override 	public boolean matches(Method m, @Nullable Class<?> targetClass);1533725446;@see org.springframework.aop.MethodMatcher#matches(java.lang.reflect.Method, java.lang.Class);@Override_	public boolean matches(Method m, @Nullable Class<?> targetClass) {_		return false__	};see,org,springframework,aop,method,matcher,matches,java,lang,reflect,method,java,lang,class;override,public,boolean,matches,method,m,nullable,class,target,class,return,false
Rollback -> public void echoException(Exception ex) throws Exception;1328020251;@org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )_@org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )_@org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" );public void echoException(Exception ex) throws Exception {_		if (ex != null)_			throw ex__	};org,springframework,transaction,interceptor,rule,based,transaction,timeout,1,org,springframework,transaction,interceptor,rollback,rule,java,lang,exception,org,springframework,transaction,interceptor,no,rollback,rule,servlet,exception;public,void,echo,exception,exception,ex,throws,exception,if,ex,null,throw,ex
Rollback -> public void echoException(Exception ex) throws Exception;1356735495;@org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )_@org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )_@org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" );public void echoException(Exception ex) throws Exception {_		if (ex != null)_			throw ex__	};org,springframework,transaction,interceptor,rule,based,transaction,timeout,1,org,springframework,transaction,interceptor,rollback,rule,java,lang,exception,org,springframework,transaction,interceptor,no,rollback,rule,servlet,exception;public,void,echo,exception,exception,ex,throws,exception,if,ex,null,throw,ex
Rollback -> public void echoException(Exception ex) throws Exception;1362408075;@org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )_@org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )_@org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" );public void echoException(Exception ex) throws Exception {_		if (ex != null)_			throw ex__	};org,springframework,transaction,interceptor,rule,based,transaction,timeout,1,org,springframework,transaction,interceptor,rollback,rule,java,lang,exception,org,springframework,transaction,interceptor,no,rollback,rule,servlet,exception;public,void,echo,exception,exception,ex,throws,exception,if,ex,null,throw,ex
Rollback -> public void echoException(Exception ex) throws Exception;1469546119;@org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )_@org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )_@org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" );public void echoException(Exception ex) throws Exception {_		if (ex != null)_			throw ex__	};org,springframework,transaction,interceptor,rule,based,transaction,timeout,1,org,springframework,transaction,interceptor,rollback,rule,java,lang,exception,org,springframework,transaction,interceptor,no,rollback,rule,servlet,exception;public,void,echo,exception,exception,ex,throws,exception,if,ex,null,throw,ex
Rollback -> public void echoException(Exception ex) throws Exception;1496242568;@org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )_@org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )_@org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" );public void echoException(Exception ex) throws Exception {_		if (ex != null)_			throw ex__	};org,springframework,transaction,interceptor,rule,based,transaction,timeout,1,org,springframework,transaction,interceptor,rollback,rule,java,lang,exception,org,springframework,transaction,interceptor,no,rollback,rule,servlet,exception;public,void,echo,exception,exception,ex,throws,exception,if,ex,null,throw,ex
Rollback -> public void echoException(Exception ex) throws Exception;1533725446;@org.springframework.transaction.interceptor.RuleBasedTransaction ( timeout=-1 )_@org.springframework.transaction.interceptor.RollbackRule ( "java.lang.Exception" )_@org.springframework.transaction.interceptor.NoRollbackRule ( "ServletException" );public void echoException(Exception ex) throws Exception {_		if (ex != null)_			throw ex__	};org,springframework,transaction,interceptor,rule,based,transaction,timeout,1,org,springframework,transaction,interceptor,rollback,rule,java,lang,exception,org,springframework,transaction,interceptor,no,rollback,rule,servlet,exception;public,void,echo,exception,exception,ex,throws,exception,if,ex,null,throw,ex
Rollback -> public void rollbackOnly(boolean rollbackOnly);1328020251;Inherits transaction attribute._Illustrates programmatic rollback._@param rollbackOnly;public void rollbackOnly(boolean rollbackOnly) {_		if (rollbackOnly) {_			setRollbackOnly()__		}_	};inherits,transaction,attribute,illustrates,programmatic,rollback,param,rollback,only;public,void,rollback,only,boolean,rollback,only,if,rollback,only,set,rollback,only
Rollback -> public void rollbackOnly(boolean rollbackOnly);1356735495;Inherits transaction attribute._Illustrates programmatic rollback._@param rollbackOnly;public void rollbackOnly(boolean rollbackOnly) {_		if (rollbackOnly) {_			setRollbackOnly()__		}_	};inherits,transaction,attribute,illustrates,programmatic,rollback,param,rollback,only;public,void,rollback,only,boolean,rollback,only,if,rollback,only,set,rollback,only
Rollback -> public void rollbackOnly(boolean rollbackOnly);1362408075;Inherits transaction attribute._Illustrates programmatic rollback._@param rollbackOnly;public void rollbackOnly(boolean rollbackOnly) {_		if (rollbackOnly) {_			setRollbackOnly()__		}_	};inherits,transaction,attribute,illustrates,programmatic,rollback,param,rollback,only;public,void,rollback,only,boolean,rollback,only,if,rollback,only,set,rollback,only
Rollback -> public void rollbackOnly(boolean rollbackOnly);1469546119;Inherits transaction attribute._Illustrates programmatic rollback._@param rollbackOnly;public void rollbackOnly(boolean rollbackOnly) {_		if (rollbackOnly) {_			setRollbackOnly()__		}_	};inherits,transaction,attribute,illustrates,programmatic,rollback,param,rollback,only;public,void,rollback,only,boolean,rollback,only,if,rollback,only,set,rollback,only
Rollback -> public void rollbackOnly(boolean rollbackOnly);1496242568;Inherits transaction attribute._Illustrates programmatic rollback._@param rollbackOnly;public void rollbackOnly(boolean rollbackOnly) {_		if (rollbackOnly) {_			setRollbackOnly()__		}_	};inherits,transaction,attribute,illustrates,programmatic,rollback,param,rollback,only;public,void,rollback,only,boolean,rollback,only,if,rollback,only,set,rollback,only
Rollback -> public void rollbackOnly(boolean rollbackOnly);1533725446;Inherits transaction attribute._Illustrates programmatic rollback._@param rollbackOnly;public void rollbackOnly(boolean rollbackOnly) {_		if (rollbackOnly) {_			setRollbackOnly()__		}_	};inherits,transaction,attribute,illustrates,programmatic,rollback,param,rollback,only;public,void,rollback,only,boolean,rollback,only,if,rollback,only,set,rollback,only
