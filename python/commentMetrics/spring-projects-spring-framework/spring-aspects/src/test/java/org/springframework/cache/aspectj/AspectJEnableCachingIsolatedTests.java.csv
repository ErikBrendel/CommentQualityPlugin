commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private void load(Class<?>... config) {     this.ctx = new AnnotationConfigApplicationContext(config). }
false;public;0;6;;@After public void closeContext() {     if (this.ctx != null) {         this.ctx.close().     } }
false;public;0;6;;@Test public void testKeyStrategy() {     load(EnableCachingConfig.class).     AnnotationCacheAspect aspect = this.ctx.getBean(AnnotationCacheAspect.class).     assertSame(this.ctx.getBean("keyGenerator", KeyGenerator.class), aspect.getKeyGenerator()). }
false;public;0;6;;@Test public void testCacheErrorHandler() {     load(EnableCachingConfig.class).     AnnotationCacheAspect aspect = this.ctx.getBean(AnnotationCacheAspect.class).     assertSame(this.ctx.getBean("errorHandler", CacheErrorHandler.class), aspect.getErrorHandler()). }
false;public;0;4;;// --- local tests ------- @Test public void singleCacheManagerBean() {     load(SingleCacheManagerConfig.class). }
false;public;0;9;;@Test public void multipleCacheManagerBeans() {     try {         load(MultiCacheManagerConfig.class).     } catch (IllegalStateException ex) {         assertTrue(ex.getMessage().contains("bean of type CacheManager")).     } }
false;public;0;4;;@Test public void multipleCacheManagerBeans_implementsCachingConfigurer() {     // does not throw     load(MultiCacheManagerConfigurer.class). }
false;public;0;11;;@Test public void multipleCachingConfigurers() {     try {         load(MultiCacheManagerConfigurer.class, EnableCachingConfig.class).     } catch (BeanCreationException ex) {         Throwable root = ex.getRootCause().         assertTrue(root instanceof IllegalStateException).         assertTrue(ex.getMessage().contains("implementations of CachingConfigurer")).     } }
false;public;0;9;;@Test public void noCacheManagerBeans() {     try {         load(EmptyConfig.class).     } catch (IllegalStateException ex) {         assertTrue(ex.getMessage().contains("no bean of type CacheManager")).     } }
false;public;0;10;;@Test @Ignore("AspectJ has some sort of caching that makes this one fail") public void emptyConfigSupport() {     load(EmptyConfigSupportConfig.class).     AnnotationCacheAspect aspect = this.ctx.getBean(AnnotationCacheAspect.class).     assertNotNull(aspect.getCacheResolver()).     assertEquals(SimpleCacheResolver.class, aspect.getCacheResolver().getClass()).     assertSame(this.ctx.getBean(CacheManager.class), ((SimpleCacheResolver) aspect.getCacheResolver()).getCacheManager()). }
false;public;0;8;;@Test public void bothSetOnlyResolverIsUsed() {     load(FullCachingConfig.class).     AnnotationCacheAspect aspect = this.ctx.getBean(AnnotationCacheAspect.class).     assertSame(this.ctx.getBean("cacheResolver"), aspect.getCacheResolver()).     assertSame(this.ctx.getBean("keyGenerator"), aspect.getKeyGenerator()). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return CacheTestUtils.createSimpleCacheManager("testCache", "primary", "secondary"). }
false;public;0;4;;@Bean public CacheableService<?> service() {     return new DefaultCacheableService(). }
false;public;0;4;;@Bean public CacheableService<?> classService() {     return new AnnotatedClassCacheableService(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SomeKeyGenerator(). }
false;public;0;5;;@Override @Bean public CacheErrorHandler errorHandler() {     return new SimpleCacheErrorHandler(). }
false;public;0;4;;@Bean public KeyGenerator customKeyGenerator() {     return new SomeCustomKeyGenerator(). }
false;public;0;4;;@Bean public CacheManager customCacheManager() {     return CacheTestUtils.createSimpleCacheManager("testCache"). }
false;public;0;4;;@Bean public CacheManager cm1() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm1() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm2() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm1() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm2() {     return new NoOpCacheManager(). }
false;public;0;4;;@Override public CacheManager cacheManager() {     return cm1(). }
false;public;0;4;;@Override public KeyGenerator keyGenerator() {     return null. }
false;public;0;4;;@Bean public CacheManager cm() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SomeKeyGenerator(). }
false;public;0;5;;@Override @Bean public CacheResolver cacheResolver() {     return new NamedCacheResolver(cacheManager(), "foo"). }
