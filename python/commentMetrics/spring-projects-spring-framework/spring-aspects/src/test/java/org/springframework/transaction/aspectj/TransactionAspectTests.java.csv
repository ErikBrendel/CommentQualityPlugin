commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void initContext() {     AnnotationTransactionAspect.aspectOf().setTransactionManager(txManager). }
false;public;0;7;;@Test public void testCommitOnAnnotatedClass() throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     annotationOnlyOnClassWithNoInterface.echo(null).     assertEquals(1, txManager.commits). }
false;public;0;7;;@Test public void commitOnAnnotatedProtectedMethod() throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     beanWithAnnotatedProtectedMethod.doInTransaction().     assertEquals(1, txManager.commits). }
false;public;0;7;;@Test public void commitOnAnnotatedPrivateMethod() throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     beanWithAnnotatedPrivateMethod.doSomething().     assertEquals(1, txManager.commits). }
false;public;0;7;;@Test public void commitOnNonAnnotatedNonPublicMethodInTransactionalType() throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     annotationOnlyOnClassWithNoInterface.nonTransactionalMethod().     assertEquals(0, txManager.begun). }
false;public;0;7;;@Test public void commitOnAnnotatedMethod() throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     methodAnnotationOnly.echo(null).     assertEquals(1, txManager.commits). }
false;public;0;7;;@Test public void notTransactional() throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     new NotTransactional().noop().     assertEquals(0, txManager.begun). }
false;public;0;11;;@Test public void defaultCommitOnAnnotatedClass() throws Throwable {     final Exception ex = new Exception().     try {         testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), false).         fail("Should have thrown Exception").     } catch (Exception ex2) {         assertSame(ex, ex2).     } }
false;public;0;11;;@Test public void defaultRollbackOnAnnotatedClass() throws Throwable {     final RuntimeException ex = new RuntimeException().     try {         testRollback(() -> annotationOnlyOnClassWithNoInterface.echo(ex), true).         fail("Should have thrown RuntimeException").     } catch (RuntimeException ex2) {         assertSame(ex, ex2).     } }
false;public;0;11;;@Test public void defaultCommitOnSubclassOfAnnotatedClass() throws Throwable {     final Exception ex = new Exception().     try {         testRollback(() -> new SubclassOfClassWithTransactionalAnnotation().echo(ex), false).         fail("Should have thrown Exception").     } catch (Exception ex2) {         assertSame(ex, ex2).     } }
false;public;0;11;;@Test public void defaultCommitOnSubclassOfClassWithTransactionalMethodAnnotated() throws Throwable {     final Exception ex = new Exception().     try {         testRollback(() -> new SubclassOfClassWithTransactionalMethodAnnotation().echo(ex), false).         fail("Should have thrown Exception").     } catch (Exception ex2) {         assertSame(ex, ex2).     } }
false;public;0;5;;@Test public void noCommitOnImplementationOfAnnotatedInterface() throws Throwable {     final Exception ex = new Exception().     testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(ex), ex). }
false;public;0;6;;@Test public void noRollbackOnImplementationOfAnnotatedInterface() throws Throwable {     final Exception rollbackProvokingException = new RuntimeException().     testNotTransactional(() -> new ImplementsAnnotatedInterface().echo(rollbackProvokingException), rollbackProvokingException). }
false;protected;2;12;;protected void testRollback(TransactionOperationCallback toc, boolean rollback) throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     try {         toc.performTransactionalOperation().     } finally {         assertEquals(1, txManager.begun).         assertEquals(rollback ? 0 : 1, txManager.commits).         assertEquals(rollback ? 1 : 0, txManager.rollbacks).     } }
false;protected;2;16;;protected void testNotTransactional(TransactionOperationCallback toc, Throwable expected) throws Throwable {     txManager.clear().     assertEquals(0, txManager.begun).     try {         toc.performTransactionalOperation().     } catch (Throwable t) {         if (expected == null) {             fail("Expected " + expected).         }         assertSame(expected, t).     } finally {         assertEquals(0, txManager.begun).     } }
false;;0;1;;Object performTransactionalOperation() throws Throwable.
false;public;1;7;;@Override public Object echo(Throwable t) throws Throwable {     if (t != null) {         throw t.     }     return t. }
false;public;0;2;;public void noop() { }
