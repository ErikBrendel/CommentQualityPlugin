commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override @Cacheable("testCache") public Long cache(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable("testCache") public Long cacheNull(Object arg1) {     return null. }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", sync = true) public Long cacheSync(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", sync = true) public Long cacheSyncNull(Object arg1) {     return null. }
false;public;1;4;;@Override @CacheEvict("testCache") public void invalidate(Object arg1) { }
false;public;1;5;;@Override @CacheEvict("testCache") public void evictWithException(Object arg1) {     throw new RuntimeException("exception thrown - evict should NOT occur"). }
false;public;1;4;;@Override @CacheEvict(cacheNames = "testCache", allEntries = true) public void evictAll(Object arg1) { }
false;public;1;5;;@Override @CacheEvict(cacheNames = "testCache", beforeInvocation = true) public void evictEarly(Object arg1) {     throw new RuntimeException("exception thrown - evict should still occur"). }
false;public;2;4;;@Override @CacheEvict(cacheNames = "testCache", key = "#p0") public void evict(Object arg1, Object arg2) { }
false;public;2;5;;@Override @CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true) public void invalidateEarly(Object arg1, Object arg2) {     throw new RuntimeException("exception thrown - evict should still occur"). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", condition = "#p0 == 3") public Long conditional(int classField) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", sync = true, condition = "#p0 == 3") public Long conditionalSync(int field) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", unless = "#result > 10") public Long unless(int arg) {     return (long) arg. }
false;public;2;5;;@Override @Cacheable(cacheNames = "testCache", key = "#p0") public Long key(Object arg1, Object arg2) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache") public Long varArgsKey(Object... args) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", key = "#root.methodName") public Long name(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target") public Long rootVars(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", keyGenerator = "customKeyGenerator") public Long customKeyGenerator(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName") public Long unknownCustomKeyGenerator(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager") public Long customCacheManager(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", cacheManager = "unknownBeanName") public Long unknownCustomCacheManager(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @CachePut("testCache") public Long update(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @CachePut(cacheNames = "testCache", condition = "#arg.equals(3)") public Long conditionalUpdate(Object arg) {     return Long.valueOf(arg.toString()). }
false;public;1;6;;@Override @Cacheable("testCache") public Long nullValue(Object arg1) {     nullInvocations.incrementAndGet().     return null. }
false;public;0;4;;@Override public Number nullInvocations() {     return nullInvocations.get(). }
false;public;1;5;;@Override @Cacheable("testCache") public Long throwChecked(Object arg1) throws Exception {     throw new IOException(arg1.toString()). }
false;public;1;5;;@Override @Cacheable("testCache") public Long throwUnchecked(Object arg1) {     throw new UnsupportedOperationException(arg1.toString()). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", sync = true) public Long throwCheckedSync(Object arg1) throws Exception {     throw new IOException(arg1.toString()). }
false;public;1;5;;@Override @Cacheable(cacheNames = "testCache", sync = true) public Long throwUncheckedSync(Object arg1) {     throw new UnsupportedOperationException(arg1.toString()). }
false;public;1;5;;// multi annotations @Override @Caching(cacheable = { @Cacheable("primary"), @Cacheable("secondary") }) public Long multiCache(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0"), @CacheEvict(cacheNames = "primary", key = "#p0 + 'A'") }) public Long multiEvict(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Caching(cacheable = { @Cacheable(cacheNames = "primary", key = "#root.methodName") }, evict = { @CacheEvict("secondary") }) public Long multiCacheAndEvict(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Caching(cacheable = { @Cacheable(cacheNames = "primary", condition = "#p0 == 3") }, evict = { @CacheEvict("secondary") }) public Long multiConditionalCacheAndEvict(Object arg1) {     return counter.getAndIncrement(). }
false;public;1;5;;@Override @Caching(put = { @CachePut("primary"), @CachePut("secondary") }) public Long multiUpdate(Object arg1) {     return Long.valueOf(arg1.toString()). }
false;public;1;6;;@Override @CachePut(cacheNames = "primary", key = "#result.id") public TestEntity putRefersToResult(TestEntity arg1) {     arg1.setId(Long.MIN_VALUE).     return arg1. }
