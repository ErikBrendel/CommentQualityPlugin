# id;timestamp;commentText;codeText;commentWords;codeWords
InstrumentationSavingAgent -> public static void agentmain(String agentArgs, Instrumentation inst);1384972773;Save the {@link Instrumentation} interface exposed by the JVM._This method is required to dynamically load this Agent with the Attach API.;public static void agentmain(String agentArgs, Instrumentation inst) {_		instrumentation = inst__	};save,the,link,instrumentation,interface,exposed,by,the,jvm,this,method,is,required,to,dynamically,load,this,agent,with,the,attach,api;public,static,void,agentmain,string,agent,args,instrumentation,inst,instrumentation,inst
InstrumentationSavingAgent -> public static void agentmain(String agentArgs, Instrumentation inst);1530174524;Save the {@link Instrumentation} interface exposed by the JVM._This method is required to dynamically load this Agent with the Attach API.;public static void agentmain(String agentArgs, Instrumentation inst) {_		instrumentation = inst__	};save,the,link,instrumentation,interface,exposed,by,the,jvm,this,method,is,required,to,dynamically,load,this,agent,with,the,attach,api;public,static,void,agentmain,string,agent,args,instrumentation,inst,instrumentation,inst
InstrumentationSavingAgent -> public static Instrumentation getInstrumentation();1328020251;Return the {@link Instrumentation} interface exposed by the JVM._<p>Note that this agent class will typically not be available in the classpath_unless the agent is actually specified on JVM startup. If you intend to do_conditional checking with respect to agent availability, consider using_{@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()}_instead - which will work without the agent class in the classpath as well._@return the <code>Instrumentation</code> instance previously saved when_the {@link #premain} method was called by the JVM_ will be <code>null</code>_if this class was not used as Java agent when this JVM was started._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation();public static Instrumentation getInstrumentation() {_		return instrumentation__	};return,the,link,instrumentation,interface,exposed,by,the,jvm,p,note,that,this,agent,class,will,typically,not,be,available,in,the,classpath,unless,the,agent,is,actually,specified,on,jvm,startup,if,you,intend,to,do,conditional,checking,with,respect,to,agent,availability,consider,using,link,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation,instead,which,will,work,without,the,agent,class,in,the,classpath,as,well,return,the,code,instrumentation,code,instance,previously,saved,when,the,link,premain,method,was,called,by,the,jvm,will,be,code,null,code,if,this,class,was,not,used,as,java,agent,when,this,jvm,was,started,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation;public,static,instrumentation,get,instrumentation,return,instrumentation
InstrumentationSavingAgent -> public static Instrumentation getInstrumentation();1356735495;Return the {@link Instrumentation} interface exposed by the JVM._<p>Note that this agent class will typically not be available in the classpath_unless the agent is actually specified on JVM startup. If you intend to do_conditional checking with respect to agent availability, consider using_{@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()}_instead - which will work without the agent class in the classpath as well._@return the {@code Instrumentation} instance previously saved when_the {@link #premain} method was called by the JVM_ will be {@code null}_if this class was not used as Java agent when this JVM was started._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation();public static Instrumentation getInstrumentation() {_		return instrumentation__	};return,the,link,instrumentation,interface,exposed,by,the,jvm,p,note,that,this,agent,class,will,typically,not,be,available,in,the,classpath,unless,the,agent,is,actually,specified,on,jvm,startup,if,you,intend,to,do,conditional,checking,with,respect,to,agent,availability,consider,using,link,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation,instead,which,will,work,without,the,agent,class,in,the,classpath,as,well,return,the,code,instrumentation,instance,previously,saved,when,the,link,premain,method,was,called,by,the,jvm,will,be,code,null,if,this,class,was,not,used,as,java,agent,when,this,jvm,was,started,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation;public,static,instrumentation,get,instrumentation,return,instrumentation
InstrumentationSavingAgent -> public static Instrumentation getInstrumentation();1384972773;Return the {@link Instrumentation} interface exposed by the JVM._<p>Note that this agent class will typically not be available in the classpath_unless the agent is actually specified on JVM startup. If you intend to do_conditional checking with respect to agent availability, consider using_{@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()}_instead - which will work without the agent class in the classpath as well._@return the {@code Instrumentation} instance previously saved when_the {@link #premain} or {@link #agentmain} methods was called by the JVM__will be {@code null} if this class was not used as Java agent when this_JVM was started or it wasn't installed as agent using the Attach API._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation();public static Instrumentation getInstrumentation() {_		return instrumentation__	};return,the,link,instrumentation,interface,exposed,by,the,jvm,p,note,that,this,agent,class,will,typically,not,be,available,in,the,classpath,unless,the,agent,is,actually,specified,on,jvm,startup,if,you,intend,to,do,conditional,checking,with,respect,to,agent,availability,consider,using,link,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation,instead,which,will,work,without,the,agent,class,in,the,classpath,as,well,return,the,code,instrumentation,instance,previously,saved,when,the,link,premain,or,link,agentmain,methods,was,called,by,the,jvm,will,be,code,null,if,this,class,was,not,used,as,java,agent,when,this,jvm,was,started,or,it,wasn,t,installed,as,agent,using,the,attach,api,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation;public,static,instrumentation,get,instrumentation,return,instrumentation
InstrumentationSavingAgent -> public static Instrumentation getInstrumentation();1530174524;Return the {@link Instrumentation} interface exposed by the JVM._<p>Note that this agent class will typically not be available in the classpath_unless the agent is actually specified on JVM startup. If you intend to do_conditional checking with respect to agent availability, consider using_{@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()}_instead - which will work without the agent class in the classpath as well._@return the {@code Instrumentation} instance previously saved when_the {@link #premain} or {@link #agentmain} methods was called by the JVM__will be {@code null} if this class was not used as Java agent when this_JVM was started or it wasn't installed as agent using the Attach API._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation();public static Instrumentation getInstrumentation() {_		return instrumentation__	};return,the,link,instrumentation,interface,exposed,by,the,jvm,p,note,that,this,agent,class,will,typically,not,be,available,in,the,classpath,unless,the,agent,is,actually,specified,on,jvm,startup,if,you,intend,to,do,conditional,checking,with,respect,to,agent,availability,consider,using,link,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation,instead,which,will,work,without,the,agent,class,in,the,classpath,as,well,return,the,code,instrumentation,instance,previously,saved,when,the,link,premain,or,link,agentmain,methods,was,called,by,the,jvm,will,be,code,null,if,this,class,was,not,used,as,java,agent,when,this,jvm,was,started,or,it,wasn,t,installed,as,agent,using,the,attach,api,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,get,instrumentation;public,static,instrumentation,get,instrumentation,return,instrumentation
InstrumentationSavingAgent -> public static void premain(String agentArgs, Instrumentation inst);1328020251;Save the {@link Instrumentation} interface exposed by the JVM.;public static void premain(String agentArgs, Instrumentation inst) {_		instrumentation = inst__	};save,the,link,instrumentation,interface,exposed,by,the,jvm;public,static,void,premain,string,agent,args,instrumentation,inst,instrumentation,inst
InstrumentationSavingAgent -> public static void premain(String agentArgs, Instrumentation inst);1356735495;Save the {@link Instrumentation} interface exposed by the JVM.;public static void premain(String agentArgs, Instrumentation inst) {_		instrumentation = inst__	};save,the,link,instrumentation,interface,exposed,by,the,jvm;public,static,void,premain,string,agent,args,instrumentation,inst,instrumentation,inst
InstrumentationSavingAgent -> public static void premain(String agentArgs, Instrumentation inst);1384972773;Save the {@link Instrumentation} interface exposed by the JVM.;public static void premain(String agentArgs, Instrumentation inst) {_		instrumentation = inst__	};save,the,link,instrumentation,interface,exposed,by,the,jvm;public,static,void,premain,string,agent,args,instrumentation,inst,instrumentation,inst
InstrumentationSavingAgent -> public static void premain(String agentArgs, Instrumentation inst);1530174524;Save the {@link Instrumentation} interface exposed by the JVM.;public static void premain(String agentArgs, Instrumentation inst) {_		instrumentation = inst__	};save,the,link,instrumentation,interface,exposed,by,the,jvm;public,static,void,premain,string,agent,args,instrumentation,inst,instrumentation,inst
