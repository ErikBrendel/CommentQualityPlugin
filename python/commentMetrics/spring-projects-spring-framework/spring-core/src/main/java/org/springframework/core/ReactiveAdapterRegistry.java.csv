# id;timestamp;commentText;codeText;commentWords;codeWords
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1469204488;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		registerMonoAdapter(Mono.class,_				source -> (Mono<?>) source, source -> source, new Descriptor(false, true, false))___		registerFluxAdapter(_				Flux.class, source -> (Flux<?>) source, source -> source)___		registerFluxAdapter(_				Publisher.class, source -> Flux.from((Publisher<?>) source), source -> source)___		registerMonoAdapter(CompletableFuture.class,_				source -> Mono.fromFuture((CompletableFuture<?>) source),_				source -> Mono.from((Publisher<?>) source).toFuture(),_				new Descriptor(false, true, false)_		)___		if (rxJava1Present) {_			new RxJava1AdapterRegistrar().register(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,register,mono,adapter,mono,class,source,mono,source,source,source,new,descriptor,false,true,false,register,flux,adapter,flux,class,source,flux,source,source,source,register,flux,adapter,publisher,class,source,flux,from,publisher,source,source,source,register,mono,adapter,completable,future,class,source,mono,from,future,completable,future,source,source,mono,from,publisher,source,to,future,new,descriptor,false,true,false,if,rx,java1present,new,rx,java1adapter,registrar,register,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1469219300;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		_		registerMonoAdapter(Mono.class,_				source -> (Mono<?>) source, source -> source,_				new ReactiveAdapter.Descriptor(false, true, false))__		registerFluxAdapter(_				Flux.class, source -> (Flux<?>) source, source -> source)__		registerFluxAdapter(_				Publisher.class, source -> Flux.from((Publisher<?>) source), source -> source)___		registerMonoAdapter(CompletableFuture.class,_				source -> Mono.fromFuture((CompletableFuture<?>) source), Mono::toFuture,_				new ReactiveAdapter.Descriptor(false, true, false)_		)___		if (rxJava1Present) {_			new RxJava1AdapterRegistrar().register(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,register,mono,adapter,mono,class,source,mono,source,source,source,new,reactive,adapter,descriptor,false,true,false,register,flux,adapter,flux,class,source,flux,source,source,source,register,flux,adapter,publisher,class,source,flux,from,publisher,source,source,source,register,mono,adapter,completable,future,class,source,mono,from,future,completable,future,source,mono,to,future,new,reactive,adapter,descriptor,false,true,false,if,rx,java1present,new,rx,java1adapter,registrar,register,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1469449279;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		_		registerMonoAdapter(Mono.class,_				source -> (Mono<?>) source, source -> source,_				new ReactiveAdapter.Descriptor(false, true, false))__		registerFluxAdapter(_				Flux.class, source -> (Flux<?>) source, source -> source)__		registerFluxAdapter(_				Publisher.class, source -> Flux.from((Publisher<?>) source), source -> source)___		registerMonoAdapter(CompletableFuture.class,_				source -> Mono.fromFuture((CompletableFuture<?>) source), Mono::toFuture,_				new ReactiveAdapter.Descriptor(false, true, false)_		)___		if (rxJava1Present) {_			new RxJava1AdapterRegistrar().register(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,register,mono,adapter,mono,class,source,mono,source,source,source,new,reactive,adapter,descriptor,false,true,false,register,flux,adapter,flux,class,source,flux,source,source,source,register,flux,adapter,publisher,class,source,flux,from,publisher,source,source,source,register,mono,adapter,completable,future,class,source,mono,from,future,completable,future,source,mono,to,future,new,reactive,adapter,descriptor,false,true,false,if,rx,java1present,new,rx,java1adapter,registrar,register,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1472734096;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		_		registerMonoAdapter(Mono.class,_				source -> (Mono<?>) source, source -> source,_				new ReactiveAdapter.Descriptor(false, true, false))__		registerFluxAdapter(_				Flux.class, source -> (Flux<?>) source, source -> source)__		registerFluxAdapter(_				Publisher.class, source -> Flux.from((Publisher<?>) source), source -> source)___		registerMonoAdapter(CompletableFuture.class,_				source -> Mono.fromFuture((CompletableFuture<?>) source), Mono::toFuture,_				new ReactiveAdapter.Descriptor(false, true, false)_		)___		if (rxJava1Present) {_			new RxJava1AdapterRegistrar().register(this)__		}_		if (rxJava2Present) {_			new RxJava2AdapterRegistrar().register(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,register,mono,adapter,mono,class,source,mono,source,source,source,new,reactive,adapter,descriptor,false,true,false,register,flux,adapter,flux,class,source,flux,source,source,source,register,flux,adapter,publisher,class,source,flux,from,publisher,source,source,source,register,mono,adapter,completable,future,class,source,mono,from,future,completable,future,source,mono,to,future,new,reactive,adapter,descriptor,false,true,false,if,rx,java1present,new,rx,java1adapter,registrar,register,this,if,rx,java2present,new,rx,java2adapter,registrar,register,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1476968885;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		_		registerMonoAdapter(Mono.class,_				source -> (Mono<?>) source, source -> source,_				new ReactiveAdapter.Descriptor(false, true, false))__		registerFluxAdapter(_				Flux.class, source -> (Flux<?>) source, source -> source)__		registerFluxAdapter(_				Publisher.class, source -> Flux.from((Publisher<?>) source), source -> source)___		registerMonoAdapter(CompletableFuture.class,_				source -> Mono.fromFuture((CompletableFuture<?>) source), Mono::toFuture,_				new ReactiveAdapter.Descriptor(false, true, false)_		)___		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1AdapterRegistrar().register(this)__		}_		if (rxJava2Present) {_			new RxJava2AdapterRegistrar().register(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,register,mono,adapter,mono,class,source,mono,source,source,source,new,reactive,adapter,descriptor,false,true,false,register,flux,adapter,flux,class,source,flux,source,source,source,register,flux,adapter,publisher,class,source,flux,from,publisher,source,source,source,register,mono,adapter,completable,future,class,source,mono,from,future,completable,future,source,mono,to,future,new,reactive,adapter,descriptor,false,true,false,if,rx,java1present,rx,java1adapter,new,rx,java1adapter,registrar,register,this,if,rx,java2present,new,rx,java2adapter,registrar,register,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1477406962;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		_		registerMonoAdapter(Mono.class,_				source -> (Mono<?>) source, source -> source,_				new ReactiveAdapter.Descriptor(false, true, false))__		registerFluxAdapter(_				Flux.class, source -> (Flux<?>) source, source -> source)__		registerFluxAdapter(_				Publisher.class, source -> Flux.from((Publisher<?>) source), source -> source)___		registerMonoAdapter(CompletableFuture.class,_				source -> Mono.fromFuture((CompletableFuture<?>) source), Mono::toFuture,_				new ReactiveAdapter.Descriptor(false, true, false)_		)___		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1AdapterRegistrar().register(this)__		}_		if (rxJava2Present) {_			new RxJava2AdapterRegistrar().register(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,register,mono,adapter,mono,class,source,mono,source,source,source,new,reactive,adapter,descriptor,false,true,false,register,flux,adapter,flux,class,source,flux,source,source,source,register,flux,adapter,publisher,class,source,flux,from,publisher,source,source,source,register,mono,adapter,completable,future,class,source,mono,from,future,completable,future,source,mono,to,future,new,reactive,adapter,descriptor,false,true,false,if,rx,java1present,rx,java1adapter,new,rx,java1adapter,registrar,register,this,if,rx,java2present,new,rx,java2adapter,registrar,register,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1480301091;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}__		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1Registrar().registerAdapters(this)__		}__		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,java1adapter,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1480355002;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}__		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1Registrar().registerAdapters(this)__		}__		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,java1adapter,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1480444189;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}__		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1Registrar().registerAdapters(this)__		}__		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,java1adapter,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1490114687;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,java1adapter,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1491224509;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,java1adapter,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1491226688;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxJava1Adapter) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,java1adapter,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1491323158;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxReactiveStreamsPresent) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,reactive,streams,present,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1495868221;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxReactiveStreamsPresent) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,reactive,streams,present,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1496259743;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxReactiveStreamsPresent) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,reactive,streams,present,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1496405779;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxReactiveStreamsPresent) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,reactive,streams,present,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1496837955;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {_		if (reactorPresent) {_			new ReactorRegistrar().registerAdapters(this)__		}_		if (rxJava1Present && rxReactiveStreamsPresent) {_			new RxJava1Registrar().registerAdapters(this)__		}_		if (rxJava2Present) {_			new RxJava2Registrar().registerAdapters(this)__		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,if,reactor,present,new,reactor,registrar,register,adapters,this,if,rx,java1present,rx,reactive,streams,present,new,rx,java1registrar,register,adapters,this,if,rx,java2present,new,rx,java2registrar,register,adapters,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1499771083;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1500495740;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1508201362;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Failed to find JdkFlowAdapter methods", ex)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,failed,to,find,jdk,flow,adapter,methods,ex,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1508234190;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1511215342;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1511268177;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1518260986;Create a registry and auto-register default adapters.;public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1526693566;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1528897134;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1530174524;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1530190293;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		_		boolean reactorRegistered = false__		try {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		catch (Throwable ex) {_			_		}_		this.reactorPresent = reactorRegistered___		_		try {_			new RxJava1Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new RxJava2Registrar().registerAdapters(this)__		}_		catch (Throwable ex) {_			_		}__		_		try {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		catch (Throwable ex) {_			_			_		}_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,boolean,reactor,registered,false,try,new,reactor,registrar,register,adapters,this,reactor,registered,true,catch,throwable,ex,this,reactor,present,reactor,registered,try,new,rx,java1registrar,register,adapters,this,catch,throwable,ex,try,new,rx,java2registrar,register,adapters,this,catch,throwable,ex,try,new,reactor,jdk,flow,adapter,registrar,register,adapter,this,catch,throwable,ex
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1530617711;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		ClassLoader classLoader = ReactiveAdapterRegistry.class.getClassLoader()___		_		boolean reactorRegistered = false__		if (ClassUtils.isPresent("reactor.core.publisher.Flux", classLoader)) {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		this.reactorPresent = reactorRegistered___		_		if (ClassUtils.isPresent("rx.Observable", classLoader)) {_			new RxJava1Registrar().registerAdapters(this)__		}__		_		if (ClassUtils.isPresent("io.reactivex.Flowable", classLoader)) {_			new RxJava2Registrar().registerAdapters(this)__		}__		_		if (ClassUtils.isPresent("java.util.concurrent.Flow.Publisher", classLoader)) {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		_		_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,class,loader,class,loader,reactive,adapter,registry,class,get,class,loader,boolean,reactor,registered,false,if,class,utils,is,present,reactor,core,publisher,flux,class,loader,new,reactor,registrar,register,adapters,this,reactor,registered,true,this,reactor,present,reactor,registered,if,class,utils,is,present,rx,observable,class,loader,new,rx,java1registrar,register,adapters,this,if,class,utils,is,present,io,reactivex,flowable,class,loader,new,rx,java2registrar,register,adapters,this,if,class,utils,is,present,java,util,concurrent,flow,publisher,class,loader,new,reactor,jdk,flow,adapter,registrar,register,adapter,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1530633647;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		ClassLoader classLoader = ReactiveAdapterRegistry.class.getClassLoader()___		_		boolean reactorRegistered = false__		if (ClassUtils.isPresent("reactor.core.publisher.Flux", classLoader)) {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		this.reactorPresent = reactorRegistered___		_		if (ClassUtils.isPresent("rx.Observable", classLoader) &&_				ClassUtils.isPresent("rx.RxReactiveStreams", classLoader)) {_			new RxJava1Registrar().registerAdapters(this)__		}__		_		if (ClassUtils.isPresent("io.reactivex.Flowable", classLoader)) {_			new RxJava2Registrar().registerAdapters(this)__		}__		_		if (ClassUtils.isPresent("java.util.concurrent.Flow.Publisher", classLoader)) {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		_		_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,class,loader,class,loader,reactive,adapter,registry,class,get,class,loader,boolean,reactor,registered,false,if,class,utils,is,present,reactor,core,publisher,flux,class,loader,new,reactor,registrar,register,adapters,this,reactor,registered,true,this,reactor,present,reactor,registered,if,class,utils,is,present,rx,observable,class,loader,class,utils,is,present,rx,rx,reactive,streams,class,loader,new,rx,java1registrar,register,adapters,this,if,class,utils,is,present,io,reactivex,flowable,class,loader,new,rx,java2registrar,register,adapters,this,if,class,utils,is,present,java,util,concurrent,flow,publisher,class,loader,new,reactor,jdk,flow,adapter,registrar,register,adapter,this
ReactiveAdapterRegistry -> public ReactiveAdapterRegistry();1549365291;Create a registry and auto-register default adapters._@see #getSharedInstance();public ReactiveAdapterRegistry() {__		ClassLoader classLoader = ReactiveAdapterRegistry.class.getClassLoader()___		_		boolean reactorRegistered = false__		if (ClassUtils.isPresent("reactor.core.publisher.Flux", classLoader)) {_			new ReactorRegistrar().registerAdapters(this)__			reactorRegistered = true__		}_		this.reactorPresent = reactorRegistered___		_		if (ClassUtils.isPresent("rx.Observable", classLoader) &&_				ClassUtils.isPresent("rx.RxReactiveStreams", classLoader)) {_			new RxJava1Registrar().registerAdapters(this)__		}__		_		if (ClassUtils.isPresent("io.reactivex.Flowable", classLoader)) {_			new RxJava2Registrar().registerAdapters(this)__		}__		_		if (ClassUtils.isPresent("java.util.concurrent.Flow.Publisher", classLoader)) {_			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this)__		}_		_		_	};create,a,registry,and,auto,register,default,adapters,see,get,shared,instance;public,reactive,adapter,registry,class,loader,class,loader,reactive,adapter,registry,class,get,class,loader,boolean,reactor,registered,false,if,class,utils,is,present,reactor,core,publisher,flux,class,loader,new,reactor,registrar,register,adapters,this,reactor,registered,true,this,reactor,present,reactor,registered,if,class,utils,is,present,rx,observable,class,loader,class,utils,is,present,rx,rx,reactive,streams,class,loader,new,rx,java1registrar,register,adapters,this,if,class,utils,is,present,io,reactivex,flowable,class,loader,new,rx,java2registrar,register,adapters,this,if,class,utils,is,present,java,util,concurrent,flow,publisher,class,loader,new,reactor,jdk,flow,adapter,registrar,register,adapter,this
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee);1469204488;Get the adapter for the given adaptee type to adapt to._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.equals(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,to,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,equals,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee);1469219300;Get the adapter for the given adaptee type to adapt to._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.equals(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,to,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,equals,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee);1469449279;Get the adapter for the given adaptee type to adapt to._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.equals(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,to,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,equals,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee);1472734096;Get the adapter for the given adaptee type to adapt to._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.equals(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,to,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,equals,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee);1476968885;Get the adapter for the given adaptee type to adapt to._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.equals(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,to,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,equals,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee);1477406962;Get the adapter for the given adaptee type to adapt to._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.equals(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,to,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,equals,actual,type
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1480301091;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1480355002;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1480444189;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1490114687;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1491224509;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1491226688;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1491323158;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1495868221;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1496259743;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1496405779;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1496837955;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1499771083;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1500495740;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1508201362;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1508234190;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1511215342;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1511268177;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1518260986;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1526693566;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1528897134;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1530174524;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (this.reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,this,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1530190293;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (this.reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,this,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1530617711;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (this.reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,this,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1530633647;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (this.reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,this,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerReactiveType(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter);1549365291;Register a reactive type along with functions to adapt to and from a_Reactive Streams {@link Publisher}. The functions can assume their_input is never be {@code null} nor {@link Optional}.;public void registerReactiveType(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {__		if (this.reactorPresent) {_			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter))__		}_		else {_			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter))__		}_	};register,a,reactive,type,along,with,functions,to,adapt,to,and,from,a,reactive,streams,link,publisher,the,functions,can,assume,their,input,is,never,be,code,null,nor,link,optional;public,void,register,reactive,type,reactive,type,descriptor,descriptor,function,object,publisher,to,adapter,function,publisher,object,from,adapter,if,this,reactor,present,this,adapters,add,new,reactor,adapter,descriptor,to,adapter,from,adapter,else,this,adapters,add,new,reactive,adapter,descriptor,to,adapter,from,adapter
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType);1469204488;Get the adapter for the given adaptee type to adapt from.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType) {_		return getAdapterFrom(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from;public,reactive,adapter,get,adapter,from,class,adaptee,type,return,get,adapter,from,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType);1469219300;Get the adapter for the given adaptee type to adapt from.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType) {_		return getAdapterFrom(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from;public,reactive,adapter,get,adapter,from,class,adaptee,type,return,get,adapter,from,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType);1469449279;Get the adapter for the given adaptee type to adapt from.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType) {_		return getAdapterFrom(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from;public,reactive,adapter,get,adapter,from,class,adaptee,type,return,get,adapter,from,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType);1472734096;Get the adapter for the given adaptee type to adapt from.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType) {_		return getAdapterFrom(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from;public,reactive,adapter,get,adapter,from,class,adaptee,type,return,get,adapter,from,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType);1476968885;Get the adapter for the given adaptee type to adapt from.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType) {_		return getAdapterFrom(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from;public,reactive,adapter,get,adapter,from,class,adaptee,type,return,get,adapter,from,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType);1477406962;Get the adapter for the given adaptee type to adapt from.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType) {_		return getAdapterFrom(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from;public,reactive,adapter,get,adapter,from,class,adaptee,type,return,get,adapter,from,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee);1469204488;Get the adapter for the given adaptee type to adapt from._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.isAssignableFrom(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,from,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,is,assignable,from,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee);1469219300;Get the adapter for the given adaptee type to adapt from._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.isAssignableFrom(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,from,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,is,assignable,from,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee);1469449279;Get the adapter for the given adaptee type to adapt from._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.isAssignableFrom(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,from,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,is,assignable,from,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee);1472734096;Get the adapter for the given adaptee type to adapt from._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.isAssignableFrom(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,from,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,is,assignable,from,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee);1476968885;Get the adapter for the given adaptee type to adapt from._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.isAssignableFrom(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,from,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,is,assignable,from,actual,type
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee);1477406962;Get the adapter for the given adaptee type to adapt from._If the instance is not {@code null} its actual type is used to check.;public ReactiveAdapter getAdapterFrom(Class<?> adapteeType, Object adaptee) {_		Class<?> actualType = getActualType(adapteeType, adaptee)__		return getAdapterInternal(supportedType -> supportedType.isAssignableFrom(actualType))__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,from,if,the,instance,is,not,code,null,its,actual,type,is,used,to,check;public,reactive,adapter,get,adapter,from,class,adaptee,type,object,adaptee,class,actual,type,get,actual,type,adaptee,type,adaptee,return,get,adapter,internal,supported,type,supported,type,is,assignable,from,actual,type
ReactiveAdapterRegistry -> public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter, 			Function<Flux<?>, Object> fromAdapter);1469219300;Register an adapter for adapting to and from a {@link Flux}. The provided_functions can assume that input will never be {@code null} and also that_any {@link Optional} wrapper is unwrapped.;public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter,_			Function<Flux<?>, Object> fromAdapter) {__		this.adapterMap.put(adapteeType, new FluxReactiveAdapter(toAdapter, fromAdapter))__	};register,an,adapter,for,adapting,to,and,from,a,link,flux,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,flux,adapter,class,adaptee,type,function,object,flux,to,adapter,function,flux,object,from,adapter,this,adapter,map,put,adaptee,type,new,flux,reactive,adapter,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter, 			Function<Flux<?>, Object> fromAdapter);1469449279;Register an adapter for adapting to and from a {@link Flux}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter,_			Function<Flux<?>, Object> fromAdapter) {__		this.adapterMap.put(adapteeType, new FluxReactiveAdapter(toAdapter, fromAdapter))__	};register,an,adapter,for,adapting,to,and,from,a,link,flux,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,flux,adapter,class,adaptee,type,function,object,flux,to,adapter,function,flux,object,from,adapter,this,adapter,map,put,adaptee,type,new,flux,reactive,adapter,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter, 			Function<Flux<?>, Object> fromAdapter);1472734096;Register an adapter for adapting to and from a {@link Flux}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter,_			Function<Flux<?>, Object> fromAdapter) {__		this.adapterMap.put(adapteeType, new FluxReactiveAdapter(toAdapter, fromAdapter))__	};register,an,adapter,for,adapting,to,and,from,a,link,flux,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,flux,adapter,class,adaptee,type,function,object,flux,to,adapter,function,flux,object,from,adapter,this,adapter,map,put,adaptee,type,new,flux,reactive,adapter,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter, 			Function<Flux<?>, Object> fromAdapter);1476968885;Register an adapter for adapting to and from a {@link Flux}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter,_			Function<Flux<?>, Object> fromAdapter) {__		this.adapterMap.put(adapteeType, new FluxReactiveAdapter(toAdapter, fromAdapter))__	};register,an,adapter,for,adapting,to,and,from,a,link,flux,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,flux,adapter,class,adaptee,type,function,object,flux,to,adapter,function,flux,object,from,adapter,this,adapter,map,put,adaptee,type,new,flux,reactive,adapter,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter, 			Function<Flux<?>, Object> fromAdapter);1477406962;Register an adapter for adapting to and from a {@link Flux}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerFluxAdapter(Class<?> adapteeType, Function<Object, Flux<?>> toAdapter,_			Function<Flux<?>, Object> fromAdapter) {__		this.adapterMap.put(adapteeType, new FluxReactiveAdapter(toAdapter, fromAdapter))__	};register,an,adapter,for,adapting,to,and,from,a,link,flux,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,flux,adapter,class,adaptee,type,function,object,flux,to,adapter,function,flux,object,from,adapter,this,adapter,map,put,adaptee,type,new,flux,reactive,adapter,to,adapter,from,adapter
ReactiveAdapterRegistry -> public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter, 			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor);1469219300;Register an adapter for adapting to and from a {@link Mono}. The provided_functions can assume that input will never be {@code null} and also that_any {@link Optional} wrapper is unwrapped.;public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter,_			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor) {__		this.adapterMap.put(adapteeType, new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor))__	};register,an,adapter,for,adapting,to,and,from,a,link,mono,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,mono,adapter,class,adaptee,type,function,object,mono,to,adapter,function,mono,object,from,adapter,reactive,adapter,descriptor,descriptor,this,adapter,map,put,adaptee,type,new,mono,reactive,adapter,to,adapter,from,adapter,descriptor
ReactiveAdapterRegistry -> public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter, 			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor);1469449279;Register an adapter for adapting to and from a {@link Mono}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter,_			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor) {__		this.adapterMap.put(adapteeType, new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor))__	};register,an,adapter,for,adapting,to,and,from,a,link,mono,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,mono,adapter,class,adaptee,type,function,object,mono,to,adapter,function,mono,object,from,adapter,reactive,adapter,descriptor,descriptor,this,adapter,map,put,adaptee,type,new,mono,reactive,adapter,to,adapter,from,adapter,descriptor
ReactiveAdapterRegistry -> public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter, 			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor);1472734096;Register an adapter for adapting to and from a {@link Mono}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter,_			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor) {__		this.adapterMap.put(adapteeType, new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor))__	};register,an,adapter,for,adapting,to,and,from,a,link,mono,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,mono,adapter,class,adaptee,type,function,object,mono,to,adapter,function,mono,object,from,adapter,reactive,adapter,descriptor,descriptor,this,adapter,map,put,adaptee,type,new,mono,reactive,adapter,to,adapter,from,adapter,descriptor
ReactiveAdapterRegistry -> public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter, 			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor);1476968885;Register an adapter for adapting to and from a {@link Mono}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter,_			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor) {__		this.adapterMap.put(adapteeType, new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor))__	};register,an,adapter,for,adapting,to,and,from,a,link,mono,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,mono,adapter,class,adaptee,type,function,object,mono,to,adapter,function,mono,object,from,adapter,reactive,adapter,descriptor,descriptor,this,adapter,map,put,adaptee,type,new,mono,reactive,adapter,to,adapter,from,adapter,descriptor
ReactiveAdapterRegistry -> public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter, 			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor);1477406962;Register an adapter for adapting to and from a {@link Mono}._<p>The provided functions can assume that input will never be {@code null}_and also that any {@link Optional} wrapper is unwrapped.;public void registerMonoAdapter(Class<?> adapteeType, Function<Object, Mono<?>> toAdapter,_			Function<Mono<?>, Object> fromAdapter, ReactiveAdapter.Descriptor descriptor) {__		this.adapterMap.put(adapteeType, new MonoReactiveAdapter(toAdapter, fromAdapter, descriptor))__	};register,an,adapter,for,adapting,to,and,from,a,link,mono,p,the,provided,functions,can,assume,that,input,will,never,be,code,null,and,also,that,any,link,optional,wrapper,is,unwrapped;public,void,register,mono,adapter,class,adaptee,type,function,object,mono,to,adapter,function,mono,object,from,adapter,reactive,adapter,descriptor,descriptor,this,adapter,map,put,adaptee,type,new,mono,reactive,adapter,to,adapter,from,adapter,descriptor
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1511215342;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry ar = sharedInstance__		if (ar == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				ar = sharedInstance__				if (ar == null) {_					ar = new ReactiveAdapterRegistry()__					sharedInstance = ar__				}_			}_		}_		return ar__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,ar,shared,instance,if,ar,null,synchronized,reactive,adapter,registry,class,ar,shared,instance,if,ar,null,ar,new,reactive,adapter,registry,shared,instance,ar,return,ar
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1511268177;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry ar = sharedInstance__		if (ar == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				ar = sharedInstance__				if (ar == null) {_					ar = new ReactiveAdapterRegistry()__					sharedInstance = ar__				}_			}_		}_		return ar__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,ar,shared,instance,if,ar,null,synchronized,reactive,adapter,registry,class,ar,shared,instance,if,ar,null,ar,new,reactive,adapter,registry,shared,instance,ar,return,ar
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1518260986;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry ar = sharedInstance__		if (ar == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				ar = sharedInstance__				if (ar == null) {_					ar = new ReactiveAdapterRegistry()__					sharedInstance = ar__				}_			}_		}_		return ar__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,ar,shared,instance,if,ar,null,synchronized,reactive,adapter,registry,class,ar,shared,instance,if,ar,null,ar,new,reactive,adapter,registry,shared,instance,ar,return,ar
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1526693566;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed.__<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided.__@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1528897134;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed.__<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided.__@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1530174524;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed.__<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided.__@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1530190293;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1530617711;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1530633647;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public static ReactiveAdapterRegistry getSharedInstance();1549365291;Return a shared default {@code ReactiveAdapterRegistry} instance, lazily_building it once needed._<p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured_{@code ReactiveAdapterRegistry} instance for customization purposes._This accessor is only meant as a fallback for code paths that want to_fall back on a default instance if one isn't provided._@return the shared {@code ReactiveAdapterRegistry} instance (never {@code null})_@since 5.0.2;public static ReactiveAdapterRegistry getSharedInstance() {_		ReactiveAdapterRegistry registry = sharedInstance__		if (registry == null) {_			synchronized (ReactiveAdapterRegistry.class) {_				registry = sharedInstance__				if (registry == null) {_					registry = new ReactiveAdapterRegistry()__					sharedInstance = registry__				}_			}_		}_		return registry__	};return,a,shared,default,code,reactive,adapter,registry,instance,lazily,building,it,once,needed,p,b,note,b,we,highly,recommend,passing,a,long,lived,pre,configured,code,reactive,adapter,registry,instance,for,customization,purposes,this,accessor,is,only,meant,as,a,fallback,for,code,paths,that,want,to,fall,back,on,a,default,instance,if,one,isn,t,provided,return,the,shared,code,reactive,adapter,registry,instance,never,code,null,since,5,0,2;public,static,reactive,adapter,registry,get,shared,instance,reactive,adapter,registry,registry,shared,instance,if,registry,null,synchronized,reactive,adapter,registry,class,registry,shared,instance,if,registry,null,registry,new,reactive,adapter,registry,shared,instance,registry,return,registry
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType);1469204488;Get the adapter for the given adaptee type to adapt to.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType) {_		return getAdapterTo(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to;public,reactive,adapter,get,adapter,to,class,adaptee,type,return,get,adapter,to,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType);1469219300;Get the adapter for the given adaptee type to adapt to.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType) {_		return getAdapterTo(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to;public,reactive,adapter,get,adapter,to,class,adaptee,type,return,get,adapter,to,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType);1469449279;Get the adapter for the given adaptee type to adapt to.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType) {_		return getAdapterTo(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to;public,reactive,adapter,get,adapter,to,class,adaptee,type,return,get,adapter,to,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType);1472734096;Get the adapter for the given adaptee type to adapt to.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType) {_		return getAdapterTo(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to;public,reactive,adapter,get,adapter,to,class,adaptee,type,return,get,adapter,to,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType);1476968885;Get the adapter for the given adaptee type to adapt to.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType) {_		return getAdapterTo(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to;public,reactive,adapter,get,adapter,to,class,adaptee,type,return,get,adapter,to,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapterTo(Class<?> adapteeType);1477406962;Get the adapter for the given adaptee type to adapt to.;public ReactiveAdapter getAdapterTo(Class<?> adapteeType) {_		return getAdapterTo(adapteeType, null)__	};get,the,adapter,for,the,given,adaptee,type,to,adapt,to;public,reactive,adapter,get,adapter,to,class,adaptee,type,return,get,adapter,to,adaptee,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1480355002;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1480444189;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1490114687;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1491224509;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1491226688;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1491323158;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1495868221;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType);1496259743;Get the adapter for the given reactive type.;public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source);1480355002;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_@param source an instance of the reactive type (i.e. to adapt from);public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {__		source = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (source != null ? source.getClass() : reactiveType)___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType().equals(clazz))_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from;public,reactive,adapter,get,adapter,class,reactive,type,object,source,source,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,null,source,get,class,reactive,type,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,equals,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source);1480444189;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_@param source an instance of the reactive type (i.e. to adapt from);public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {__		source = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (source != null ? source.getClass() : reactiveType)___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType().equals(clazz))_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from;public,reactive,adapter,get,adapter,class,reactive,type,object,source,source,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,null,source,get,class,reactive,type,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,equals,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source);1490114687;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;public,reactive,adapter,get,adapter,class,reactive,type,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source);1491224509;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)___		if (reactiveType == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;public,reactive,adapter,get,adapter,class,reactive,type,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,reactive,type,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source);1491226688;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)___		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;public,reactive,adapter,get,adapter,class,reactive,type,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source);1491323158;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {__		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		Assert.isTrue(!rxJava1Present || rxReactiveStreamsPresent || !clazz.getName().startsWith("rx."),_				"For RxJava 1.x adapter support please add " +_						"\"io.reactivex:rxjava-reactive-streams\": " + clazz.getName())___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;public,reactive,adapter,get,adapter,class,reactive,type,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,assert,is,true,rx,java1present,rx,reactive,streams,present,clazz,get,name,starts,with,rx,for,rx,java,1,x,adapter,support,please,add,io,reactivex,rxjava,reactive,streams,clazz,get,name,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1496259743;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {__		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		Assert.isTrue(!rxJava1Present || rxReactiveStreamsPresent || !clazz.getName().startsWith("rx."),_				"For RxJava 1.x adapter support please add " +_						"\"io.reactivex:rxjava-reactive-streams\": " + clazz.getName())___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,assert,is,true,rx,java1present,rx,reactive,streams,present,clazz,get,name,starts,with,rx,for,rx,java,1,x,adapter,support,please,add,io,reactivex,rxjava,reactive,streams,clazz,get,name,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1496405779;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {__		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		Assert.isTrue(!rxJava1Present || rxReactiveStreamsPresent || !clazz.getName().startsWith("rx."),_				"For RxJava 1.x adapter support please add " +_						"\"io.reactivex:rxjava-reactive-streams\": " + clazz.getName())___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,assert,is,true,rx,java1present,rx,reactive,streams,present,clazz,get,name,starts,with,rx,for,rx,java,1,x,adapter,support,please,add,io,reactivex,rxjava,reactive,streams,clazz,get,name,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1496837955;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		Assert.isTrue(!rxJava1Present || rxReactiveStreamsPresent || !clazz.getName().startsWith("rx."),_				"For RxJava 1.x adapter support please add " +_						"\"io.reactivex:rxjava-reactive-streams\": " + clazz.getName())___		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,assert,is,true,rx,java1present,rx,reactive,streams,present,clazz,get,name,starts,with,rx,for,rx,java,1,x,adapter,support,please,add,io,reactivex,rxjava,reactive,streams,clazz,get,name,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1499771083;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1500495740;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1508201362;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1508234190;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1511215342;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1511268177;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1518260986;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1526693566;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1528897134;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1530174524;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1530190293;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1530617711;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1530633647;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}__		return this.adapters.stream()_				.filter(adapter -> adapter.getReactiveType() == clazz)_				.findFirst()_				.orElseGet(() ->_						this.adapters.stream()_								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))_								.findFirst()_								.orElse(null))__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,return,this,adapters,stream,filter,adapter,adapter,get,reactive,type,clazz,find,first,or,else,get,this,adapters,stream,filter,adapter,adapter,get,reactive,type,is,assignable,from,clazz,find,first,or,else,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source);1549365291;Get the adapter for the given reactive type. Or if a "source" object is_provided, its actual type is used instead._@param reactiveType the reactive type_(may be {@code null} if a concrete source object is given)_@param source an instance of the reactive type_(i.e. to adapt from_ may be {@code null} if the reactive type is specified);@Nullable_	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {_		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType)__		if (clazz == null) {_			return null__		}_		for(ReactiveAdapter adapter : this.adapters) {_			if (adapter.getReactiveType() == clazz) {_				return adapter__			}_		}_		for(ReactiveAdapter adapter : this.adapters) {_			if (adapter.getReactiveType().isAssignableFrom(clazz)) {_				return adapter__			}_		}_		return null__	};get,the,adapter,for,the,given,reactive,type,or,if,a,source,object,is,provided,its,actual,type,is,used,instead,param,reactive,type,the,reactive,type,may,be,code,null,if,a,concrete,source,object,is,given,param,source,an,instance,of,the,reactive,type,i,e,to,adapt,from,may,be,code,null,if,the,reactive,type,is,specified;nullable,public,reactive,adapter,get,adapter,nullable,class,reactive,type,nullable,object,source,object,source,to,use,source,instanceof,optional,optional,source,or,else,null,source,class,clazz,source,to,use,null,source,to,use,get,class,reactive,type,if,clazz,null,return,null,for,reactive,adapter,adapter,this,adapters,if,adapter,get,reactive,type,clazz,return,adapter,for,reactive,adapter,adapter,this,adapters,if,adapter,get,reactive,type,is,assignable,from,clazz,return,adapter,return,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1496837955;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1499771083;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1500495740;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1508201362;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1508234190;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1511215342;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1511268177;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1518260986;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1526693566;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1528897134;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1530174524;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1530190293;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1530617711;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1530633647;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> @Nullable 	public ReactiveAdapter getAdapter(Class<?> reactiveType);1549365291;Get the adapter for the given reactive type.;@Nullable_	public ReactiveAdapter getAdapter(Class<?> reactiveType) {_		return getAdapter(reactiveType, null)__	};get,the,adapter,for,the,given,reactive,type;nullable,public,reactive,adapter,get,adapter,class,reactive,type,return,get,adapter,reactive,type,null
ReactiveAdapterRegistry -> public boolean hasAdapters();1491224509;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1491226688;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1491323158;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1495868221;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1496259743;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1496405779;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1496837955;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1499771083;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1500495740;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1508201362;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1508234190;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1511215342;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1511268177;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1518260986;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1526693566;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1528897134;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1530174524;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1530190293;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1530617711;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1530633647;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
ReactiveAdapterRegistry -> public boolean hasAdapters();1549365291;Whether the registry has any adapters which would be the case if any of_Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are_present on the classpath.;public boolean hasAdapters() {_		return !this.adapters.isEmpty()__	};whether,the,registry,has,any,adapters,which,would,be,the,case,if,any,of,reactor,rx,java,2,or,rx,java,1,rx,java,reactive,streams,bridge,are,present,on,the,classpath;public,boolean,has,adapters,return,this,adapters,is,empty
