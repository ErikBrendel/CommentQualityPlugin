commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean containsKey(Object key) {     return LinkedCaseInsensitiveMap.this.containsKey(key). }
false;protected;1;8;;@Override protected boolean removeEldestEntry(Map.Entry<String, V> eldest) {     boolean doRemove = LinkedCaseInsensitiveMap.this.removeEldestEntry(eldest).     if (doRemove) {         caseInsensitiveKeys.remove(convertKey(eldest.getKey())).     }     return doRemove. }
false;public;0;4;;// Implementation of java.util.Map @Override public int size() {     return this.targetMap.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return this.targetMap.isEmpty(). }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return (key instanceof String && this.caseInsensitiveKeys.containsKey(convertKey((String) key))). }
false;public;1;4;;@Override public boolean containsValue(Object value) {     return this.targetMap.containsValue(value). }
false;public;1;11;;@Override @Nullable public V get(Object key) {     if (key instanceof String) {         String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key)).         if (caseInsensitiveKey != null) {             return this.targetMap.get(caseInsensitiveKey).         }     }     return null. }
false;public;2;11;;@Override @Nullable public V getOrDefault(Object key, V defaultValue) {     if (key instanceof String) {         String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key)).         if (caseInsensitiveKey != null) {             return this.targetMap.get(caseInsensitiveKey).         }     }     return defaultValue. }
false;public;2;11;;@Override @Nullable public V put(String key, @Nullable V value) {     String oldKey = this.caseInsensitiveKeys.put(convertKey(key), key).     V oldKeyValue = null.     if (oldKey != null && !oldKey.equals(key)) {         oldKeyValue = this.targetMap.remove(oldKey).     }     V oldValue = this.targetMap.put(key, value).     return (oldKeyValue != null ? oldKeyValue : oldValue). }
false;public;1;7;;@Override public void putAll(Map<? extends String, ? extends V> map) {     if (map.isEmpty()) {         return.     }     map.forEach(this::put). }
false;public;2;9;;@Override @Nullable public V putIfAbsent(String key, @Nullable V value) {     String oldKey = this.caseInsensitiveKeys.putIfAbsent(convertKey(key), key).     if (oldKey != null) {         return this.targetMap.get(oldKey).     }     return this.targetMap.putIfAbsent(key, value). }
false;public;2;9;;@Override @Nullable public V computeIfAbsent(String key, Function<? super String, ? extends V> mappingFunction) {     String oldKey = this.caseInsensitiveKeys.putIfAbsent(convertKey(key), key).     if (oldKey != null) {         return this.targetMap.get(oldKey).     }     return this.targetMap.computeIfAbsent(key, mappingFunction). }
false;public;1;11;;@Override @Nullable public V remove(Object key) {     if (key instanceof String) {         String caseInsensitiveKey = this.caseInsensitiveKeys.remove(convertKey((String) key)).         if (caseInsensitiveKey != null) {             return this.targetMap.remove(caseInsensitiveKey).         }     }     return null. }
false;public;0;5;;@Override public void clear() {     this.caseInsensitiveKeys.clear().     this.targetMap.clear(). }
false;public;0;4;;@Override public Set<String> keySet() {     return this.targetMap.keySet(). }
false;public;0;4;;@Override public Collection<V> values() {     return this.targetMap.values(). }
false;public;0;4;;@Override public Set<Entry<String, V>> entrySet() {     return this.targetMap.entrySet(). }
false;public;0;4;;@Override public LinkedCaseInsensitiveMap<V> clone() {     return new LinkedCaseInsensitiveMap<>(this). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return this.targetMap.equals(obj). }
false;public;0;4;;@Override public int hashCode() {     return this.targetMap.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.targetMap.toString(). }
true;public;0;3;/**  * Return the locale used by this {@code LinkedCaseInsensitiveMap}.  * Used for case-insensitive key conversion.  * @since 4.3.10  * @see #LinkedCaseInsensitiveMap(Locale)  * @see #convertKey(String)  */ ;// Specific to LinkedCaseInsensitiveMap /**  * Return the locale used by this {@code LinkedCaseInsensitiveMap}.  * Used for case-insensitive key conversion.  * @since 4.3.10  * @see #LinkedCaseInsensitiveMap(Locale)  * @see #convertKey(String)  */ public Locale getLocale() {     return this.locale. }
true;protected;1;3;/**  * Convert the given key to a case-insensitive key.  * <p>The default implementation converts the key  * to lower-case according to this Map's Locale.  * @param key the user-specified key  * @return the key to use for storing  * @see String#toLowerCase(Locale)  */ ;/**  * Convert the given key to a case-insensitive key.  * <p>The default implementation converts the key  * to lower-case according to this Map's Locale.  * @param key the user-specified key  * @return the key to use for storing  * @see String#toLowerCase(Locale)  */ protected String convertKey(String key) {     return key.toLowerCase(getLocale()). }
true;protected;1;3;/**  * Determine whether this map should remove the given eldest entry.  * @param eldest the candidate entry  * @return {@code true} for removing it, {@code false} for keeping it  * @see LinkedHashMap#removeEldestEntry  */ ;/**  * Determine whether this map should remove the given eldest entry.  * @param eldest the candidate entry  * @return {@code true} for removing it, {@code false} for keeping it  * @see LinkedHashMap#removeEldestEntry  */ protected boolean removeEldestEntry(Map.Entry<String, V> eldest) {     return false. }
