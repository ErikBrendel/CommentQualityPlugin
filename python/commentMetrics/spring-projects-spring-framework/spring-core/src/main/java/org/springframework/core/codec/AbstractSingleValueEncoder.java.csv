commented;modifiers;parameterAmount;loc;comment;code
false;public,final;5;8;;@Override public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {     return Flux.from(inputStream).take(1).concatMap(t -> encode(t, bufferFactory, elementType, mimeType, hints)). }
true;protected,abstract;5;2;/**  * Encode {@code T} to an output {@link DataBuffer} stream.  * @param t the value to process  * @param dataBufferFactory a buffer factory used to create the output  * @param type the stream element type to process  * @param mimeType the mime type to process  * @param hints additional information about how to do decode, optional  * @return the output stream  */ ;/**  * Encode {@code T} to an output {@link DataBuffer} stream.  * @param t the value to process  * @param dataBufferFactory a buffer factory used to create the output  * @param type the stream element type to process  * @param mimeType the mime type to process  * @param hints additional information about how to do decode, optional  * @return the output stream  */ protected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory, ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints).
