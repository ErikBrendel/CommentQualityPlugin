# id;timestamp;commentText;codeText;commentWords;codeWords
XmlValidationModeDetector -> private String consumeCommentTokens(String line);1328020251;Consumes all the leading comment data in the given String and returns the remaining content, which_may be empty since the supplied content might be all comment data. For our purposes it is only important_to strip leading comment content on a line since the first piece of non comment content will be either_the DOCTYPE declaration or the root element of the document.;private String consumeCommentTokens(String line) {_		if (line.indexOf(START_COMMENT) == -1 && line.indexOf(END_COMMENT) == -1) {_			return line__		}_		while ((line = consume(line)) != null) {_			if (!this.inComment && !line.trim().startsWith(START_COMMENT)) {_				return line__			}_		}_		return line__	};consumes,all,the,leading,comment,data,in,the,given,string,and,returns,the,remaining,content,which,may,be,empty,since,the,supplied,content,might,be,all,comment,data,for,our,purposes,it,is,only,important,to,strip,leading,comment,content,on,a,line,since,the,first,piece,of,non,comment,content,will,be,either,the,doctype,declaration,or,the,root,element,of,the,document;private,string,consume,comment,tokens,string,line,if,line,index,of,1,line,index,of,1,return,line,while,line,consume,line,null,if,this,in,comment,line,trim,starts,with,return,line,return,line
XmlValidationModeDetector -> private String consumeCommentTokens(String line);1393592432;Consumes all the leading comment data in the given String and returns the remaining content, which_may be empty since the supplied content might be all comment data. For our purposes it is only important_to strip leading comment content on a line since the first piece of non comment content will be either_the DOCTYPE declaration or the root element of the document.;private String consumeCommentTokens(String line) {_		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {_			return line__		}_		while ((line = consume(line)) != null) {_			if (!this.inComment && !line.trim().startsWith(START_COMMENT)) {_				return line__			}_		}_		return line__	};consumes,all,the,leading,comment,data,in,the,given,string,and,returns,the,remaining,content,which,may,be,empty,since,the,supplied,content,might,be,all,comment,data,for,our,purposes,it,is,only,important,to,strip,leading,comment,content,on,a,line,since,the,first,piece,of,non,comment,content,will,be,either,the,doctype,declaration,or,the,root,element,of,the,document;private,string,consume,comment,tokens,string,line,if,line,contains,line,contains,return,line,while,line,consume,line,null,if,this,in,comment,line,trim,starts,with,return,line,return,line
XmlValidationModeDetector -> private String consumeCommentTokens(String line);1461047077;Consumes all the leading comment data in the given String and returns the remaining content, which_may be empty since the supplied content might be all comment data. For our purposes it is only important_to strip leading comment content on a line since the first piece of non comment content will be either_the DOCTYPE declaration or the root element of the document.;private String consumeCommentTokens(String line) {_		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {_			return line__		}_		while ((line = consume(line)) != null) {_			if (!this.inComment && !line.trim().startsWith(START_COMMENT)) {_				return line__			}_		}_		return line__	};consumes,all,the,leading,comment,data,in,the,given,string,and,returns,the,remaining,content,which,may,be,empty,since,the,supplied,content,might,be,all,comment,data,for,our,purposes,it,is,only,important,to,strip,leading,comment,content,on,a,line,since,the,first,piece,of,non,comment,content,will,be,either,the,doctype,declaration,or,the,root,element,of,the,document;private,string,consume,comment,tokens,string,line,if,line,contains,line,contains,return,line,while,line,consume,line,null,if,this,in,comment,line,trim,starts,with,return,line,return,line
XmlValidationModeDetector -> private int commentToken(String line, String token, boolean inCommentIfPresent);1328020251;Try to consume the supplied token against the supplied content and update the_in comment parse state to the supplied value. Returns the index into the content_which is after the token or -1 if the token is not found.;private int commentToken(String line, String token, boolean inCommentIfPresent) {_		int index = line.indexOf(token)__		if (index > - 1) {_			this.inComment = inCommentIfPresent__		}_		return (index == -1 ? index : index + token.length())__	};try,to,consume,the,supplied,token,against,the,supplied,content,and,update,the,in,comment,parse,state,to,the,supplied,value,returns,the,index,into,the,content,which,is,after,the,token,or,1,if,the,token,is,not,found;private,int,comment,token,string,line,string,token,boolean,in,comment,if,present,int,index,line,index,of,token,if,index,1,this,in,comment,in,comment,if,present,return,index,1,index,index,token,length
XmlValidationModeDetector -> private int commentToken(String line, String token, boolean inCommentIfPresent);1393592432;Try to consume the supplied token against the supplied content and update the_in comment parse state to the supplied value. Returns the index into the content_which is after the token or -1 if the token is not found.;private int commentToken(String line, String token, boolean inCommentIfPresent) {_		int index = line.indexOf(token)__		if (index > - 1) {_			this.inComment = inCommentIfPresent__		}_		return (index == -1 ? index : index + token.length())__	};try,to,consume,the,supplied,token,against,the,supplied,content,and,update,the,in,comment,parse,state,to,the,supplied,value,returns,the,index,into,the,content,which,is,after,the,token,or,1,if,the,token,is,not,found;private,int,comment,token,string,line,string,token,boolean,in,comment,if,present,int,index,line,index,of,token,if,index,1,this,in,comment,in,comment,if,present,return,index,1,index,index,token,length
XmlValidationModeDetector -> private int commentToken(String line, String token, boolean inCommentIfPresent);1461047077;Try to consume the supplied token against the supplied content and update the_in comment parse state to the supplied value. Returns the index into the content_which is after the token or -1 if the token is not found.;private int commentToken(String line, String token, boolean inCommentIfPresent) {_		int index = line.indexOf(token)__		if (index > - 1) {_			this.inComment = inCommentIfPresent__		}_		return (index == -1 ? index : index + token.length())__	};try,to,consume,the,supplied,token,against,the,supplied,content,and,update,the,in,comment,parse,state,to,the,supplied,value,returns,the,index,into,the,content,which,is,after,the,token,or,1,if,the,token,is,not,found;private,int,comment,token,string,line,string,token,boolean,in,comment,if,present,int,index,line,index,of,token,if,index,1,this,in,comment,in,comment,if,present,return,index,1,index,index,token,length
XmlValidationModeDetector -> private int commentToken(String line, String token, boolean inCommentIfPresent);1496837955;Try to consume the supplied token against the supplied content and update the_in comment parse state to the supplied value. Returns the index into the content_which is after the token or -1 if the token is not found.;private int commentToken(String line, String token, boolean inCommentIfPresent) {_		int index = line.indexOf(token)__		if (index > - 1) {_			this.inComment = inCommentIfPresent__		}_		return (index == -1 ? index : index + token.length())__	};try,to,consume,the,supplied,token,against,the,supplied,content,and,update,the,in,comment,parse,state,to,the,supplied,value,returns,the,index,into,the,content,which,is,after,the,token,or,1,if,the,token,is,not,found;private,int,comment,token,string,line,string,token,boolean,in,comment,if,present,int,index,line,index,of,token,if,index,1,this,in,comment,in,comment,if,present,return,index,1,index,index,token,length
XmlValidationModeDetector -> private int commentToken(String line, String token, boolean inCommentIfPresent);1506097334;Try to consume the supplied token against the supplied content and update the_in comment parse state to the supplied value. Returns the index into the content_which is after the token or -1 if the token is not found.;private int commentToken(String line, String token, boolean inCommentIfPresent) {_		int index = line.indexOf(token)__		if (index > - 1) {_			this.inComment = inCommentIfPresent__		}_		return (index == -1 ? index : index + token.length())__	};try,to,consume,the,supplied,token,against,the,supplied,content,and,update,the,in,comment,parse,state,to,the,supplied,value,returns,the,index,into,the,content,which,is,after,the,token,or,1,if,the,token,is,not,found;private,int,comment,token,string,line,string,token,boolean,in,comment,if,present,int,index,line,index,of,token,if,index,1,this,in,comment,in,comment,if,present,return,index,1,index,index,token,length
XmlValidationModeDetector -> private int startComment(String line);1328020251;Try to consume the {@link #START_COMMENT} token._@see #commentToken(String, String, boolean);private int startComment(String line) {_		return commentToken(line, START_COMMENT, true)__	};try,to,consume,the,link,token,see,comment,token,string,string,boolean;private,int,start,comment,string,line,return,comment,token,line,true
XmlValidationModeDetector -> private int startComment(String line);1393592432;Try to consume the {@link #START_COMMENT} token._@see #commentToken(String, String, boolean);private int startComment(String line) {_		return commentToken(line, START_COMMENT, true)__	};try,to,consume,the,link,token,see,comment,token,string,string,boolean;private,int,start,comment,string,line,return,comment,token,line,true
XmlValidationModeDetector -> private int startComment(String line);1461047077;Try to consume the {@link #START_COMMENT} token._@see #commentToken(String, String, boolean);private int startComment(String line) {_		return commentToken(line, START_COMMENT, true)__	};try,to,consume,the,link,token,see,comment,token,string,string,boolean;private,int,start,comment,string,line,return,comment,token,line,true
XmlValidationModeDetector -> private int startComment(String line);1496837955;Try to consume the {@link #START_COMMENT} token._@see #commentToken(String, String, boolean);private int startComment(String line) {_		return commentToken(line, START_COMMENT, true)__	};try,to,consume,the,link,token,see,comment,token,string,string,boolean;private,int,start,comment,string,line,return,comment,token,line,true
XmlValidationModeDetector -> private int startComment(String line);1506097334;Try to consume the {@link #START_COMMENT} token._@see #commentToken(String, String, boolean);private int startComment(String line) {_		return commentToken(line, START_COMMENT, true)__	};try,to,consume,the,link,token,see,comment,token,string,string,boolean;private,int,start,comment,string,line,return,comment,token,line,true
XmlValidationModeDetector -> @Nullable 	private String consumeCommentTokens(String line);1496837955;Consumes all the leading comment data in the given String and returns the remaining content, which_may be empty since the supplied content might be all comment data. For our purposes it is only important_to strip leading comment content on a line since the first piece of non comment content will be either_the DOCTYPE declaration or the root element of the document.;@Nullable_	private String consumeCommentTokens(String line) {_		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {_			return line__		}_		String currLine = line__		while ((currLine = consume(currLine)) != null) {_			if (!this.inComment && !currLine.trim().startsWith(START_COMMENT)) {_				return currLine__			}_		}_		return null__	};consumes,all,the,leading,comment,data,in,the,given,string,and,returns,the,remaining,content,which,may,be,empty,since,the,supplied,content,might,be,all,comment,data,for,our,purposes,it,is,only,important,to,strip,leading,comment,content,on,a,line,since,the,first,piece,of,non,comment,content,will,be,either,the,doctype,declaration,or,the,root,element,of,the,document;nullable,private,string,consume,comment,tokens,string,line,if,line,contains,line,contains,return,line,string,curr,line,line,while,curr,line,consume,curr,line,null,if,this,in,comment,curr,line,trim,starts,with,return,curr,line,return,null
XmlValidationModeDetector -> @Nullable 	private String consumeCommentTokens(String line);1506097334;Consumes all the leading comment data in the given String and returns the remaining content, which_may be empty since the supplied content might be all comment data. For our purposes it is only important_to strip leading comment content on a line since the first piece of non comment content will be either_the DOCTYPE declaration or the root element of the document.;@Nullable_	private String consumeCommentTokens(String line) {_		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {_			return line__		}_		String currLine = line__		while ((currLine = consume(currLine)) != null) {_			if (!this.inComment && !currLine.trim().startsWith(START_COMMENT)) {_				return currLine__			}_		}_		return null__	};consumes,all,the,leading,comment,data,in,the,given,string,and,returns,the,remaining,content,which,may,be,empty,since,the,supplied,content,might,be,all,comment,data,for,our,purposes,it,is,only,important,to,strip,leading,comment,content,on,a,line,since,the,first,piece,of,non,comment,content,will,be,either,the,doctype,declaration,or,the,root,element,of,the,document;nullable,private,string,consume,comment,tokens,string,line,if,line,contains,line,contains,return,line,string,curr,line,line,while,curr,line,consume,curr,line,null,if,this,in,comment,curr,line,trim,starts,with,return,curr,line,return,null
XmlValidationModeDetector -> private boolean hasOpeningTag(String content);1328020251;Does the supplied content contain an XML opening tag. If the parse state is currently_in an XML comment then this method always returns false. It is expected that all comment_tokens will have consumed for the supplied content before passing the remainder to this method.;private boolean hasOpeningTag(String content) {_		if (this.inComment) {_			return false__		}_		int openTagIndex = content.indexOf('<')__		return (openTagIndex > -1 && content.length() > openTagIndex && Character.isLetter(content.charAt(openTagIndex + 1)))__	};does,the,supplied,content,contain,an,xml,opening,tag,if,the,parse,state,is,currently,in,an,xml,comment,then,this,method,always,returns,false,it,is,expected,that,all,comment,tokens,will,have,consumed,for,the,supplied,content,before,passing,the,remainder,to,this,method;private,boolean,has,opening,tag,string,content,if,this,in,comment,return,false,int,open,tag,index,content,index,of,return,open,tag,index,1,content,length,open,tag,index,character,is,letter,content,char,at,open,tag,index,1
XmlValidationModeDetector -> private boolean hasOpeningTag(String content);1393592432;Does the supplied content contain an XML opening tag. If the parse state is currently_in an XML comment then this method always returns false. It is expected that all comment_tokens will have consumed for the supplied content before passing the remainder to this method.;private boolean hasOpeningTag(String content) {_		if (this.inComment) {_			return false__		}_		int openTagIndex = content.indexOf('<')__		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&_				Character.isLetter(content.charAt(openTagIndex + 1)))__	};does,the,supplied,content,contain,an,xml,opening,tag,if,the,parse,state,is,currently,in,an,xml,comment,then,this,method,always,returns,false,it,is,expected,that,all,comment,tokens,will,have,consumed,for,the,supplied,content,before,passing,the,remainder,to,this,method;private,boolean,has,opening,tag,string,content,if,this,in,comment,return,false,int,open,tag,index,content,index,of,return,open,tag,index,1,content,length,open,tag,index,1,character,is,letter,content,char,at,open,tag,index,1
XmlValidationModeDetector -> private boolean hasOpeningTag(String content);1461047077;Does the supplied content contain an XML opening tag. If the parse state is currently_in an XML comment then this method always returns false. It is expected that all comment_tokens will have consumed for the supplied content before passing the remainder to this method.;private boolean hasOpeningTag(String content) {_		if (this.inComment) {_			return false__		}_		int openTagIndex = content.indexOf('<')__		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&_				Character.isLetter(content.charAt(openTagIndex + 1)))__	};does,the,supplied,content,contain,an,xml,opening,tag,if,the,parse,state,is,currently,in,an,xml,comment,then,this,method,always,returns,false,it,is,expected,that,all,comment,tokens,will,have,consumed,for,the,supplied,content,before,passing,the,remainder,to,this,method;private,boolean,has,opening,tag,string,content,if,this,in,comment,return,false,int,open,tag,index,content,index,of,return,open,tag,index,1,content,length,open,tag,index,1,character,is,letter,content,char,at,open,tag,index,1
XmlValidationModeDetector -> private boolean hasOpeningTag(String content);1496837955;Does the supplied content contain an XML opening tag. If the parse state is currently_in an XML comment then this method always returns false. It is expected that all comment_tokens will have consumed for the supplied content before passing the remainder to this method.;private boolean hasOpeningTag(String content) {_		if (this.inComment) {_			return false__		}_		int openTagIndex = content.indexOf('<')__		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&_				Character.isLetter(content.charAt(openTagIndex + 1)))__	};does,the,supplied,content,contain,an,xml,opening,tag,if,the,parse,state,is,currently,in,an,xml,comment,then,this,method,always,returns,false,it,is,expected,that,all,comment,tokens,will,have,consumed,for,the,supplied,content,before,passing,the,remainder,to,this,method;private,boolean,has,opening,tag,string,content,if,this,in,comment,return,false,int,open,tag,index,content,index,of,return,open,tag,index,1,content,length,open,tag,index,1,character,is,letter,content,char,at,open,tag,index,1
XmlValidationModeDetector -> private boolean hasOpeningTag(String content);1506097334;Does the supplied content contain an XML opening tag. If the parse state is currently_in an XML comment then this method always returns false. It is expected that all comment_tokens will have consumed for the supplied content before passing the remainder to this method.;private boolean hasOpeningTag(String content) {_		if (this.inComment) {_			return false__		}_		int openTagIndex = content.indexOf('<')__		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&_				Character.isLetter(content.charAt(openTagIndex + 1)))__	};does,the,supplied,content,contain,an,xml,opening,tag,if,the,parse,state,is,currently,in,an,xml,comment,then,this,method,always,returns,false,it,is,expected,that,all,comment,tokens,will,have,consumed,for,the,supplied,content,before,passing,the,remainder,to,this,method;private,boolean,has,opening,tag,string,content,if,this,in,comment,return,false,int,open,tag,index,content,index,of,return,open,tag,index,1,content,length,open,tag,index,1,character,is,letter,content,char,at,open,tag,index,1
XmlValidationModeDetector -> private boolean hasDoctype(String content);1328020251;Does the content contain the the DTD DOCTYPE declaration?;private boolean hasDoctype(String content) {_		return (content.indexOf(DOCTYPE) > -1)__	};does,the,content,contain,the,the,dtd,doctype,declaration;private,boolean,has,doctype,string,content,return,content,index,of,doctype,1
XmlValidationModeDetector -> private boolean hasDoctype(String content);1393592432;Does the content contain the the DTD DOCTYPE declaration?;private boolean hasDoctype(String content) {_		return content.contains(DOCTYPE)__	};does,the,content,contain,the,the,dtd,doctype,declaration;private,boolean,has,doctype,string,content,return,content,contains,doctype
XmlValidationModeDetector -> private boolean hasDoctype(String content);1461047077;Does the content contain the DTD DOCTYPE declaration?;private boolean hasDoctype(String content) {_		return content.contains(DOCTYPE)__	};does,the,content,contain,the,dtd,doctype,declaration;private,boolean,has,doctype,string,content,return,content,contains,doctype
XmlValidationModeDetector -> private boolean hasDoctype(String content);1496837955;Does the content contain the DTD DOCTYPE declaration?;private boolean hasDoctype(String content) {_		return content.contains(DOCTYPE)__	};does,the,content,contain,the,dtd,doctype,declaration;private,boolean,has,doctype,string,content,return,content,contains,doctype
XmlValidationModeDetector -> private boolean hasDoctype(String content);1506097334;Does the content contain the DTD DOCTYPE declaration?;private boolean hasDoctype(String content) {_		return content.contains(DOCTYPE)__	};does,the,content,contain,the,dtd,doctype,declaration;private,boolean,has,doctype,string,content,return,content,contains,doctype
XmlValidationModeDetector -> public int detectValidationMode(InputStream inputStream) throws IOException;1328020251;Detect the validation mode for the XML document in the supplied {@link InputStream}._Note that the supplied {@link InputStream} is closed by this method before returning._@param inputStream the InputStream to parse_@throws IOException in case of I/O failure_@see #VALIDATION_DTD_@see #VALIDATION_XSD;public int detectValidationMode(InputStream inputStream) throws IOException {_		_		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))__		try {_			boolean isDtdValidated = false__			String content__			while ((content = reader.readLine()) != null) {_				content = consumeCommentTokens(content)__				if (this.inComment || !StringUtils.hasText(content)) {_					continue__				}_				if (hasDoctype(content)) {_					isDtdValidated = true__					break__				}_				if (hasOpeningTag(content)) {_					_					break__				}_			}_			return (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD)__		}_		catch (CharConversionException ex) {_			_			_			return VALIDATION_AUTO__		}_		finally {_			reader.close()__		}_	};detect,the,validation,mode,for,the,xml,document,in,the,supplied,link,input,stream,note,that,the,supplied,link,input,stream,is,closed,by,this,method,before,returning,param,input,stream,the,input,stream,to,parse,throws,ioexception,in,case,of,i,o,failure,see,see;public,int,detect,validation,mode,input,stream,input,stream,throws,ioexception,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,input,stream,try,boolean,is,dtd,validated,false,string,content,while,content,reader,read,line,null,content,consume,comment,tokens,content,if,this,in,comment,string,utils,has,text,content,continue,if,has,doctype,content,is,dtd,validated,true,break,if,has,opening,tag,content,break,return,is,dtd,validated,catch,char,conversion,exception,ex,return,finally,reader,close
XmlValidationModeDetector -> public int detectValidationMode(InputStream inputStream) throws IOException;1393592432;Detect the validation mode for the XML document in the supplied {@link InputStream}._Note that the supplied {@link InputStream} is closed by this method before returning._@param inputStream the InputStream to parse_@throws IOException in case of I/O failure_@see #VALIDATION_DTD_@see #VALIDATION_XSD;public int detectValidationMode(InputStream inputStream) throws IOException {_		_		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))__		try {_			boolean isDtdValidated = false__			String content__			while ((content = reader.readLine()) != null) {_				content = consumeCommentTokens(content)__				if (this.inComment || !StringUtils.hasText(content)) {_					continue__				}_				if (hasDoctype(content)) {_					isDtdValidated = true__					break__				}_				if (hasOpeningTag(content)) {_					_					break__				}_			}_			return (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD)__		}_		catch (CharConversionException ex) {_			_			_			return VALIDATION_AUTO__		}_		finally {_			reader.close()__		}_	};detect,the,validation,mode,for,the,xml,document,in,the,supplied,link,input,stream,note,that,the,supplied,link,input,stream,is,closed,by,this,method,before,returning,param,input,stream,the,input,stream,to,parse,throws,ioexception,in,case,of,i,o,failure,see,see;public,int,detect,validation,mode,input,stream,input,stream,throws,ioexception,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,input,stream,try,boolean,is,dtd,validated,false,string,content,while,content,reader,read,line,null,content,consume,comment,tokens,content,if,this,in,comment,string,utils,has,text,content,continue,if,has,doctype,content,is,dtd,validated,true,break,if,has,opening,tag,content,break,return,is,dtd,validated,catch,char,conversion,exception,ex,return,finally,reader,close
XmlValidationModeDetector -> public int detectValidationMode(InputStream inputStream) throws IOException;1461047077;Detect the validation mode for the XML document in the supplied {@link InputStream}._Note that the supplied {@link InputStream} is closed by this method before returning._@param inputStream the InputStream to parse_@throws IOException in case of I/O failure_@see #VALIDATION_DTD_@see #VALIDATION_XSD;public int detectValidationMode(InputStream inputStream) throws IOException {_		_		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))__		try {_			boolean isDtdValidated = false__			String content__			while ((content = reader.readLine()) != null) {_				content = consumeCommentTokens(content)__				if (this.inComment || !StringUtils.hasText(content)) {_					continue__				}_				if (hasDoctype(content)) {_					isDtdValidated = true__					break__				}_				if (hasOpeningTag(content)) {_					_					break__				}_			}_			return (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD)__		}_		catch (CharConversionException ex) {_			_			_			return VALIDATION_AUTO__		}_		finally {_			reader.close()__		}_	};detect,the,validation,mode,for,the,xml,document,in,the,supplied,link,input,stream,note,that,the,supplied,link,input,stream,is,closed,by,this,method,before,returning,param,input,stream,the,input,stream,to,parse,throws,ioexception,in,case,of,i,o,failure,see,see;public,int,detect,validation,mode,input,stream,input,stream,throws,ioexception,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,input,stream,try,boolean,is,dtd,validated,false,string,content,while,content,reader,read,line,null,content,consume,comment,tokens,content,if,this,in,comment,string,utils,has,text,content,continue,if,has,doctype,content,is,dtd,validated,true,break,if,has,opening,tag,content,break,return,is,dtd,validated,catch,char,conversion,exception,ex,return,finally,reader,close
XmlValidationModeDetector -> public int detectValidationMode(InputStream inputStream) throws IOException;1496837955;Detect the validation mode for the XML document in the supplied {@link InputStream}._Note that the supplied {@link InputStream} is closed by this method before returning._@param inputStream the InputStream to parse_@throws IOException in case of I/O failure_@see #VALIDATION_DTD_@see #VALIDATION_XSD;public int detectValidationMode(InputStream inputStream) throws IOException {_		_		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))__		try {_			boolean isDtdValidated = false__			String content__			while ((content = reader.readLine()) != null) {_				content = consumeCommentTokens(content)__				if (this.inComment || !StringUtils.hasText(content)) {_					continue__				}_				if (hasDoctype(content)) {_					isDtdValidated = true__					break__				}_				if (hasOpeningTag(content)) {_					_					break__				}_			}_			return (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD)__		}_		catch (CharConversionException ex) {_			_			_			return VALIDATION_AUTO__		}_		finally {_			reader.close()__		}_	};detect,the,validation,mode,for,the,xml,document,in,the,supplied,link,input,stream,note,that,the,supplied,link,input,stream,is,closed,by,this,method,before,returning,param,input,stream,the,input,stream,to,parse,throws,ioexception,in,case,of,i,o,failure,see,see;public,int,detect,validation,mode,input,stream,input,stream,throws,ioexception,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,input,stream,try,boolean,is,dtd,validated,false,string,content,while,content,reader,read,line,null,content,consume,comment,tokens,content,if,this,in,comment,string,utils,has,text,content,continue,if,has,doctype,content,is,dtd,validated,true,break,if,has,opening,tag,content,break,return,is,dtd,validated,catch,char,conversion,exception,ex,return,finally,reader,close
XmlValidationModeDetector -> public int detectValidationMode(InputStream inputStream) throws IOException;1506097334;Detect the validation mode for the XML document in the supplied {@link InputStream}._Note that the supplied {@link InputStream} is closed by this method before returning._@param inputStream the InputStream to parse_@throws IOException in case of I/O failure_@see #VALIDATION_DTD_@see #VALIDATION_XSD;public int detectValidationMode(InputStream inputStream) throws IOException {_		_		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))__		try {_			boolean isDtdValidated = false__			String content__			while ((content = reader.readLine()) != null) {_				content = consumeCommentTokens(content)__				if (this.inComment || !StringUtils.hasText(content)) {_					continue__				}_				if (hasDoctype(content)) {_					isDtdValidated = true__					break__				}_				if (hasOpeningTag(content)) {_					_					break__				}_			}_			return (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD)__		}_		catch (CharConversionException ex) {_			_			_			return VALIDATION_AUTO__		}_		finally {_			reader.close()__		}_	};detect,the,validation,mode,for,the,xml,document,in,the,supplied,link,input,stream,note,that,the,supplied,link,input,stream,is,closed,by,this,method,before,returning,param,input,stream,the,input,stream,to,parse,throws,ioexception,in,case,of,i,o,failure,see,see;public,int,detect,validation,mode,input,stream,input,stream,throws,ioexception,buffered,reader,reader,new,buffered,reader,new,input,stream,reader,input,stream,try,boolean,is,dtd,validated,false,string,content,while,content,reader,read,line,null,content,consume,comment,tokens,content,if,this,in,comment,string,utils,has,text,content,continue,if,has,doctype,content,is,dtd,validated,true,break,if,has,opening,tag,content,break,return,is,dtd,validated,catch,char,conversion,exception,ex,return,finally,reader,close
XmlValidationModeDetector -> private String consume(String line);1328020251;Consume the next comment token, update the "inComment" flag_and return the remaining content.;private String consume(String line) {_		int index = (this.inComment ? endComment(line) : startComment(line))__		return (index == -1 ? null : line.substring(index))__	};consume,the,next,comment,token,update,the,in,comment,flag,and,return,the,remaining,content;private,string,consume,string,line,int,index,this,in,comment,end,comment,line,start,comment,line,return,index,1,null,line,substring,index
XmlValidationModeDetector -> private String consume(String line);1393592432;Consume the next comment token, update the "inComment" flag_and return the remaining content.;private String consume(String line) {_		int index = (this.inComment ? endComment(line) : startComment(line))__		return (index == -1 ? null : line.substring(index))__	};consume,the,next,comment,token,update,the,in,comment,flag,and,return,the,remaining,content;private,string,consume,string,line,int,index,this,in,comment,end,comment,line,start,comment,line,return,index,1,null,line,substring,index
XmlValidationModeDetector -> private String consume(String line);1461047077;Consume the next comment token, update the "inComment" flag_and return the remaining content.;private String consume(String line) {_		int index = (this.inComment ? endComment(line) : startComment(line))__		return (index == -1 ? null : line.substring(index))__	};consume,the,next,comment,token,update,the,in,comment,flag,and,return,the,remaining,content;private,string,consume,string,line,int,index,this,in,comment,end,comment,line,start,comment,line,return,index,1,null,line,substring,index
XmlValidationModeDetector -> private String consume(String line);1496837955;Consume the next comment token, update the "inComment" flag_and return the remaining content.;private String consume(String line) {_		int index = (this.inComment ? endComment(line) : startComment(line))__		return (index == -1 ? null : line.substring(index))__	};consume,the,next,comment,token,update,the,in,comment,flag,and,return,the,remaining,content;private,string,consume,string,line,int,index,this,in,comment,end,comment,line,start,comment,line,return,index,1,null,line,substring,index
