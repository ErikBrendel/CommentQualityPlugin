# id;timestamp;commentText;codeText;commentWords;codeWords
SymbolTable -> Symbol addConstantLong(final long value);1531241461;Adds a CONSTANT_Long_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a long._@return a new or already existing Symbol with the given value.;Symbol addConstantLong(final long value) {_    return addConstantLong(Symbol.CONSTANT_LONG_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,long,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,long,final,long,value,return,add,constant,long,symbol,value
SymbolTable -> Symbol addConstantLong(final long value);1536664245;Adds a CONSTANT_Long_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a long._@return a new or already existing Symbol with the given value.;Symbol addConstantLong(final long value) {_    return addConstantLong(Symbol.CONSTANT_LONG_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,long,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,long,final,long,value,return,add,constant,long,symbol,value
SymbolTable -> Symbol addConstantLong(final long value);1537204147;Adds a CONSTANT_Long_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a long._@return a new or already existing Symbol with the given value.;Symbol addConstantLong(final long value) {_    return addConstantLongOrDouble(Symbol.CONSTANT_LONG_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,long,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,long,final,long,value,return,add,constant,long,or,double,symbol,value
SymbolTable -> Symbol addConstantLong(final long value);1539119582;Adds a CONSTANT_Long_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a long._@return a new or already existing Symbol with the given value.;Symbol addConstantLong(final long value) {_    return addConstantLongOrDouble(Symbol.CONSTANT_LONG_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,long,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,long,final,long,value,return,add,constant,long,or,double,symbol,value
SymbolTable -> private void addConstantIntegerOrFloat(final int index, final int tag, final int value);1537204147;Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol_table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float.;private void addConstantIntegerOrFloat(final int index, final int tag, final int value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float;private,void,add,constant,integer,or,float,final,int,index,final,int,tag,final,int,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantIntegerOrFloat(final int index, final int tag, final int value);1539119582;Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol_table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float.;private void addConstantIntegerOrFloat(final int index, final int tag, final int value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float;private,void,add,constant,integer,or,float,final,int,index,final,int,tag,final,int,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> int getConstantPoolCount();1531241461;@return the number of items in this symbol table's constant_pool array (plus 1).;int getConstantPoolCount() {_    return constantPoolCount__  };return,the,number,of,items,in,this,symbol,table,s,array,plus,1;int,get,constant,pool,count,return,constant,pool,count
SymbolTable -> int getConstantPoolCount();1536664245;@return the number of items in this symbol table's constant_pool array (plus 1).;int getConstantPoolCount() {_    return constantPoolCount__  };return,the,number,of,items,in,this,symbol,table,s,array,plus,1;int,get,constant,pool,count,return,constant,pool,count
SymbolTable -> int getConstantPoolCount();1537204147;Returns the number of items in this symbol table's constant_pool array (plus 1).__@return the number of items in this symbol table's constant_pool array (plus 1).;int getConstantPoolCount() {_    return constantPoolCount__  };returns,the,number,of,items,in,this,symbol,table,s,array,plus,1,return,the,number,of,items,in,this,symbol,table,s,array,plus,1;int,get,constant,pool,count,return,constant,pool,count
SymbolTable -> int getConstantPoolCount();1539119582;Returns the number of items in this symbol table's constant_pool array (plus 1).__@return the number of items in this symbol table's constant_pool array (plus 1).;int getConstantPoolCount() {_    return constantPoolCount__  };returns,the,number,of,items,in,this,symbol,table,s,array,plus,1,return,the,number,of,items,in,this,symbol,table,s,array,plus,1;int,get,constant,pool,count,return,constant,pool,count
SymbolTable -> int addConstantNameAndType(final String name, final String descriptor);1531241461;Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;int addConstantNameAndType(final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    int hashCode = hash(tag, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor))__    return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,name,and,type,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,name,equals,name,entry,value,equals,descriptor,return,entry,index,entry,entry,next,constant,pool,put122,tag,add,constant,utf8,name,add,constant,utf8,descriptor,return,put,new,entry,constant,pool,count,tag,name,descriptor,hash,code,index
SymbolTable -> int addConstantNameAndType(final String name, final String descriptor);1536664245;Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;int addConstantNameAndType(final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    int hashCode = hash(tag, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor))__    return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,name,and,type,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,name,equals,name,entry,value,equals,descriptor,return,entry,index,entry,entry,next,constant,pool,put122,tag,add,constant,utf8,name,add,constant,utf8,descriptor,return,put,new,entry,constant,pool,count,tag,name,descriptor,hash,code,index
SymbolTable -> int addConstantNameAndType(final String name, final String descriptor);1537204147;Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;int addConstantNameAndType(final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    int hashCode = hash(tag, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor))__    return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,name,and,type,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,name,equals,name,entry,value,equals,descriptor,return,entry,index,entry,entry,next,constant,pool,put122,tag,add,constant,utf8,name,add,constant,utf8,descriptor,return,put,new,entry,constant,pool,count,tag,name,descriptor,hash,code,index
SymbolTable -> int addConstantNameAndType(final String name, final String descriptor);1539119582;Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;int addConstantNameAndType(final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    int hashCode = hash(tag, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor))__    return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,name,and,type,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,name,equals,name,entry,value,equals,descriptor,return,entry,index,entry,entry,next,constant,pool,put122,tag,add,constant,utf8,name,add,constant,utf8,descriptor,return,put,new,entry,constant,pool,count,tag,name,descriptor,hash,code,index
SymbolTable -> Symbol addConstantFieldref(final String owner, final String name, final String descriptor);1531241461;Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param owner the internal name of a class._@param name a field name._@param descriptor a field descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantFieldref(final String owner, final String name, final String descriptor) {_    return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,field,name,param,descriptor,a,field,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,fieldref,final,string,owner,final,string,name,final,string,descriptor,return,add,constant,member,reference,symbol,owner,name,descriptor
SymbolTable -> Symbol addConstantFieldref(final String owner, final String name, final String descriptor);1536664245;Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param owner the internal name of a class._@param name a field name._@param descriptor a field descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantFieldref(final String owner, final String name, final String descriptor) {_    return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,field,name,param,descriptor,a,field,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,fieldref,final,string,owner,final,string,name,final,string,descriptor,return,add,constant,member,reference,symbol,owner,name,descriptor
SymbolTable -> Symbol addConstantFieldref(final String owner, final String name, final String descriptor);1537204147;Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param owner the internal name of a class._@param name a field name._@param descriptor a field descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantFieldref(final String owner, final String name, final String descriptor) {_    return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,field,name,param,descriptor,a,field,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,fieldref,final,string,owner,final,string,name,final,string,descriptor,return,add,constant,member,reference,symbol,owner,name,descriptor
SymbolTable -> Symbol addConstantFieldref(final String owner, final String name, final String descriptor);1539119582;Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param owner the internal name of a class._@param name a field name._@param descriptor a field descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantFieldref(final String owner, final String name, final String descriptor) {_    return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,field,name,param,descriptor,a,field,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,fieldref,final,string,owner,final,string,name,final,string,descriptor,return,add,constant,member,reference,symbol,owner,name,descriptor
SymbolTable -> Symbol addConstant(final Object value);1531241461;Adds a number or string constant to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, {@link Byte}, {@link Character}, {@link Short}, {@link Boolean}, {@link_Float}, {@link Long}, {@link Double}, {@link String}, {@link Type} or {@link Handle}._@return a new or already existing Symbol with the given value.;Symbol addConstant(final Object value) {_    if (value instanceof Integer) {_      return addConstantInteger(((Integer) value).intValue())__    } else if (value instanceof Byte) {_      return addConstantInteger(((Byte) value).intValue())__    } else if (value instanceof Character) {_      return addConstantInteger(((Character) value).charValue())__    } else if (value instanceof Short) {_      return addConstantInteger(((Short) value).intValue())__    } else if (value instanceof Boolean) {_      return addConstantInteger(((Boolean) value).booleanValue() ? 1 : 0)__    } else if (value instanceof Float) {_      return addConstantFloat(((Float) value).floatValue())__    } else if (value instanceof Long) {_      return addConstantLong(((Long) value).longValue())__    } else if (value instanceof Double) {_      return addConstantDouble(((Double) value).doubleValue())__    } else if (value instanceof String) {_      return addConstantString((String) value)__    } else if (value instanceof Type) {_      Type type = (Type) value__      int typeSort = type.getSort()__      if (typeSort == Type.OBJECT) {_        return addConstantClass(type.getInternalName())__      } else if (typeSort == Type.METHOD) {_        return addConstantMethodType(type.getDescriptor())__      } else { _        return addConstantClass(type.getDescriptor())__      }_    } else if (value instanceof Handle) {_      Handle handle = (Handle) value__      return addConstantMethodHandle(_          handle.getTag(),_          handle.getOwner(),_          handle.getName(),_          handle.getDesc(),_          handle.isInterface())__    } else if (value instanceof ConstantDynamic) {_      ConstantDynamic constantDynamic = (ConstantDynamic) value__      return addConstantDynamic(_          constantDynamic.getName(),_          constantDynamic.getDescriptor(),_          constantDynamic.getBootstrapMethod(),_          constantDynamic.getBootstrapMethodArguments())__    } else {_      throw new IllegalArgumentException("value " + value)__    }_  };adds,a,number,or,string,constant,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,link,byte,link,character,link,short,link,boolean,link,float,link,long,link,double,link,string,link,type,or,link,handle,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,final,object,value,if,value,instanceof,integer,return,add,constant,integer,integer,value,int,value,else,if,value,instanceof,byte,return,add,constant,integer,byte,value,int,value,else,if,value,instanceof,character,return,add,constant,integer,character,value,char,value,else,if,value,instanceof,short,return,add,constant,integer,short,value,int,value,else,if,value,instanceof,boolean,return,add,constant,integer,boolean,value,boolean,value,1,0,else,if,value,instanceof,float,return,add,constant,float,float,value,float,value,else,if,value,instanceof,long,return,add,constant,long,long,value,long,value,else,if,value,instanceof,double,return,add,constant,double,double,value,double,value,else,if,value,instanceof,string,return,add,constant,string,string,value,else,if,value,instanceof,type,type,type,type,value,int,type,sort,type,get,sort,if,type,sort,type,object,return,add,constant,class,type,get,internal,name,else,if,type,sort,type,method,return,add,constant,method,type,type,get,descriptor,else,return,add,constant,class,type,get,descriptor,else,if,value,instanceof,handle,handle,handle,handle,value,return,add,constant,method,handle,handle,get,tag,handle,get,owner,handle,get,name,handle,get,desc,handle,is,interface,else,if,value,instanceof,constant,dynamic,constant,dynamic,constant,dynamic,constant,dynamic,value,return,add,constant,dynamic,constant,dynamic,get,name,constant,dynamic,get,descriptor,constant,dynamic,get,bootstrap,method,constant,dynamic,get,bootstrap,method,arguments,else,throw,new,illegal,argument,exception,value,value
SymbolTable -> Symbol addConstant(final Object value);1536664245;Adds a number or string constant to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, {@link Byte}, {@link Character}, {@link Short}, {@link Boolean}, {@link_Float}, {@link Long}, {@link Double}, {@link String}, {@link Type} or {@link Handle}._@return a new or already existing Symbol with the given value.;Symbol addConstant(final Object value) {_    if (value instanceof Integer) {_      return addConstantInteger(((Integer) value).intValue())__    } else if (value instanceof Byte) {_      return addConstantInteger(((Byte) value).intValue())__    } else if (value instanceof Character) {_      return addConstantInteger(((Character) value).charValue())__    } else if (value instanceof Short) {_      return addConstantInteger(((Short) value).intValue())__    } else if (value instanceof Boolean) {_      return addConstantInteger(((Boolean) value).booleanValue() ? 1 : 0)__    } else if (value instanceof Float) {_      return addConstantFloat(((Float) value).floatValue())__    } else if (value instanceof Long) {_      return addConstantLong(((Long) value).longValue())__    } else if (value instanceof Double) {_      return addConstantDouble(((Double) value).doubleValue())__    } else if (value instanceof String) {_      return addConstantString((String) value)__    } else if (value instanceof Type) {_      Type type = (Type) value__      int typeSort = type.getSort()__      if (typeSort == Type.OBJECT) {_        return addConstantClass(type.getInternalName())__      } else if (typeSort == Type.METHOD) {_        return addConstantMethodType(type.getDescriptor())__      } else { _        return addConstantClass(type.getDescriptor())__      }_    } else if (value instanceof Handle) {_      Handle handle = (Handle) value__      return addConstantMethodHandle(_          handle.getTag(),_          handle.getOwner(),_          handle.getName(),_          handle.getDesc(),_          handle.isInterface())__    } else if (value instanceof ConstantDynamic) {_      ConstantDynamic constantDynamic = (ConstantDynamic) value__      return addConstantDynamic(_          constantDynamic.getName(),_          constantDynamic.getDescriptor(),_          constantDynamic.getBootstrapMethod(),_          constantDynamic.getBootstrapMethodArguments())__    } else {_      throw new IllegalArgumentException("value " + value)__    }_  };adds,a,number,or,string,constant,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,link,byte,link,character,link,short,link,boolean,link,float,link,long,link,double,link,string,link,type,or,link,handle,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,final,object,value,if,value,instanceof,integer,return,add,constant,integer,integer,value,int,value,else,if,value,instanceof,byte,return,add,constant,integer,byte,value,int,value,else,if,value,instanceof,character,return,add,constant,integer,character,value,char,value,else,if,value,instanceof,short,return,add,constant,integer,short,value,int,value,else,if,value,instanceof,boolean,return,add,constant,integer,boolean,value,boolean,value,1,0,else,if,value,instanceof,float,return,add,constant,float,float,value,float,value,else,if,value,instanceof,long,return,add,constant,long,long,value,long,value,else,if,value,instanceof,double,return,add,constant,double,double,value,double,value,else,if,value,instanceof,string,return,add,constant,string,string,value,else,if,value,instanceof,type,type,type,type,value,int,type,sort,type,get,sort,if,type,sort,type,object,return,add,constant,class,type,get,internal,name,else,if,type,sort,type,method,return,add,constant,method,type,type,get,descriptor,else,return,add,constant,class,type,get,descriptor,else,if,value,instanceof,handle,handle,handle,handle,value,return,add,constant,method,handle,handle,get,tag,handle,get,owner,handle,get,name,handle,get,desc,handle,is,interface,else,if,value,instanceof,constant,dynamic,constant,dynamic,constant,dynamic,constant,dynamic,value,return,add,constant,dynamic,constant,dynamic,get,name,constant,dynamic,get,descriptor,constant,dynamic,get,bootstrap,method,constant,dynamic,get,bootstrap,method,arguments,else,throw,new,illegal,argument,exception,value,value
SymbolTable -> Symbol addConstant(final Object value);1537204147;Adds a number or string constant to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, {@link Byte}, {@link Character}, {@link Short}, {@link Boolean}, {@link_Float}, {@link Long}, {@link Double}, {@link String}, {@link Type} or {@link Handle}._@return a new or already existing Symbol with the given value.;Symbol addConstant(final Object value) {_    if (value instanceof Integer) {_      return addConstantInteger(((Integer) value).intValue())__    } else if (value instanceof Byte) {_      return addConstantInteger(((Byte) value).intValue())__    } else if (value instanceof Character) {_      return addConstantInteger(((Character) value).charValue())__    } else if (value instanceof Short) {_      return addConstantInteger(((Short) value).intValue())__    } else if (value instanceof Boolean) {_      return addConstantInteger(((Boolean) value).booleanValue() ? 1 : 0)__    } else if (value instanceof Float) {_      return addConstantFloat(((Float) value).floatValue())__    } else if (value instanceof Long) {_      return addConstantLong(((Long) value).longValue())__    } else if (value instanceof Double) {_      return addConstantDouble(((Double) value).doubleValue())__    } else if (value instanceof String) {_      return addConstantString((String) value)__    } else if (value instanceof Type) {_      Type type = (Type) value__      int typeSort = type.getSort()__      if (typeSort == Type.OBJECT) {_        return addConstantClass(type.getInternalName())__      } else if (typeSort == Type.METHOD) {_        return addConstantMethodType(type.getDescriptor())__      } else { _        return addConstantClass(type.getDescriptor())__      }_    } else if (value instanceof Handle) {_      Handle handle = (Handle) value__      return addConstantMethodHandle(_          handle.getTag(),_          handle.getOwner(),_          handle.getName(),_          handle.getDesc(),_          handle.isInterface())__    } else if (value instanceof ConstantDynamic) {_      ConstantDynamic constantDynamic = (ConstantDynamic) value__      return addConstantDynamic(_          constantDynamic.getName(),_          constantDynamic.getDescriptor(),_          constantDynamic.getBootstrapMethod(),_          constantDynamic.getBootstrapMethodArguments())__    } else {_      throw new IllegalArgumentException("value " + value)__    }_  };adds,a,number,or,string,constant,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,link,byte,link,character,link,short,link,boolean,link,float,link,long,link,double,link,string,link,type,or,link,handle,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,final,object,value,if,value,instanceof,integer,return,add,constant,integer,integer,value,int,value,else,if,value,instanceof,byte,return,add,constant,integer,byte,value,int,value,else,if,value,instanceof,character,return,add,constant,integer,character,value,char,value,else,if,value,instanceof,short,return,add,constant,integer,short,value,int,value,else,if,value,instanceof,boolean,return,add,constant,integer,boolean,value,boolean,value,1,0,else,if,value,instanceof,float,return,add,constant,float,float,value,float,value,else,if,value,instanceof,long,return,add,constant,long,long,value,long,value,else,if,value,instanceof,double,return,add,constant,double,double,value,double,value,else,if,value,instanceof,string,return,add,constant,string,string,value,else,if,value,instanceof,type,type,type,type,value,int,type,sort,type,get,sort,if,type,sort,type,object,return,add,constant,class,type,get,internal,name,else,if,type,sort,type,method,return,add,constant,method,type,type,get,descriptor,else,return,add,constant,class,type,get,descriptor,else,if,value,instanceof,handle,handle,handle,handle,value,return,add,constant,method,handle,handle,get,tag,handle,get,owner,handle,get,name,handle,get,desc,handle,is,interface,else,if,value,instanceof,constant,dynamic,constant,dynamic,constant,dynamic,constant,dynamic,value,return,add,constant,dynamic,constant,dynamic,get,name,constant,dynamic,get,descriptor,constant,dynamic,get,bootstrap,method,constant,dynamic,get,bootstrap,method,arguments,else,throw,new,illegal,argument,exception,value,value
SymbolTable -> Symbol addConstant(final Object value);1539119582;Adds a number or string constant to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, {@link Byte}, {@link Character}, {@link Short}, {@link Boolean}, {@link_Float}, {@link Long}, {@link Double}, {@link String}, {@link Type} or {@link Handle}._@return a new or already existing Symbol with the given value.;Symbol addConstant(final Object value) {_    if (value instanceof Integer) {_      return addConstantInteger(((Integer) value).intValue())__    } else if (value instanceof Byte) {_      return addConstantInteger(((Byte) value).intValue())__    } else if (value instanceof Character) {_      return addConstantInteger(((Character) value).charValue())__    } else if (value instanceof Short) {_      return addConstantInteger(((Short) value).intValue())__    } else if (value instanceof Boolean) {_      return addConstantInteger(((Boolean) value).booleanValue() ? 1 : 0)__    } else if (value instanceof Float) {_      return addConstantFloat(((Float) value).floatValue())__    } else if (value instanceof Long) {_      return addConstantLong(((Long) value).longValue())__    } else if (value instanceof Double) {_      return addConstantDouble(((Double) value).doubleValue())__    } else if (value instanceof String) {_      return addConstantString((String) value)__    } else if (value instanceof Type) {_      Type type = (Type) value__      int typeSort = type.getSort()__      if (typeSort == Type.OBJECT) {_        return addConstantClass(type.getInternalName())__      } else if (typeSort == Type.METHOD) {_        return addConstantMethodType(type.getDescriptor())__      } else { _        return addConstantClass(type.getDescriptor())__      }_    } else if (value instanceof Handle) {_      Handle handle = (Handle) value__      return addConstantMethodHandle(_          handle.getTag(),_          handle.getOwner(),_          handle.getName(),_          handle.getDesc(),_          handle.isInterface())__    } else if (value instanceof ConstantDynamic) {_      ConstantDynamic constantDynamic = (ConstantDynamic) value__      return addConstantDynamic(_          constantDynamic.getName(),_          constantDynamic.getDescriptor(),_          constantDynamic.getBootstrapMethod(),_          constantDynamic.getBootstrapMethodArgumentsUnsafe())__    } else {_      throw new IllegalArgumentException("value " + value)__    }_  };adds,a,number,or,string,constant,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,link,byte,link,character,link,short,link,boolean,link,float,link,long,link,double,link,string,link,type,or,link,handle,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,final,object,value,if,value,instanceof,integer,return,add,constant,integer,integer,value,int,value,else,if,value,instanceof,byte,return,add,constant,integer,byte,value,int,value,else,if,value,instanceof,character,return,add,constant,integer,character,value,char,value,else,if,value,instanceof,short,return,add,constant,integer,short,value,int,value,else,if,value,instanceof,boolean,return,add,constant,integer,boolean,value,boolean,value,1,0,else,if,value,instanceof,float,return,add,constant,float,float,value,float,value,else,if,value,instanceof,long,return,add,constant,long,long,value,long,value,else,if,value,instanceof,double,return,add,constant,double,double,value,double,value,else,if,value,instanceof,string,return,add,constant,string,string,value,else,if,value,instanceof,type,type,type,type,value,int,type,sort,type,get,sort,if,type,sort,type,object,return,add,constant,class,type,get,internal,name,else,if,type,sort,type,method,return,add,constant,method,type,type,get,descriptor,else,return,add,constant,class,type,get,descriptor,else,if,value,instanceof,handle,handle,handle,handle,value,return,add,constant,method,handle,handle,get,tag,handle,get,owner,handle,get,name,handle,get,desc,handle,is,interface,else,if,value,instanceof,constant,dynamic,constant,dynamic,constant,dynamic,constant,dynamic,value,return,add,constant,dynamic,constant,dynamic,get,name,constant,dynamic,get,descriptor,constant,dynamic,get,bootstrap,method,constant,dynamic,get,bootstrap,method,arguments,unsafe,else,throw,new,illegal,argument,exception,value,value
SymbolTable -> Symbol addConstantString(final String value);1531241461;Adds a CONSTANT_String_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;Symbol addConstantString(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_STRING_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,string,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> Symbol addConstantString(final String value);1536664245;Adds a CONSTANT_String_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;Symbol addConstantString(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_STRING_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,string,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> Symbol addConstantString(final String value);1537204147;Adds a CONSTANT_String_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;Symbol addConstantString(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_STRING_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,string,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> Symbol addConstantString(final String value);1539119582;Adds a CONSTANT_String_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;Symbol addConstantString(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_STRING_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,string,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> private Symbol addConstantInteger(final int tag, final int value);1531241461;Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantInteger(final int tag, final int value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    constantPool.putByte(tag).putInt(value)__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,integer,final,int,tag,final,int,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,constant,pool,put,byte,tag,put,int,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Symbol addConstantInteger(final int tag, final int value);1536664245;Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantInteger(final int tag, final int value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    constantPool.putByte(tag).putInt(value)__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,integer,final,int,tag,final,int,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,constant,pool,put,byte,tag,put,int,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Symbol addConstantDynamicOrInvokeDynamicReference(       final int tag, final String name, final String descriptor, final int bootstrapMethodIndex);1531241461;Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol_table. Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute._@return a new or already existing Symbol with the given value.;private Symbol addConstantDynamicOrInvokeDynamicReference(_      final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == bootstrapMethodIndex_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor))__    return put(_        new Entry(_            constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,or,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,bootstrap,method,index,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,bootstrap,method,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> private Symbol addConstantDynamicOrInvokeDynamicReference(       final int tag, final String name, final String descriptor, final int bootstrapMethodIndex);1536664245;Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol_table. Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute._@return a new or already existing Symbol with the given value.;private Symbol addConstantDynamicOrInvokeDynamicReference(_      final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == bootstrapMethodIndex_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor))__    return put(_        new Entry(_            constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,or,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,bootstrap,method,index,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,bootstrap,method,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> private Symbol addConstantDynamicOrInvokeDynamicReference(       final int tag, final String name, final String descriptor, final int bootstrapMethodIndex);1537204147;Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol_table. Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute._@return a new or already existing Symbol with the given value.;private Symbol addConstantDynamicOrInvokeDynamicReference(_      final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == bootstrapMethodIndex_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor))__    return put(_        new Entry(_            constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,or,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,bootstrap,method,index,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,bootstrap,method,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> private Symbol addConstantDynamicOrInvokeDynamicReference(       final int tag, final String name, final String descriptor, final int bootstrapMethodIndex);1539119582;Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol_table. Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute._@return a new or already existing Symbol with the given value.;private Symbol addConstantDynamicOrInvokeDynamicReference(_      final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == bootstrapMethodIndex_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor))__    return put(_        new Entry(_            constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,or,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,bootstrap,method,index,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,bootstrap,method,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> Symbol addConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1531241461;Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related_bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant_pool already contains a similar item.__@param name a method name._@param descriptor a field descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,field,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> Symbol addConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1536664245;Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related_bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant_pool already contains a similar item.__@param name a method name._@param descriptor a field descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,field,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> Symbol addConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1537204147;Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related_bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant_pool already contains a similar item.__@param name a method name._@param descriptor a field descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,field,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> Symbol addConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1539119582;Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related_bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant_pool already contains a similar item.__@param name a method name._@param descriptor a field descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,field,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> int getMajorVersion();1531241461;@return the major version of the class to which this symbol table belongs.;int getMajorVersion() {_    return majorVersion__  };return,the,major,version,of,the,class,to,which,this,symbol,table,belongs;int,get,major,version,return,major,version
SymbolTable -> int getMajorVersion();1536664245;@return the major version of the class to which this symbol table belongs.;int getMajorVersion() {_    return majorVersion__  };return,the,major,version,of,the,class,to,which,this,symbol,table,belongs;int,get,major,version,return,major,version
SymbolTable -> int getMajorVersion();1537204147;Returns the major version of the class to which this symbol table belongs.__@return the major version of the class to which this symbol table belongs.;int getMajorVersion() {_    return majorVersion__  };returns,the,major,version,of,the,class,to,which,this,symbol,table,belongs,return,the,major,version,of,the,class,to,which,this,symbol,table,belongs;int,get,major,version,return,major,version
SymbolTable -> int getMajorVersion();1539119582;Returns the major version of the class to which this symbol table belongs.__@return the major version of the class to which this symbol table belongs.;int getMajorVersion() {_    return majorVersion__  };returns,the,major,version,of,the,class,to,which,this,symbol,table,belongs,return,the,major,version,of,the,class,to,which,this,symbol,table,belongs;int,get,major,version,return,major,version
SymbolTable -> Symbol addConstantFloat(final float value);1531241461;Adds a CONSTANT_Float_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a float._@return a new or already existing Symbol with the given value.;Symbol addConstantFloat(final float value) {_    return addConstantInteger(Symbol.CONSTANT_FLOAT_TAG, Float.floatToRawIntBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,float,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,float,final,float,value,return,add,constant,integer,symbol,float,float,to,raw,int,bits,value
SymbolTable -> Symbol addConstantFloat(final float value);1536664245;Adds a CONSTANT_Float_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a float._@return a new or already existing Symbol with the given value.;Symbol addConstantFloat(final float value) {_    return addConstantInteger(Symbol.CONSTANT_FLOAT_TAG, Float.floatToRawIntBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,float,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,float,final,float,value,return,add,constant,integer,symbol,float,float,to,raw,int,bits,value
SymbolTable -> Symbol addConstantFloat(final float value);1537204147;Adds a CONSTANT_Float_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a float._@return a new or already existing Symbol with the given value.;Symbol addConstantFloat(final float value) {_    return addConstantIntegerOrFloat(Symbol.CONSTANT_FLOAT_TAG, Float.floatToRawIntBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,float,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,float,final,float,value,return,add,constant,integer,or,float,symbol,float,float,to,raw,int,bits,value
SymbolTable -> Symbol addConstantFloat(final float value);1539119582;Adds a CONSTANT_Float_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a float._@return a new or already existing Symbol with the given value.;Symbol addConstantFloat(final float value) {_    return addConstantIntegerOrFloat(Symbol.CONSTANT_FLOAT_TAG, Float.floatToRawIntBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,float,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,float,final,float,value,return,add,constant,integer,or,float,symbol,float,float,to,raw,int,bits,value
SymbolTable -> private Entry get(final int hashCode);1531241461;@param hashCode a {@link Entry#hashCode} value._@return the list of entries which can potentially have the given hash code. The list is stored_via the {@link Entry#next} field.;private Entry get(final int hashCode) {_    return entries[hashCode % entries.length]__  };param,hash,code,a,link,entry,hash,code,value,return,the,list,of,entries,which,can,potentially,have,the,given,hash,code,the,list,is,stored,via,the,link,entry,next,field;private,entry,get,final,int,hash,code,return,entries,hash,code,entries,length
SymbolTable -> private Entry get(final int hashCode);1536664245;@param hashCode a {@link Entry#hashCode} value._@return the list of entries which can potentially have the given hash code. The list is stored_via the {@link Entry#next} field.;private Entry get(final int hashCode) {_    return entries[hashCode % entries.length]__  };param,hash,code,a,link,entry,hash,code,value,return,the,list,of,entries,which,can,potentially,have,the,given,hash,code,the,list,is,stored,via,the,link,entry,next,field;private,entry,get,final,int,hash,code,return,entries,hash,code,entries,length
SymbolTable -> private Entry get(final int hashCode);1537204147;Returns the list of entries which can potentially have the given hash code.__@param hashCode a {@link Entry#hashCode} value._@return the list of entries which can potentially have the given hash code. The list is stored_via the {@link Entry#next} field.;private Entry get(final int hashCode) {_    return entries[hashCode % entries.length]__  };returns,the,list,of,entries,which,can,potentially,have,the,given,hash,code,param,hash,code,a,link,entry,hash,code,value,return,the,list,of,entries,which,can,potentially,have,the,given,hash,code,the,list,is,stored,via,the,link,entry,next,field;private,entry,get,final,int,hash,code,return,entries,hash,code,entries,length
SymbolTable -> private Entry get(final int hashCode);1539119582;Returns the list of entries which can potentially have the given hash code.__@param hashCode a {@link Entry#hashCode} value._@return the list of entries which can potentially have the given hash code. The list is stored_via the {@link Entry#next} field.;private Entry get(final int hashCode) {_    return entries[hashCode % entries.length]__  };returns,the,list,of,entries,which,can,potentially,have,the,given,hash,code,param,hash,code,a,link,entry,hash,code,value,return,the,list,of,entries,which,can,potentially,have,the,given,hash,code,the,list,is,stored,via,the,link,entry,next,field;private,entry,get,final,int,hash,code,return,entries,hash,code,entries,length
SymbolTable -> int addUninitializedType(final String value, final int bytecodeOffset);1531241461;Adds an {@link Frame#ITEM_UNINITIALIZED} type in the type table of this symbol table. Does_nothing if the type table already contains a similar type.__@param value an internal class name._@param bytecodeOffset the bytecode offset of the NEW instruction that created this {@link_Frame#ITEM_UNINITIALIZED} type value._@return the index of a new or already existing type Symbol with the given value.;int addUninitializedType(final String value, final int bytecodeOffset) {_    int hashCode = hash(Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.UNINITIALIZED_TYPE_TAG_          && entry.hashCode == hashCode_          && entry.data == bytecodeOffset_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addType(_        new Entry(typeCount, Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset, hashCode))__  };adds,an,link,frame,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,param,bytecode,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,link,frame,type,value,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,uninitialized,type,final,string,value,final,int,bytecode,offset,int,hash,code,hash,symbol,value,bytecode,offset,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,bytecode,offset,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,new,entry,type,count,symbol,value,bytecode,offset,hash,code
SymbolTable -> int addUninitializedType(final String value, final int bytecodeOffset);1536664245;Adds an {@link Frame#ITEM_UNINITIALIZED} type in the type table of this symbol table. Does_nothing if the type table already contains a similar type.__@param value an internal class name._@param bytecodeOffset the bytecode offset of the NEW instruction that created this {@link_Frame#ITEM_UNINITIALIZED} type value._@return the index of a new or already existing type Symbol with the given value.;int addUninitializedType(final String value, final int bytecodeOffset) {_    int hashCode = hash(Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.UNINITIALIZED_TYPE_TAG_          && entry.hashCode == hashCode_          && entry.data == bytecodeOffset_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addType(_        new Entry(typeCount, Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset, hashCode))__  };adds,an,link,frame,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,param,bytecode,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,link,frame,type,value,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,uninitialized,type,final,string,value,final,int,bytecode,offset,int,hash,code,hash,symbol,value,bytecode,offset,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,bytecode,offset,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,new,entry,type,count,symbol,value,bytecode,offset,hash,code
SymbolTable -> int addUninitializedType(final String value, final int bytecodeOffset);1537204147;Adds an {@link Frame#ITEM_UNINITIALIZED} type in the type table of this symbol table. Does_nothing if the type table already contains a similar type.__@param value an internal class name._@param bytecodeOffset the bytecode offset of the NEW instruction that created this {@link_Frame#ITEM_UNINITIALIZED} type value._@return the index of a new or already existing type Symbol with the given value.;int addUninitializedType(final String value, final int bytecodeOffset) {_    int hashCode = hash(Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.UNINITIALIZED_TYPE_TAG_          && entry.hashCode == hashCode_          && entry.data == bytecodeOffset_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addTypeInternal(_        new Entry(typeCount, Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset, hashCode))__  };adds,an,link,frame,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,param,bytecode,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,link,frame,type,value,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,uninitialized,type,final,string,value,final,int,bytecode,offset,int,hash,code,hash,symbol,value,bytecode,offset,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,bytecode,offset,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,internal,new,entry,type,count,symbol,value,bytecode,offset,hash,code
SymbolTable -> int addUninitializedType(final String value, final int bytecodeOffset);1539119582;Adds an {@link Frame#ITEM_UNINITIALIZED} type in the type table of this symbol table. Does_nothing if the type table already contains a similar type.__@param value an internal class name._@param bytecodeOffset the bytecode offset of the NEW instruction that created this {@link_Frame#ITEM_UNINITIALIZED} type value._@return the index of a new or already existing type Symbol with the given value.;int addUninitializedType(final String value, final int bytecodeOffset) {_    int hashCode = hash(Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.UNINITIALIZED_TYPE_TAG_          && entry.hashCode == hashCode_          && entry.data == bytecodeOffset_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addTypeInternal(_        new Entry(typeCount, Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset, hashCode))__  };adds,an,link,frame,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,param,bytecode,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,link,frame,type,value,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,uninitialized,type,final,string,value,final,int,bytecode,offset,int,hash,code,hash,symbol,value,bytecode,offset,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,bytecode,offset,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,internal,new,entry,type,count,symbol,value,bytecode,offset,hash,code
SymbolTable -> private void addConstantLong(final int index, final int tag, final long value);1531241461;Adds a new CONSTANT_Double_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double.;private void addConstantLong(final int index, final int tag, final long value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double;private,void,add,constant,long,final,int,index,final,int,tag,final,long,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantLong(final int index, final int tag, final long value);1536664245;Adds a new CONSTANT_Double_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double.;private void addConstantLong(final int index, final int tag, final long value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double;private,void,add,constant,long,final,int,index,final,int,tag,final,long,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> int setMajorVersionAndClassName(final int majorVersion, final String className);1531241461;Sets the major version and the name of the class to which this symbol table belongs. Also adds_the class name to the constant pool.__@param majorVersion a major ClassFile version number._@param className an internal class name._@return the constant pool index of a new or already existing Symbol with the given class name.;int setMajorVersionAndClassName(final int majorVersion, final String className) {_    this.majorVersion = majorVersion__    this.className = className__    return addConstantClass(className).index__  };sets,the,major,version,and,the,name,of,the,class,to,which,this,symbol,table,belongs,also,adds,the,class,name,to,the,constant,pool,param,major,version,a,major,class,file,version,number,param,class,name,an,internal,class,name,return,the,constant,pool,index,of,a,new,or,already,existing,symbol,with,the,given,class,name;int,set,major,version,and,class,name,final,int,major,version,final,string,class,name,this,major,version,major,version,this,class,name,class,name,return,add,constant,class,class,name,index
SymbolTable -> int setMajorVersionAndClassName(final int majorVersion, final String className);1536664245;Sets the major version and the name of the class to which this symbol table belongs. Also adds_the class name to the constant pool.__@param majorVersion a major ClassFile version number._@param className an internal class name._@return the constant pool index of a new or already existing Symbol with the given class name.;int setMajorVersionAndClassName(final int majorVersion, final String className) {_    this.majorVersion = majorVersion__    this.className = className__    return addConstantClass(className).index__  };sets,the,major,version,and,the,name,of,the,class,to,which,this,symbol,table,belongs,also,adds,the,class,name,to,the,constant,pool,param,major,version,a,major,class,file,version,number,param,class,name,an,internal,class,name,return,the,constant,pool,index,of,a,new,or,already,existing,symbol,with,the,given,class,name;int,set,major,version,and,class,name,final,int,major,version,final,string,class,name,this,major,version,major,version,this,class,name,class,name,return,add,constant,class,class,name,index
SymbolTable -> int setMajorVersionAndClassName(final int majorVersion, final String className);1537204147;Sets the major version and the name of the class to which this symbol table belongs. Also adds_the class name to the constant pool.__@param majorVersion a major ClassFile version number._@param className an internal class name._@return the constant pool index of a new or already existing Symbol with the given class name.;int setMajorVersionAndClassName(final int majorVersion, final String className) {_    this.majorVersion = majorVersion__    this.className = className__    return addConstantClass(className).index__  };sets,the,major,version,and,the,name,of,the,class,to,which,this,symbol,table,belongs,also,adds,the,class,name,to,the,constant,pool,param,major,version,a,major,class,file,version,number,param,class,name,an,internal,class,name,return,the,constant,pool,index,of,a,new,or,already,existing,symbol,with,the,given,class,name;int,set,major,version,and,class,name,final,int,major,version,final,string,class,name,this,major,version,major,version,this,class,name,class,name,return,add,constant,class,class,name,index
SymbolTable -> int setMajorVersionAndClassName(final int majorVersion, final String className);1539119582;Sets the major version and the name of the class to which this symbol table belongs. Also adds_the class name to the constant pool.__@param majorVersion a major ClassFile version number._@param className an internal class name._@return the constant pool index of a new or already existing Symbol with the given class name.;int setMajorVersionAndClassName(final int majorVersion, final String className) {_    this.majorVersion = majorVersion__    this.className = className__    return addConstantClass(className).index__  };sets,the,major,version,and,the,name,of,the,class,to,which,this,symbol,table,belongs,also,adds,the,class,name,to,the,constant,pool,param,major,version,a,major,class,file,version,number,param,class,name,an,internal,class,name,return,the,constant,pool,index,of,a,new,or,already,existing,symbol,with,the,given,class,name;int,set,major,version,and,class,name,final,int,major,version,final,string,class,name,this,major,version,major,version,this,class,name,class,name,return,add,constant,class,class,name,index
SymbolTable -> private void addConstantLongOrDouble(final int index, final int tag, final long value);1537204147;Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol_table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double.;private void addConstantLongOrDouble(final int index, final int tag, final long value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double;private,void,add,constant,long,or,double,final,int,index,final,int,tag,final,long,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantLongOrDouble(final int index, final int tag, final long value);1539119582;Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol_table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double.;private void addConstantLongOrDouble(final int index, final int tag, final long value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double;private,void,add,constant,long,or,double,final,int,index,final,int,tag,final,long,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantUtf8(final int index, final String value);1531241461;Adds a new CONSTANT_String_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param value a string.;private void addConstantUtf8(final int index, final String value) {_    add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,value,a,string;private,void,add,constant,utf8,final,int,index,final,string,value,add,new,entry,index,symbol,value,hash,symbol,value
SymbolTable -> private void addConstantUtf8(final int index, final String value);1536664245;Adds a new CONSTANT_String_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param value a string.;private void addConstantUtf8(final int index, final String value) {_    add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,value,a,string;private,void,add,constant,utf8,final,int,index,final,string,value,add,new,entry,index,symbol,value,hash,symbol,value
SymbolTable -> private void addConstantUtf8(final int index, final String value);1537204147;Adds a new CONSTANT_String_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param value a string.;private void addConstantUtf8(final int index, final String value) {_    add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,value,a,string;private,void,add,constant,utf8,final,int,index,final,string,value,add,new,entry,index,symbol,value,hash,symbol,value
SymbolTable -> private void addConstantUtf8(final int index, final String value);1539119582;Adds a new CONSTANT_String_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param value a string.;private void addConstantUtf8(final int index, final String value) {_    add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,value,a,string;private,void,add,constant,utf8,final,int,index,final,string,value,add,new,entry,index,symbol,value,hash,symbol,value
SymbolTable -> private void add(final Entry entry);1531241461;Adds the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not, and does <i>not</i> resize_{@link #entries} if necessary.__@param entry an Entry (which must not already be contained in {@link #entries}).;private void add(final Entry entry) {_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    entries[index] = entry__  };adds,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,and,does,i,not,i,resize,link,entries,if,necessary,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries;private,void,add,final,entry,entry,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,entries,index,entry
SymbolTable -> private void add(final Entry entry);1536664245;Adds the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not, and does <i>not</i> resize_{@link #entries} if necessary.__@param entry an Entry (which must not already be contained in {@link #entries}).;private void add(final Entry entry) {_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    entries[index] = entry__  };adds,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,and,does,i,not,i,resize,link,entries,if,necessary,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries;private,void,add,final,entry,entry,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,entries,index,entry
SymbolTable -> private void add(final Entry entry);1537204147;Adds the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not, and does <i>not</i> resize_{@link #entries} if necessary.__@param entry an Entry (which must not already be contained in {@link #entries}).;private void add(final Entry entry) {_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    entries[index] = entry__  };adds,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,and,does,i,not,i,resize,link,entries,if,necessary,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries;private,void,add,final,entry,entry,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,entries,index,entry
SymbolTable -> private void add(final Entry entry);1539119582;Adds the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not, and does <i>not</i> resize_{@link #entries} if necessary.__@param entry an Entry (which must not already be contained in {@link #entries}).;private void add(final Entry entry) {_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    entries[index] = entry__  };adds,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,and,does,i,not,i,resize,link,entries,if,necessary,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries;private,void,add,final,entry,entry,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,entries,index,entry
SymbolTable -> int computeBootstrapMethodsSize();1531241461;Returns the size in bytes of this symbol table's BootstrapMethods attribute. Also adds the_attribute name in the constant pool.__@return the size in bytes of this symbol table's BootstrapMethods attribute.;int computeBootstrapMethodsSize() {_    if (bootstrapMethods != null) {_      addConstantUtf8(Constants.BOOTSTRAP_METHODS)__      return 8 + bootstrapMethods.length__    } else {_      return 0__    }_  };returns,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute,also,adds,the,attribute,name,in,the,constant,pool,return,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute;int,compute,bootstrap,methods,size,if,bootstrap,methods,null,add,constant,utf8,constants,return,8,bootstrap,methods,length,else,return,0
SymbolTable -> int computeBootstrapMethodsSize();1536664245;Returns the size in bytes of this symbol table's BootstrapMethods attribute. Also adds the_attribute name in the constant pool.__@return the size in bytes of this symbol table's BootstrapMethods attribute.;int computeBootstrapMethodsSize() {_    if (bootstrapMethods != null) {_      addConstantUtf8(Constants.BOOTSTRAP_METHODS)__      return 8 + bootstrapMethods.length__    } else {_      return 0__    }_  };returns,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute,also,adds,the,attribute,name,in,the,constant,pool,return,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute;int,compute,bootstrap,methods,size,if,bootstrap,methods,null,add,constant,utf8,constants,return,8,bootstrap,methods,length,else,return,0
SymbolTable -> int computeBootstrapMethodsSize();1537204147;Returns the size in bytes of this symbol table's BootstrapMethods attribute. Also adds the_attribute name in the constant pool.__@return the size in bytes of this symbol table's BootstrapMethods attribute.;int computeBootstrapMethodsSize() {_    if (bootstrapMethods != null) {_      addConstantUtf8(Constants.BOOTSTRAP_METHODS)__      return 8 + bootstrapMethods.length__    } else {_      return 0__    }_  };returns,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute,also,adds,the,attribute,name,in,the,constant,pool,return,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute;int,compute,bootstrap,methods,size,if,bootstrap,methods,null,add,constant,utf8,constants,return,8,bootstrap,methods,length,else,return,0
SymbolTable -> int computeBootstrapMethodsSize();1539119582;Returns the size in bytes of this symbol table's BootstrapMethods attribute. Also adds the_attribute name in the constant pool.__@return the size in bytes of this symbol table's BootstrapMethods attribute.;int computeBootstrapMethodsSize() {_    if (bootstrapMethods != null) {_      addConstantUtf8(Constants.BOOTSTRAP_METHODS)__      return 8 + bootstrapMethods.length__    } else {_      return 0__    }_  };returns,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute,also,adds,the,attribute,name,in,the,constant,pool,return,the,size,in,bytes,of,this,symbol,table,s,bootstrap,methods,attribute;int,compute,bootstrap,methods,size,if,bootstrap,methods,null,add,constant,utf8,constants,return,8,bootstrap,methods,length,else,return,0
SymbolTable -> Symbol addConstantMethodType(final String methodDescriptor);1531241461;Adds a CONSTANT_MethodType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param methodDescriptor a method descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodType(final String methodDescriptor) {_    return addConstantUtf8Reference(Symbol.CONSTANT_METHOD_TYPE_TAG, methodDescriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,method,descriptor,a,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,type,final,string,method,descriptor,return,add,constant,utf8reference,symbol,method,descriptor
SymbolTable -> Symbol addConstantMethodType(final String methodDescriptor);1536664245;Adds a CONSTANT_MethodType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param methodDescriptor a method descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodType(final String methodDescriptor) {_    return addConstantUtf8Reference(Symbol.CONSTANT_METHOD_TYPE_TAG, methodDescriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,method,descriptor,a,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,type,final,string,method,descriptor,return,add,constant,utf8reference,symbol,method,descriptor
SymbolTable -> Symbol addConstantMethodType(final String methodDescriptor);1537204147;Adds a CONSTANT_MethodType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param methodDescriptor a method descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodType(final String methodDescriptor) {_    return addConstantUtf8Reference(Symbol.CONSTANT_METHOD_TYPE_TAG, methodDescriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,method,descriptor,a,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,type,final,string,method,descriptor,return,add,constant,utf8reference,symbol,method,descriptor
SymbolTable -> Symbol addConstantMethodType(final String methodDescriptor);1539119582;Adds a CONSTANT_MethodType_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param methodDescriptor a method descriptor._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodType(final String methodDescriptor) {_    return addConstantUtf8Reference(Symbol.CONSTANT_METHOD_TYPE_TAG, methodDescriptor)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,method,descriptor,a,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,type,final,string,method,descriptor,return,add,constant,utf8reference,symbol,method,descriptor
SymbolTable -> private Entry addConstantMemberReference(       final int tag, final String owner, final String name, final String descriptor);1531241461;Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to_the constant pool of this symbol table. Does nothing if the constant pool already contains a_similar item.__@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;private Entry addConstantMemberReference(_      final int tag, final String owner, final String name, final String descriptor) {_    int hashCode = hash(tag, owner, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(_        tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor))__    return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;private,entry,add,constant,member,reference,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,int,hash,code,hash,tag,owner,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,add,constant,class,owner,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,0,hash,code
SymbolTable -> private Entry addConstantMemberReference(       final int tag, final String owner, final String name, final String descriptor);1536664245;Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to_the constant pool of this symbol table. Does nothing if the constant pool already contains a_similar item.__@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;private Entry addConstantMemberReference(_      final int tag, final String owner, final String name, final String descriptor) {_    int hashCode = hash(tag, owner, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(_        tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor))__    return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;private,entry,add,constant,member,reference,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,int,hash,code,hash,tag,owner,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,add,constant,class,owner,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,0,hash,code
SymbolTable -> private Entry addConstantMemberReference(       final int tag, final String owner, final String name, final String descriptor);1537204147;Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to_the constant pool of this symbol table. Does nothing if the constant pool already contains a_similar item.__@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;private Entry addConstantMemberReference(_      final int tag, final String owner, final String name, final String descriptor) {_    int hashCode = hash(tag, owner, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(_        tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor))__    return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;private,entry,add,constant,member,reference,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,int,hash,code,hash,tag,owner,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,add,constant,class,owner,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,0,hash,code
SymbolTable -> private Entry addConstantMemberReference(       final int tag, final String owner, final String name, final String descriptor);1539119582;Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to_the constant pool of this symbol table. Does nothing if the constant pool already contains a_similar item.__@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor._@return a new or already existing Symbol with the given value.;private Entry addConstantMemberReference(_      final int tag, final String owner, final String name, final String descriptor) {_    int hashCode = hash(tag, owner, name, descriptor)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put122(_        tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor))__    return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,return,a,new,or,already,existing,symbol,with,the,given,value;private,entry,add,constant,member,reference,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,int,hash,code,hash,tag,owner,name,descriptor,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,constant,pool,put122,tag,add,constant,class,owner,index,add,constant,name,and,type,name,descriptor,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,0,hash,code
SymbolTable -> Symbol addConstantMethodHandle(       final int referenceKind,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1531241461;Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if_the constant pool already contains a similar item.__@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodHandle(_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    _    _    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == referenceKind_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    if (referenceKind <= Opcodes.H_PUTSTATIC) {_      constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index)__    } else {_      constantPool.put112(_          tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index)__    }_    return put(_        new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,handle,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,reference,kind,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,if,reference,kind,opcodes,constant,pool,put112,tag,reference,kind,add,constant,fieldref,owner,name,descriptor,index,else,constant,pool,put112,tag,reference,kind,add,constant,methodref,owner,name,descriptor,is,interface,index,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> Symbol addConstantMethodHandle(       final int referenceKind,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1536664245;Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if_the constant pool already contains a similar item.__@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodHandle(_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    _    _    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == referenceKind_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    if (referenceKind <= Opcodes.H_PUTSTATIC) {_      constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index)__    } else {_      constantPool.put112(_          tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index)__    }_    return put(_        new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,handle,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,reference,kind,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,if,reference,kind,opcodes,constant,pool,put112,tag,reference,kind,add,constant,fieldref,owner,name,descriptor,index,else,constant,pool,put112,tag,reference,kind,add,constant,methodref,owner,name,descriptor,is,interface,index,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> Symbol addConstantMethodHandle(       final int referenceKind,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1537204147;Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if_the constant pool already contains a similar item.__@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodHandle(_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    _    _    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == referenceKind_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    if (referenceKind <= Opcodes.H_PUTSTATIC) {_      constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index)__    } else {_      constantPool.put112(_          tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index)__    }_    return put(_        new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,handle,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,reference,kind,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,if,reference,kind,opcodes,constant,pool,put112,tag,reference,kind,add,constant,fieldref,owner,name,descriptor,index,else,constant,pool,put112,tag,reference,kind,add,constant,methodref,owner,name,descriptor,is,interface,index,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> Symbol addConstantMethodHandle(       final int referenceKind,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1539119582;Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if_the constant pool already contains a similar item.__@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodHandle(_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    _    _    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag_          && entry.hashCode == hashCode_          && entry.data == referenceKind_          && entry.owner.equals(owner)_          && entry.name.equals(name)_          && entry.value.equals(descriptor)) {_        return entry__      }_      entry = entry.next__    }_    if (referenceKind <= Opcodes.H_PUTSTATIC) {_      constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index)__    } else {_      constantPool.put112(_          tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index)__    }_    return put(_        new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,method,handle,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,reference,kind,entry,owner,equals,owner,entry,name,equals,name,entry,value,equals,descriptor,return,entry,entry,entry,next,if,reference,kind,opcodes,constant,pool,put112,tag,reference,kind,add,constant,fieldref,owner,name,descriptor,index,else,constant,pool,put112,tag,reference,kind,add,constant,methodref,owner,name,descriptor,is,interface,index,return,put,new,entry,constant,pool,count,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> Symbol addBootstrapMethod(       final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments);1531241461;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method.__@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addBootstrapMethod(_      final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {_    ByteVector bootstrapMethodsAttribute = bootstrapMethods__    if (bootstrapMethodsAttribute == null) {_      bootstrapMethodsAttribute = bootstrapMethods = new ByteVector()__    }__    _    _    _    _    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      addConstant(bootstrapMethodArgument)__    }__    _    _    _    int bootstrapMethodOffset = bootstrapMethodsAttribute.length__    bootstrapMethodsAttribute.putShort(_        addConstantMethodHandle(_                bootstrapMethodHandle.getTag(),_                bootstrapMethodHandle.getOwner(),_                bootstrapMethodHandle.getName(),_                bootstrapMethodHandle.getDesc(),_                bootstrapMethodHandle.isInterface())_            .index)__    int numBootstrapArguments = bootstrapMethodArguments.length__    bootstrapMethodsAttribute.putShort(numBootstrapArguments)__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index)__    }__    _    int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset__    int hashCode = bootstrapMethodHandle.hashCode()__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      hashCode ^= bootstrapMethodArgument.hashCode()__    }_    hashCode &= 0x7FFFFFFF___    _    return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode)__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,bootstrap,method,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,byte,vector,bootstrap,methods,attribute,bootstrap,methods,if,bootstrap,methods,attribute,null,bootstrap,methods,attribute,bootstrap,methods,new,byte,vector,for,object,bootstrap,method,argument,bootstrap,method,arguments,add,constant,bootstrap,method,argument,int,bootstrap,method,offset,bootstrap,methods,attribute,length,bootstrap,methods,attribute,put,short,add,constant,method,handle,bootstrap,method,handle,get,tag,bootstrap,method,handle,get,owner,bootstrap,method,handle,get,name,bootstrap,method,handle,get,desc,bootstrap,method,handle,is,interface,index,int,num,bootstrap,arguments,bootstrap,method,arguments,length,bootstrap,methods,attribute,put,short,num,bootstrap,arguments,for,object,bootstrap,method,argument,bootstrap,method,arguments,bootstrap,methods,attribute,put,short,add,constant,bootstrap,method,argument,index,int,bootstrap,methodlength,bootstrap,methods,attribute,length,bootstrap,method,offset,int,hash,code,bootstrap,method,handle,hash,code,for,object,bootstrap,method,argument,bootstrap,method,arguments,hash,code,bootstrap,method,argument,hash,code,hash,code,0x7fffffff,return,add,bootstrap,method,bootstrap,method,offset,bootstrap,methodlength,hash,code
SymbolTable -> Symbol addBootstrapMethod(       final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments);1536664245;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method.__@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addBootstrapMethod(_      final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {_    ByteVector bootstrapMethodsAttribute = bootstrapMethods__    if (bootstrapMethodsAttribute == null) {_      bootstrapMethodsAttribute = bootstrapMethods = new ByteVector()__    }__    _    _    _    _    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      addConstant(bootstrapMethodArgument)__    }__    _    _    _    int bootstrapMethodOffset = bootstrapMethodsAttribute.length__    bootstrapMethodsAttribute.putShort(_        addConstantMethodHandle(_                bootstrapMethodHandle.getTag(),_                bootstrapMethodHandle.getOwner(),_                bootstrapMethodHandle.getName(),_                bootstrapMethodHandle.getDesc(),_                bootstrapMethodHandle.isInterface())_            .index)__    int numBootstrapArguments = bootstrapMethodArguments.length__    bootstrapMethodsAttribute.putShort(numBootstrapArguments)__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index)__    }__    _    int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset__    int hashCode = bootstrapMethodHandle.hashCode()__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      hashCode ^= bootstrapMethodArgument.hashCode()__    }_    hashCode &= 0x7FFFFFFF___    _    return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode)__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,bootstrap,method,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,byte,vector,bootstrap,methods,attribute,bootstrap,methods,if,bootstrap,methods,attribute,null,bootstrap,methods,attribute,bootstrap,methods,new,byte,vector,for,object,bootstrap,method,argument,bootstrap,method,arguments,add,constant,bootstrap,method,argument,int,bootstrap,method,offset,bootstrap,methods,attribute,length,bootstrap,methods,attribute,put,short,add,constant,method,handle,bootstrap,method,handle,get,tag,bootstrap,method,handle,get,owner,bootstrap,method,handle,get,name,bootstrap,method,handle,get,desc,bootstrap,method,handle,is,interface,index,int,num,bootstrap,arguments,bootstrap,method,arguments,length,bootstrap,methods,attribute,put,short,num,bootstrap,arguments,for,object,bootstrap,method,argument,bootstrap,method,arguments,bootstrap,methods,attribute,put,short,add,constant,bootstrap,method,argument,index,int,bootstrap,methodlength,bootstrap,methods,attribute,length,bootstrap,method,offset,int,hash,code,bootstrap,method,handle,hash,code,for,object,bootstrap,method,argument,bootstrap,method,arguments,hash,code,bootstrap,method,argument,hash,code,hash,code,0x7fffffff,return,add,bootstrap,method,bootstrap,method,offset,bootstrap,methodlength,hash,code
SymbolTable -> Symbol addBootstrapMethod(       final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments);1537204147;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method.__@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addBootstrapMethod(_      final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {_    ByteVector bootstrapMethodsAttribute = bootstrapMethods__    if (bootstrapMethodsAttribute == null) {_      bootstrapMethodsAttribute = bootstrapMethods = new ByteVector()__    }__    _    _    _    _    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      addConstant(bootstrapMethodArgument)__    }__    _    _    _    int bootstrapMethodOffset = bootstrapMethodsAttribute.length__    bootstrapMethodsAttribute.putShort(_        addConstantMethodHandle(_                bootstrapMethodHandle.getTag(),_                bootstrapMethodHandle.getOwner(),_                bootstrapMethodHandle.getName(),_                bootstrapMethodHandle.getDesc(),_                bootstrapMethodHandle.isInterface())_            .index)__    int numBootstrapArguments = bootstrapMethodArguments.length__    bootstrapMethodsAttribute.putShort(numBootstrapArguments)__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index)__    }__    _    int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset__    int hashCode = bootstrapMethodHandle.hashCode()__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      hashCode ^= bootstrapMethodArgument.hashCode()__    }_    hashCode &= 0x7FFFFFFF___    _    return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode)__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,bootstrap,method,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,byte,vector,bootstrap,methods,attribute,bootstrap,methods,if,bootstrap,methods,attribute,null,bootstrap,methods,attribute,bootstrap,methods,new,byte,vector,for,object,bootstrap,method,argument,bootstrap,method,arguments,add,constant,bootstrap,method,argument,int,bootstrap,method,offset,bootstrap,methods,attribute,length,bootstrap,methods,attribute,put,short,add,constant,method,handle,bootstrap,method,handle,get,tag,bootstrap,method,handle,get,owner,bootstrap,method,handle,get,name,bootstrap,method,handle,get,desc,bootstrap,method,handle,is,interface,index,int,num,bootstrap,arguments,bootstrap,method,arguments,length,bootstrap,methods,attribute,put,short,num,bootstrap,arguments,for,object,bootstrap,method,argument,bootstrap,method,arguments,bootstrap,methods,attribute,put,short,add,constant,bootstrap,method,argument,index,int,bootstrap,methodlength,bootstrap,methods,attribute,length,bootstrap,method,offset,int,hash,code,bootstrap,method,handle,hash,code,for,object,bootstrap,method,argument,bootstrap,method,arguments,hash,code,bootstrap,method,argument,hash,code,hash,code,0x7fffffff,return,add,bootstrap,method,bootstrap,method,offset,bootstrap,methodlength,hash,code
SymbolTable -> Symbol addBootstrapMethod(       final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments);1539119582;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method.__@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addBootstrapMethod(_      final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {_    ByteVector bootstrapMethodsAttribute = bootstrapMethods__    if (bootstrapMethodsAttribute == null) {_      bootstrapMethodsAttribute = bootstrapMethods = new ByteVector()__    }__    _    _    _    _    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      addConstant(bootstrapMethodArgument)__    }__    _    _    _    int bootstrapMethodOffset = bootstrapMethodsAttribute.length__    bootstrapMethodsAttribute.putShort(_        addConstantMethodHandle(_                bootstrapMethodHandle.getTag(),_                bootstrapMethodHandle.getOwner(),_                bootstrapMethodHandle.getName(),_                bootstrapMethodHandle.getDesc(),_                bootstrapMethodHandle.isInterface())_            .index)__    int numBootstrapArguments = bootstrapMethodArguments.length__    bootstrapMethodsAttribute.putShort(numBootstrapArguments)__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index)__    }__    _    int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset__    int hashCode = bootstrapMethodHandle.hashCode()__    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {_      hashCode ^= bootstrapMethodArgument.hashCode()__    }_    hashCode &= 0x7FFFFFFF___    _    return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode)__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,bootstrap,method,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,byte,vector,bootstrap,methods,attribute,bootstrap,methods,if,bootstrap,methods,attribute,null,bootstrap,methods,attribute,bootstrap,methods,new,byte,vector,for,object,bootstrap,method,argument,bootstrap,method,arguments,add,constant,bootstrap,method,argument,int,bootstrap,method,offset,bootstrap,methods,attribute,length,bootstrap,methods,attribute,put,short,add,constant,method,handle,bootstrap,method,handle,get,tag,bootstrap,method,handle,get,owner,bootstrap,method,handle,get,name,bootstrap,method,handle,get,desc,bootstrap,method,handle,is,interface,index,int,num,bootstrap,arguments,bootstrap,method,arguments,length,bootstrap,methods,attribute,put,short,num,bootstrap,arguments,for,object,bootstrap,method,argument,bootstrap,method,arguments,bootstrap,methods,attribute,put,short,add,constant,bootstrap,method,argument,index,int,bootstrap,methodlength,bootstrap,methods,attribute,length,bootstrap,method,offset,int,hash,code,bootstrap,method,handle,hash,code,for,object,bootstrap,method,argument,bootstrap,method,arguments,hash,code,bootstrap,method,argument,hash,code,hash,code,0x7fffffff,return,add,bootstrap,method,bootstrap,method,offset,bootstrap,methodlength,hash,code
SymbolTable -> SymbolTable(final ClassWriter classWriter);1531241461;Constructs a new, empty SymbolTable for the given ClassWriter.__@param classWriter a ClassWriter.;SymbolTable(final ClassWriter classWriter) {_    this.classWriter = classWriter__    this.sourceClassReader = null__    this.entries = new Entry[256]__    this.constantPoolCount = 1__    this.constantPool = new ByteVector()__  };constructs,a,new,empty,symbol,table,for,the,given,class,writer,param,class,writer,a,class,writer;symbol,table,final,class,writer,class,writer,this,class,writer,class,writer,this,source,class,reader,null,this,entries,new,entry,256,this,constant,pool,count,1,this,constant,pool,new,byte,vector
SymbolTable -> SymbolTable(final ClassWriter classWriter);1536664245;Constructs a new, empty SymbolTable for the given ClassWriter.__@param classWriter a ClassWriter.;SymbolTable(final ClassWriter classWriter) {_    this.classWriter = classWriter__    this.sourceClassReader = null__    this.entries = new Entry[256]__    this.constantPoolCount = 1__    this.constantPool = new ByteVector()__  };constructs,a,new,empty,symbol,table,for,the,given,class,writer,param,class,writer,a,class,writer;symbol,table,final,class,writer,class,writer,this,class,writer,class,writer,this,source,class,reader,null,this,entries,new,entry,256,this,constant,pool,count,1,this,constant,pool,new,byte,vector
SymbolTable -> SymbolTable(final ClassWriter classWriter);1537204147;Constructs a new, empty SymbolTable for the given ClassWriter.__@param classWriter a ClassWriter.;SymbolTable(final ClassWriter classWriter) {_    this.classWriter = classWriter__    this.sourceClassReader = null__    this.entries = new Entry[256]__    this.constantPoolCount = 1__    this.constantPool = new ByteVector()__  };constructs,a,new,empty,symbol,table,for,the,given,class,writer,param,class,writer,a,class,writer;symbol,table,final,class,writer,class,writer,this,class,writer,class,writer,this,source,class,reader,null,this,entries,new,entry,256,this,constant,pool,count,1,this,constant,pool,new,byte,vector
SymbolTable -> SymbolTable(final ClassWriter classWriter);1539119582;Constructs a new, empty SymbolTable for the given ClassWriter.__@param classWriter a ClassWriter.;SymbolTable(final ClassWriter classWriter) {_    this.classWriter = classWriter__    this.sourceClassReader = null__    this.entries = new Entry[256]__    this.constantPoolCount = 1__    this.constantPool = new ByteVector()__  };constructs,a,new,empty,symbol,table,for,the,given,class,writer,param,class,writer,a,class,writer;symbol,table,final,class,writer,class,writer,this,class,writer,class,writer,this,source,class,reader,null,this,entries,new,entry,256,this,constant,pool,count,1,this,constant,pool,new,byte,vector
SymbolTable -> int addMergedType(final int typeTableIndex1, final int typeTableIndex2);1531241461;Adds a merged type in the type table of this symbol table. Does nothing if the type table_already contains a similar type.__@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,_corresponding to the common super class of the given types.;int addMergedType(final int typeTableIndex1, final int typeTableIndex2) {_    _    long data = typeTableIndex1 | (((long) typeTableIndex2) << 32)__    int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) {_        return entry.info__      }_      entry = entry.next__    }_    String type1 = typeTable[typeTableIndex1].value__    String type2 = typeTable[typeTableIndex2].value__    int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2))__    put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex__    return commonSuperTypeIndex__  };adds,a,merged,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,type,table,index1,a,link,symbol,type,specified,by,its,index,in,the,type,table,param,type,table,index2,another,link,symbol,type,specified,by,its,index,in,the,type,table,return,the,index,of,a,new,or,already,existing,link,symbol,type,symbol,corresponding,to,the,common,super,class,of,the,given,types;int,add,merged,type,final,int,type,table,index1,final,int,type,table,index2,long,data,type,table,index1,long,type,table,index2,32,int,hash,code,hash,symbol,type,table,index1,type,table,index2,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,data,return,entry,info,entry,entry,next,string,type1,type,table,type,table,index1,value,string,type2,type,table,type,table,index2,value,int,common,super,type,index,add,type,class,writer,get,common,super,class,type1,type2,put,new,entry,type,count,symbol,data,hash,code,info,common,super,type,index,return,common,super,type,index
SymbolTable -> int addMergedType(final int typeTableIndex1, final int typeTableIndex2);1536664245;Adds a merged type in the type table of this symbol table. Does nothing if the type table_already contains a similar type.__@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,_corresponding to the common super class of the given types.;int addMergedType(final int typeTableIndex1, final int typeTableIndex2) {_    _    long data = typeTableIndex1 | (((long) typeTableIndex2) << 32)__    int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) {_        return entry.info__      }_      entry = entry.next__    }_    String type1 = typeTable[typeTableIndex1].value__    String type2 = typeTable[typeTableIndex2].value__    int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2))__    put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex__    return commonSuperTypeIndex__  };adds,a,merged,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,type,table,index1,a,link,symbol,type,specified,by,its,index,in,the,type,table,param,type,table,index2,another,link,symbol,type,specified,by,its,index,in,the,type,table,return,the,index,of,a,new,or,already,existing,link,symbol,type,symbol,corresponding,to,the,common,super,class,of,the,given,types;int,add,merged,type,final,int,type,table,index1,final,int,type,table,index2,long,data,type,table,index1,long,type,table,index2,32,int,hash,code,hash,symbol,type,table,index1,type,table,index2,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,data,return,entry,info,entry,entry,next,string,type1,type,table,type,table,index1,value,string,type2,type,table,type,table,index2,value,int,common,super,type,index,add,type,class,writer,get,common,super,class,type1,type2,put,new,entry,type,count,symbol,data,hash,code,info,common,super,type,index,return,common,super,type,index
SymbolTable -> int addMergedType(final int typeTableIndex1, final int typeTableIndex2);1537204147;Adds a merged type in the type table of this symbol table. Does nothing if the type table_already contains a similar type.__@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,_corresponding to the common super class of the given types.;int addMergedType(final int typeTableIndex1, final int typeTableIndex2) {_    _    long data = typeTableIndex1 | (((long) typeTableIndex2) << 32)__    int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) {_        return entry.info__      }_      entry = entry.next__    }_    String type1 = typeTable[typeTableIndex1].value__    String type2 = typeTable[typeTableIndex2].value__    int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2))__    put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex__    return commonSuperTypeIndex__  };adds,a,merged,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,type,table,index1,a,link,symbol,type,specified,by,its,index,in,the,type,table,param,type,table,index2,another,link,symbol,type,specified,by,its,index,in,the,type,table,return,the,index,of,a,new,or,already,existing,link,symbol,type,symbol,corresponding,to,the,common,super,class,of,the,given,types;int,add,merged,type,final,int,type,table,index1,final,int,type,table,index2,long,data,type,table,index1,long,type,table,index2,32,int,hash,code,hash,symbol,type,table,index1,type,table,index2,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,data,return,entry,info,entry,entry,next,string,type1,type,table,type,table,index1,value,string,type2,type,table,type,table,index2,value,int,common,super,type,index,add,type,class,writer,get,common,super,class,type1,type2,put,new,entry,type,count,symbol,data,hash,code,info,common,super,type,index,return,common,super,type,index
SymbolTable -> int addMergedType(final int typeTableIndex1, final int typeTableIndex2);1539119582;Adds a merged type in the type table of this symbol table. Does nothing if the type table_already contains a similar type.__@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type_table._@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,_corresponding to the common super class of the given types.;int addMergedType(final int typeTableIndex1, final int typeTableIndex2) {_    _    long data = typeTableIndex1 | (((long) typeTableIndex2) << 32)__    int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) {_        return entry.info__      }_      entry = entry.next__    }_    String type1 = typeTable[typeTableIndex1].value__    String type2 = typeTable[typeTableIndex2].value__    int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2))__    put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex__    return commonSuperTypeIndex__  };adds,a,merged,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,type,table,index1,a,link,symbol,type,specified,by,its,index,in,the,type,table,param,type,table,index2,another,link,symbol,type,specified,by,its,index,in,the,type,table,return,the,index,of,a,new,or,already,existing,link,symbol,type,symbol,corresponding,to,the,common,super,class,of,the,given,types;int,add,merged,type,final,int,type,table,index1,final,int,type,table,index2,long,data,type,table,index1,long,type,table,index2,32,int,hash,code,hash,symbol,type,table,index1,type,table,index2,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,data,data,return,entry,info,entry,entry,next,string,type1,type,table,type,table,index1,value,string,type2,type,table,type,table,index2,value,int,common,super,type,index,add,type,class,writer,get,common,super,class,type1,type2,put,new,entry,type,count,symbol,data,hash,code,info,common,super,type,index,return,common,super,type,index
SymbolTable -> Symbol getType(final int typeIndex);1531241461;@param typeIndex a type table index._@return the type table element whose index is given.;Symbol getType(final int typeIndex) {_    return typeTable[typeIndex]__  };param,type,index,a,type,table,index,return,the,type,table,element,whose,index,is,given;symbol,get,type,final,int,type,index,return,type,table,type,index
SymbolTable -> Symbol getType(final int typeIndex);1536664245;@param typeIndex a type table index._@return the type table element whose index is given.;Symbol getType(final int typeIndex) {_    return typeTable[typeIndex]__  };param,type,index,a,type,table,index,return,the,type,table,element,whose,index,is,given;symbol,get,type,final,int,type,index,return,type,table,type,index
SymbolTable -> Symbol getType(final int typeIndex);1537204147;Returns the type table element whose index is given.__@param typeIndex a type table index._@return the type table element whose index is given.;Symbol getType(final int typeIndex) {_    return typeTable[typeIndex]__  };returns,the,type,table,element,whose,index,is,given,param,type,index,a,type,table,index,return,the,type,table,element,whose,index,is,given;symbol,get,type,final,int,type,index,return,type,table,type,index
SymbolTable -> Symbol getType(final int typeIndex);1539119582;Returns the type table element whose index is given.__@param typeIndex a type table index._@return the type table element whose index is given.;Symbol getType(final int typeIndex) {_    return typeTable[typeIndex]__  };returns,the,type,table,element,whose,index,is,given,param,type,index,a,type,table,index,return,the,type,table,element,whose,index,is,given;symbol,get,type,final,int,type,index,return,type,table,type,index
SymbolTable -> ClassReader getSource();1531241461;@return the ClassReader from which this SymbolTable was constructed, or <tt>null</tt> if it was_constructed from scratch.;ClassReader getSource() {_    return sourceClassReader__  };return,the,class,reader,from,which,this,symbol,table,was,constructed,or,tt,null,tt,if,it,was,constructed,from,scratch;class,reader,get,source,return,source,class,reader
SymbolTable -> ClassReader getSource();1536664245;@return the ClassReader from which this SymbolTable was constructed, or {@literal null} if it_was constructed from scratch.;ClassReader getSource() {_    return sourceClassReader__  };return,the,class,reader,from,which,this,symbol,table,was,constructed,or,literal,null,if,it,was,constructed,from,scratch;class,reader,get,source,return,source,class,reader
SymbolTable -> ClassReader getSource();1537204147;Returns the ClassReader from which this SymbolTable was constructed.__@return the ClassReader from which this SymbolTable was constructed, or {@literal null} if it_was constructed from scratch.;ClassReader getSource() {_    return sourceClassReader__  };returns,the,class,reader,from,which,this,symbol,table,was,constructed,return,the,class,reader,from,which,this,symbol,table,was,constructed,or,literal,null,if,it,was,constructed,from,scratch;class,reader,get,source,return,source,class,reader
SymbolTable -> ClassReader getSource();1539119582;Returns the ClassReader from which this SymbolTable was constructed.__@return the ClassReader from which this SymbolTable was constructed, or {@literal null} if it_was constructed from scratch.;ClassReader getSource() {_    return sourceClassReader__  };returns,the,class,reader,from,which,this,symbol,table,was,constructed,return,the,class,reader,from,which,this,symbol,table,was,constructed,or,literal,null,if,it,was,constructed,from,scratch;class,reader,get,source,return,source,class,reader
SymbolTable -> private void addConstantNameAndType(final int index, final String name, final String descriptor);1531241461;Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantNameAndType(final int index, final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,name,and,type,final,int,index,final,string,name,final,string,descriptor,final,int,tag,symbol,add,new,entry,index,tag,name,descriptor,hash,tag,name,descriptor
SymbolTable -> private void addConstantNameAndType(final int index, final String name, final String descriptor);1536664245;Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantNameAndType(final int index, final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,name,and,type,final,int,index,final,string,name,final,string,descriptor,final,int,tag,symbol,add,new,entry,index,tag,name,descriptor,hash,tag,name,descriptor
SymbolTable -> private void addConstantNameAndType(final int index, final String name, final String descriptor);1537204147;Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantNameAndType(final int index, final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,name,and,type,final,int,index,final,string,name,final,string,descriptor,final,int,tag,symbol,add,new,entry,index,tag,name,descriptor,hash,tag,name,descriptor
SymbolTable -> private void addConstantNameAndType(final int index, final String name, final String descriptor);1539119582;Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantNameAndType(final int index, final String name, final String descriptor) {_    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG__    add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor)))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,name,and,type,final,int,index,final,string,name,final,string,descriptor,final,int,tag,symbol,add,new,entry,index,tag,name,descriptor,hash,tag,name,descriptor
SymbolTable -> private int addTypeInternal(final Entry entry);1537204147;Adds the given type Symbol to {@link #typeTable}.__@param entry a {@link Symbol#TYPE_TAG} or {@link Symbol#UNINITIALIZED_TYPE_TAG} type symbol._The index of this Symbol must be equal to the current value of {@link #typeCount}._@return the index in {@link #typeTable} where the given type was added, which is also equal to_entry's index by hypothesis.;private int addTypeInternal(final Entry entry) {_    if (typeTable == null) {_      typeTable = new Entry[16]__    }_    if (typeCount == typeTable.length) {_      Entry[] newTypeTable = new Entry[2 * typeTable.length]__      System.arraycopy(typeTable, 0, newTypeTable, 0, typeTable.length)__      typeTable = newTypeTable__    }_    typeTable[typeCount++] = entry__    return put(entry).index__  };adds,the,given,type,symbol,to,link,type,table,param,entry,a,link,symbol,or,link,symbol,type,symbol,the,index,of,this,symbol,must,be,equal,to,the,current,value,of,link,type,count,return,the,index,in,link,type,table,where,the,given,type,was,added,which,is,also,equal,to,entry,s,index,by,hypothesis;private,int,add,type,internal,final,entry,entry,if,type,table,null,type,table,new,entry,16,if,type,count,type,table,length,entry,new,type,table,new,entry,2,type,table,length,system,arraycopy,type,table,0,new,type,table,0,type,table,length,type,table,new,type,table,type,table,type,count,entry,return,put,entry,index
SymbolTable -> private int addTypeInternal(final Entry entry);1539119582;Adds the given type Symbol to {@link #typeTable}.__@param entry a {@link Symbol#TYPE_TAG} or {@link Symbol#UNINITIALIZED_TYPE_TAG} type symbol._The index of this Symbol must be equal to the current value of {@link #typeCount}._@return the index in {@link #typeTable} where the given type was added, which is also equal to_entry's index by hypothesis.;private int addTypeInternal(final Entry entry) {_    if (typeTable == null) {_      typeTable = new Entry[16]__    }_    if (typeCount == typeTable.length) {_      Entry[] newTypeTable = new Entry[2 * typeTable.length]__      System.arraycopy(typeTable, 0, newTypeTable, 0, typeTable.length)__      typeTable = newTypeTable__    }_    typeTable[typeCount++] = entry__    return put(entry).index__  };adds,the,given,type,symbol,to,link,type,table,param,entry,a,link,symbol,or,link,symbol,type,symbol,the,index,of,this,symbol,must,be,equal,to,the,current,value,of,link,type,count,return,the,index,in,link,type,table,where,the,given,type,was,added,which,is,also,equal,to,entry,s,index,by,hypothesis;private,int,add,type,internal,final,entry,entry,if,type,table,null,type,table,new,entry,16,if,type,count,type,table,length,entry,new,type,table,new,entry,2,type,table,length,system,arraycopy,type,table,0,new,type,table,0,type,table,length,type,table,new,type,table,type,table,type,count,entry,return,put,entry,index
SymbolTable -> private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer);1536664245;Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of_the SymbolTable.__@param classReader the ClassReader whose bootstrap methods must be copied to initialize the_SymbolTable._@param charBuffer a buffer used to read strings in the constant pool.;private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) {_    _    byte[] inputBytes = classReader.b__    int currentAttributeOffset = classReader.getFirstAttributeOffset()__    for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer)__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6)__        break__      }_      currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2)__    }_    if (bootstrapMethodCount > 0) {_      _      int bootstrapMethodsOffset = currentAttributeOffset + 8__      int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2__      bootstrapMethods = new ByteVector(bootstrapMethodsLength)__      bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength)___      _      int currentOffset = bootstrapMethodsOffset__      for (int i = 0_ i < bootstrapMethodCount_ i++) {_        int offset = currentOffset - bootstrapMethodsOffset__        int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int numBootstrapArguments = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode()__        while (numBootstrapArguments-- > 0) {_          int bootstrapArgument = classReader.readUnsignedShort(currentOffset)__          currentOffset += 2__          hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode()__        }_        add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF))__      }_    }_  };read,the,bootstrap,methods,array,binary,content,and,add,them,as,entries,of,the,symbol,table,param,class,reader,the,class,reader,whose,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table,param,char,buffer,a,buffer,used,to,read,strings,in,the,constant,pool;private,void,copy,bootstrap,methods,final,class,reader,class,reader,final,char,char,buffer,byte,input,bytes,class,reader,b,int,current,attribute,offset,class,reader,get,first,attribute,offset,for,int,i,class,reader,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,class,reader,read,utf8,current,attribute,offset,char,buffer,if,constants,equals,attribute,name,bootstrap,method,count,class,reader,read,unsigned,short,current,attribute,offset,6,break,current,attribute,offset,6,class,reader,read,int,current,attribute,offset,2,if,bootstrap,method,count,0,int,bootstrap,methods,offset,current,attribute,offset,8,int,bootstrap,methods,length,class,reader,read,int,current,attribute,offset,2,2,bootstrap,methods,new,byte,vector,bootstrap,methods,length,bootstrap,methods,put,byte,array,input,bytes,bootstrap,methods,offset,bootstrap,methods,length,int,current,offset,bootstrap,methods,offset,for,int,i,0,i,bootstrap,method,count,i,int,offset,current,offset,bootstrap,methods,offset,int,bootstrap,method,ref,class,reader,read,unsigned,short,current,offset,current,offset,2,int,num,bootstrap,arguments,class,reader,read,unsigned,short,current,offset,current,offset,2,int,hash,code,class,reader,read,const,bootstrap,method,ref,char,buffer,hash,code,while,num,bootstrap,arguments,0,int,bootstrap,argument,class,reader,read,unsigned,short,current,offset,current,offset,2,hash,code,class,reader,read,const,bootstrap,argument,char,buffer,hash,code,add,new,entry,i,symbol,offset,hash,code,0x7fffffff
SymbolTable -> private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer);1537204147;Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of_the SymbolTable.__@param classReader the ClassReader whose bootstrap methods must be copied to initialize the_SymbolTable._@param charBuffer a buffer used to read strings in the constant pool.;private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) {_    _    byte[] inputBytes = classReader.b__    int currentAttributeOffset = classReader.getFirstAttributeOffset()__    for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer)__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6)__        break__      }_      currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2)__    }_    if (bootstrapMethodCount > 0) {_      _      int bootstrapMethodsOffset = currentAttributeOffset + 8__      int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2__      bootstrapMethods = new ByteVector(bootstrapMethodsLength)__      bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength)___      _      int currentOffset = bootstrapMethodsOffset__      for (int i = 0_ i < bootstrapMethodCount_ i++) {_        int offset = currentOffset - bootstrapMethodsOffset__        int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int numBootstrapArguments = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode()__        while (numBootstrapArguments-- > 0) {_          int bootstrapArgument = classReader.readUnsignedShort(currentOffset)__          currentOffset += 2__          hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode()__        }_        add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF))__      }_    }_  };read,the,bootstrap,methods,array,binary,content,and,add,them,as,entries,of,the,symbol,table,param,class,reader,the,class,reader,whose,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table,param,char,buffer,a,buffer,used,to,read,strings,in,the,constant,pool;private,void,copy,bootstrap,methods,final,class,reader,class,reader,final,char,char,buffer,byte,input,bytes,class,reader,b,int,current,attribute,offset,class,reader,get,first,attribute,offset,for,int,i,class,reader,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,class,reader,read,utf8,current,attribute,offset,char,buffer,if,constants,equals,attribute,name,bootstrap,method,count,class,reader,read,unsigned,short,current,attribute,offset,6,break,current,attribute,offset,6,class,reader,read,int,current,attribute,offset,2,if,bootstrap,method,count,0,int,bootstrap,methods,offset,current,attribute,offset,8,int,bootstrap,methods,length,class,reader,read,int,current,attribute,offset,2,2,bootstrap,methods,new,byte,vector,bootstrap,methods,length,bootstrap,methods,put,byte,array,input,bytes,bootstrap,methods,offset,bootstrap,methods,length,int,current,offset,bootstrap,methods,offset,for,int,i,0,i,bootstrap,method,count,i,int,offset,current,offset,bootstrap,methods,offset,int,bootstrap,method,ref,class,reader,read,unsigned,short,current,offset,current,offset,2,int,num,bootstrap,arguments,class,reader,read,unsigned,short,current,offset,current,offset,2,int,hash,code,class,reader,read,const,bootstrap,method,ref,char,buffer,hash,code,while,num,bootstrap,arguments,0,int,bootstrap,argument,class,reader,read,unsigned,short,current,offset,current,offset,2,hash,code,class,reader,read,const,bootstrap,argument,char,buffer,hash,code,add,new,entry,i,symbol,offset,hash,code,0x7fffffff
SymbolTable -> private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer);1539119582;Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of_the SymbolTable.__@param classReader the ClassReader whose bootstrap methods must be copied to initialize the_SymbolTable._@param charBuffer a buffer used to read strings in the constant pool.;private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) {_    _    byte[] inputBytes = classReader.b__    int currentAttributeOffset = classReader.getFirstAttributeOffset()__    for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer)__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6)__        break__      }_      currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2)__    }_    if (bootstrapMethodCount > 0) {_      _      int bootstrapMethodsOffset = currentAttributeOffset + 8__      int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2__      bootstrapMethods = new ByteVector(bootstrapMethodsLength)__      bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength)___      _      int currentOffset = bootstrapMethodsOffset__      for (int i = 0_ i < bootstrapMethodCount_ i++) {_        int offset = currentOffset - bootstrapMethodsOffset__        int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int numBootstrapArguments = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode()__        while (numBootstrapArguments-- > 0) {_          int bootstrapArgument = classReader.readUnsignedShort(currentOffset)__          currentOffset += 2__          hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode()__        }_        add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF))__      }_    }_  };read,the,bootstrap,methods,array,binary,content,and,add,them,as,entries,of,the,symbol,table,param,class,reader,the,class,reader,whose,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table,param,char,buffer,a,buffer,used,to,read,strings,in,the,constant,pool;private,void,copy,bootstrap,methods,final,class,reader,class,reader,final,char,char,buffer,byte,input,bytes,class,reader,b,int,current,attribute,offset,class,reader,get,first,attribute,offset,for,int,i,class,reader,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,class,reader,read,utf8,current,attribute,offset,char,buffer,if,constants,equals,attribute,name,bootstrap,method,count,class,reader,read,unsigned,short,current,attribute,offset,6,break,current,attribute,offset,6,class,reader,read,int,current,attribute,offset,2,if,bootstrap,method,count,0,int,bootstrap,methods,offset,current,attribute,offset,8,int,bootstrap,methods,length,class,reader,read,int,current,attribute,offset,2,2,bootstrap,methods,new,byte,vector,bootstrap,methods,length,bootstrap,methods,put,byte,array,input,bytes,bootstrap,methods,offset,bootstrap,methods,length,int,current,offset,bootstrap,methods,offset,for,int,i,0,i,bootstrap,method,count,i,int,offset,current,offset,bootstrap,methods,offset,int,bootstrap,method,ref,class,reader,read,unsigned,short,current,offset,current,offset,2,int,num,bootstrap,arguments,class,reader,read,unsigned,short,current,offset,current,offset,2,int,hash,code,class,reader,read,const,bootstrap,method,ref,char,buffer,hash,code,while,num,bootstrap,arguments,0,int,bootstrap,argument,class,reader,read,unsigned,short,current,offset,current,offset,2,hash,code,class,reader,read,const,bootstrap,argument,char,buffer,hash,code,add,new,entry,i,symbol,offset,hash,code,0x7fffffff
SymbolTable -> private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode);1531241461;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method (more precisely, reverts the_content of {@link #bootstrapMethods} to remove the last, duplicate bootstrap method).__@param offset the offset of the last bootstrap method in {@link #bootstrapMethods}, in bytes._@param length the length of this bootstrap method in {@link #bootstrapMethods}, in bytes._@param hashCode the hash code of this bootstrap method._@return a new or already existing Symbol with the given value.;private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode) {_    final byte[] bootstrapMethodsData = bootstrapMethods.data__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.BOOTSTRAP_METHOD_TAG && entry.hashCode == hashCode) {_        int otherOffset = (int) entry.data__        boolean isSameBootstrapMethod = true__        for (int i = 0_ i < length_ ++i) {_          if (bootstrapMethodsData[offset + i] != bootstrapMethodsData[otherOffset + i]) {_            isSameBootstrapMethod = false__            break__          }_        }_        if (isSameBootstrapMethod) {_          bootstrapMethods.length = offset_ _          return entry__        }_      }_      entry = entry.next__    }_    return put(new Entry(bootstrapMethodCount++, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode))__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,more,precisely,reverts,the,content,of,link,bootstrap,methods,to,remove,the,last,duplicate,bootstrap,method,param,offset,the,offset,of,the,last,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,length,the,length,of,this,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,hash,code,the,hash,code,of,this,bootstrap,method,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,bootstrap,method,final,int,offset,final,int,length,final,int,hash,code,final,byte,bootstrap,methods,data,bootstrap,methods,data,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,int,other,offset,int,entry,data,boolean,is,same,bootstrap,method,true,for,int,i,0,i,length,i,if,bootstrap,methods,data,offset,i,bootstrap,methods,data,other,offset,i,is,same,bootstrap,method,false,break,if,is,same,bootstrap,method,bootstrap,methods,length,offset,return,entry,entry,entry,next,return,put,new,entry,bootstrap,method,count,symbol,offset,hash,code
SymbolTable -> private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode);1536664245;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method (more precisely, reverts the_content of {@link #bootstrapMethods} to remove the last, duplicate bootstrap method).__@param offset the offset of the last bootstrap method in {@link #bootstrapMethods}, in bytes._@param length the length of this bootstrap method in {@link #bootstrapMethods}, in bytes._@param hashCode the hash code of this bootstrap method._@return a new or already existing Symbol with the given value.;private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode) {_    final byte[] bootstrapMethodsData = bootstrapMethods.data__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.BOOTSTRAP_METHOD_TAG && entry.hashCode == hashCode) {_        int otherOffset = (int) entry.data__        boolean isSameBootstrapMethod = true__        for (int i = 0_ i < length_ ++i) {_          if (bootstrapMethodsData[offset + i] != bootstrapMethodsData[otherOffset + i]) {_            isSameBootstrapMethod = false__            break__          }_        }_        if (isSameBootstrapMethod) {_          bootstrapMethods.length = offset_ _          return entry__        }_      }_      entry = entry.next__    }_    return put(new Entry(bootstrapMethodCount++, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode))__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,more,precisely,reverts,the,content,of,link,bootstrap,methods,to,remove,the,last,duplicate,bootstrap,method,param,offset,the,offset,of,the,last,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,length,the,length,of,this,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,hash,code,the,hash,code,of,this,bootstrap,method,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,bootstrap,method,final,int,offset,final,int,length,final,int,hash,code,final,byte,bootstrap,methods,data,bootstrap,methods,data,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,int,other,offset,int,entry,data,boolean,is,same,bootstrap,method,true,for,int,i,0,i,length,i,if,bootstrap,methods,data,offset,i,bootstrap,methods,data,other,offset,i,is,same,bootstrap,method,false,break,if,is,same,bootstrap,method,bootstrap,methods,length,offset,return,entry,entry,entry,next,return,put,new,entry,bootstrap,method,count,symbol,offset,hash,code
SymbolTable -> private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode);1537204147;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method (more precisely, reverts the_content of {@link #bootstrapMethods} to remove the last, duplicate bootstrap method).__@param offset the offset of the last bootstrap method in {@link #bootstrapMethods}, in bytes._@param length the length of this bootstrap method in {@link #bootstrapMethods}, in bytes._@param hashCode the hash code of this bootstrap method._@return a new or already existing Symbol with the given value.;private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode) {_    final byte[] bootstrapMethodsData = bootstrapMethods.data__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.BOOTSTRAP_METHOD_TAG && entry.hashCode == hashCode) {_        int otherOffset = (int) entry.data__        boolean isSameBootstrapMethod = true__        for (int i = 0_ i < length_ ++i) {_          if (bootstrapMethodsData[offset + i] != bootstrapMethodsData[otherOffset + i]) {_            isSameBootstrapMethod = false__            break__          }_        }_        if (isSameBootstrapMethod) {_          bootstrapMethods.length = offset_ _          return entry__        }_      }_      entry = entry.next__    }_    return put(new Entry(bootstrapMethodCount++, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode))__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,more,precisely,reverts,the,content,of,link,bootstrap,methods,to,remove,the,last,duplicate,bootstrap,method,param,offset,the,offset,of,the,last,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,length,the,length,of,this,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,hash,code,the,hash,code,of,this,bootstrap,method,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,bootstrap,method,final,int,offset,final,int,length,final,int,hash,code,final,byte,bootstrap,methods,data,bootstrap,methods,data,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,int,other,offset,int,entry,data,boolean,is,same,bootstrap,method,true,for,int,i,0,i,length,i,if,bootstrap,methods,data,offset,i,bootstrap,methods,data,other,offset,i,is,same,bootstrap,method,false,break,if,is,same,bootstrap,method,bootstrap,methods,length,offset,return,entry,entry,entry,next,return,put,new,entry,bootstrap,method,count,symbol,offset,hash,code
SymbolTable -> private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode);1539119582;Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if_the BootstrapMethods already contains a similar bootstrap method (more precisely, reverts the_content of {@link #bootstrapMethods} to remove the last, duplicate bootstrap method).__@param offset the offset of the last bootstrap method in {@link #bootstrapMethods}, in bytes._@param length the length of this bootstrap method in {@link #bootstrapMethods}, in bytes._@param hashCode the hash code of this bootstrap method._@return a new or already existing Symbol with the given value.;private Symbol addBootstrapMethod(final int offset, final int length, final int hashCode) {_    final byte[] bootstrapMethodsData = bootstrapMethods.data__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.BOOTSTRAP_METHOD_TAG && entry.hashCode == hashCode) {_        int otherOffset = (int) entry.data__        boolean isSameBootstrapMethod = true__        for (int i = 0_ i < length_ ++i) {_          if (bootstrapMethodsData[offset + i] != bootstrapMethodsData[otherOffset + i]) {_            isSameBootstrapMethod = false__            break__          }_        }_        if (isSameBootstrapMethod) {_          bootstrapMethods.length = offset_ _          return entry__        }_      }_      entry = entry.next__    }_    return put(new Entry(bootstrapMethodCount++, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode))__  };adds,a,bootstrap,method,to,the,bootstrap,methods,attribute,of,this,symbol,table,does,nothing,if,the,bootstrap,methods,already,contains,a,similar,bootstrap,method,more,precisely,reverts,the,content,of,link,bootstrap,methods,to,remove,the,last,duplicate,bootstrap,method,param,offset,the,offset,of,the,last,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,length,the,length,of,this,bootstrap,method,in,link,bootstrap,methods,in,bytes,param,hash,code,the,hash,code,of,this,bootstrap,method,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,bootstrap,method,final,int,offset,final,int,length,final,int,hash,code,final,byte,bootstrap,methods,data,bootstrap,methods,data,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,int,other,offset,int,entry,data,boolean,is,same,bootstrap,method,true,for,int,i,0,i,length,i,if,bootstrap,methods,data,offset,i,bootstrap,methods,data,other,offset,i,is,same,bootstrap,method,false,break,if,is,same,bootstrap,method,bootstrap,methods,length,offset,return,entry,entry,entry,next,return,put,new,entry,bootstrap,method,count,symbol,offset,hash,code
SymbolTable -> Symbol addConstantPackage(final String packageName);1531241461;Adds a CONSTANT_Package_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param packageName the internal name of a package._@return a new or already existing Symbol with the given value.;Symbol addConstantPackage(final String packageName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_PACKAGE_TAG, packageName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,package,name,the,internal,name,of,a,package,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,package,final,string,package,name,return,add,constant,utf8reference,symbol,package,name
SymbolTable -> Symbol addConstantPackage(final String packageName);1536664245;Adds a CONSTANT_Package_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param packageName the internal name of a package._@return a new or already existing Symbol with the given value.;Symbol addConstantPackage(final String packageName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_PACKAGE_TAG, packageName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,package,name,the,internal,name,of,a,package,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,package,final,string,package,name,return,add,constant,utf8reference,symbol,package,name
SymbolTable -> Symbol addConstantPackage(final String packageName);1537204147;Adds a CONSTANT_Package_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param packageName the internal name of a package._@return a new or already existing Symbol with the given value.;Symbol addConstantPackage(final String packageName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_PACKAGE_TAG, packageName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,package,name,the,internal,name,of,a,package,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,package,final,string,package,name,return,add,constant,utf8reference,symbol,package,name
SymbolTable -> Symbol addConstantPackage(final String packageName);1539119582;Adds a CONSTANT_Package_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param packageName the internal name of a package._@return a new or already existing Symbol with the given value.;Symbol addConstantPackage(final String packageName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_PACKAGE_TAG, packageName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,package,name,the,internal,name,of,a,package,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,package,final,string,package,name,return,add,constant,utf8reference,symbol,package,name
SymbolTable -> private Symbol addConstantLong(final int tag, final long value);1531241461;Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantLong(final int tag, final long value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    int index = constantPoolCount__    constantPool.putByte(tag).putLong(value)__    constantPoolCount += 2__    return put(new Entry(index, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,long,final,int,tag,final,long,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,int,index,constant,pool,count,constant,pool,put,byte,tag,put,long,value,constant,pool,count,2,return,put,new,entry,index,tag,value,hash,code
SymbolTable -> private Symbol addConstantLong(final int tag, final long value);1536664245;Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantLong(final int tag, final long value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    int index = constantPoolCount__    constantPool.putByte(tag).putLong(value)__    constantPoolCount += 2__    return put(new Entry(index, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,long,final,int,tag,final,long,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,int,index,constant,pool,count,constant,pool,put,byte,tag,put,long,value,constant,pool,count,2,return,put,new,entry,index,tag,value,hash,code
SymbolTable -> private Symbol addConstantUtf8Reference(final int tag, final String value);1531241461;Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does_nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag._@return a new or already existing Symbol with the given value.;private Symbol addConstantUtf8Reference(final int tag, final String value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put12(tag, addConstantUtf8(value))__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,utf8reference,final,int,tag,final,string,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,value,equals,value,return,entry,entry,entry,next,constant,pool,put12,tag,add,constant,utf8,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Symbol addConstantUtf8Reference(final int tag, final String value);1536664245;Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does_nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag._@return a new or already existing Symbol with the given value.;private Symbol addConstantUtf8Reference(final int tag, final String value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put12(tag, addConstantUtf8(value))__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,utf8reference,final,int,tag,final,string,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,value,equals,value,return,entry,entry,entry,next,constant,pool,put12,tag,add,constant,utf8,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Symbol addConstantUtf8Reference(final int tag, final String value);1537204147;Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does_nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag._@return a new or already existing Symbol with the given value.;private Symbol addConstantUtf8Reference(final int tag, final String value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put12(tag, addConstantUtf8(value))__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,utf8reference,final,int,tag,final,string,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,value,equals,value,return,entry,entry,entry,next,constant,pool,put12,tag,add,constant,utf8,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Symbol addConstantUtf8Reference(final int tag, final String value);1539119582;Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does_nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag._@return a new or already existing Symbol with the given value.;private Symbol addConstantUtf8Reference(final int tag, final String value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry__      }_      entry = entry.next__    }_    constantPool.put12(tag, addConstantUtf8(value))__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag,return,a,new,or,already,existing,symbol,with,the,given,value;private,symbol,add,constant,utf8reference,final,int,tag,final,string,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,value,equals,value,return,entry,entry,entry,next,constant,pool,put12,tag,add,constant,utf8,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> int addConstantUtf8(final String value);1531241461;Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;int addConstantUtf8(final String value) {_    int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.CONSTANT_UTF8_TAG_          && entry.hashCode == hashCode_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value)__    return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,utf8,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,constant,pool,put,byte,symbol,put,utf8,value,return,put,new,entry,constant,pool,count,symbol,value,hash,code,index
SymbolTable -> int addConstantUtf8(final String value);1536664245;Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;int addConstantUtf8(final String value) {_    int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.CONSTANT_UTF8_TAG_          && entry.hashCode == hashCode_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value)__    return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,utf8,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,constant,pool,put,byte,symbol,put,utf8,value,return,put,new,entry,constant,pool,count,symbol,value,hash,code,index
SymbolTable -> int addConstantUtf8(final String value);1537204147;Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;int addConstantUtf8(final String value) {_    int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.CONSTANT_UTF8_TAG_          && entry.hashCode == hashCode_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value)__    return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,utf8,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,constant,pool,put,byte,symbol,put,utf8,value,return,put,new,entry,constant,pool,count,symbol,value,hash,code,index
SymbolTable -> int addConstantUtf8(final String value);1539119582;Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a string._@return a new or already existing Symbol with the given value.;int addConstantUtf8(final String value) {_    int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.CONSTANT_UTF8_TAG_          && entry.hashCode == hashCode_          && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value)__    return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,string,return,a,new,or,already,existing,symbol,with,the,given,value;int,add,constant,utf8,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,constant,pool,put,byte,symbol,put,utf8,value,return,put,new,entry,constant,pool,count,symbol,value,hash,code,index
SymbolTable -> SymbolTable(final ClassWriter classWriter, final ClassReader classReader);1531241461;Constructs a new SymbolTable for the given ClassWriter, initialized with the constant pool and_bootstrap methods of the given ClassReader.__@param classWriter a ClassWriter._@param classReader the ClassReader whose constant pool and bootstrap methods must be copied to_initialize the SymbolTable.;SymbolTable(final ClassWriter classWriter, final ClassReader classReader) {_    this.classWriter = classWriter__    this.sourceClassReader = classReader___    _    byte[] inputBytes = classReader.b__    int constantPoolOffset = classReader.getItem(1) - 1__    int constantPoolLength = classReader.header - constantPoolOffset__    constantPoolCount = classReader.getItemCount()__    constantPool = new ByteVector(constantPoolLength)__    constantPool.putByteArray(inputBytes, constantPoolOffset, constantPoolLength)___    _    _    _    entries = new Entry[constantPoolCount * 2]__    char[] charBuffer = new char[classReader.getMaxStringLength()]__    int itemIndex = 1__    while (itemIndex < constantPoolCount) {_      int itemOffset = classReader.getItem(itemIndex)__      int itemTag = inputBytes[itemOffset - 1]__      int nameAndTypeItemOffset__      switch (itemTag) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantMemberReference(_              itemIndex,_              itemTag,_              classReader.readClass(itemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_          addConstantInteger(itemIndex, itemTag, classReader.readInt(itemOffset))__          break__        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          addConstantNameAndType(_              itemIndex,_              classReader.readUTF8(itemOffset, charBuffer),_              classReader.readUTF8(itemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          addConstantLong(itemIndex, itemTag, classReader.readLong(itemOffset))__          break__        case Symbol.CONSTANT_UTF8_TAG:_          addConstantUtf8(itemIndex, classReader.readUTF(itemIndex, charBuffer))__          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          int memberRefItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 1))__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(memberRefItemOffset + 2))__          addConstantMethodHandle(_              itemIndex,_              classReader.readByte(itemOffset),_              classReader.readClass(memberRefItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantDynamicOrInvokeDynamicReference(_              itemTag,_              itemIndex,_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer),_              classReader.readUnsignedShort(itemOffset))__          break__        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_          addConstantUtf8Reference(_              itemIndex, itemTag, classReader.readUTF8(itemOffset, charBuffer))__          break__        default:_          throw new IllegalArgumentException()__      }_      itemIndex +=_          (itemTag == Symbol.CONSTANT_LONG_TAG || itemTag == Symbol.CONSTANT_DOUBLE_TAG) ? 2 : 1__    }__    _    int currentAttributeOffset = classReader.getFirstAttributeOffset()__    for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer)__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6)__        break__      }_      currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2)__    }_    if (bootstrapMethodCount > 0) {_      _      int bootstrapMethodsOffset = currentAttributeOffset + 8__      int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2__      bootstrapMethods = new ByteVector(bootstrapMethodsLength)__      bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength)___      _      int currentOffset = bootstrapMethodsOffset__      for (int i = 0_ i < bootstrapMethodCount_ i++) {_        int offset = currentOffset - bootstrapMethodsOffset__        int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int numBootstrapArguments = classReader.readUnsignedShort(currentOffset)__        currentOffset += 2__        int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode()__        while (numBootstrapArguments-- > 0) {_          int bootstrapArgument = classReader.readUnsignedShort(currentOffset)__          currentOffset += 2__          hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode()__        }_        add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF))__      }_    }_  };constructs,a,new,symbol,table,for,the,given,class,writer,initialized,with,the,constant,pool,and,bootstrap,methods,of,the,given,class,reader,param,class,writer,a,class,writer,param,class,reader,the,class,reader,whose,constant,pool,and,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table;symbol,table,final,class,writer,class,writer,final,class,reader,class,reader,this,class,writer,class,writer,this,source,class,reader,class,reader,byte,input,bytes,class,reader,b,int,constant,pool,offset,class,reader,get,item,1,1,int,constant,pool,length,class,reader,header,constant,pool,offset,constant,pool,count,class,reader,get,item,count,constant,pool,new,byte,vector,constant,pool,length,constant,pool,put,byte,array,input,bytes,constant,pool,offset,constant,pool,length,entries,new,entry,constant,pool,count,2,char,char,buffer,new,char,class,reader,get,max,string,length,int,item,index,1,while,item,index,constant,pool,count,int,item,offset,class,reader,get,item,item,index,int,item,tag,input,bytes,item,offset,1,int,name,and,type,item,offset,switch,item,tag,case,symbol,case,symbol,case,symbol,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,member,reference,item,index,item,tag,class,reader,read,class,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,integer,item,index,item,tag,class,reader,read,int,item,offset,break,case,symbol,add,constant,name,and,type,item,index,class,reader,read,utf8,item,offset,char,buffer,class,reader,read,utf8,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,long,item,index,item,tag,class,reader,read,long,item,offset,break,case,symbol,add,constant,utf8,item,index,class,reader,read,utf,item,index,char,buffer,break,case,symbol,int,member,ref,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,1,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,member,ref,item,offset,2,add,constant,method,handle,item,index,class,reader,read,byte,item,offset,class,reader,read,class,member,ref,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,dynamic,or,invoke,dynamic,reference,item,tag,item,index,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,class,reader,read,unsigned,short,item,offset,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,add,constant,utf8reference,item,index,item,tag,class,reader,read,utf8,item,offset,char,buffer,break,default,throw,new,illegal,argument,exception,item,index,item,tag,symbol,item,tag,symbol,2,1,int,current,attribute,offset,class,reader,get,first,attribute,offset,for,int,i,class,reader,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,class,reader,read,utf8,current,attribute,offset,char,buffer,if,constants,equals,attribute,name,bootstrap,method,count,class,reader,read,unsigned,short,current,attribute,offset,6,break,current,attribute,offset,6,class,reader,read,int,current,attribute,offset,2,if,bootstrap,method,count,0,int,bootstrap,methods,offset,current,attribute,offset,8,int,bootstrap,methods,length,class,reader,read,int,current,attribute,offset,2,2,bootstrap,methods,new,byte,vector,bootstrap,methods,length,bootstrap,methods,put,byte,array,input,bytes,bootstrap,methods,offset,bootstrap,methods,length,int,current,offset,bootstrap,methods,offset,for,int,i,0,i,bootstrap,method,count,i,int,offset,current,offset,bootstrap,methods,offset,int,bootstrap,method,ref,class,reader,read,unsigned,short,current,offset,current,offset,2,int,num,bootstrap,arguments,class,reader,read,unsigned,short,current,offset,current,offset,2,int,hash,code,class,reader,read,const,bootstrap,method,ref,char,buffer,hash,code,while,num,bootstrap,arguments,0,int,bootstrap,argument,class,reader,read,unsigned,short,current,offset,current,offset,2,hash,code,class,reader,read,const,bootstrap,argument,char,buffer,hash,code,add,new,entry,i,symbol,offset,hash,code,0x7fffffff
SymbolTable -> SymbolTable(final ClassWriter classWriter, final ClassReader classReader);1536664245;Constructs a new SymbolTable for the given ClassWriter, initialized with the constant pool and_bootstrap methods of the given ClassReader.__@param classWriter a ClassWriter._@param classReader the ClassReader whose constant pool and bootstrap methods must be copied to_initialize the SymbolTable.;SymbolTable(final ClassWriter classWriter, final ClassReader classReader) {_    this.classWriter = classWriter__    this.sourceClassReader = classReader___    _    byte[] inputBytes = classReader.b__    int constantPoolOffset = classReader.getItem(1) - 1__    int constantPoolLength = classReader.header - constantPoolOffset__    constantPoolCount = classReader.getItemCount()__    constantPool = new ByteVector(constantPoolLength)__    constantPool.putByteArray(inputBytes, constantPoolOffset, constantPoolLength)___    _    _    _    entries = new Entry[constantPoolCount * 2]__    char[] charBuffer = new char[classReader.getMaxStringLength()]__    boolean hasBootstrapMethods = false__    int itemIndex = 1__    while (itemIndex < constantPoolCount) {_      int itemOffset = classReader.getItem(itemIndex)__      int itemTag = inputBytes[itemOffset - 1]__      int nameAndTypeItemOffset__      switch (itemTag) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantMemberReference(_              itemIndex,_              itemTag,_              classReader.readClass(itemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_          addConstantInteger(itemIndex, itemTag, classReader.readInt(itemOffset))__          break__        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          addConstantNameAndType(_              itemIndex,_              classReader.readUTF8(itemOffset, charBuffer),_              classReader.readUTF8(itemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          addConstantLong(itemIndex, itemTag, classReader.readLong(itemOffset))__          break__        case Symbol.CONSTANT_UTF8_TAG:_          addConstantUtf8(itemIndex, classReader.readUTF(itemIndex, charBuffer))__          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          int memberRefItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 1))__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(memberRefItemOffset + 2))__          addConstantMethodHandle(_              itemIndex,_              classReader.readByte(itemOffset),_              classReader.readClass(memberRefItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          hasBootstrapMethods = true__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantDynamicOrInvokeDynamicReference(_              itemTag,_              itemIndex,_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer),_              classReader.readUnsignedShort(itemOffset))__          break__        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_          addConstantUtf8Reference(_              itemIndex, itemTag, classReader.readUTF8(itemOffset, charBuffer))__          break__        default:_          throw new IllegalArgumentException()__      }_      itemIndex +=_          (itemTag == Symbol.CONSTANT_LONG_TAG || itemTag == Symbol.CONSTANT_DOUBLE_TAG) ? 2 : 1__    }__    _    if (hasBootstrapMethods) {_      copyBootstrapMethods(classReader, charBuffer)__    }_  };constructs,a,new,symbol,table,for,the,given,class,writer,initialized,with,the,constant,pool,and,bootstrap,methods,of,the,given,class,reader,param,class,writer,a,class,writer,param,class,reader,the,class,reader,whose,constant,pool,and,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table;symbol,table,final,class,writer,class,writer,final,class,reader,class,reader,this,class,writer,class,writer,this,source,class,reader,class,reader,byte,input,bytes,class,reader,b,int,constant,pool,offset,class,reader,get,item,1,1,int,constant,pool,length,class,reader,header,constant,pool,offset,constant,pool,count,class,reader,get,item,count,constant,pool,new,byte,vector,constant,pool,length,constant,pool,put,byte,array,input,bytes,constant,pool,offset,constant,pool,length,entries,new,entry,constant,pool,count,2,char,char,buffer,new,char,class,reader,get,max,string,length,boolean,has,bootstrap,methods,false,int,item,index,1,while,item,index,constant,pool,count,int,item,offset,class,reader,get,item,item,index,int,item,tag,input,bytes,item,offset,1,int,name,and,type,item,offset,switch,item,tag,case,symbol,case,symbol,case,symbol,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,member,reference,item,index,item,tag,class,reader,read,class,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,integer,item,index,item,tag,class,reader,read,int,item,offset,break,case,symbol,add,constant,name,and,type,item,index,class,reader,read,utf8,item,offset,char,buffer,class,reader,read,utf8,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,long,item,index,item,tag,class,reader,read,long,item,offset,break,case,symbol,add,constant,utf8,item,index,class,reader,read,utf,item,index,char,buffer,break,case,symbol,int,member,ref,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,1,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,member,ref,item,offset,2,add,constant,method,handle,item,index,class,reader,read,byte,item,offset,class,reader,read,class,member,ref,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,has,bootstrap,methods,true,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,dynamic,or,invoke,dynamic,reference,item,tag,item,index,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,class,reader,read,unsigned,short,item,offset,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,add,constant,utf8reference,item,index,item,tag,class,reader,read,utf8,item,offset,char,buffer,break,default,throw,new,illegal,argument,exception,item,index,item,tag,symbol,item,tag,symbol,2,1,if,has,bootstrap,methods,copy,bootstrap,methods,class,reader,char,buffer
SymbolTable -> SymbolTable(final ClassWriter classWriter, final ClassReader classReader);1537204147;Constructs a new SymbolTable for the given ClassWriter, initialized with the constant pool and_bootstrap methods of the given ClassReader.__@param classWriter a ClassWriter._@param classReader the ClassReader whose constant pool and bootstrap methods must be copied to_initialize the SymbolTable.;SymbolTable(final ClassWriter classWriter, final ClassReader classReader) {_    this.classWriter = classWriter__    this.sourceClassReader = classReader___    _    byte[] inputBytes = classReader.b__    int constantPoolOffset = classReader.getItem(1) - 1__    int constantPoolLength = classReader.header - constantPoolOffset__    constantPoolCount = classReader.getItemCount()__    constantPool = new ByteVector(constantPoolLength)__    constantPool.putByteArray(inputBytes, constantPoolOffset, constantPoolLength)___    _    _    _    entries = new Entry[constantPoolCount * 2]__    char[] charBuffer = new char[classReader.getMaxStringLength()]__    boolean hasBootstrapMethods = false__    int itemIndex = 1__    while (itemIndex < constantPoolCount) {_      int itemOffset = classReader.getItem(itemIndex)__      int itemTag = inputBytes[itemOffset - 1]__      int nameAndTypeItemOffset__      switch (itemTag) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantMemberReference(_              itemIndex,_              itemTag,_              classReader.readClass(itemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_          addConstantIntegerOrFloat(itemIndex, itemTag, classReader.readInt(itemOffset))__          break__        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          addConstantNameAndType(_              itemIndex,_              classReader.readUTF8(itemOffset, charBuffer),_              classReader.readUTF8(itemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          addConstantLongOrDouble(itemIndex, itemTag, classReader.readLong(itemOffset))__          break__        case Symbol.CONSTANT_UTF8_TAG:_          addConstantUtf8(itemIndex, classReader.readUtf(itemIndex, charBuffer))__          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          int memberRefItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 1))__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(memberRefItemOffset + 2))__          addConstantMethodHandle(_              itemIndex,_              classReader.readByte(itemOffset),_              classReader.readClass(memberRefItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          hasBootstrapMethods = true__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantDynamicOrInvokeDynamicReference(_              itemTag,_              itemIndex,_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer),_              classReader.readUnsignedShort(itemOffset))__          break__        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_          addConstantUtf8Reference(_              itemIndex, itemTag, classReader.readUTF8(itemOffset, charBuffer))__          break__        default:_          throw new IllegalArgumentException()__      }_      itemIndex +=_          (itemTag == Symbol.CONSTANT_LONG_TAG || itemTag == Symbol.CONSTANT_DOUBLE_TAG) ? 2 : 1__    }__    _    if (hasBootstrapMethods) {_      copyBootstrapMethods(classReader, charBuffer)__    }_  };constructs,a,new,symbol,table,for,the,given,class,writer,initialized,with,the,constant,pool,and,bootstrap,methods,of,the,given,class,reader,param,class,writer,a,class,writer,param,class,reader,the,class,reader,whose,constant,pool,and,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table;symbol,table,final,class,writer,class,writer,final,class,reader,class,reader,this,class,writer,class,writer,this,source,class,reader,class,reader,byte,input,bytes,class,reader,b,int,constant,pool,offset,class,reader,get,item,1,1,int,constant,pool,length,class,reader,header,constant,pool,offset,constant,pool,count,class,reader,get,item,count,constant,pool,new,byte,vector,constant,pool,length,constant,pool,put,byte,array,input,bytes,constant,pool,offset,constant,pool,length,entries,new,entry,constant,pool,count,2,char,char,buffer,new,char,class,reader,get,max,string,length,boolean,has,bootstrap,methods,false,int,item,index,1,while,item,index,constant,pool,count,int,item,offset,class,reader,get,item,item,index,int,item,tag,input,bytes,item,offset,1,int,name,and,type,item,offset,switch,item,tag,case,symbol,case,symbol,case,symbol,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,member,reference,item,index,item,tag,class,reader,read,class,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,integer,or,float,item,index,item,tag,class,reader,read,int,item,offset,break,case,symbol,add,constant,name,and,type,item,index,class,reader,read,utf8,item,offset,char,buffer,class,reader,read,utf8,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,long,or,double,item,index,item,tag,class,reader,read,long,item,offset,break,case,symbol,add,constant,utf8,item,index,class,reader,read,utf,item,index,char,buffer,break,case,symbol,int,member,ref,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,1,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,member,ref,item,offset,2,add,constant,method,handle,item,index,class,reader,read,byte,item,offset,class,reader,read,class,member,ref,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,has,bootstrap,methods,true,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,dynamic,or,invoke,dynamic,reference,item,tag,item,index,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,class,reader,read,unsigned,short,item,offset,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,add,constant,utf8reference,item,index,item,tag,class,reader,read,utf8,item,offset,char,buffer,break,default,throw,new,illegal,argument,exception,item,index,item,tag,symbol,item,tag,symbol,2,1,if,has,bootstrap,methods,copy,bootstrap,methods,class,reader,char,buffer
SymbolTable -> SymbolTable(final ClassWriter classWriter, final ClassReader classReader);1539119582;Constructs a new SymbolTable for the given ClassWriter, initialized with the constant pool and_bootstrap methods of the given ClassReader.__@param classWriter a ClassWriter._@param classReader the ClassReader whose constant pool and bootstrap methods must be copied to_initialize the SymbolTable.;SymbolTable(final ClassWriter classWriter, final ClassReader classReader) {_    this.classWriter = classWriter__    this.sourceClassReader = classReader___    _    byte[] inputBytes = classReader.b__    int constantPoolOffset = classReader.getItem(1) - 1__    int constantPoolLength = classReader.header - constantPoolOffset__    constantPoolCount = classReader.getItemCount()__    constantPool = new ByteVector(constantPoolLength)__    constantPool.putByteArray(inputBytes, constantPoolOffset, constantPoolLength)___    _    _    _    entries = new Entry[constantPoolCount * 2]__    char[] charBuffer = new char[classReader.getMaxStringLength()]__    boolean hasBootstrapMethods = false__    int itemIndex = 1__    while (itemIndex < constantPoolCount) {_      int itemOffset = classReader.getItem(itemIndex)__      int itemTag = inputBytes[itemOffset - 1]__      int nameAndTypeItemOffset__      switch (itemTag) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantMemberReference(_              itemIndex,_              itemTag,_              classReader.readClass(itemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_          addConstantIntegerOrFloat(itemIndex, itemTag, classReader.readInt(itemOffset))__          break__        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          addConstantNameAndType(_              itemIndex,_              classReader.readUTF8(itemOffset, charBuffer),_              classReader.readUTF8(itemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          addConstantLongOrDouble(itemIndex, itemTag, classReader.readLong(itemOffset))__          break__        case Symbol.CONSTANT_UTF8_TAG:_          addConstantUtf8(itemIndex, classReader.readUtf(itemIndex, charBuffer))__          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          int memberRefItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 1))__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(memberRefItemOffset + 2))__          addConstantMethodHandle(_              itemIndex,_              classReader.readByte(itemOffset),_              classReader.readClass(memberRefItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer))__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          hasBootstrapMethods = true__          nameAndTypeItemOffset =_              classReader.getItem(classReader.readUnsignedShort(itemOffset + 2))__          addConstantDynamicOrInvokeDynamicReference(_              itemTag,_              itemIndex,_              classReader.readUTF8(nameAndTypeItemOffset, charBuffer),_              classReader.readUTF8(nameAndTypeItemOffset + 2, charBuffer),_              classReader.readUnsignedShort(itemOffset))__          break__        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_          addConstantUtf8Reference(_              itemIndex, itemTag, classReader.readUTF8(itemOffset, charBuffer))__          break__        default:_          throw new IllegalArgumentException()__      }_      itemIndex +=_          (itemTag == Symbol.CONSTANT_LONG_TAG || itemTag == Symbol.CONSTANT_DOUBLE_TAG) ? 2 : 1__    }__    _    if (hasBootstrapMethods) {_      copyBootstrapMethods(classReader, charBuffer)__    }_  };constructs,a,new,symbol,table,for,the,given,class,writer,initialized,with,the,constant,pool,and,bootstrap,methods,of,the,given,class,reader,param,class,writer,a,class,writer,param,class,reader,the,class,reader,whose,constant,pool,and,bootstrap,methods,must,be,copied,to,initialize,the,symbol,table;symbol,table,final,class,writer,class,writer,final,class,reader,class,reader,this,class,writer,class,writer,this,source,class,reader,class,reader,byte,input,bytes,class,reader,b,int,constant,pool,offset,class,reader,get,item,1,1,int,constant,pool,length,class,reader,header,constant,pool,offset,constant,pool,count,class,reader,get,item,count,constant,pool,new,byte,vector,constant,pool,length,constant,pool,put,byte,array,input,bytes,constant,pool,offset,constant,pool,length,entries,new,entry,constant,pool,count,2,char,char,buffer,new,char,class,reader,get,max,string,length,boolean,has,bootstrap,methods,false,int,item,index,1,while,item,index,constant,pool,count,int,item,offset,class,reader,get,item,item,index,int,item,tag,input,bytes,item,offset,1,int,name,and,type,item,offset,switch,item,tag,case,symbol,case,symbol,case,symbol,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,member,reference,item,index,item,tag,class,reader,read,class,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,integer,or,float,item,index,item,tag,class,reader,read,int,item,offset,break,case,symbol,add,constant,name,and,type,item,index,class,reader,read,utf8,item,offset,char,buffer,class,reader,read,utf8,item,offset,2,char,buffer,break,case,symbol,case,symbol,add,constant,long,or,double,item,index,item,tag,class,reader,read,long,item,offset,break,case,symbol,add,constant,utf8,item,index,class,reader,read,utf,item,index,char,buffer,break,case,symbol,int,member,ref,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,1,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,member,ref,item,offset,2,add,constant,method,handle,item,index,class,reader,read,byte,item,offset,class,reader,read,class,member,ref,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,break,case,symbol,case,symbol,has,bootstrap,methods,true,name,and,type,item,offset,class,reader,get,item,class,reader,read,unsigned,short,item,offset,2,add,constant,dynamic,or,invoke,dynamic,reference,item,tag,item,index,class,reader,read,utf8,name,and,type,item,offset,char,buffer,class,reader,read,utf8,name,and,type,item,offset,2,char,buffer,class,reader,read,unsigned,short,item,offset,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,add,constant,utf8reference,item,index,item,tag,class,reader,read,utf8,item,offset,char,buffer,break,default,throw,new,illegal,argument,exception,item,index,item,tag,symbol,item,tag,symbol,2,1,if,has,bootstrap,methods,copy,bootstrap,methods,class,reader,char,buffer
SymbolTable -> Symbol addConstantDouble(final double value);1531241461;Adds a CONSTANT_Double_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a double._@return a new or already existing Symbol with the given value.;Symbol addConstantDouble(final double value) {_    return addConstantLong(Symbol.CONSTANT_DOUBLE_TAG, Double.doubleToRawLongBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,double,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,double,final,double,value,return,add,constant,long,symbol,double,double,to,raw,long,bits,value
SymbolTable -> Symbol addConstantDouble(final double value);1536664245;Adds a CONSTANT_Double_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a double._@return a new or already existing Symbol with the given value.;Symbol addConstantDouble(final double value) {_    return addConstantLong(Symbol.CONSTANT_DOUBLE_TAG, Double.doubleToRawLongBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,double,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,double,final,double,value,return,add,constant,long,symbol,double,double,to,raw,long,bits,value
SymbolTable -> Symbol addConstantDouble(final double value);1537204147;Adds a CONSTANT_Double_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a double._@return a new or already existing Symbol with the given value.;Symbol addConstantDouble(final double value) {_    return addConstantLongOrDouble(Symbol.CONSTANT_DOUBLE_TAG, Double.doubleToRawLongBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,double,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,double,final,double,value,return,add,constant,long,or,double,symbol,double,double,to,raw,long,bits,value
SymbolTable -> Symbol addConstantDouble(final double value);1539119582;Adds a CONSTANT_Double_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value a double._@return a new or already existing Symbol with the given value.;Symbol addConstantDouble(final double value) {_    return addConstantLongOrDouble(Symbol.CONSTANT_DOUBLE_TAG, Double.doubleToRawLongBits(value))__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,a,double,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,double,final,double,value,return,add,constant,long,or,double,symbol,double,double,to,raw,long,bits,value
SymbolTable -> private Symbol addConstantIntegerOrFloat(final int tag, final int value);1537204147;Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantIntegerOrFloat(final int tag, final int value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    constantPool.putByte(tag).putInt(value)__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,integer,or,float,final,int,tag,final,int,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,constant,pool,put,byte,tag,put,int,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Symbol addConstantIntegerOrFloat(final int tag, final int value);1539119582;Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantIntegerOrFloat(final int tag, final int value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    constantPool.putByte(tag).putInt(value)__    return put(new Entry(constantPoolCount++, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,integer,or,float,final,int,tag,final,int,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,constant,pool,put,byte,tag,put,int,value,return,put,new,entry,constant,pool,count,tag,value,hash,code
SymbolTable -> private Entry put(final Entry entry);1531241461;Puts the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not. {@link #entries} is resized_if necessary to avoid hash collisions (multiple entries needing to be stored at the same {@link_#entries} array index) as much as possible, with reasonable memory usage.__@param entry an Entry (which must not already be contained in {@link #entries})._@return the given entry;private Entry put(final Entry entry) {_    if (entryCount > (entries.length * 3) / 4) {_      int currentCapacity = entries.length__      int newCapacity = currentCapacity * 2 + 1__      Entry[] newEntries = new Entry[newCapacity]__      for (int i = currentCapacity - 1_ i >= 0_ --i) {_        Entry currentEntry = entries[i]__        while (currentEntry != null) {_          int newCurrentEntryIndex = currentEntry.hashCode % newCapacity__          Entry nextEntry = currentEntry.next__          currentEntry.next = newEntries[newCurrentEntryIndex]__          newEntries[newCurrentEntryIndex] = currentEntry__          currentEntry = nextEntry__        }_      }_      entries = newEntries__    }_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    return entries[index] = entry__  };puts,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,link,entries,is,resized,if,necessary,to,avoid,hash,collisions,multiple,entries,needing,to,be,stored,at,the,same,link,entries,array,index,as,much,as,possible,with,reasonable,memory,usage,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries,return,the,given,entry;private,entry,put,final,entry,entry,if,entry,count,entries,length,3,4,int,current,capacity,entries,length,int,new,capacity,current,capacity,2,1,entry,new,entries,new,entry,new,capacity,for,int,i,current,capacity,1,i,0,i,entry,current,entry,entries,i,while,current,entry,null,int,new,current,entry,index,current,entry,hash,code,new,capacity,entry,next,entry,current,entry,next,current,entry,next,new,entries,new,current,entry,index,new,entries,new,current,entry,index,current,entry,current,entry,next,entry,entries,new,entries,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,return,entries,index,entry
SymbolTable -> private Entry put(final Entry entry);1536664245;Puts the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not. {@link #entries} is resized_if necessary to avoid hash collisions (multiple entries needing to be stored at the same {@link_#entries} array index) as much as possible, with reasonable memory usage.__@param entry an Entry (which must not already be contained in {@link #entries})._@return the given entry;private Entry put(final Entry entry) {_    if (entryCount > (entries.length * 3) / 4) {_      int currentCapacity = entries.length__      int newCapacity = currentCapacity * 2 + 1__      Entry[] newEntries = new Entry[newCapacity]__      for (int i = currentCapacity - 1_ i >= 0_ --i) {_        Entry currentEntry = entries[i]__        while (currentEntry != null) {_          int newCurrentEntryIndex = currentEntry.hashCode % newCapacity__          Entry nextEntry = currentEntry.next__          currentEntry.next = newEntries[newCurrentEntryIndex]__          newEntries[newCurrentEntryIndex] = currentEntry__          currentEntry = nextEntry__        }_      }_      entries = newEntries__    }_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    return entries[index] = entry__  };puts,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,link,entries,is,resized,if,necessary,to,avoid,hash,collisions,multiple,entries,needing,to,be,stored,at,the,same,link,entries,array,index,as,much,as,possible,with,reasonable,memory,usage,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries,return,the,given,entry;private,entry,put,final,entry,entry,if,entry,count,entries,length,3,4,int,current,capacity,entries,length,int,new,capacity,current,capacity,2,1,entry,new,entries,new,entry,new,capacity,for,int,i,current,capacity,1,i,0,i,entry,current,entry,entries,i,while,current,entry,null,int,new,current,entry,index,current,entry,hash,code,new,capacity,entry,next,entry,current,entry,next,current,entry,next,new,entries,new,current,entry,index,new,entries,new,current,entry,index,current,entry,current,entry,next,entry,entries,new,entries,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,return,entries,index,entry
SymbolTable -> private Entry put(final Entry entry);1537204147;Puts the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not. {@link #entries} is resized_if necessary to avoid hash collisions (multiple entries needing to be stored at the same {@link_#entries} array index) as much as possible, with reasonable memory usage.__@param entry an Entry (which must not already be contained in {@link #entries})._@return the given entry;private Entry put(final Entry entry) {_    if (entryCount > (entries.length * 3) / 4) {_      int currentCapacity = entries.length__      int newCapacity = currentCapacity * 2 + 1__      Entry[] newEntries = new Entry[newCapacity]__      for (int i = currentCapacity - 1_ i >= 0_ --i) {_        Entry currentEntry = entries[i]__        while (currentEntry != null) {_          int newCurrentEntryIndex = currentEntry.hashCode % newCapacity__          Entry nextEntry = currentEntry.next__          currentEntry.next = newEntries[newCurrentEntryIndex]__          newEntries[newCurrentEntryIndex] = currentEntry__          currentEntry = nextEntry__        }_      }_      entries = newEntries__    }_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    return entries[index] = entry__  };puts,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,link,entries,is,resized,if,necessary,to,avoid,hash,collisions,multiple,entries,needing,to,be,stored,at,the,same,link,entries,array,index,as,much,as,possible,with,reasonable,memory,usage,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries,return,the,given,entry;private,entry,put,final,entry,entry,if,entry,count,entries,length,3,4,int,current,capacity,entries,length,int,new,capacity,current,capacity,2,1,entry,new,entries,new,entry,new,capacity,for,int,i,current,capacity,1,i,0,i,entry,current,entry,entries,i,while,current,entry,null,int,new,current,entry,index,current,entry,hash,code,new,capacity,entry,next,entry,current,entry,next,current,entry,next,new,entries,new,current,entry,index,new,entries,new,current,entry,index,current,entry,current,entry,next,entry,entries,new,entries,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,return,entries,index,entry
SymbolTable -> private Entry put(final Entry entry);1539119582;Puts the given entry in the {@link #entries} hash set. This method does <i>not</i> check_whether {@link #entries} already contains a similar entry or not. {@link #entries} is resized_if necessary to avoid hash collisions (multiple entries needing to be stored at the same {@link_#entries} array index) as much as possible, with reasonable memory usage.__@param entry an Entry (which must not already be contained in {@link #entries})._@return the given entry;private Entry put(final Entry entry) {_    if (entryCount > (entries.length * 3) / 4) {_      int currentCapacity = entries.length__      int newCapacity = currentCapacity * 2 + 1__      Entry[] newEntries = new Entry[newCapacity]__      for (int i = currentCapacity - 1_ i >= 0_ --i) {_        Entry currentEntry = entries[i]__        while (currentEntry != null) {_          int newCurrentEntryIndex = currentEntry.hashCode % newCapacity__          Entry nextEntry = currentEntry.next__          currentEntry.next = newEntries[newCurrentEntryIndex]__          newEntries[newCurrentEntryIndex] = currentEntry__          currentEntry = nextEntry__        }_      }_      entries = newEntries__    }_    entryCount++__    int index = entry.hashCode % entries.length__    entry.next = entries[index]__    return entries[index] = entry__  };puts,the,given,entry,in,the,link,entries,hash,set,this,method,does,i,not,i,check,whether,link,entries,already,contains,a,similar,entry,or,not,link,entries,is,resized,if,necessary,to,avoid,hash,collisions,multiple,entries,needing,to,be,stored,at,the,same,link,entries,array,index,as,much,as,possible,with,reasonable,memory,usage,param,entry,an,entry,which,must,not,already,be,contained,in,link,entries,return,the,given,entry;private,entry,put,final,entry,entry,if,entry,count,entries,length,3,4,int,current,capacity,entries,length,int,new,capacity,current,capacity,2,1,entry,new,entries,new,entry,new,capacity,for,int,i,current,capacity,1,i,0,i,entry,current,entry,entries,i,while,current,entry,null,int,new,current,entry,index,current,entry,hash,code,new,capacity,entry,next,entry,current,entry,next,current,entry,next,new,entries,new,current,entry,index,new,entries,new,current,entry,index,current,entry,current,entry,next,entry,entries,new,entries,entry,count,int,index,entry,hash,code,entries,length,entry,next,entries,index,return,entries,index,entry
SymbolTable -> Symbol addConstantModule(final String moduleName);1531241461;Adds a CONSTANT_Module_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param moduleName a fully qualified name (using dots) of a module._@return a new or already existing Symbol with the given value.;Symbol addConstantModule(final String moduleName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_MODULE_TAG, moduleName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,module,name,a,fully,qualified,name,using,dots,of,a,module,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,module,final,string,module,name,return,add,constant,utf8reference,symbol,module,name
SymbolTable -> Symbol addConstantModule(final String moduleName);1536664245;Adds a CONSTANT_Module_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param moduleName a fully qualified name (using dots) of a module._@return a new or already existing Symbol with the given value.;Symbol addConstantModule(final String moduleName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_MODULE_TAG, moduleName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,module,name,a,fully,qualified,name,using,dots,of,a,module,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,module,final,string,module,name,return,add,constant,utf8reference,symbol,module,name
SymbolTable -> Symbol addConstantModule(final String moduleName);1537204147;Adds a CONSTANT_Module_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param moduleName a fully qualified name (using dots) of a module._@return a new or already existing Symbol with the given value.;Symbol addConstantModule(final String moduleName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_MODULE_TAG, moduleName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,module,name,a,fully,qualified,name,using,dots,of,a,module,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,module,final,string,module,name,return,add,constant,utf8reference,symbol,module,name
SymbolTable -> Symbol addConstantModule(final String moduleName);1539119582;Adds a CONSTANT_Module_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param moduleName a fully qualified name (using dots) of a module._@return a new or already existing Symbol with the given value.;Symbol addConstantModule(final String moduleName) {_    return addConstantUtf8Reference(Symbol.CONSTANT_MODULE_TAG, moduleName)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,module,name,a,fully,qualified,name,using,dots,of,a,module,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,module,final,string,module,name,return,add,constant,utf8reference,symbol,module,name
SymbolTable -> Symbol addConstantClass(final String value);1531241461;Adds a CONSTANT_Class_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the internal name of a class._@return a new or already existing Symbol with the given value.;Symbol addConstantClass(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_CLASS_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,internal,name,of,a,class,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,class,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> Symbol addConstantClass(final String value);1536664245;Adds a CONSTANT_Class_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the internal name of a class._@return a new or already existing Symbol with the given value.;Symbol addConstantClass(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_CLASS_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,internal,name,of,a,class,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,class,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> Symbol addConstantClass(final String value);1537204147;Adds a CONSTANT_Class_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the internal name of a class._@return a new or already existing Symbol with the given value.;Symbol addConstantClass(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_CLASS_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,internal,name,of,a,class,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,class,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> Symbol addConstantClass(final String value);1539119582;Adds a CONSTANT_Class_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value the internal name of a class._@return a new or already existing Symbol with the given value.;Symbol addConstantClass(final String value) {_    return addConstantUtf8Reference(Symbol.CONSTANT_CLASS_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,internal,name,of,a,class,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,class,final,string,value,return,add,constant,utf8reference,symbol,value
SymbolTable -> private Symbol addConstantLongOrDouble(final int tag, final long value);1537204147;Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantLongOrDouble(final int tag, final long value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    int index = constantPoolCount__    constantPool.putByte(tag).putLong(value)__    constantPoolCount += 2__    return put(new Entry(index, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,long,or,double,final,int,tag,final,long,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,int,index,constant,pool,count,constant,pool,put,byte,tag,put,long,value,constant,pool,count,2,return,put,new,entry,index,tag,value,hash,code
SymbolTable -> private Symbol addConstantLongOrDouble(final int tag, final long value);1539119582;Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table._Does nothing if the constant pool already contains a similar item.__@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}._@param value a long or double._@return a constant pool constant with the given tag and primitive values.;private Symbol addConstantLongOrDouble(final int tag, final long value) {_    int hashCode = hash(tag, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {_        return entry__      }_      entry = entry.next__    }_    int index = constantPoolCount__    constantPool.putByte(tag).putLong(value)__    constantPoolCount += 2__    return put(new Entry(index, tag, value, hashCode))__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,tag,one,of,link,symbol,or,link,symbol,param,value,a,long,or,double,return,a,constant,pool,constant,with,the,given,tag,and,primitive,values;private,symbol,add,constant,long,or,double,final,int,tag,final,long,value,int,hash,code,hash,tag,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,tag,entry,hash,code,hash,code,entry,data,value,return,entry,entry,entry,next,int,index,constant,pool,count,constant,pool,put,byte,tag,put,long,value,constant,pool,count,2,return,put,new,entry,index,tag,value,hash,code
SymbolTable -> void putBootstrapMethods(final ByteVector output);1531241461;Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the_6 attribute header bytes and the num_bootstrap_methods value.__@param output where the JVMS BootstrapMethods attribute must be put.;void putBootstrapMethods(final ByteVector output) {_    if (bootstrapMethods != null) {_      output_          .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS))_          .putInt(bootstrapMethods.length + 2)_          .putShort(bootstrapMethodCount)_          .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__    }_  };puts,this,symbol,table,s,bootstrap,methods,attribute,in,the,given,byte,vector,this,includes,the,6,attribute,header,bytes,and,the,value,param,output,where,the,jvms,bootstrap,methods,attribute,must,be,put;void,put,bootstrap,methods,final,byte,vector,output,if,bootstrap,methods,null,output,put,short,add,constant,utf8,constants,put,int,bootstrap,methods,length,2,put,short,bootstrap,method,count,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length
SymbolTable -> void putBootstrapMethods(final ByteVector output);1536664245;Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the_6 attribute header bytes and the num_bootstrap_methods value.__@param output where the JVMS BootstrapMethods attribute must be put.;void putBootstrapMethods(final ByteVector output) {_    if (bootstrapMethods != null) {_      output_          .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS))_          .putInt(bootstrapMethods.length + 2)_          .putShort(bootstrapMethodCount)_          .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__    }_  };puts,this,symbol,table,s,bootstrap,methods,attribute,in,the,given,byte,vector,this,includes,the,6,attribute,header,bytes,and,the,value,param,output,where,the,jvms,bootstrap,methods,attribute,must,be,put;void,put,bootstrap,methods,final,byte,vector,output,if,bootstrap,methods,null,output,put,short,add,constant,utf8,constants,put,int,bootstrap,methods,length,2,put,short,bootstrap,method,count,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length
SymbolTable -> void putBootstrapMethods(final ByteVector output);1537204147;Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the_6 attribute header bytes and the num_bootstrap_methods value.__@param output where the JVMS BootstrapMethods attribute must be put.;void putBootstrapMethods(final ByteVector output) {_    if (bootstrapMethods != null) {_      output_          .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS))_          .putInt(bootstrapMethods.length + 2)_          .putShort(bootstrapMethodCount)_          .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__    }_  };puts,this,symbol,table,s,bootstrap,methods,attribute,in,the,given,byte,vector,this,includes,the,6,attribute,header,bytes,and,the,value,param,output,where,the,jvms,bootstrap,methods,attribute,must,be,put;void,put,bootstrap,methods,final,byte,vector,output,if,bootstrap,methods,null,output,put,short,add,constant,utf8,constants,put,int,bootstrap,methods,length,2,put,short,bootstrap,method,count,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length
SymbolTable -> void putBootstrapMethods(final ByteVector output);1539119582;Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the_6 attribute header bytes and the num_bootstrap_methods value.__@param output where the JVMS BootstrapMethods attribute must be put.;void putBootstrapMethods(final ByteVector output) {_    if (bootstrapMethods != null) {_      output_          .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS))_          .putInt(bootstrapMethods.length + 2)_          .putShort(bootstrapMethodCount)_          .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__    }_  };puts,this,symbol,table,s,bootstrap,methods,attribute,in,the,given,byte,vector,this,includes,the,6,attribute,header,bytes,and,the,value,param,output,where,the,jvms,bootstrap,methods,attribute,must,be,put;void,put,bootstrap,methods,final,byte,vector,output,if,bootstrap,methods,null,output,put,short,add,constant,utf8,constants,put,int,bootstrap,methods,length,2,put,short,bootstrap,method,count,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length
SymbolTable -> private void addConstantInteger(final int index, final int tag, final int value);1531241461;Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol_table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float.;private void addConstantInteger(final int index, final int tag, final int value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float;private,void,add,constant,integer,final,int,index,final,int,tag,final,int,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantInteger(final int index, final int tag, final int value);1536664245;Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol_table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}._@param value an int or float.;private void addConstantInteger(final int index, final int tag, final int value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,or,link,symbol,param,value,an,int,or,float;private,void,add,constant,integer,final,int,index,final,int,tag,final,int,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantMethodHandle(       final int index,       final int referenceKind,       final String owner,       final String name,       final String descriptor);1531241461;Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMethodHandle(_      final int index,_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,method,handle,final,int,index,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,add,new,entry,index,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> private void addConstantMethodHandle(       final int index,       final int referenceKind,       final String owner,       final String name,       final String descriptor);1536664245;Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMethodHandle(_      final int index,_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,method,handle,final,int,index,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,add,new,entry,index,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> private void addConstantMethodHandle(       final int index,       final int referenceKind,       final String owner,       final String name,       final String descriptor);1537204147;Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMethodHandle(_      final int index,_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,method,handle,final,int,index,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,add,new,entry,index,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> private void addConstantMethodHandle(       final int index,       final int referenceKind,       final String owner,       final String name,       final String descriptor);1539119582;Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link_Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link_Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link_Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of a class of interface._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMethodHandle(_      final int index,_      final int referenceKind,_      final String owner,_      final String name,_      final String descriptor) {_    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG__    int hashCode = hash(tag, owner, name, descriptor, referenceKind)__    add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode))__  };adds,a,new,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,reference,kind,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,a,class,of,interface,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,method,handle,final,int,index,final,int,reference,kind,final,string,owner,final,string,name,final,string,descriptor,final,int,tag,symbol,int,hash,code,hash,tag,owner,name,descriptor,reference,kind,add,new,entry,index,tag,owner,name,descriptor,reference,kind,hash,code
SymbolTable -> private void addConstantUtf8Reference(final int index, final int tag, final String value);1531241461;Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag.;private void addConstantUtf8Reference(final int index, final int tag, final String value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag;private,void,add,constant,utf8reference,final,int,index,final,int,tag,final,string,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantUtf8Reference(final int index, final int tag, final String value);1536664245;Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag.;private void addConstantUtf8Reference(final int index, final int tag, final String value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag;private,void,add,constant,utf8reference,final,int,index,final,int,tag,final,string,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantUtf8Reference(final int index, final int tag, final String value);1537204147;Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag.;private void addConstantUtf8Reference(final int index, final int tag, final String value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag;private,void,add,constant,utf8reference,final,int,index,final,int,tag,final,string,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> private void addConstantUtf8Reference(final int index, final int tag, final String value);1539119582;Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,_CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link_Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link_Symbol#CONSTANT_PACKAGE_TAG}._@param value an internal class name, an arbitrary string, a method descriptor, a module or a_package name, depending on tag.;private void addConstantUtf8Reference(final int index, final int tag, final String value) {_    add(new Entry(index, tag, value, hash(tag, value)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,link,symbol,link,symbol,or,link,symbol,param,value,an,internal,class,name,an,arbitrary,string,a,method,descriptor,a,module,or,a,package,name,depending,on,tag;private,void,add,constant,utf8reference,final,int,index,final,int,tag,final,string,value,add,new,entry,index,tag,value,hash,tag,value
SymbolTable -> int getConstantPoolLength();1531241461;@return the length in bytes of this symbol table's constant_pool array.;int getConstantPoolLength() {_    return constantPool.length__  };return,the,length,in,bytes,of,this,symbol,table,s,array;int,get,constant,pool,length,return,constant,pool,length
SymbolTable -> int getConstantPoolLength();1536664245;@return the length in bytes of this symbol table's constant_pool array.;int getConstantPoolLength() {_    return constantPool.length__  };return,the,length,in,bytes,of,this,symbol,table,s,array;int,get,constant,pool,length,return,constant,pool,length
SymbolTable -> int getConstantPoolLength();1537204147;Returns the length in bytes of this symbol table's constant_pool array.__@return the length in bytes of this symbol table's constant_pool array.;int getConstantPoolLength() {_    return constantPool.length__  };returns,the,length,in,bytes,of,this,symbol,table,s,array,return,the,length,in,bytes,of,this,symbol,table,s,array;int,get,constant,pool,length,return,constant,pool,length
SymbolTable -> int getConstantPoolLength();1539119582;Returns the length in bytes of this symbol table's constant_pool array.__@return the length in bytes of this symbol table's constant_pool array.;int getConstantPoolLength() {_    return constantPool.length__  };returns,the,length,in,bytes,of,this,symbol,table,s,array,return,the,length,in,bytes,of,this,symbol,table,s,array;int,get,constant,pool,length,return,constant,pool,length
SymbolTable -> private void addConstantMemberReference(       final int index,       final int tag,       final String owner,       final String name,       final String descriptor);1531241461;Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info_to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMemberReference(_      final int index,_      final int tag,_      final String owner,_      final String name,_      final String descriptor) {_    add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,member,reference,final,int,index,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,add,new,entry,index,tag,owner,name,descriptor,0,hash,tag,owner,name,descriptor
SymbolTable -> private void addConstantMemberReference(       final int index,       final int tag,       final String owner,       final String name,       final String descriptor);1536664245;Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info_to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMemberReference(_      final int index,_      final int tag,_      final String owner,_      final String name,_      final String descriptor) {_    add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,member,reference,final,int,index,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,add,new,entry,index,tag,owner,name,descriptor,0,hash,tag,owner,name,descriptor
SymbolTable -> private void addConstantMemberReference(       final int index,       final int tag,       final String owner,       final String name,       final String descriptor);1537204147;Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info_to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMemberReference(_      final int index,_      final int tag,_      final String owner,_      final String name,_      final String descriptor) {_    add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,member,reference,final,int,index,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,add,new,entry,index,tag,owner,name,descriptor,0,hash,tag,owner,name,descriptor
SymbolTable -> private void addConstantMemberReference(       final int index,       final int tag,       final String owner,       final String name,       final String descriptor);1539119582;Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info_to the constant pool of this symbol table.__@param index the constant pool index of the new Symbol._@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}_or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}._@param owner the internal name of a class._@param name a field or method name._@param descriptor a field or method descriptor.;private void addConstantMemberReference(_      final int index,_      final int tag,_      final String owner,_      final String name,_      final String descriptor) {_    add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor)))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,index,the,constant,pool,index,of,the,new,symbol,param,tag,one,of,link,symbol,link,symbol,or,link,symbol,param,owner,the,internal,name,of,a,class,param,name,a,field,or,method,name,param,descriptor,a,field,or,method,descriptor;private,void,add,constant,member,reference,final,int,index,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,add,new,entry,index,tag,owner,name,descriptor,0,hash,tag,owner,name,descriptor
SymbolTable -> private int addType(final Entry entry);1531241461;Adds the given type Symbol to {@link #typeTable}.__@param entry a {@link Symbol#TYPE_TAG} or {@link Symbol#UNINITIALIZED_TYPE_TAG} type symbol._The index of this Symbol must be equal to the current value of {@link #typeCount}._@return the index in {@link #typeTable} where the given type was added, which is also equal to_entry's index by hypothesis.;private int addType(final Entry entry) {_    if (typeTable == null) {_      typeTable = new Entry[16]__    }_    if (typeCount == typeTable.length) {_      Entry[] newTypeTable = new Entry[2 * typeTable.length]__      System.arraycopy(typeTable, 0, newTypeTable, 0, typeTable.length)__      typeTable = newTypeTable__    }_    typeTable[typeCount++] = entry__    return put(entry).index__  };adds,the,given,type,symbol,to,link,type,table,param,entry,a,link,symbol,or,link,symbol,type,symbol,the,index,of,this,symbol,must,be,equal,to,the,current,value,of,link,type,count,return,the,index,in,link,type,table,where,the,given,type,was,added,which,is,also,equal,to,entry,s,index,by,hypothesis;private,int,add,type,final,entry,entry,if,type,table,null,type,table,new,entry,16,if,type,count,type,table,length,entry,new,type,table,new,entry,2,type,table,length,system,arraycopy,type,table,0,new,type,table,0,type,table,length,type,table,new,type,table,type,table,type,count,entry,return,put,entry,index
SymbolTable -> private int addType(final Entry entry);1536664245;Adds the given type Symbol to {@link #typeTable}.__@param entry a {@link Symbol#TYPE_TAG} or {@link Symbol#UNINITIALIZED_TYPE_TAG} type symbol._The index of this Symbol must be equal to the current value of {@link #typeCount}._@return the index in {@link #typeTable} where the given type was added, which is also equal to_entry's index by hypothesis.;private int addType(final Entry entry) {_    if (typeTable == null) {_      typeTable = new Entry[16]__    }_    if (typeCount == typeTable.length) {_      Entry[] newTypeTable = new Entry[2 * typeTable.length]__      System.arraycopy(typeTable, 0, newTypeTable, 0, typeTable.length)__      typeTable = newTypeTable__    }_    typeTable[typeCount++] = entry__    return put(entry).index__  };adds,the,given,type,symbol,to,link,type,table,param,entry,a,link,symbol,or,link,symbol,type,symbol,the,index,of,this,symbol,must,be,equal,to,the,current,value,of,link,type,count,return,the,index,in,link,type,table,where,the,given,type,was,added,which,is,also,equal,to,entry,s,index,by,hypothesis;private,int,add,type,final,entry,entry,if,type,table,null,type,table,new,entry,16,if,type,count,type,table,length,entry,new,type,table,new,entry,2,type,table,length,system,arraycopy,type,table,0,new,type,table,0,type,table,length,type,table,new,type,table,type,table,type,count,entry,return,put,entry,index
SymbolTable -> Symbol addConstantMethodref(       final String owner, final String name, final String descriptor, final boolean isInterface);1531241461;Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this_symbol table. Does nothing if the constant pool already contains a similar item.__@param owner the internal name of a class._@param name a method name._@param descriptor a method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodref(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG__    return addConstantMemberReference(tag, owner, name, descriptor)__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,method,name,param,descriptor,a,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,methodref,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,int,tag,is,interface,symbol,symbol,return,add,constant,member,reference,tag,owner,name,descriptor
SymbolTable -> Symbol addConstantMethodref(       final String owner, final String name, final String descriptor, final boolean isInterface);1536664245;Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this_symbol table. Does nothing if the constant pool already contains a similar item.__@param owner the internal name of a class._@param name a method name._@param descriptor a method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodref(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG__    return addConstantMemberReference(tag, owner, name, descriptor)__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,method,name,param,descriptor,a,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,methodref,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,int,tag,is,interface,symbol,symbol,return,add,constant,member,reference,tag,owner,name,descriptor
SymbolTable -> Symbol addConstantMethodref(       final String owner, final String name, final String descriptor, final boolean isInterface);1537204147;Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this_symbol table. Does nothing if the constant pool already contains a similar item.__@param owner the internal name of a class._@param name a method name._@param descriptor a method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodref(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG__    return addConstantMemberReference(tag, owner, name, descriptor)__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,method,name,param,descriptor,a,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,methodref,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,int,tag,is,interface,symbol,symbol,return,add,constant,member,reference,tag,owner,name,descriptor
SymbolTable -> Symbol addConstantMethodref(       final String owner, final String name, final String descriptor, final boolean isInterface);1539119582;Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this_symbol table. Does nothing if the constant pool already contains a similar item.__@param owner the internal name of a class._@param name a method name._@param descriptor a method descriptor._@param isInterface whether owner is an interface or not._@return a new or already existing Symbol with the given value.;Symbol addConstantMethodref(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG__    return addConstantMemberReference(tag, owner, name, descriptor)__  };adds,a,or,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,a,class,param,name,a,method,name,param,descriptor,a,method,descriptor,param,is,interface,whether,owner,is,an,interface,or,not,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,methodref,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,int,tag,is,interface,symbol,symbol,return,add,constant,member,reference,tag,owner,name,descriptor
SymbolTable -> Symbol addConstantInteger(final int value);1531241461;Adds a CONSTANT_Integer_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value an int._@return a new or already existing Symbol with the given value.;Symbol addConstantInteger(final int value) {_    return addConstantInteger(Symbol.CONSTANT_INTEGER_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,an,int,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,integer,final,int,value,return,add,constant,integer,symbol,value
SymbolTable -> Symbol addConstantInteger(final int value);1536664245;Adds a CONSTANT_Integer_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value an int._@return a new or already existing Symbol with the given value.;Symbol addConstantInteger(final int value) {_    return addConstantInteger(Symbol.CONSTANT_INTEGER_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,an,int,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,integer,final,int,value,return,add,constant,integer,symbol,value
SymbolTable -> Symbol addConstantInteger(final int value);1537204147;Adds a CONSTANT_Integer_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value an int._@return a new or already existing Symbol with the given value.;Symbol addConstantInteger(final int value) {_    return addConstantIntegerOrFloat(Symbol.CONSTANT_INTEGER_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,an,int,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,integer,final,int,value,return,add,constant,integer,or,float,symbol,value
SymbolTable -> Symbol addConstantInteger(final int value);1539119582;Adds a CONSTANT_Integer_info to the constant pool of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param value an int._@return a new or already existing Symbol with the given value.;Symbol addConstantInteger(final int value) {_    return addConstantIntegerOrFloat(Symbol.CONSTANT_INTEGER_TAG, value)__  };adds,a,to,the,constant,pool,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,an,int,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,integer,final,int,value,return,add,constant,integer,or,float,symbol,value
SymbolTable -> int addType(final String value);1531241461;Adds a type in the type table of this symbol table. Does nothing if the type table already_contains a similar type.__@param value an internal class name._@return the index of a new or already existing type Symbol with the given value.;int addType(final String value) {_    int hashCode = hash(Symbol.TYPE_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.TYPE_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addType(new Entry(typeCount, Symbol.TYPE_TAG, value, hashCode))__  };adds,a,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,type,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,new,entry,type,count,symbol,value,hash,code
SymbolTable -> int addType(final String value);1536664245;Adds a type in the type table of this symbol table. Does nothing if the type table already_contains a similar type.__@param value an internal class name._@return the index of a new or already existing type Symbol with the given value.;int addType(final String value) {_    int hashCode = hash(Symbol.TYPE_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.TYPE_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addType(new Entry(typeCount, Symbol.TYPE_TAG, value, hashCode))__  };adds,a,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,type,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,new,entry,type,count,symbol,value,hash,code
SymbolTable -> int addType(final String value);1537204147;Adds a type in the type table of this symbol table. Does nothing if the type table already_contains a similar type.__@param value an internal class name._@return the index of a new or already existing type Symbol with the given value.;int addType(final String value) {_    int hashCode = hash(Symbol.TYPE_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.TYPE_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addTypeInternal(new Entry(typeCount, Symbol.TYPE_TAG, value, hashCode))__  };adds,a,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,type,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,internal,new,entry,type,count,symbol,value,hash,code
SymbolTable -> int addType(final String value);1539119582;Adds a type in the type table of this symbol table. Does nothing if the type table already_contains a similar type.__@param value an internal class name._@return the index of a new or already existing type Symbol with the given value.;int addType(final String value) {_    int hashCode = hash(Symbol.TYPE_TAG, value)__    Entry entry = get(hashCode)__    while (entry != null) {_      if (entry.tag == Symbol.TYPE_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {_        return entry.index__      }_      entry = entry.next__    }_    return addTypeInternal(new Entry(typeCount, Symbol.TYPE_TAG, value, hashCode))__  };adds,a,type,in,the,type,table,of,this,symbol,table,does,nothing,if,the,type,table,already,contains,a,similar,type,param,value,an,internal,class,name,return,the,index,of,a,new,or,already,existing,type,symbol,with,the,given,value;int,add,type,final,string,value,int,hash,code,hash,symbol,value,entry,entry,get,hash,code,while,entry,null,if,entry,tag,symbol,entry,hash,code,hash,code,entry,value,equals,value,return,entry,index,entry,entry,next,return,add,type,internal,new,entry,type,count,symbol,value,hash,code
SymbolTable -> String getClassName();1531241461;@return the internal name of the class to which this symbol table belongs.;String getClassName() {_    return className__  };return,the,internal,name,of,the,class,to,which,this,symbol,table,belongs;string,get,class,name,return,class,name
SymbolTable -> String getClassName();1536664245;@return the internal name of the class to which this symbol table belongs.;String getClassName() {_    return className__  };return,the,internal,name,of,the,class,to,which,this,symbol,table,belongs;string,get,class,name,return,class,name
SymbolTable -> String getClassName();1537204147;Returns the internal name of the class to which this symbol table belongs.__@return the internal name of the class to which this symbol table belongs.;String getClassName() {_    return className__  };returns,the,internal,name,of,the,class,to,which,this,symbol,table,belongs,return,the,internal,name,of,the,class,to,which,this,symbol,table,belongs;string,get,class,name,return,class,name
SymbolTable -> String getClassName();1539119582;Returns the internal name of the class to which this symbol table belongs.__@return the internal name of the class to which this symbol table belongs.;String getClassName() {_    return className__  };returns,the,internal,name,of,the,class,to,which,this,symbol,table,belongs,return,the,internal,name,of,the,class,to,which,this,symbol,table,belongs;string,get,class,name,return,class,name
SymbolTable -> void putConstantPool(final ByteVector output);1531241461;Puts this symbol table's constant_pool array in the given ByteVector, preceded by the_constant_pool_count value.__@param output where the JVMS ClassFile's constant_pool array must be put.;void putConstantPool(final ByteVector output) {_    output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length)__  };puts,this,symbol,table,s,array,in,the,given,byte,vector,preceded,by,the,value,param,output,where,the,jvms,class,file,s,array,must,be,put;void,put,constant,pool,final,byte,vector,output,output,put,short,constant,pool,count,put,byte,array,constant,pool,data,0,constant,pool,length
SymbolTable -> void putConstantPool(final ByteVector output);1536664245;Puts this symbol table's constant_pool array in the given ByteVector, preceded by the_constant_pool_count value.__@param output where the JVMS ClassFile's constant_pool array must be put.;void putConstantPool(final ByteVector output) {_    output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length)__  };puts,this,symbol,table,s,array,in,the,given,byte,vector,preceded,by,the,value,param,output,where,the,jvms,class,file,s,array,must,be,put;void,put,constant,pool,final,byte,vector,output,output,put,short,constant,pool,count,put,byte,array,constant,pool,data,0,constant,pool,length
SymbolTable -> void putConstantPool(final ByteVector output);1537204147;Puts this symbol table's constant_pool array in the given ByteVector, preceded by the_constant_pool_count value.__@param output where the JVMS ClassFile's constant_pool array must be put.;void putConstantPool(final ByteVector output) {_    output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length)__  };puts,this,symbol,table,s,array,in,the,given,byte,vector,preceded,by,the,value,param,output,where,the,jvms,class,file,s,array,must,be,put;void,put,constant,pool,final,byte,vector,output,output,put,short,constant,pool,count,put,byte,array,constant,pool,data,0,constant,pool,length
SymbolTable -> void putConstantPool(final ByteVector output);1539119582;Puts this symbol table's constant_pool array in the given ByteVector, preceded by the_constant_pool_count value.__@param output where the JVMS ClassFile's constant_pool array must be put.;void putConstantPool(final ByteVector output) {_    output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length)__  };puts,this,symbol,table,s,array,in,the,given,byte,vector,preceded,by,the,value,param,output,where,the,jvms,class,file,s,array,must,be,put;void,put,constant,pool,final,byte,vector,output,output,put,short,constant,pool,count,put,byte,array,constant,pool,data,0,constant,pool,length
SymbolTable -> Symbol addConstantInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1531241461;Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the_related bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a method name._@param descriptor a method descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,method,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> Symbol addConstantInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1536664245;Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the_related bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a method name._@param descriptor a method descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,method,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> Symbol addConstantInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1537204147;Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the_related bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a method name._@param descriptor a method descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,method,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> Symbol addConstantInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1539119582;Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the_related bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the_constant pool already contains a similar item.__@param name a method name._@param descriptor a method descriptor._@param bootstrapMethodHandle a bootstrap method handle._@param bootstrapMethodArguments the bootstrap method arguments._@return a new or already existing Symbol with the given value.;Symbol addConstantInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments)__    return addConstantDynamicOrInvokeDynamicReference(_        Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index)__  };adds,a,to,the,constant,pool,of,this,symbol,table,also,adds,the,related,bootstrap,method,to,the,bootstrap,methods,of,this,symbol,table,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,method,name,param,descriptor,a,method,descriptor,param,bootstrap,method,handle,a,bootstrap,method,handle,param,bootstrap,method,arguments,the,bootstrap,method,arguments,return,a,new,or,already,existing,symbol,with,the,given,value;symbol,add,constant,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,symbol,bootstrap,method,add,bootstrap,method,bootstrap,method,handle,bootstrap,method,arguments,return,add,constant,dynamic,or,invoke,dynamic,reference,symbol,name,descriptor,bootstrap,method,index
SymbolTable -> private void addConstantDynamicOrInvokeDynamicReference(       final int tag,       final int index,       final String name,       final String descriptor,       final int bootstrapMethodIndex);1531241461;Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this_symbol table.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param index the constant pool index of the new Symbol._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.;private void addConstantDynamicOrInvokeDynamicReference(_      final int tag,_      final int index,_      final String name,_      final String descriptor,_      final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,tag,one,of,link,symbol,or,link,symbol,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute;private,void,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,int,index,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,add,new,entry,index,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> private void addConstantDynamicOrInvokeDynamicReference(       final int tag,       final int index,       final String name,       final String descriptor,       final int bootstrapMethodIndex);1536664245;Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this_symbol table.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param index the constant pool index of the new Symbol._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.;private void addConstantDynamicOrInvokeDynamicReference(_      final int tag,_      final int index,_      final String name,_      final String descriptor,_      final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,tag,one,of,link,symbol,or,link,symbol,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute;private,void,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,int,index,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,add,new,entry,index,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> private void addConstantDynamicOrInvokeDynamicReference(       final int tag,       final int index,       final String name,       final String descriptor,       final int bootstrapMethodIndex);1537204147;Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this_symbol table.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param index the constant pool index of the new Symbol._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.;private void addConstantDynamicOrInvokeDynamicReference(_      final int tag,_      final int index,_      final String name,_      final String descriptor,_      final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,tag,one,of,link,symbol,or,link,symbol,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute;private,void,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,int,index,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,add,new,entry,index,tag,null,name,descriptor,bootstrap,method,index,hash,code
SymbolTable -> private void addConstantDynamicOrInvokeDynamicReference(       final int tag,       final int index,       final String name,       final String descriptor,       final int bootstrapMethodIndex);1539119582;Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this_symbol table.__@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link_Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}._@param index the constant pool index of the new Symbol._@param name a method name._@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for_CONSTANT_INVOKE_DYNAMIC_TAG._@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.;private void addConstantDynamicOrInvokeDynamicReference(_      final int tag,_      final int index,_      final String name,_      final String descriptor,_      final int bootstrapMethodIndex) {_    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex)__    add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode))__  };adds,a,new,or,to,the,constant,pool,of,this,symbol,table,param,tag,one,of,link,symbol,or,link,symbol,param,index,the,constant,pool,index,of,the,new,symbol,param,name,a,method,name,param,descriptor,a,field,descriptor,for,or,a,method,descriptor,for,param,bootstrap,method,index,the,index,of,a,bootstrap,method,in,the,bootstrap,methods,attribute;private,void,add,constant,dynamic,or,invoke,dynamic,reference,final,int,tag,final,int,index,final,string,name,final,string,descriptor,final,int,bootstrap,method,index,int,hash,code,hash,tag,name,descriptor,bootstrap,method,index,add,new,entry,index,tag,null,name,descriptor,bootstrap,method,index,hash,code
