# id;timestamp;commentText;codeText;commentWords;codeWords
Assert -> public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier);1495868221;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,nullable,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier);1496837955;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,nullable,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier);1530174524;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,nullable,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier);1495868221;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,nullable,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier);1496837955;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,nullable,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier);1530174524;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,nullable,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1368713436;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1385412762;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1426267150;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1429034756;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in ":" or "." so that the generated message looks OK when_appended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1456332614;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in ":" or "." so that the generated message looks OK when_appended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1460400578;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in ":" or "." so that the generated message looks OK when_appended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1468334463;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Processing Foo:")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			isInstanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,processing,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,is,instance,check,failed,type,obj,message
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1485810955;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Processing Foo:")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,processing,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1485851275;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Processing Foo:")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,processing,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1487247200;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending object's_type will be appended. In any other case, a ":" with a space and the name_of the offending object's type will be appended._@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,foo,expected,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,object,s,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,object,s,type,will,be,appended,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1487255527;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending object's_type will be appended. In any other case, a ":" with a space and the name_of the offending object's type will be appended._@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,foo,expected,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,object,s,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,object,s,type,will,be,appended,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void isInstanceOf(Class<?> type, Object obj, String message);1495868221;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending object's_type will be appended. In any other case, a ":" with a space and the name_of the offending object's type will be appended._@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,foo,expected,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,object,s,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,object,s,type,will,be,appended,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void notNull(@Nullable Object object, Supplier<String> messageSupplier);1495868221;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,nullable,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(@Nullable Object object, Supplier<String> messageSupplier);1496837955;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,nullable,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(@Nullable Object object, Supplier<String> messageSupplier);1530174524;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,nullable,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(Object[] array, String message);1328020251;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a <code>null</code> element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (int i = 0_ i < array.length_ i++) {_				if (array[i] == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,code,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,int,i,0,i,array,length,i,if,array,i,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1338032393;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a <code>null</code> element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (int i = 0_ i < array.length_ i++) {_				if (array[i] == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,code,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,int,i,0,i,array,length,i,if,array,i,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1356735495;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (int i = 0_ i < array.length_ i++) {_				if (array[i] == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,int,i,0,i,array,length,i,if,array,i,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1362408075;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (int i = 0_ i < array.length_ i++) {_				if (array[i] == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,int,i,0,i,array,length,i,if,array,i,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1368713436;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1385412762;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1426267150;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1429034756;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1456332614;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1460400578;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must have non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,have,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1468334463;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1485810955;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1485851275;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1487247200;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array, String message);1487255527;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> @Deprecated 	public static void notEmpty(Object[] array);1485851275;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)};@Deprecated_	public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,object,string;deprecated,public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(Object[] array);1487247200;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)};@Deprecated_	public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,object,string;deprecated,public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(Object[] array);1487255527;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)};@Deprecated_	public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,object,string;deprecated,public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier);1496837955;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details._@throws IllegalArgumentException if the object is not an instance of type_@since 5.0;public static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,instance,of,class,object,string,for,details,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,since,5,0;public,static,void,is,instance,of,class,type,nullable,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier);1530174524;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details._@throws IllegalArgumentException if the object is not an instance of type_@since 5.0;public static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,instance,of,class,object,string,for,details,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,since,5,0;public,static,void,is,instance,of,class,type,nullable,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> clazz, Object obj);1368713436;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class<?> clazz, Object obj);1385412762;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class<?> clazz, Object obj);1426267150;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class<?> clazz, Object obj);1429034756;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class<?> clazz, Object obj);1456332614;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class<?> clazz, Object obj);1460400578;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class<?> clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void notEmpty(@Nullable Collection<?> collection, String message);1495868221;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(@Nullable Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,nullable,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Collection<?> collection, String message);1496837955;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(@Nullable Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,nullable,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Collection<?> collection, String message);1530174524;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(@Nullable Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,nullable,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring);1328020251;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1338032393;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1356735495;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1362408075;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1368713436;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1385412762;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1426267150;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1429034756;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1456332614;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1460400578;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				"[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring);1468334463;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void hasLength(String text, Supplier<String> messageSupplier);1468334463;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(String text, Supplier<String> messageSupplier);1485810955;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty_@since 5.0;public static void hasLength(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0;public,static,void,has,length,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(String text, Supplier<String> messageSupplier);1485851275;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty_@since 5.0;public static void hasLength(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0;public,static,void,has,length,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(String text, Supplier<String> messageSupplier);1487247200;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty_@since 5.0;public static void hasLength(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0;public,static,void,has,length,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(String text, Supplier<String> messageSupplier);1487255527;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty_@since 5.0;public static void hasLength(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0;public,static,void,has,length,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void state(boolean expression);1485851275;@deprecated as of 4.3.7, in favor of {@link #state(boolean, String)};@Deprecated_	public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,state,boolean,string;deprecated,public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> @Deprecated 	public static void state(boolean expression);1487247200;@deprecated as of 4.3.7, in favor of {@link #state(boolean, String)};@Deprecated_	public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,state,boolean,string;deprecated,public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> @Deprecated 	public static void state(boolean expression);1487255527;@deprecated as of 4.3.7, in favor of {@link #state(boolean, String)};@Deprecated_	public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,state,boolean,string;deprecated,public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> @Deprecated 	public static void state(boolean expression);1495868221;@deprecated as of 4.3.7, in favor of {@link #state(boolean, String)};@Deprecated_	public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,state,boolean,string;deprecated,public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> @Deprecated 	public static void state(boolean expression);1496837955;@deprecated as of 4.3.7, in favor of {@link #state(boolean, String)};@Deprecated_	public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,state,boolean,string;deprecated,public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> @Deprecated 	public static void state(boolean expression);1530174524;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._@deprecated as of 4.3.7, in favor of {@link #state(boolean, String)};@Deprecated_	public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,deprecated,as,of,4,3,7,in,favor,of,link,state,boolean,string;deprecated,public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> @Deprecated 	public static void hasLength(@Nullable String text);1495868221;@deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)};@Deprecated_	public static void hasLength(@Nullable String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,length,string,string;deprecated,public,static,void,has,length,nullable,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> @Deprecated 	public static void hasLength(@Nullable String text);1496837955;@deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)};@Deprecated_	public static void hasLength(@Nullable String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,length,string,string;deprecated,public,static,void,has,length,nullable,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> @Deprecated 	public static void hasLength(@Nullable String text);1530174524;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._@deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)};@Deprecated_	public static void hasLength(@Nullable String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,deprecated,as,of,4,3,7,in,favor,of,link,has,length,string,string;deprecated,public,static,void,has,length,nullable,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void isNull(Object object, Supplier<String> messageSupplier);1468334463;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(Object object, Supplier<String> messageSupplier);1485810955;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(Object object, Supplier<String> messageSupplier);1485851275;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(Object object, Supplier<String> messageSupplier);1487247200;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(Object object, Supplier<String> messageSupplier);1487255527;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void notNull(Object object);1485851275;@deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)};@Deprecated_	public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,null,object,string;deprecated,public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> @Deprecated 	public static void notNull(Object object);1487247200;@deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)};@Deprecated_	public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,null,object,string;deprecated,public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> @Deprecated 	public static void notNull(Object object);1487255527;@deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)};@Deprecated_	public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,null,object,string;deprecated,public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void isNull(Object object, String message);1328020251;Assert that an object is <code>null</code> ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not <code>null</code>;public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,code,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,code;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1338032393;Assert that an object is <code>null</code> ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not <code>null</code>;public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,code,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,code;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1356735495;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1362408075;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1368713436;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1385412762;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1426267150;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1429034756;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1456332614;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1460400578;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1468334463;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1485810955;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1485851275;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1487247200;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(Object object, String message);1487255527;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isInstanceOf(Class<?> type, Object obj);1468334463;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,is,instance,of,type,obj
Assert -> public static void isInstanceOf(Class<?> type, Object obj);1485810955;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,is,instance,of,type,obj
Assert -> public static void isInstanceOf(Class<?> type, Object obj);1485851275;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,is,instance,of,type,obj
Assert -> public static void isInstanceOf(Class<?> type, Object obj);1487247200;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,object,obj,is,instance,of,type,obj
Assert -> public static void isInstanceOf(Class<?> type, Object obj);1487255527;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,object,obj,is,instance,of,type,obj
Assert -> public static void isInstanceOf(Class<?> type, Object obj);1495868221;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,object,obj,is,instance,of,type,obj
Assert -> public static void noNullElements(Object[] array, Supplier<String> messageSupplier);1468334463;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(Object[] array, Supplier<String> messageSupplier);1485810955;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(Object[] array, Supplier<String> messageSupplier);1485851275;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(Object[] array, Supplier<String> messageSupplier);1487247200;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(Object[] array, Supplier<String> messageSupplier);1487255527;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void isNull(Object object);1485851275;@deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)};@Deprecated_	public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,null,object,string;deprecated,public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> @Deprecated 	public static void isNull(Object object);1487247200;@deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)};@Deprecated_	public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,null,object,string;deprecated,public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> @Deprecated 	public static void isNull(Object object);1487255527;@deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)};@Deprecated_	public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,null,object,string;deprecated,public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier);1495868221;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,nullable,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier);1496837955;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,nullable,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier);1530174524;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,nullable,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void notEmpty(@Nullable Map<?, ?> map);1495868221;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)};@Deprecated_	public static void notEmpty(@Nullable Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,map,string;deprecated,public,static,void,not,empty,nullable,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void notEmpty(@Nullable Map<?, ?> map);1496837955;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)};@Deprecated_	public static void notEmpty(@Nullable Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,map,string;deprecated,public,static,void,not,empty,nullable,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void notEmpty(@Nullable Map<?, ?> map);1530174524;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._@deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)};@Deprecated_	public static void notEmpty(@Nullable Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,deprecated,as,of,4,3,7,in,favor,of,link,not,empty,map,string;deprecated,public,static,void,not,empty,nullable,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void noNullElements(Object[] array);1485851275;@deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)};@Deprecated_	public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};deprecated,as,of,4,3,7,in,favor,of,link,no,null,elements,object,string;deprecated,public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> @Deprecated 	public static void noNullElements(Object[] array);1487247200;@deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)};@Deprecated_	public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};deprecated,as,of,4,3,7,in,favor,of,link,no,null,elements,object,string;deprecated,public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> @Deprecated 	public static void noNullElements(Object[] array);1487255527;@deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)};@Deprecated_	public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};deprecated,as,of,4,3,7,in,favor,of,link,no,null,elements,object,string;deprecated,public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void hasLength(String text, String message);1328020251;Assert that the given String is not empty_ that is,_it must not be <code>null</code> and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,code,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1338032393;Assert that the given String is not empty_ that is,_it must not be <code>null</code> and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,code,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1356735495;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1362408075;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1368713436;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1385412762;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1426267150;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1429034756;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1456332614;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1460400578;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1468334463;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1485810955;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1485851275;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1487247200;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text, String message);1487255527;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map map, String message);1328020251;Assert that a Map has entries_ that is, it must not be <code>null</code>_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is <code>null</code> or has no entries;public static void notEmpty(Map map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,code,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map map, String message);1338032393;Assert that a Map has entries_ that is, it must not be <code>null</code>_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is <code>null</code> or has no entries;public static void notEmpty(Map map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,code,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map map, String message);1356735495;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map map, String message);1362408075;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map map, String message);1368713436;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection);1385412762;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection<?> collection);1426267150;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection<?> collection);1429034756;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection<?> collection);1456332614;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection<?> collection);1460400578;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection<?> collection);1468334463;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(@Nullable Map<?, ?> map, String message);1495868221;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(@Nullable Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,nullable,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Map<?, ?> map, String message);1496837955;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(@Nullable Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,nullable,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Map<?, ?> map, String message);1530174524;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(@Nullable Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,nullable,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(String text);1328020251;Assert that the given String is not empty_ that is,_it must not be <code>null</code> and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,code,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1338032393;Assert that the given String is not empty_ that is,_it must not be <code>null</code> and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,code,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1356735495;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1362408075;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1368713436;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1385412762;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1426267150;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1429034756;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1456332614;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1460400578;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void hasLength(String text);1468334463;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name)_</pre>_@param text the String to check_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,pre,param,text,the,string,to,check,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1468334463;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1485810955;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1485851275;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1487247200;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1487255527;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1495868221;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1496837955;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> public static void state(boolean expression, Supplier<String> messageSupplier);1530174524;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">_Assert.state(id == null,_() -&gt_ "ID for " + entity.getName() + " must not already be initialized")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalStateException if {@code expression} is {@code false}_@since 5.0;public static void state(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalStateException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,gt,id,for,entity,get,name,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false,since,5,0;public,static,void,state,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,state,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void notNull(@Nullable Object object);1495868221;@deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)};@Deprecated_	public static void notNull(@Nullable Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,null,object,string;deprecated,public,static,void,not,null,nullable,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> @Deprecated 	public static void notNull(@Nullable Object object);1496837955;@deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)};@Deprecated_	public static void notNull(@Nullable Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,null,object,string;deprecated,public,static,void,not,null,nullable,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> @Deprecated 	public static void notNull(@Nullable Object object);1530174524;Assert that an object is not {@code null}._@deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)};@Deprecated_	public static void notNull(@Nullable Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,deprecated,as,of,4,3,7,in,favor,of,link,not,null,object,string;deprecated,public,static,void,not,null,nullable,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> @Deprecated 	public static void doesNotContain(@Nullable String textToSearch, String substring);1495868221;@deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)};@Deprecated_	public static void doesNotContain(@Nullable String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};deprecated,as,of,4,3,7,in,favor,of,link,does,not,contain,string,string,string;deprecated,public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> @Deprecated 	public static void doesNotContain(@Nullable String textToSearch, String substring);1496837955;@deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)};@Deprecated_	public static void doesNotContain(@Nullable String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};deprecated,as,of,4,3,7,in,favor,of,link,does,not,contain,string,string,string;deprecated,public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> @Deprecated 	public static void doesNotContain(@Nullable String textToSearch, String substring);1530174524;Assert that the given text does not contain the given substring._@deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)};@Deprecated_	public static void doesNotContain(@Nullable String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};assert,that,the,given,text,does,not,contain,the,given,substring,deprecated,as,of,4,3,7,in,favor,of,link,does,not,contain,string,string,string;deprecated,public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> @Deprecated 	public static void hasText(@Nullable String text);1495868221;@deprecated as of 4.3.7, in favor of {@link #hasText(String, String)};@Deprecated_	public static void hasText(@Nullable String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,text,string,string;deprecated,public,static,void,has,text,nullable,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> @Deprecated 	public static void hasText(@Nullable String text);1496837955;@deprecated as of 4.3.7, in favor of {@link #hasText(String, String)};@Deprecated_	public static void hasText(@Nullable String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,text,string,string;deprecated,public,static,void,has,text,nullable,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> @Deprecated 	public static void hasText(@Nullable String text);1530174524;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._@deprecated as of 4.3.7, in favor of {@link #hasText(String, String)};@Deprecated_	public static void hasText(@Nullable String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,deprecated,as,of,4,3,7,in,favor,of,link,has,text,string,string;deprecated,public,static,void,has,text,nullable,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void notEmpty(Collection collection, String message);1328020251;Assert that a collection has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is <code>null</code> or has no elements;public static void notEmpty(Collection collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,code,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection collection, String message);1338032393;Assert that a collection has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is <code>null</code> or has no elements;public static void notEmpty(Collection collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,code,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection collection, String message);1356735495;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection collection, String message);1362408075;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection collection, String message);1368713436;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1328020251;Assert that an array has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is <code>null</code> or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,code,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1338032393;Assert that an array has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is <code>null</code> or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,code,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1356735495;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1362408075;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1368713436;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1385412762;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1426267150;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1429034756;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1456332614;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1460400578;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array, "The array must have elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,have,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1468334463;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1485810955;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1485851275;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1487247200;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, String message);1487255527;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier);1468334463;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier);1485810955;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier);1485851275;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier);1487247200;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier);1487255527;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(collection, () -&gt_ "The " + collectionType + " collection must contain elements")__</pre>_@param collection the collection to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements_@since 5.0;public static void notEmpty(Collection<?> collection, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,gt,the,collection,type,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,collection,collection,supplier,string,message,supplier,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(Object object, Supplier<String> messageSupplier);1468334463;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(Object object, Supplier<String> messageSupplier);1485810955;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(Object object, Supplier<String> messageSupplier);1485851275;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(Object object, Supplier<String> messageSupplier);1487247200;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(Object object, Supplier<String> messageSupplier);1487255527;Assert that an object is not {@code null}._<pre class="code">_Assert.notNull(clazz, () -&gt_ "The class '" + clazz.getName() + "' must not be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is {@code null}_@since 5.0;public static void notNull(Object object, Supplier<String> messageSupplier) {_		if (object == null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,gt,the,class,clazz,get,name,must,not,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,since,5,0;public,static,void,not,null,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier);1468334463;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_ the message will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance;public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			isInstanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,the,message,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,is,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier);1485810955;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_ the message will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance_@since 5.0;public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,the,message,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance,since,5,0;public,static,void,is,instance,of,class,type,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier);1485851275;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_ the message will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the object is not an instance of type_@see Class#isInstance_@since 5.0;public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,the,message,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,see,class,is,instance,since,5,0;public,static,void,is,instance,of,class,type,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier);1487247200;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details._@throws IllegalArgumentException if the object is not an instance of type_@since 5.0;public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,instance,of,class,object,string,for,details,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,since,5,0;public,static,void,is,instance,of,class,type,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier);1487255527;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details._@throws IllegalArgumentException if the object is not an instance of type_@since 5.0;public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,instance,of,class,object,string,for,details,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,since,5,0;public,static,void,is,instance,of,class,type,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier);1495868221;Assert that the provided object is an instance of the provided class._<pre class="code">_Assert.instanceOf(Foo.class, foo, () -&gt_ "Processing " + Foo.class.getSimpleName() + ":")__</pre>_@param type the type to check against_@param obj the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details._@throws IllegalArgumentException if the object is not an instance of type_@since 5.0;public static void isInstanceOf(Class<?> type, Object obj, Supplier<String> messageSupplier) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier))__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,gt,processing,foo,class,get,simple,name,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,instance,of,class,object,string,for,details,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type,since,5,0;public,static,void,is,instance,of,class,type,object,obj,supplier,string,message,supplier,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,null,safe,get,message,supplier
Assert -> public static void hasText(@Nullable String text, Supplier<String> messageSupplier);1495868221;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0;public static void hasText(@Nullable String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0;public,static,void,has,text,nullable,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasText(@Nullable String text, Supplier<String> messageSupplier);1496837955;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0;public static void hasText(@Nullable String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0;public,static,void,has,text,nullable,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasText(@Nullable String text, Supplier<String> messageSupplier);1530174524;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0_@see StringUtils#hasText;public static void hasText(@Nullable String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0,see,string,utils,has,text;public,static,void,has,text,nullable,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression);1328020251;Assert a boolean expression, throwing <code>IllegalArgumentException</code>_if the test result is <code>false</code>._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is <code>false</code>;public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,code,if,the,test,result,is,code,false,code,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false,code;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1338032393;Assert a boolean expression, throwing <code>IllegalArgumentException</code>_if the test result is <code>false</code>._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is <code>false</code>;public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,code,if,the,test,result,is,code,false,code,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false,code;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1356735495;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1362408075;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1368713436;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1385412762;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1426267150;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1429034756;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1456332614;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1460400578;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void isTrue(boolean expression);1468334463;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0)_</pre>_@param expression a boolean expression_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,pre,param,expression,a,boolean,expression,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> @Deprecated 	public static void isTrue(boolean expression);1485851275;@deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)};@Deprecated_	public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,true,boolean,string;deprecated,public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> @Deprecated 	public static void isTrue(boolean expression);1487247200;@deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)};@Deprecated_	public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,true,boolean,string;deprecated,public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> @Deprecated 	public static void isTrue(boolean expression);1487255527;@deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)};@Deprecated_	public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,true,boolean,string;deprecated,public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> @Deprecated 	public static void isTrue(boolean expression);1495868221;@deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)};@Deprecated_	public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,true,boolean,string;deprecated,public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> @Deprecated 	public static void isTrue(boolean expression);1496837955;@deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)};@Deprecated_	public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,true,boolean,string;deprecated,public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> @Deprecated 	public static void isTrue(boolean expression);1530174524;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._@deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)};@Deprecated_	public static void isTrue(boolean expression) {_		isTrue(expression, "[Assertion failed] - this expression must be true")__	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,deprecated,as,of,4,3,7,in,favor,of,link,is,true,boolean,string;deprecated,public,static,void,is,true,boolean,expression,is,true,expression,assertion,failed,this,expression,must,be,true
Assert -> public static void notNull(@Nullable Object object, String message);1495868221;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(@Nullable Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,nullable,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(@Nullable Object object, String message);1496837955;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(@Nullable Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,nullable,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(@Nullable Object object, String message);1530174524;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(@Nullable Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,nullable,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(@Nullable String text, String message);1495868221;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(@Nullable String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,nullable,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(@Nullable String text, String message);1496837955;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty;public static void hasLength(@Nullable String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty;public,static,void,has,length,nullable,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasLength(@Nullable String text, String message);1530174524;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">Assert.hasLength(name, "Name must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text is empty_@see StringUtils#hasLength;public static void hasLength(@Nullable String text, String message) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,is,empty,see,string,utils,has,length;public,static,void,has,length,nullable,string,text,string,message,if,string,utils,has,length,text,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Object[] array, Supplier<String> messageSupplier);1468334463;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Object[] array, Supplier<String> messageSupplier);1485810955;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Object[] array, Supplier<String> messageSupplier);1485851275;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Object[] array, Supplier<String> messageSupplier);1487247200;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Object[] array, Supplier<String> messageSupplier);1487255527;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">_Assert.notEmpty(array, () -&gt_ "The " + arrayType + " array must contain elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements_@since 5.0;public static void notEmpty(Object[] array, Supplier<String> messageSupplier) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,gt,the,array,type,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements,since,5,0;public,static,void,not,empty,object,array,supplier,string,message,supplier,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void notEmpty(Map<?, ?> map);1485851275;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)};@Deprecated_	public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,map,string;deprecated,public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void notEmpty(Map<?, ?> map);1487247200;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)};@Deprecated_	public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,map,string;deprecated,public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void notEmpty(Map<?, ?> map);1487255527;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)};@Deprecated_	public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,map,string;deprecated,public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void hasLength(String text);1485851275;@deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)};@Deprecated_	public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,length,string,string;deprecated,public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> @Deprecated 	public static void hasLength(String text);1487247200;@deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)};@Deprecated_	public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,length,string,string;deprecated,public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> @Deprecated 	public static void hasLength(String text);1487255527;@deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)};@Deprecated_	public static void hasLength(String text) {_		hasLength(text,_				"[Assertion failed] - this String argument must have length_ it must not be null or empty")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,length,string,string;deprecated,public,static,void,has,length,string,text,has,length,text,assertion,failed,this,string,argument,must,have,length,it,must,not,be,null,or,empty
Assert -> public static void isNull(@Nullable Object object, String message);1495868221;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(@Nullable Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,nullable,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(@Nullable Object object, String message);1496837955;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(@Nullable Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,nullable,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(@Nullable Object object, String message);1530174524;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value, "The value must be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(@Nullable Object object, String message) {_		if (object != null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,the,value,must,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,nullable,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void isNull(@Nullable Object object, Supplier<String> messageSupplier);1495868221;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,nullable,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(@Nullable Object object, Supplier<String> messageSupplier);1496837955;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,nullable,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(@Nullable Object object, Supplier<String> messageSupplier);1530174524;Assert that an object is {@code null}._<pre class="code">_Assert.isNull(value, () -&gt_ "The value '" + value + "' must be null")__</pre>_@param object the object to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object is not {@code null}_@since 5.0;public static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {_		if (object != null) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,gt,the,value,value,must,be,null,pre,param,object,the,object,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,not,code,null,since,5,0;public,static,void,is,null,nullable,object,object,supplier,string,message,supplier,if,object,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier);1495868221;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,nullable,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier);1496837955;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,nullable,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier);1530174524;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">_Assert.noNullElements(array, () -&gt_ "The " + arrayType + " array must contain non-null elements")__</pre>_@param array the array to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element_@since 5.0;public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(nullSafeGet(messageSupplier))__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,gt,the,array,type,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element,since,5,0;public,static,void,no,null,elements,nullable,object,array,supplier,string,message,supplier,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isInstanceOf(Class type, Object obj, String message);1328020251;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(message +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class type, Object obj, String message);1338032393;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(message +_					". Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class type, Object obj, String message);1356735495;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(message +_					". Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void isInstanceOf(Class type, Object obj, String message);1362408075;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class type, Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			throw new IllegalArgumentException(_					(StringUtils.hasLength(message) ? message + " " : "") +_					"Object of class [" + (obj != null ? obj.getClass().getName() : "null") +_					"] must be an instance of " + type)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,type,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,throw,new,illegal,argument,exception,string,utils,has,length,message,message,object,of,class,obj,null,obj,get,class,get,name,null,must,be,an,instance,of,type
Assert -> public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier);1495868221;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier);1496837955;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier);1530174524;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notNull(Object object, String message);1328020251;Assert that an object is not <code>null</code> ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is <code>null</code>;public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,code,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,code;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1338032393;Assert that an object is not <code>null</code> ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is <code>null</code>;public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,code,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null,code;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1356735495;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1362408075;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1368713436;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1385412762;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1426267150;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1429034756;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1456332614;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1460400578;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1468334463;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1485810955;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1485851275;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1487247200;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notNull(Object object, String message);1487255527;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz, "The class must not be null")_</pre>_@param object the object to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object, String message) {_		if (object == null) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,the,class,must,not,be,null,pre,param,object,the,object,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,string,message,if,object,null,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Object[] array, String message);1495868221;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(@Nullable Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,nullable,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Object[] array, String message);1496837955;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(@Nullable Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,nullable,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(@Nullable Object[] array, String message);1530174524;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array, "The array must contain elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array is {@code null} or contains no elements;public static void notEmpty(@Nullable Object[] array, String message) {_		if (ObjectUtils.isEmpty(array)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,the,array,must,contain,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,nullable,object,array,string,message,if,object,utils,is,empty,array,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(Object[] array);1328020251;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a <code>null</code> element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,code,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1338032393;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a <code>null</code> element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,code,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1356735495;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1362408075;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1368713436;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1385412762;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1426267150;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1429034756;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1456332614;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1460400578;Assert that an array has no null elements._Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,has,no,null,elements,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void noNullElements(Object[] array);1468334463;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void hasText(String text, Supplier<String> messageSupplier);1468334463;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasText(String text, Supplier<String> messageSupplier);1485810955;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0;public static void hasText(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0;public,static,void,has,text,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasText(String text, Supplier<String> messageSupplier);1485851275;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0;public static void hasText(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0;public,static,void,has,text,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasText(String text, Supplier<String> messageSupplier);1487247200;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0;public static void hasText(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0;public,static,void,has,text,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasText(String text, Supplier<String> messageSupplier);1487255527;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">_Assert.hasText(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content_@since 5.0;public static void hasText(String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,since,5,0;public,static,void,has,text,string,text,supplier,string,message,supplier,if,string,utils,has,text,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isNull(Object object);1328020251;Assert that an object is <code>null</code> ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not <code>null</code>;public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,code,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null,code;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1338032393;Assert that an object is <code>null</code> ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not <code>null</code>;public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,code,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null,code;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1356735495;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1362408075;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1368713436;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1385412762;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1426267150;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1429034756;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1456332614;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1460400578;Assert that an object is {@code null} ._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void isNull(Object object);1468334463;Assert that an object is {@code null}._<pre class="code">Assert.isNull(value)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is not {@code null};public static void isNull(Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,pre,class,code,assert,is,null,value,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,code,null;public,static,void,is,null,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void notEmpty(Collection<?> collection, String message);1385412762;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1426267150;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1429034756;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1456332614;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1460400578;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1468334463;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1485810955;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1485851275;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1487247200;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection<?> collection, String message);1487255527;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must contain elements")_</pre>_@param collection the collection to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the collection is {@code null} or_contains no elements;public static void notEmpty(Collection<?> collection, String message) {_		if (CollectionUtils.isEmpty(collection)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,contain,elements,pre,param,collection,the,collection,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,collection,is,code,null,or,contains,no,elements;public,static,void,not,empty,collection,collection,string,message,if,collection,utils,is,empty,collection,throw,new,illegal,argument,exception,message
Assert -> public static void isInstanceOf(Class<?> type, @Nullable Object obj, String message);1496837955;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending object's_type will be appended. In any other case, a ":" with a space and the name_of the offending object's type will be appended._@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, @Nullable Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,foo,expected,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,object,s,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,object,s,type,will,be,appended,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,nullable,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void isInstanceOf(Class<?> type, @Nullable Object obj, String message);1530174524;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected")_</pre>_@param type the type to check against_@param obj the object to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending object's_type will be appended. In any other case, a ":" with a space and the name_of the offending object's type will be appended._@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, @Nullable Object obj, String message) {_		notNull(type, "Type to check against must not be null")__		if (!type.isInstance(obj)) {_			instanceCheckFailed(type, obj, message)__		}_	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,foo,expected,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,object,s,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,object,s,type,will,be,appended,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,nullable,object,obj,string,message,not,null,type,type,to,check,against,must,not,be,null,if,type,is,instance,obj,instance,check,failed,type,obj,message
Assert -> public static void hasText(String text, String message);1328020251;Assert that the given String has valid text content_ that is, it must not_be <code>null</code> and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,code,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1338032393;Assert that the given String has valid text content_ that is, it must not_be <code>null</code> and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,code,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1356735495;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1362408075;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1368713436;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1385412762;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1426267150;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1429034756;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1456332614;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1460400578;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1468334463;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1485810955;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1485851275;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1487247200;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(String text, String message);1487255527;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier);1468334463;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier);1485810955;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier);1485851275;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier);1487247200;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier);1487255527;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">_Assert.notEmpty(map, () -&gt_ "The " + mapType + " map must contain entries")__</pre>_@param map the map to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries_@since 5.0;public static void notEmpty(Map<?, ?> map, Supplier<String> messageSupplier) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,gt,the,map,type,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries,since,5,0;public,static,void,not,empty,map,map,supplier,string,message,supplier,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> @Deprecated 	public static void doesNotContain(String textToSearch, String substring);1485851275;@deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)};@Deprecated_	public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};deprecated,as,of,4,3,7,in,favor,of,link,does,not,contain,string,string,string;deprecated,public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> @Deprecated 	public static void doesNotContain(String textToSearch, String substring);1487247200;@deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)};@Deprecated_	public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};deprecated,as,of,4,3,7,in,favor,of,link,does,not,contain,string,string,string;deprecated,public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> @Deprecated 	public static void doesNotContain(String textToSearch, String substring);1487255527;@deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)};@Deprecated_	public static void doesNotContain(String textToSearch, String substring) {_		doesNotContain(textToSearch, substring,_				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]")__	};deprecated,as,of,4,3,7,in,favor,of,link,does,not,contain,string,string,string;deprecated,public,static,void,does,not,contain,string,text,to,search,string,substring,does,not,contain,text,to,search,substring,assertion,failed,this,string,argument,must,not,contain,the,substring,substring
Assert -> public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier);1468334463;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier);1485810955;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier);1485851275;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier);1487247200;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier);1487255527;Assert that the given text does not contain the given substring._<pre class="code">_Assert.doesNotContain(name, forbidden, () -&gt_ "Name must not contain '" + forbidden + "'")__</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text contains the substring_@since 5.0;public static void doesNotContain(String textToSearch, String substring, Supplier<String> messageSupplier) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,forbidden,gt,name,must,not,contain,forbidden,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring,since,5,0;public,static,void,does,not,contain,string,text,to,search,string,substring,supplier,string,message,supplier,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier);1496837955;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myAttributeName + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isAssignable(Class, Class, String)} for details._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,attribute,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,assignable,class,class,string,for,details,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,nullable,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier);1530174524;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myAttributeName + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isAssignable(Class, Class, String)} for details._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,attribute,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,assignable,class,class,string,for,details,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,nullable,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier);1468334463;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myClass.getSimpleName() + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_ the message will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			isAssignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,class,get,simple,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,the,message,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,is,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier);1485810955;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myClass.getSimpleName() + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_ the message will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,class,get,simple,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,the,message,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier);1485851275;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myClass.getSimpleName() + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_ the message will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,class,get,simple,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,the,message,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier);1487247200;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myAttributeName + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isAssignable(Class, Class, String)} for details._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,attribute,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,assignable,class,class,string,for,details,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier);1487255527;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myAttributeName + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isAssignable(Class, Class, String)} for details._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,attribute,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,assignable,class,class,string,for,details,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier);1495868221;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">_Assert.isAssignable(Number.class, myClass, () -&gt_ "Processing " + myAttributeName + ":")__</pre>_@param superType the super type to check against_@param subType the sub type to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails. See {@link #isAssignable(Class, Class, String)} for details._@throws IllegalArgumentException if the classes are not assignable_@since 5.0;public static void isAssignable(Class<?> superType, Class<?> subType, Supplier<String> messageSupplier) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier))__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,gt,processing,my,attribute,name,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,link,is,assignable,class,class,string,for,details,throws,illegal,argument,exception,if,the,classes,are,not,assignable,since,5,0;public,static,void,is,assignable,class,super,type,class,sub,type,supplier,string,message,supplier,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,null,safe,get,message,supplier
Assert -> public static void notNull(Object object);1328020251;Assert that an object is not <code>null</code> ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is <code>null</code>;public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,code,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null,code;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1338032393;Assert that an object is not <code>null</code> ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is <code>null</code>;public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,code,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null,code;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1356735495;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1362408075;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1368713436;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1385412762;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1426267150;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1429034756;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1456332614;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1460400578;Assert that an object is not {@code null} ._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void notNull(Object object);1468334463;Assert that an object is not {@code null}._<pre class="code">Assert.notNull(clazz)_</pre>_@param object the object to check_@throws IllegalArgumentException if the object is {@code null};public static void notNull(Object object) {_		notNull(object, "[Assertion failed] - this argument is required_ it must not be null")__	};assert,that,an,object,is,not,code,null,pre,class,code,assert,not,null,clazz,pre,param,object,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,code,null;public,static,void,not,null,object,object,not,null,object,assertion,failed,this,argument,is,required,it,must,not,be,null
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1368713436;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1385412762;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1426267150;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1429034756;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1456332614;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1460400578;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1468334463;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1485810955;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1485851275;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1487247200;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1487255527;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1495868221;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1496837955;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType);1530174524;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void hasText(@Nullable String text, String message);1495868221;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(@Nullable String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,nullable,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(@Nullable String text, String message);1496837955;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(@Nullable String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,nullable,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void hasText(@Nullable String text, String message);1530174524;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text does not contain valid text content_@see StringUtils#hasText;public static void hasText(@Nullable String text, String message) {_		if (!StringUtils.hasText(text)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content,see,string,utils,has,text;public,static,void,has,text,nullable,string,text,string,message,if,string,utils,has,text,text,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map map);1328020251;Assert that a Map has entries_ that is, it must not be <code>null</code>_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is <code>null</code> or has no entries;public static void notEmpty(Map map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,code,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map map);1338032393;Assert that a Map has entries_ that is, it must not be <code>null</code>_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is <code>null</code> or has no entries;public static void notEmpty(Map map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,code,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map map);1356735495;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map map);1362408075;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map map);1368713436;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1368713436;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1385412762;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1426267150;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1429034756;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in ":" or "." so that the generated message looks OK when_appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : "")_				+ subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,string,utils,has,length,message,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1456332614;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in ":" or "." so that the generated message looks OK when_appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : "") +_					subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,string,utils,has,length,message,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1460400578;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in ":" or "." so that the generated message looks OK when_appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : "") +_					subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,string,utils,has,length,message,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1468334463;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			isAssignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,is,assignable,check,failed,super,type,sub,type,message
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1485810955;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1485851275;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message generated_by this method in order to provide further context. It should normally end_in ":" or "." so that the generated message looks OK when appended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,generated,by,this,method,in,order,to,provide,further,context,it,should,normally,end,in,or,so,that,the,generated,message,looks,ok,when,appended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1487247200;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected")_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending sub type_will be appended. In any other case, a ":" with a space and the name of the_offending sub type will be appended._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,number,expected,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,sub,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,sub,type,will,be,appended,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1487255527;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected")_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending sub type_will be appended. In any other case, a ":" with a space and the name of the_offending sub type will be appended._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,number,expected,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,sub,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,sub,type,will,be,appended,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> public static void isAssignable(Class<?> superType, Class<?> subType, String message);1495868221;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected")_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending sub type_will be appended. In any other case, a ":" with a space and the name of the_offending sub type will be appended._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,number,expected,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,sub,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,sub,type,will,be,appended,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> @Deprecated 	public static void isNull(@Nullable Object object);1495868221;@deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)};@Deprecated_	public static void isNull(@Nullable Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,null,object,string;deprecated,public,static,void,is,null,nullable,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> @Deprecated 	public static void isNull(@Nullable Object object);1496837955;@deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)};@Deprecated_	public static void isNull(@Nullable Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};deprecated,as,of,4,3,7,in,favor,of,link,is,null,object,string;deprecated,public,static,void,is,null,nullable,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> @Deprecated 	public static void isNull(@Nullable Object object);1530174524;Assert that an object is {@code null}._@deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)};@Deprecated_	public static void isNull(@Nullable Object object) {_		isNull(object, "[Assertion failed] - the object argument must be null")__	};assert,that,an,object,is,code,null,deprecated,as,of,4,3,7,in,favor,of,link,is,null,object,string;deprecated,public,static,void,is,null,nullable,object,object,is,null,object,assertion,failed,the,object,argument,must,be,null
Assert -> public static void notEmpty(Map<?, ?> map);1385412762;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map<?, ?> map);1426267150;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map<?, ?> map);1429034756;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map<?, ?> map);1456332614;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map<?, ?> map);1460400578;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> public static void notEmpty(Map<?, ?> map);1468334463;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map)_</pre>_@param map the map to check_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map) {_		notEmpty(map, "[Assertion failed] - this map must not be empty_ it must contain at least one entry")__	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,pre,param,map,the,map,to,check,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,not,empty,map,assertion,failed,this,map,must,not,be,empty,it,must,contain,at,least,one,entry
Assert -> @Deprecated 	public static void notEmpty(@Nullable Object[] array);1495868221;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)};@Deprecated_	public static void notEmpty(@Nullable Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,object,string;deprecated,public,static,void,not,empty,nullable,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(@Nullable Object[] array);1496837955;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)};@Deprecated_	public static void notEmpty(@Nullable Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,object,string;deprecated,public,static,void,not,empty,nullable,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(@Nullable Object[] array);1530174524;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._@deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)};@Deprecated_	public static void notEmpty(@Nullable Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,deprecated,as,of,4,3,7,in,favor,of,link,not,empty,object,string;deprecated,public,static,void,not,empty,nullable,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void isInstanceOf(Class clazz, Object obj);1328020251;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class clazz, Object obj);1338032393;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class clazz, Object obj);1356735495;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void isInstanceOf(Class clazz, Object obj);1362408075;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param clazz the required class_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of clazz_@see Class#isInstance;public static void isInstanceOf(Class clazz, Object obj) {_		isInstanceOf(clazz, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,clazz,the,required,class,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,clazz,see,class,is,instance;public,static,void,is,instance,of,class,clazz,object,obj,is,instance,of,clazz,obj
Assert -> public static void doesNotContain(@Nullable String textToSearch, String substring, String message);1495868221;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(@Nullable String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(@Nullable String textToSearch, String substring, String message);1496837955;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(@Nullable String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(@Nullable String textToSearch, String substring, String message);1530174524;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(@Nullable String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,nullable,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void isInstanceOf(Class<?> type, @Nullable Object obj);1496837955;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, @Nullable Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,nullable,object,obj,is,instance,of,type,obj
Assert -> public static void isInstanceOf(Class<?> type, @Nullable Object obj);1530174524;Assert that the provided object is an instance of the provided class._<pre class="code">Assert.instanceOf(Foo.class, foo)_</pre>_@param type the type to check against_@param obj the object to check_@throws IllegalArgumentException if the object is not an instance of type;public static void isInstanceOf(Class<?> type, @Nullable Object obj) {_		isInstanceOf(type, obj, "")__	};assert,that,the,provided,object,is,an,instance,of,the,provided,class,pre,class,code,assert,instance,of,foo,class,foo,pre,param,type,the,type,to,check,against,param,obj,the,object,to,check,throws,illegal,argument,exception,if,the,object,is,not,an,instance,of,type;public,static,void,is,instance,of,class,type,nullable,object,obj,is,instance,of,type,obj
Assert -> public static void isAssignable(Class superType, Class subType);1328020251;Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,code,is,code,true,code,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class superType, Class subType);1338032393;Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,code,is,code,true,code,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class superType, Class subType);1356735495;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void isAssignable(Class superType, Class subType);1362408075;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check_@param subType the sub type to check_@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType) {_		isAssignable(superType, subType, "")__	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,param,sub,type,the,sub,type,to,check,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,is,assignable,super,type,sub,type
Assert -> public static void state(boolean expression);1328020251;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is <code>false</code>._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is <code>false</code>;public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,code,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false,code;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1338032393;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is <code>false</code>._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is <code>false</code>;public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,code,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false,code;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1356735495;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1362408075;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1368713436;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1385412762;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1426267150;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1429034756;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1456332614;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1460400578;Assert a boolean expression, throwing {@link IllegalStateException}_if the test result is {@code false}._<p>Call {@link #isTrue(boolean)} if you wish to_throw {@link IllegalArgumentException} on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if the supplied expression is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,link,illegal,state,exception,if,the,test,result,is,code,false,p,call,link,is,true,boolean,if,you,wish,to,throw,link,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,the,supplied,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void state(boolean expression);1468334463;Assert a boolean expression, throwing an {@link IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null)_</pre>_@param expression a boolean expression_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression) {_		state(expression, "[Assertion failed] - this state invariant must be true")__	};assert,a,boolean,expression,throwing,an,link,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,pre,param,expression,a,boolean,expression,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,state,expression,assertion,failed,this,state,invariant,must,be,true
Assert -> public static void hasText(String text);1328020251;Assert that the given String has valid text content_ that is, it must not_be <code>null</code> and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,code,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1338032393;Assert that the given String has valid text content_ that is, it must not_be <code>null</code> and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,code,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1356735495;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1362408075;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1368713436;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1385412762;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1426267150;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1429034756;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1456332614;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1460400578;Assert that the given String has valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,has,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void hasText(String text);1468334463;Assert that the given String contains valid text content_ that is, it must not_be {@code null} and must contain at least one non-whitespace character._<pre class="code">Assert.hasText(name, "'name' must not be empty")_</pre>_@param text the String to check_@see StringUtils#hasText_@throws IllegalArgumentException if the text does not contain valid text content;public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};assert,that,the,given,string,contains,valid,text,content,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,non,whitespace,character,pre,class,code,assert,has,text,name,name,must,not,be,empty,pre,param,text,the,string,to,check,see,string,utils,has,text,throws,illegal,argument,exception,if,the,text,does,not,contain,valid,text,content;public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void notEmpty(Object[] array);1328020251;Assert that an array has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is <code>null</code> or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,code,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1338032393;Assert that an array has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is <code>null</code> or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,code,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1356735495;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1362408075;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1368713436;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1385412762;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1426267150;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1429034756;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1456332614;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1460400578;Assert that an array has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or has no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,has,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Object[] array);1468334463;Assert that an array contains elements_ that is, it must not be_{@code null} and must contain at least one element._<pre class="code">Assert.notEmpty(array)_</pre>_@param array the array to check_@throws IllegalArgumentException if the object array is {@code null} or_contains no elements;public static void notEmpty(Object[] array) {_		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element")__	};assert,that,an,array,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,pre,class,code,assert,not,empty,array,pre,param,array,the,array,to,check,throws,illegal,argument,exception,if,the,object,array,is,code,null,or,contains,no,elements;public,static,void,not,empty,object,array,not,empty,array,assertion,failed,this,array,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message);1496837955;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected")_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending sub type_will be appended. In any other case, a ":" with a space and the name of the_offending sub type will be appended._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,number,expected,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,sub,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,sub,type,will,be,appended,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,nullable,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message);1530174524;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected")_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to provide further context._If it is empty or ends in ":" or "_" or "," or ".", a full exception message_will be appended. If it ends in a space, the name of the offending sub type_will be appended. In any other case, a ":" with a space and the name of the_offending sub type will be appended._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message) {_		notNull(superType, "Super type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			assignableCheckFailed(superType, subType, message)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,number,expected,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,provide,further,context,if,it,is,empty,or,ends,in,or,or,or,a,full,exception,message,will,be,appended,if,it,ends,in,a,space,the,name,of,the,offending,sub,type,will,be,appended,in,any,other,case,a,with,a,space,and,the,name,of,the,offending,sub,type,will,be,appended,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,nullable,class,sub,type,string,message,not,null,super,type,super,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,assignable,check,failed,super,type,sub,type,message
Assert -> @Deprecated 	public static void noNullElements(@Nullable Object[] array);1495868221;@deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)};@Deprecated_	public static void noNullElements(@Nullable Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};deprecated,as,of,4,3,7,in,favor,of,link,no,null,elements,object,string;deprecated,public,static,void,no,null,elements,nullable,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> @Deprecated 	public static void noNullElements(@Nullable Object[] array);1496837955;@deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)};@Deprecated_	public static void noNullElements(@Nullable Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};deprecated,as,of,4,3,7,in,favor,of,link,no,null,elements,object,string;deprecated,public,static,void,no,null,elements,nullable,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> @Deprecated 	public static void noNullElements(@Nullable Object[] array);1530174524;Assert that an array contains no {@code null} elements._@deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)};@Deprecated_	public static void noNullElements(@Nullable Object[] array) {_		noNullElements(array, "[Assertion failed] - this array must not contain any null elements")__	};assert,that,an,array,contains,no,code,null,elements,deprecated,as,of,4,3,7,in,favor,of,link,no,null,elements,object,string;deprecated,public,static,void,no,null,elements,nullable,object,array,no,null,elements,array,assertion,failed,this,array,must,not,contain,any,null,elements
Assert -> public static void isTrue(boolean expression, String message);1328020251;Assert a boolean expression, throwing <code>IllegalArgumentException</code>_if the test result is <code>false</code>._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is <code>false</code>;public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,code,if,the,test,result,is,code,false,code,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false,code;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1338032393;Assert a boolean expression, throwing <code>IllegalArgumentException</code>_if the test result is <code>false</code>._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is <code>false</code>;public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,code,if,the,test,result,is,code,false,code,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false,code;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1356735495;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1362408075;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1368713436;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1385412762;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1426267150;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1429034756;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1456332614;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1460400578;Assert a boolean expression, throwing {@code IllegalArgumentException}_if the test result is {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if expression is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,argument,exception,if,the,test,result,is,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1468334463;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1485810955;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1485851275;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1487247200;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1487255527;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1495868221;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1496837955;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, String message);1530174524;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">Assert.isTrue(i &gt_ 0, "The value must be greater than zero")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, String message) {_		if (!expression) {_			throw new IllegalArgumentException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,the,value,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,string,message,if,expression,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Collection collection);1328020251;Assert that a collection has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is <code>null</code> or has no elements;public static void notEmpty(Collection collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,code,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection collection);1338032393;Assert that a collection has elements_ that is, it must not be_<code>null</code> and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is <code>null</code> or has no elements;public static void notEmpty(Collection collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,code,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,code,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection collection);1356735495;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection collection);1362408075;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void notEmpty(Collection collection);1368713436;Assert that a collection has elements_ that is, it must not be_{@code null} and must have at least one element._<pre class="code">Assert.notEmpty(collection, "Collection must have elements")_</pre>_@param collection the collection to check_@throws IllegalArgumentException if the collection is {@code null} or has no elements;public static void notEmpty(Collection collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,has,elements,that,is,it,must,not,be,code,null,and,must,have,at,least,one,element,pre,class,code,assert,not,empty,collection,collection,must,have,elements,pre,param,collection,the,collection,to,check,throws,illegal,argument,exception,if,the,collection,is,code,null,or,has,no,elements;public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void hasText(String text);1485851275;@deprecated as of 4.3.7, in favor of {@link #hasText(String, String)};@Deprecated_	public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,text,string,string;deprecated,public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> @Deprecated 	public static void hasText(String text);1487247200;@deprecated as of 4.3.7, in favor of {@link #hasText(String, String)};@Deprecated_	public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,text,string,string;deprecated,public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> @Deprecated 	public static void hasText(String text);1487255527;@deprecated as of 4.3.7, in favor of {@link #hasText(String, String)};@Deprecated_	public static void hasText(String text) {_		hasText(text,_				"[Assertion failed] - this String argument must have text_ it must not be null, empty, or blank")__	};deprecated,as,of,4,3,7,in,favor,of,link,has,text,string,string;deprecated,public,static,void,has,text,string,text,has,text,text,assertion,failed,this,string,argument,must,have,text,it,must,not,be,null,empty,or,blank
Assert -> public static void isAssignable(Class superType, Class subType, String message);1328020251;Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,code,is,code,true,code,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class superType, Class subType, String message);1338032393;Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,code,is,code,true,code,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class superType, Class subType, String message);1356735495;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> public static void isAssignable(Class superType, Class subType, String message);1362408075;Assert that {@code superType.isAssignableFrom(subType)} is {@code true}._<pre class="code">Assert.isAssignable(Number.class, myClass)_</pre>_@param superType the super type to check against_@param subType the sub type to check_@param message a message which will be prepended to the message produced by_the function itself, and which may be used to provide context. It should_normally end in a ": " or ". " so that the function generate message looks_ok when prepended to it._@throws IllegalArgumentException if the classes are not assignable;public static void isAssignable(Class superType, Class subType, String message) {_		notNull(superType, "Type to check against must not be null")__		if (subType == null || !superType.isAssignableFrom(subType)) {_			throw new IllegalArgumentException(message + subType + " is not assignable to " + superType)__		}_	};assert,that,code,super,type,is,assignable,from,sub,type,is,code,true,pre,class,code,assert,is,assignable,number,class,my,class,pre,param,super,type,the,super,type,to,check,against,param,sub,type,the,sub,type,to,check,param,message,a,message,which,will,be,prepended,to,the,message,produced,by,the,function,itself,and,which,may,be,used,to,provide,context,it,should,normally,end,in,a,or,so,that,the,function,generate,message,looks,ok,when,prepended,to,it,throws,illegal,argument,exception,if,the,classes,are,not,assignable;public,static,void,is,assignable,class,super,type,class,sub,type,string,message,not,null,super,type,type,to,check,against,must,not,be,null,if,sub,type,null,super,type,is,assignable,from,sub,type,throw,new,illegal,argument,exception,message,sub,type,is,not,assignable,to,super,type
Assert -> @Deprecated 	public static void notEmpty(Collection<?> collection);1485851275;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)};@Deprecated_	public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,collection,string;deprecated,public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(Collection<?> collection);1487247200;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)};@Deprecated_	public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,collection,string;deprecated,public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(Collection<?> collection);1487255527;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)};@Deprecated_	public static void notEmpty(Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,collection,string;deprecated,public,static,void,not,empty,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1328020251;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.indexOf(substring) != -1) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,index,of,substring,1,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1338032393;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.indexOf(substring) != -1) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,index,of,substring,1,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1356735495;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.indexOf(substring) != -1) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,index,of,substring,1,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1362408075;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.indexOf(substring) != -1) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,index,of,substring,1,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1368713436;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1385412762;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1426267150;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1429034756;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1456332614;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1460400578;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1468334463;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1485810955;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1485851275;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1487247200;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void doesNotContain(String textToSearch, String substring, String message);1487255527;Assert that the given text does not contain the given substring._<pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'")_</pre>_@param textToSearch the text to search_@param substring the substring to find within the text_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the text contains the substring;public static void doesNotContain(String textToSearch, String substring, String message) {_		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&_				textToSearch.contains(substring)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,the,given,text,does,not,contain,the,given,substring,pre,class,code,assert,does,not,contain,name,rod,name,must,not,contain,rod,pre,param,text,to,search,the,text,to,search,param,substring,the,substring,to,find,within,the,text,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,contains,the,substring;public,static,void,does,not,contain,string,text,to,search,string,substring,string,message,if,string,utils,has,length,text,to,search,string,utils,has,length,substring,text,to,search,contains,substring,throw,new,illegal,argument,exception,message
Assert -> public static void state(boolean expression, String message);1328020251;Assert a boolean expression, throwing <code>IllegalStateException</code>_if the test result is <code>false</code>. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is <code>false</code>;public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,code,if,the,test,result,is,code,false,code,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false,code;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1338032393;Assert a boolean expression, throwing <code>IllegalStateException</code>_if the test result is <code>false</code>. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is <code>false</code>;public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,code,if,the,test,result,is,code,false,code,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false,code;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1356735495;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1362408075;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1368713436;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1385412762;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1426267150;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1429034756;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1456332614;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1460400578;Assert a boolean expression, throwing {@code IllegalStateException}_if the test result is {@code false}. Call isTrue if you wish to_throw IllegalArgumentException on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if expression is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,code,illegal,state,exception,if,the,test,result,is,code,false,call,is,true,if,you,wish,to,throw,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1468334463;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1485810955;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1485851275;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1487247200;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1487255527;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1495868221;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1496837955;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> public static void state(boolean expression, String message);1530174524;Assert a boolean expression, throwing an {@code IllegalStateException}_if the expression evaluates to {@code false}._<p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}_on an assertion failure._<pre class="code">Assert.state(id == null, "The id property must not already be initialized")_</pre>_@param expression a boolean expression_@param message the exception message to use if the assertion fails_@throws IllegalStateException if {@code expression} is {@code false};public static void state(boolean expression, String message) {_		if (!expression) {_			throw new IllegalStateException(message)__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,state,exception,if,the,expression,evaluates,to,code,false,p,call,link,is,true,if,you,wish,to,throw,an,code,illegal,argument,exception,on,an,assertion,failure,pre,class,code,assert,state,id,null,the,id,property,must,not,already,be,initialized,pre,param,expression,a,boolean,expression,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,state,exception,if,code,expression,is,code,false;public,static,void,state,boolean,expression,string,message,if,expression,throw,new,illegal,state,exception,message
Assert -> @Deprecated 	public static void notEmpty(@Nullable Collection<?> collection);1495868221;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)};@Deprecated_	public static void notEmpty(@Nullable Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,collection,string;deprecated,public,static,void,not,empty,nullable,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(@Nullable Collection<?> collection);1496837955;@deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)};@Deprecated_	public static void notEmpty(@Nullable Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};deprecated,as,of,4,3,7,in,favor,of,link,not,empty,collection,string;deprecated,public,static,void,not,empty,nullable,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> @Deprecated 	public static void notEmpty(@Nullable Collection<?> collection);1530174524;Assert that a collection contains elements_ that is, it must not be_{@code null} and must contain at least one element._@deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)};@Deprecated_	public static void notEmpty(@Nullable Collection<?> collection) {_		notEmpty(collection,_				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element")__	};assert,that,a,collection,contains,elements,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,element,deprecated,as,of,4,3,7,in,favor,of,link,not,empty,collection,string;deprecated,public,static,void,not,empty,nullable,collection,collection,not,empty,collection,assertion,failed,this,collection,must,not,be,empty,it,must,contain,at,least,1,element
Assert -> public static void noNullElements(@Nullable Object[] array, String message);1495868221;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(@Nullable Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,nullable,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(@Nullable Object[] array, String message);1496837955;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(@Nullable Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,nullable,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void noNullElements(@Nullable Object[] array, String message);1530174524;Assert that an array contains no {@code null} elements._<p>Note: Does not complain if the array is empty!_<pre class="code">Assert.noNullElements(array, "The array must contain non-null elements")_</pre>_@param array the array to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the object array contains a {@code null} element;public static void noNullElements(@Nullable Object[] array, String message) {_		if (array != null) {_			for (Object element : array) {_				if (element == null) {_					throw new IllegalArgumentException(message)__				}_			}_		}_	};assert,that,an,array,contains,no,code,null,elements,p,note,does,not,complain,if,the,array,is,empty,pre,class,code,assert,no,null,elements,array,the,array,must,contain,non,null,elements,pre,param,array,the,array,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,object,array,contains,a,code,null,element;public,static,void,no,null,elements,nullable,object,array,string,message,if,array,null,for,object,element,array,if,element,null,throw,new,illegal,argument,exception,message
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1468334463;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false};public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1485810955;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1485851275;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1487247200;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1487255527;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1495868221;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1496837955;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void isTrue(boolean expression, Supplier<String> messageSupplier);1530174524;Assert a boolean expression, throwing an {@code IllegalArgumentException}_if the expression evaluates to {@code false}._<pre class="code">_Assert.isTrue(i &gt_ 0, () -&gt_ "The value '" + i + "' must be greater than zero")__</pre>_@param expression a boolean expression_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if {@code expression} is {@code false}_@since 5.0;public static void isTrue(boolean expression, Supplier<String> messageSupplier) {_		if (!expression) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,a,boolean,expression,throwing,an,code,illegal,argument,exception,if,the,expression,evaluates,to,code,false,pre,class,code,assert,is,true,i,gt,0,gt,the,value,i,must,be,greater,than,zero,pre,param,expression,a,boolean,expression,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,code,expression,is,code,false,since,5,0;public,static,void,is,true,boolean,expression,supplier,string,message,supplier,if,expression,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(@Nullable String text, Supplier<String> messageSupplier);1495868221;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty_@since 5.0;public static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0;public,static,void,has,length,nullable,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(@Nullable String text, Supplier<String> messageSupplier);1496837955;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@see StringUtils#hasLength_@throws IllegalArgumentException if the text is empty_@since 5.0;public static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,see,string,utils,has,length,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0;public,static,void,has,length,nullable,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void hasLength(@Nullable String text, Supplier<String> messageSupplier);1530174524;Assert that the given String is not empty_ that is,_it must not be {@code null} and not the empty String._<pre class="code">_Assert.hasLength(name, () -&gt_ "Name for account '" + account.getId() + "' must not be empty")__</pre>_@param text the String to check_@param messageSupplier a supplier for the exception message to use if the_assertion fails_@throws IllegalArgumentException if the text is empty_@since 5.0_@see StringUtils#hasLength;public static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {_		if (!StringUtils.hasLength(text)) {_			throw new IllegalArgumentException(nullSafeGet(messageSupplier))__		}_	};assert,that,the,given,string,is,not,empty,that,is,it,must,not,be,code,null,and,not,the,empty,string,pre,class,code,assert,has,length,name,gt,name,for,account,account,get,id,must,not,be,empty,pre,param,text,the,string,to,check,param,message,supplier,a,supplier,for,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,text,is,empty,since,5,0,see,string,utils,has,length;public,static,void,has,length,nullable,string,text,supplier,string,message,supplier,if,string,utils,has,length,text,throw,new,illegal,argument,exception,null,safe,get,message,supplier
Assert -> public static void notEmpty(Map<?, ?> map, String message);1385412762;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1426267150;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1429034756;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1456332614;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1460400578;Assert that a Map has entries_ that is, it must not be {@code null}_and must have at least one entry._<pre class="code">Assert.notEmpty(map, "Map must have entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or has no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,has,entries,that,is,it,must,not,be,code,null,and,must,have,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,have,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,has,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1468334463;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1485810955;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1485851275;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1487247200;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
Assert -> public static void notEmpty(Map<?, ?> map, String message);1487255527;Assert that a Map contains entries_ that is, it must not be {@code null}_and must contain at least one entry._<pre class="code">Assert.notEmpty(map, "Map must contain entries")_</pre>_@param map the map to check_@param message the exception message to use if the assertion fails_@throws IllegalArgumentException if the map is {@code null} or contains no entries;public static void notEmpty(Map<?, ?> map, String message) {_		if (CollectionUtils.isEmpty(map)) {_			throw new IllegalArgumentException(message)__		}_	};assert,that,a,map,contains,entries,that,is,it,must,not,be,code,null,and,must,contain,at,least,one,entry,pre,class,code,assert,not,empty,map,map,must,contain,entries,pre,param,map,the,map,to,check,param,message,the,exception,message,to,use,if,the,assertion,fails,throws,illegal,argument,exception,if,the,map,is,code,null,or,contains,no,entries;public,static,void,not,empty,map,map,string,message,if,collection,utils,is,empty,map,throw,new,illegal,argument,exception,message
