commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final Class<? extends Annotation> getAnnotationType() {     return this.annotationType. }
false;public,final;0;5;;@Override @Nullable public final Object getAnnotatedElement() {     return this.annotatedElement. }
false;public,final;0;4;;@Override public final S getSource() {     return this.source. }
false;public,final;1;33;;@Override @Nullable public final Object getAttributeValue(Method attributeMethod) {     String attributeName = attributeMethod.getName().     Object attributeValue = getRawAttributeValue(attributeMethod).     List<String> aliasNames = this.attributeAliasMap.get(attributeName).     if (aliasNames != null) {         Object defaultValue = AnnotationUtils.getDefaultValue(this.annotationType, attributeName).         for (String aliasName : aliasNames) {             Object aliasValue = getRawAttributeValue(aliasName).             if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && !ObjectUtils.nullSafeEquals(attributeValue, defaultValue) && !ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) {                 String elementName = (this.annotatedElement != null ? this.annotatedElement.toString() : "unknown element").                 throw new AnnotationConfigurationException(String.format("In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " + "alias '%s' are present with values of [%s] and [%s], but only one is permitted.", this.annotationType.getName(), elementName, this.source, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))).             }             // use the value of the alias instead.             if (ObjectUtils.nullSafeEquals(attributeValue, defaultValue)) {                 attributeValue = aliasValue.             }         }     }     return attributeValue. }
true;protected,abstract;1;2;/**  * Get the raw, unmodified attribute value from the underlying  * {@linkplain #getSource source} that corresponds to the supplied  * attribute method.  */ ;/**  * Get the raw, unmodified attribute value from the underlying  * {@linkplain #getSource source} that corresponds to the supplied  * attribute method.  */ @Nullable protected abstract Object getRawAttributeValue(Method attributeMethod).
true;protected,abstract;1;2;/**  * Get the raw, unmodified attribute value from the underlying  * {@linkplain #getSource source} that corresponds to the supplied  * attribute name.  */ ;/**  * Get the raw, unmodified attribute value from the underlying  * {@linkplain #getSource source} that corresponds to the supplied  * attribute name.  */ @Nullable protected abstract Object getRawAttributeValue(String attributeName).
