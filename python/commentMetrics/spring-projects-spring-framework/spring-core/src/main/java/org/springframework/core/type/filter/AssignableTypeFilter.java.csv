commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the {@code type} that this instance is using to filter candidates.  * @since 5.0  */ ;/**  * Return the {@code type} that this instance is using to filter candidates.  * @since 5.0  */ public final Class<?> getTargetType() {     return this.targetType. }
false;protected;1;4;;@Override protected boolean matchClassName(String className) {     return this.targetType.getName().equals(className). }
false;protected;1;5;;@Override @Nullable protected Boolean matchSuperClass(String superClassName) {     return matchTargetType(superClassName). }
false;protected;1;5;;@Override @Nullable protected Boolean matchInterface(String interfaceName) {     return matchTargetType(interfaceName). }
false;protected;1;19;;@Nullable protected Boolean matchTargetType(String typeName) {     if (this.targetType.getName().equals(typeName)) {         return true.     } else if (Object.class.getName().equals(typeName)) {         return false.     } else if (typeName.startsWith("java")) {         try {             Class<?> clazz = ClassUtils.forName(typeName, getClass().getClassLoader()).             return this.targetType.isAssignableFrom(clazz).         } catch (Throwable ex) {         // Class not regularly loadable - can't determine a match that way.         }     }     return null. }
