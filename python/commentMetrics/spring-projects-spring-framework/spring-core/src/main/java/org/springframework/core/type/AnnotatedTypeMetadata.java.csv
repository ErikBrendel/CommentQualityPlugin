commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Determine whether the underlying element has an annotation or meta-annotation  * of the given type defined.  * <p>If this method returns {@code true}, then  * {@link #getAnnotationAttributes} will return a non-null Map.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @return whether a matching annotation is defined  */ ;/**  * Determine whether the underlying element has an annotation or meta-annotation  * of the given type defined.  * <p>If this method returns {@code true}, then  * {@link #getAnnotationAttributes} will return a non-null Map.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @return whether a matching annotation is defined  */ boolean isAnnotated(String annotationName).
true;;1;2;/**  * Retrieve the attributes of the annotation of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation),  * also taking attribute overrides on composed annotations into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @return a Map of attributes, with the attribute name as key (e.g. "value")  * and the defined attribute value as Map value. This return value will be  * {@code null} if no matching annotation is defined.  */ ;/**  * Retrieve the attributes of the annotation of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation),  * also taking attribute overrides on composed annotations into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @return a Map of attributes, with the attribute name as key (e.g. "value")  * and the defined attribute value as Map value. This return value will be  * {@code null} if no matching annotation is defined.  */ @Nullable Map<String, Object> getAnnotationAttributes(String annotationName).
true;;2;2;/**  * Retrieve the attributes of the annotation of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation),  * also taking attribute overrides on composed annotations into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @param classValuesAsString whether to convert class references to String  * class names for exposure as values in the returned Map, instead of Class  * references which might potentially have to be loaded first  * @return a Map of attributes, with the attribute name as key (e.g. "value")  * and the defined attribute value as Map value. This return value will be  * {@code null} if no matching annotation is defined.  */ ;/**  * Retrieve the attributes of the annotation of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation),  * also taking attribute overrides on composed annotations into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @param classValuesAsString whether to convert class references to String  * class names for exposure as values in the returned Map, instead of Class  * references which might potentially have to be loaded first  * @return a Map of attributes, with the attribute name as key (e.g. "value")  * and the defined attribute value as Map value. This return value will be  * {@code null} if no matching annotation is defined.  */ @Nullable Map<String, Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString).
true;;1;2;/**  * Retrieve all attributes of all annotations of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation).  * Note that this variant does <i>not</i> take attribute overrides into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @return a MultiMap of attributes, with the attribute name as key (e.g. "value")  * and a list of the defined attribute values as Map value. This return value will  * be {@code null} if no matching annotation is defined.  * @see #getAllAnnotationAttributes(String, boolean)  */ ;/**  * Retrieve all attributes of all annotations of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation).  * Note that this variant does <i>not</i> take attribute overrides into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @return a MultiMap of attributes, with the attribute name as key (e.g. "value")  * and a list of the defined attribute values as Map value. This return value will  * be {@code null} if no matching annotation is defined.  * @see #getAllAnnotationAttributes(String, boolean)  */ @Nullable MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName).
true;;2;2;/**  * Retrieve all attributes of all annotations of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation).  * Note that this variant does <i>not</i> take attribute overrides into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @param classValuesAsString  whether to convert class references to String  * @return a MultiMap of attributes, with the attribute name as key (e.g. "value")  * and a list of the defined attribute values as Map value. This return value will  * be {@code null} if no matching annotation is defined.  * @see #getAllAnnotationAttributes(String)  */ ;/**  * Retrieve all attributes of all annotations of the given type, if any (i.e. if  * defined on the underlying element, as direct annotation or meta-annotation).  * Note that this variant does <i>not</i> take attribute overrides into account.  * @param annotationName the fully qualified class name of the annotation  * type to look for  * @param classValuesAsString  whether to convert class references to String  * @return a MultiMap of attributes, with the attribute name as key (e.g. "value")  * and a list of the defined attribute values as Map value. This return value will  * be {@code null} if no matching annotation is defined.  * @see #getAllAnnotationAttributes(String)  */ @Nullable MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString).
