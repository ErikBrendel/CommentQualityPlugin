# id;timestamp;commentText;codeText;commentWords;codeWords
StreamUtils -> public static InputStream nonClosing(InputStream in);1362408075;Returns a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};returns,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1385507683;Returns a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};returns,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1413848647;Returns a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};returns,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1444681540;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1459265502;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1462208452;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1462528990;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1489687033;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1495868221;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1519560860;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1530174524;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static InputStream nonClosing(InputStream in);1530174524;Return a variant of the given {@link InputStream} where calling_{@link InputStream#close() close()} has no effect._@param in the InputStream to decorate_@return a version of the InputStream that ignores calls to close;public static InputStream nonClosing(InputStream in) {_		Assert.notNull(in, "No InputStream specified")__		return new NonClosingInputStream(in)__	};return,a,variant,of,the,given,link,input,stream,where,calling,link,input,stream,close,close,has,no,effect,param,in,the,input,stream,to,decorate,return,a,version,of,the,input,stream,that,ignores,calls,to,close;public,static,input,stream,non,closing,input,stream,in,assert,not,null,in,no,input,stream,specified,return,new,non,closing,input,stream,in
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1362408075;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1385507683;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1413848647;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1444681540;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1459265502;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1462208452;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1462528990;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from_@return the new byte array that has been copied to_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,return,the,new,byte,array,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(InputStream in) throws IOException;1489687033;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from (may be {@code null} or empty)_@return the new byte array that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(InputStream in) throws IOException {_		if (in == null) {_			return new byte[0]__		}__		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,may,be,code,null,or,empty,return,the,new,byte,array,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,input,stream,in,throws,ioexception,if,in,null,return,new,byte,0,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1362408075;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1385507683;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1413848647;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1444681540;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1459265502;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1462208452;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1462528990;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")__		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1489687033;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1495868221;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1519560860;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1530174524;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static int copy(InputStream in, OutputStream out) throws IOException;1530174524;Copy the contents of the given InputStream to the given OutputStream._Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@return the number of bytes copied_@throws IOException in case of I/O errors;public static int copy(InputStream in, OutputStream out) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		int byteCount = 0__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = in.read(buffer)) != -1) {_			out.write(buffer, 0, bytesRead)__			byteCount += bytesRead__		}_		out.flush()__		return byteCount__	};copy,the,contents,of,the,given,input,stream,to,the,given,output,stream,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors;public,static,int,copy,input,stream,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,int,byte,count,0,byte,buffer,new,byte,int,bytes,read,1,while,bytes,read,in,read,buffer,1,out,write,buffer,0,bytes,read,byte,count,bytes,read,out,flush,return,byte,count
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1362408075;Returns a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};returns,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1385507683;Returns a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};returns,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1413848647;Returns a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};returns,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1444681540;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1459265502;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1462208452;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1462528990;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1489687033;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1495868221;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1519560860;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1530174524;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static OutputStream nonClosing(OutputStream out);1530174524;Return a variant of the given {@link OutputStream} where calling_{@link OutputStream#close() close()} has no effect._@param out the OutputStream to decorate_@return a version of the OutputStream that ignores calls to close;public static OutputStream nonClosing(OutputStream out) {_		Assert.notNull(out, "No OutputStream specified")__		return new NonClosingOutputStream(out)__	};return,a,variant,of,the,given,link,output,stream,where,calling,link,output,stream,close,close,has,no,effect,param,out,the,output,stream,to,decorate,return,a,version,of,the,output,stream,that,ignores,calls,to,close;public,static,output,stream,non,closing,output,stream,out,assert,not,null,out,no,output,stream,specified,return,new,non,closing,output,stream,out
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1362408075;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1385507683;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1413848647;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1444681540;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1459265502;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1462208452;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1462528990;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from_@return the String that has been copied to_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,return,the,string,that,has,been,copied,to,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,assert,not,null,in,no,input,stream,specified,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(InputStream in, Charset charset) throws IOException;1489687033;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from (may be {@code null} or empty)_@return the String that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static String copyToString(InputStream in, Charset charset) throws IOException {_		if (in == null) {_			return ""__		}__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,may,be,code,null,or,empty,return,the,string,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,input,stream,in,charset,charset,throws,ioexception,if,in,null,return,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1362408075;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1385507683;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1413848647;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1444681540;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1459265502;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1462208452;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1462528990;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")__		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1489687033;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")___		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1495868221;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")___		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1519560860;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")___		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1530174524;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")___		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static void copy(byte[] in, OutputStream out) throws IOException;1530174524;Copy the contents of the given byte array to the given OutputStream._Leaves the stream open when done._@param in the byte array to copy from_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(byte[] in, OutputStream out) throws IOException {_		Assert.notNull(in, "No input byte array specified")__		Assert.notNull(out, "No OutputStream specified")___		out.write(in)__	};copy,the,contents,of,the,given,byte,array,to,the,given,output,stream,leaves,the,stream,open,when,done,param,in,the,byte,array,to,copy,from,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,byte,in,output,stream,out,throws,ioexception,assert,not,null,in,no,input,byte,array,specified,assert,not,null,out,no,output,stream,specified,out,write,in
StreamUtils -> public static int drain(InputStream in) throws IOException;1459265502;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3.0;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3,0;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1462208452;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3.0;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3,0;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1462528990;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1489687033;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1495868221;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1519560860;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1530174524;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static int drain(InputStream in) throws IOException;1530174524;Drain the remaining content of the given InputStream._Leaves the InputStream open when done._@param in the InputStream to drain_@return the number of bytes read_@throws IOException in case of I/O errors_@since 4.3;public static int drain(InputStream in) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		byte[] buffer = new byte[BUFFER_SIZE]__		int bytesRead = -1__		int byteCount = 0__		while ((bytesRead = in.read(buffer)) != -1) {_			byteCount += bytesRead__		}_		return byteCount__	};drain,the,remaining,content,of,the,given,input,stream,leaves,the,input,stream,open,when,done,param,in,the,input,stream,to,drain,return,the,number,of,bytes,read,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,int,drain,input,stream,in,throws,ioexception,assert,not,null,in,no,input,stream,specified,byte,buffer,new,byte,int,bytes,read,1,int,byte,count,0,while,bytes,read,in,read,buffer,1,byte,count,bytes,read,return,byte,count
StreamUtils -> public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException;1495868221;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from (may be {@code null} or empty)_@return the new byte array that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {_		if (in == null) {_			return new byte[0]__		}__		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,may,be,code,null,or,empty,return,the,new,byte,array,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,nullable,input,stream,in,throws,ioexception,if,in,null,return,new,byte,0,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException;1519560860;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from (may be {@code null} or empty)_@return the new byte array that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {_		if (in == null) {_			return new byte[0]__		}__		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,may,be,code,null,or,empty,return,the,new,byte,array,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,nullable,input,stream,in,throws,ioexception,if,in,null,return,new,byte,0,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException;1530174524;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from (may be {@code null} or empty)_@return the new byte array that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {_		if (in == null) {_			return new byte[0]__		}__		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,may,be,code,null,or,empty,return,the,new,byte,array,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,nullable,input,stream,in,throws,ioexception,if,in,null,return,new,byte,0,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException;1530174524;Copy the contents of the given InputStream into a new byte array._Leaves the stream open when done._@param in the stream to copy from (may be {@code null} or empty)_@return the new byte array that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {_		if (in == null) {_			return new byte[0]__		}__		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE)__		copy(in, out)__		return out.toByteArray()__	};copy,the,contents,of,the,given,input,stream,into,a,new,byte,array,leaves,the,stream,open,when,done,param,in,the,stream,to,copy,from,may,be,code,null,or,empty,return,the,new,byte,array,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,byte,copy,to,byte,array,nullable,input,stream,in,throws,ioexception,if,in,null,return,new,byte,0,byte,array,output,stream,out,new,byte,array,output,stream,copy,in,out,return,out,to,byte,array
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1462208452;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3.0;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required.")__		}_		long bytesToCopy = end - start + 1__		byte buffer[] = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return end - start + 1 - bytesToCopy__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3,0;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1462528990;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required.")__		}_		long bytesToCopy = end - start + 1__		byte buffer[] = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return end - start + 1 - bytesToCopy__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1489687033;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required")__		}__		long bytesToCopy = end - start + 1__		byte buffer[] = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return (end - start + 1 - bytesToCopy)__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1495868221;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required")__		}__		long bytesToCopy = end - start + 1__		byte buffer[] = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return (end - start + 1 - bytesToCopy)__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1519560860;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required")__		}__		long bytesToCopy = end - start + 1__		byte[] buffer = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return (end - start + 1 - bytesToCopy)__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1530174524;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required")__		}__		long bytesToCopy = end - start + 1__		byte[] buffer = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return (end - start + 1 - bytesToCopy)__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException;1530174524;Copy a range of content of the given InputStream to the given OutputStream._<p>If the specified range exceeds the length of the InputStream, this copies_up to the end of the stream and returns the actual number of copied bytes._<p>Leaves both streams open when done._@param in the InputStream to copy from_@param out the OutputStream to copy to_@param start the position to start copying from_@param end the position to end copying_@return the number of bytes copied_@throws IOException in case of I/O errors_@since 4.3;public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {_		Assert.notNull(in, "No InputStream specified")__		Assert.notNull(out, "No OutputStream specified")___		long skipped = in.skip(start)__		if (skipped < start) {_			throw new IOException("Skipped only " + skipped + " bytes out of " + start + " required")__		}__		long bytesToCopy = end - start + 1__		byte[] buffer = new byte[StreamUtils.BUFFER_SIZE]__		while (bytesToCopy > 0) {_			int bytesRead = in.read(buffer)__			if (bytesRead == -1) {_				break__			}_			else if (bytesRead <= bytesToCopy) {_				out.write(buffer, 0, bytesRead)__				bytesToCopy -= bytesRead__			}_			else {_				out.write(buffer, 0, (int) bytesToCopy)__				bytesToCopy = 0__			}_		}_		return (end - start + 1 - bytesToCopy)__	};copy,a,range,of,content,of,the,given,input,stream,to,the,given,output,stream,p,if,the,specified,range,exceeds,the,length,of,the,input,stream,this,copies,up,to,the,end,of,the,stream,and,returns,the,actual,number,of,copied,bytes,p,leaves,both,streams,open,when,done,param,in,the,input,stream,to,copy,from,param,out,the,output,stream,to,copy,to,param,start,the,position,to,start,copying,from,param,end,the,position,to,end,copying,return,the,number,of,bytes,copied,throws,ioexception,in,case,of,i,o,errors,since,4,3;public,static,long,copy,range,input,stream,in,output,stream,out,long,start,long,end,throws,ioexception,assert,not,null,in,no,input,stream,specified,assert,not,null,out,no,output,stream,specified,long,skipped,in,skip,start,if,skipped,start,throw,new,ioexception,skipped,only,skipped,bytes,out,of,start,required,long,bytes,to,copy,end,start,1,byte,buffer,new,byte,stream,utils,while,bytes,to,copy,0,int,bytes,read,in,read,buffer,if,bytes,read,1,break,else,if,bytes,read,bytes,to,copy,out,write,buffer,0,bytes,read,bytes,to,copy,bytes,read,else,out,write,buffer,0,int,bytes,to,copy,bytes,to,copy,0,return,end,start,1,bytes,to,copy
StreamUtils -> public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException;1495868221;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from (may be {@code null} or empty)_@return the String that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {_		if (in == null) {_			return ""__		}__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,may,be,code,null,or,empty,return,the,string,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,nullable,input,stream,in,charset,charset,throws,ioexception,if,in,null,return,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException;1519560860;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from (may be {@code null} or empty)_@return the String that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {_		if (in == null) {_			return ""__		}__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,may,be,code,null,or,empty,return,the,string,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,nullable,input,stream,in,charset,charset,throws,ioexception,if,in,null,return,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException;1530174524;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from (may be {@code null} or empty)_@return the String that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {_		if (in == null) {_			return ""__		}__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,may,be,code,null,or,empty,return,the,string,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,nullable,input,stream,in,charset,charset,throws,ioexception,if,in,null,return,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException;1530174524;Copy the contents of the given InputStream into a String._Leaves the stream open when done._@param in the InputStream to copy from (may be {@code null} or empty)_@return the String that has been copied to (possibly empty)_@throws IOException in case of I/O errors;public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {_		if (in == null) {_			return ""__		}__		StringBuilder out = new StringBuilder()__		InputStreamReader reader = new InputStreamReader(in, charset)__		char[] buffer = new char[BUFFER_SIZE]__		int bytesRead = -1__		while ((bytesRead = reader.read(buffer)) != -1) {_			out.append(buffer, 0, bytesRead)__		}_		return out.toString()__	};copy,the,contents,of,the,given,input,stream,into,a,string,leaves,the,stream,open,when,done,param,in,the,input,stream,to,copy,from,may,be,code,null,or,empty,return,the,string,that,has,been,copied,to,possibly,empty,throws,ioexception,in,case,of,i,o,errors;public,static,string,copy,to,string,nullable,input,stream,in,charset,charset,throws,ioexception,if,in,null,return,string,builder,out,new,string,builder,input,stream,reader,reader,new,input,stream,reader,in,charset,char,buffer,new,char,int,bytes,read,1,while,bytes,read,reader,read,buffer,1,out,append,buffer,0,bytes,read,return,out,to,string
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1362408075;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1385507683;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1413848647;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1444681540;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1459265502;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1462208452;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1462528990;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")__		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1489687033;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")___		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1495868221;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")___		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1519560860;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")___		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1530174524;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")___		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static void copy(String in, Charset charset, OutputStream out) throws IOException;1530174524;Copy the contents of the given String to the given output OutputStream._Leaves the stream open when done._@param in the String to copy from_@param charset the Charset_@param out the OutputStream to copy to_@throws IOException in case of I/O errors;public static void copy(String in, Charset charset, OutputStream out) throws IOException {_		Assert.notNull(in, "No input String specified")__		Assert.notNull(charset, "No charset specified")__		Assert.notNull(out, "No OutputStream specified")___		Writer writer = new OutputStreamWriter(out, charset)__		writer.write(in)__		writer.flush()__	};copy,the,contents,of,the,given,string,to,the,given,output,output,stream,leaves,the,stream,open,when,done,param,in,the,string,to,copy,from,param,charset,the,charset,param,out,the,output,stream,to,copy,to,throws,ioexception,in,case,of,i,o,errors;public,static,void,copy,string,in,charset,charset,output,stream,out,throws,ioexception,assert,not,null,in,no,input,string,specified,assert,not,null,charset,no,charset,specified,assert,not,null,out,no,output,stream,specified,writer,writer,new,output,stream,writer,out,charset,writer,write,in,writer,flush
StreamUtils -> public static InputStream emptyInput();1444681540;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1459265502;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1462208452;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1462528990;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1489687033;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1495868221;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1519560860;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1530174524;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
StreamUtils -> public static InputStream emptyInput();1530174524;Return an efficient empty {@link InputStream}._@return a {@link ByteArrayInputStream} based on an empty byte array_@since 4.2.2;public static InputStream emptyInput() {_		return new ByteArrayInputStream(EMPTY_CONTENT)__	};return,an,efficient,empty,link,input,stream,return,a,link,byte,array,input,stream,based,on,an,empty,byte,array,since,4,2,2;public,static,input,stream,empty,input,return,new,byte,array,input,stream
