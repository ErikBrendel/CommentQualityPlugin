# id;timestamp;commentText;codeText;commentWords;codeWords
Hints -> public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue);1530793695;Merge a single hint into a map of hints, possibly creating and copying_all hints into a new map, or otherwise if the map of hints is empty,_creating a new single entry map._@param hints a map of hints to be merge_@param hintName the hint name to merge_@param hintValue the hint value to merge_@return a single map with all hints;public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue) {_		if (hints.isEmpty()) {_			return Collections.singletonMap(hintName, hintValue)__		}_		else {_			Map<String, Object> result = new HashMap<>(hints.size() + 1)__			result.putAll(hints)__			result.put(hintName, hintValue)__			return result__		}_	};merge,a,single,hint,into,a,map,of,hints,possibly,creating,and,copying,all,hints,into,a,new,map,or,otherwise,if,the,map,of,hints,is,empty,creating,a,new,single,entry,map,param,hints,a,map,of,hints,to,be,merge,param,hint,name,the,hint,name,to,merge,param,hint,value,the,hint,value,to,merge,return,a,single,map,with,all,hints;public,static,map,string,object,merge,map,string,object,hints,string,hint,name,object,hint,value,if,hints,is,empty,return,collections,singleton,map,hint,name,hint,value,else,map,string,object,result,new,hash,map,hints,size,1,result,put,all,hints,result,put,hint,name,hint,value,return,result
Hints -> public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue);1530923528;Merge a single hint into a map of hints, possibly creating and copying_all hints into a new map, or otherwise if the map of hints is empty,_creating a new single entry map._@param hints a map of hints to be merge_@param hintName the hint name to merge_@param hintValue the hint value to merge_@return a single map with all hints;public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue) {_		if (hints.isEmpty()) {_			return Collections.singletonMap(hintName, hintValue)__		}_		else {_			Map<String, Object> result = new HashMap<>(hints.size() + 1)__			result.putAll(hints)__			result.put(hintName, hintValue)__			return result__		}_	};merge,a,single,hint,into,a,map,of,hints,possibly,creating,and,copying,all,hints,into,a,new,map,or,otherwise,if,the,map,of,hints,is,empty,creating,a,new,single,entry,map,param,hints,a,map,of,hints,to,be,merge,param,hint,name,the,hint,name,to,merge,param,hint,value,the,hint,value,to,merge,return,a,single,map,with,all,hints;public,static,map,string,object,merge,map,string,object,hints,string,hint,name,object,hint,value,if,hints,is,empty,return,collections,singleton,map,hint,name,hint,value,else,map,string,object,result,new,hash,map,hints,size,1,result,put,all,hints,result,put,hint,name,hint,value,return,result
Hints -> public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue);1531321803;Merge a single hint into a map of hints, possibly creating and copying_all hints into a new map, or otherwise if the map of hints is empty,_creating a new single entry map._@param hints a map of hints to be merge_@param hintName the hint name to merge_@param hintValue the hint value to merge_@return a single map with all hints;public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue) {_		if (hints.isEmpty()) {_			return Collections.singletonMap(hintName, hintValue)__		}_		else {_			Map<String, Object> result = new HashMap<>(hints.size() + 1)__			result.putAll(hints)__			result.put(hintName, hintValue)__			return result__		}_	};merge,a,single,hint,into,a,map,of,hints,possibly,creating,and,copying,all,hints,into,a,new,map,or,otherwise,if,the,map,of,hints,is,empty,creating,a,new,single,entry,map,param,hints,a,map,of,hints,to,be,merge,param,hint,name,the,hint,name,to,merge,param,hint,value,the,hint,value,to,merge,return,a,single,map,with,all,hints;public,static,map,string,object,merge,map,string,object,hints,string,hint,name,object,hint,value,if,hints,is,empty,return,collections,singleton,map,hint,name,hint,value,else,map,string,object,result,new,hash,map,hints,size,1,result,put,all,hints,result,put,hint,name,hint,value,return,result
Hints -> public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue);1532520962;Merge a single hint into a map of hints, possibly creating and copying_all hints into a new map, or otherwise if the map of hints is empty,_creating a new single entry map._@param hints a map of hints to be merge_@param hintName the hint name to merge_@param hintValue the hint value to merge_@return a single map with all hints;public static Map<String, Object> merge(Map<String, Object> hints, String hintName, Object hintValue) {_		if (hints.isEmpty()) {_			return Collections.singletonMap(hintName, hintValue)__		}_		else {_			Map<String, Object> result = new HashMap<>(hints.size() + 1)__			result.putAll(hints)__			result.put(hintName, hintValue)__			return result__		}_	};merge,a,single,hint,into,a,map,of,hints,possibly,creating,and,copying,all,hints,into,a,new,map,or,otherwise,if,the,map,of,hints,is,empty,creating,a,new,single,entry,map,param,hints,a,map,of,hints,to,be,merge,param,hint,name,the,hint,name,to,merge,param,hint,value,the,hint,value,to,merge,return,a,single,map,with,all,hints;public,static,map,string,object,merge,map,string,object,hints,string,hint,name,object,hint,value,if,hints,is,empty,return,collections,singleton,map,hint,name,hint,value,else,map,string,object,result,new,hash,map,hints,size,1,result,put,all,hints,result,put,hint,name,hint,value,return,result
Hints -> public static Map<String, Object> from(String hintName, Object value);1530793695;Create a map wit a single hint via {@link Collections#singletonMap}._@param hintName the hint name_@param value the hint value_@return the created map;public static Map<String, Object> from(String hintName, Object value) {_		return Collections.singletonMap(hintName, value)__	};create,a,map,wit,a,single,hint,via,link,collections,singleton,map,param,hint,name,the,hint,name,param,value,the,hint,value,return,the,created,map;public,static,map,string,object,from,string,hint,name,object,value,return,collections,singleton,map,hint,name,value
Hints -> public static Map<String, Object> from(String hintName, Object value);1530923528;Create a map wit a single hint via {@link Collections#singletonMap}._@param hintName the hint name_@param value the hint value_@return the created map;public static Map<String, Object> from(String hintName, Object value) {_		return Collections.singletonMap(hintName, value)__	};create,a,map,wit,a,single,hint,via,link,collections,singleton,map,param,hint,name,the,hint,name,param,value,the,hint,value,return,the,created,map;public,static,map,string,object,from,string,hint,name,object,value,return,collections,singleton,map,hint,name,value
Hints -> public static Map<String, Object> from(String hintName, Object value);1531321803;Create a map wit a single hint via {@link Collections#singletonMap}._@param hintName the hint name_@param value the hint value_@return the created map;public static Map<String, Object> from(String hintName, Object value) {_		return Collections.singletonMap(hintName, value)__	};create,a,map,wit,a,single,hint,via,link,collections,singleton,map,param,hint,name,the,hint,name,param,value,the,hint,value,return,the,created,map;public,static,map,string,object,from,string,hint,name,object,value,return,collections,singleton,map,hint,name,value
Hints -> public static Map<String, Object> from(String hintName, Object value);1532520962;Create a map wit a single hint via {@link Collections#singletonMap}._@param hintName the hint name_@param value the hint value_@return the created map;public static Map<String, Object> from(String hintName, Object value) {_		return Collections.singletonMap(hintName, value)__	};create,a,map,wit,a,single,hint,via,link,collections,singleton,map,param,hint,name,the,hint,name,param,value,the,hint,value,return,the,created,map;public,static,map,string,object,from,string,hint,name,object,value,return,collections,singleton,map,hint,name,value
Hints -> public static String getLogPrefix(@Nullable Map<String, Object> hints);1530793695;Obtain the hint {@link #LOG_PREFIX_HINT}, if present, or an empty String._@param hints the hints passed to the encode method_@return the log prefix;public static String getLogPrefix(@Nullable Map<String, Object> hints) {_		return hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : ""__	};obtain,the,hint,link,if,present,or,an,empty,string,param,hints,the,hints,passed,to,the,encode,method,return,the,log,prefix;public,static,string,get,log,prefix,nullable,map,string,object,hints,return,hints,null,string,hints,get,or,default
Hints -> public static String getLogPrefix(@Nullable Map<String, Object> hints);1530923528;Obtain the hint {@link #LOG_PREFIX_HINT}, if present, or an empty String._@param hints the hints passed to the encode method_@return the log prefix;public static String getLogPrefix(@Nullable Map<String, Object> hints) {_		return hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : ""__	};obtain,the,hint,link,if,present,or,an,empty,string,param,hints,the,hints,passed,to,the,encode,method,return,the,log,prefix;public,static,string,get,log,prefix,nullable,map,string,object,hints,return,hints,null,string,hints,get,or,default
Hints -> public static String getLogPrefix(@Nullable Map<String, Object> hints);1531321803;Obtain the hint {@link #LOG_PREFIX_HINT}, if present, or an empty String._@param hints the hints passed to the encode method_@return the log prefix;public static String getLogPrefix(@Nullable Map<String, Object> hints) {_		return hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : ""__	};obtain,the,hint,link,if,present,or,an,empty,string,param,hints,the,hints,passed,to,the,encode,method,return,the,log,prefix;public,static,string,get,log,prefix,nullable,map,string,object,hints,return,hints,null,string,hints,get,or,default
Hints -> public static String getLogPrefix(@Nullable Map<String, Object> hints);1532520962;Obtain the hint {@link #LOG_PREFIX_HINT}, if present, or an empty String._@param hints the hints passed to the encode method_@return the log prefix;public static String getLogPrefix(@Nullable Map<String, Object> hints) {_		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "")__	};obtain,the,hint,link,if,present,or,an,empty,string,param,hints,the,hints,passed,to,the,encode,method,return,the,log,prefix;public,static,string,get,log,prefix,nullable,map,string,object,hints,return,hints,null,string,hints,get,or,default
Hints -> @SuppressWarnings("unchecked") 	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName);1530793695;Obtain the value for a required hint._@param hints the hints map_@param hintName the required hint name_@param <T> the hint type to cast to_@return the hint value_@throws IllegalArgumentException if the hint is not found;@SuppressWarnings("unchecked")_	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName) {_		if (hints == null) {_			throw new IllegalArgumentException("No hints map for required hint '" + hintName + "'")__		}_		T hint = (T) hints.get(hintName)__		if (hint == null) {_			throw new IllegalArgumentException("Hints map must contain the hint '" + hintName + "'")__		}_		return hint__	};obtain,the,value,for,a,required,hint,param,hints,the,hints,map,param,hint,name,the,required,hint,name,param,t,the,hint,type,to,cast,to,return,the,hint,value,throws,illegal,argument,exception,if,the,hint,is,not,found;suppress,warnings,unchecked,public,static,t,t,get,required,hint,nullable,map,string,object,hints,string,hint,name,if,hints,null,throw,new,illegal,argument,exception,no,hints,map,for,required,hint,hint,name,t,hint,t,hints,get,hint,name,if,hint,null,throw,new,illegal,argument,exception,hints,map,must,contain,the,hint,hint,name,return,hint
Hints -> @SuppressWarnings("unchecked") 	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName);1530923528;Obtain the value for a required hint._@param hints the hints map_@param hintName the required hint name_@param <T> the hint type to cast to_@return the hint value_@throws IllegalArgumentException if the hint is not found;@SuppressWarnings("unchecked")_	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName) {_		if (hints == null) {_			throw new IllegalArgumentException("No hints map for required hint '" + hintName + "'")__		}_		T hint = (T) hints.get(hintName)__		if (hint == null) {_			throw new IllegalArgumentException("Hints map must contain the hint '" + hintName + "'")__		}_		return hint__	};obtain,the,value,for,a,required,hint,param,hints,the,hints,map,param,hint,name,the,required,hint,name,param,t,the,hint,type,to,cast,to,return,the,hint,value,throws,illegal,argument,exception,if,the,hint,is,not,found;suppress,warnings,unchecked,public,static,t,t,get,required,hint,nullable,map,string,object,hints,string,hint,name,if,hints,null,throw,new,illegal,argument,exception,no,hints,map,for,required,hint,hint,name,t,hint,t,hints,get,hint,name,if,hint,null,throw,new,illegal,argument,exception,hints,map,must,contain,the,hint,hint,name,return,hint
Hints -> @SuppressWarnings("unchecked") 	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName);1531321803;Obtain the value for a required hint._@param hints the hints map_@param hintName the required hint name_@param <T> the hint type to cast to_@return the hint value_@throws IllegalArgumentException if the hint is not found;@SuppressWarnings("unchecked")_	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName) {_		if (hints == null) {_			throw new IllegalArgumentException("No hints map for required hint '" + hintName + "'")__		}_		T hint = (T) hints.get(hintName)__		if (hint == null) {_			throw new IllegalArgumentException("Hints map must contain the hint '" + hintName + "'")__		}_		return hint__	};obtain,the,value,for,a,required,hint,param,hints,the,hints,map,param,hint,name,the,required,hint,name,param,t,the,hint,type,to,cast,to,return,the,hint,value,throws,illegal,argument,exception,if,the,hint,is,not,found;suppress,warnings,unchecked,public,static,t,t,get,required,hint,nullable,map,string,object,hints,string,hint,name,if,hints,null,throw,new,illegal,argument,exception,no,hints,map,for,required,hint,hint,name,t,hint,t,hints,get,hint,name,if,hint,null,throw,new,illegal,argument,exception,hints,map,must,contain,the,hint,hint,name,return,hint
Hints -> @SuppressWarnings("unchecked") 	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName);1532520962;Obtain the value for a required hint._@param hints the hints map_@param hintName the required hint name_@param <T> the hint type to cast to_@return the hint value_@throws IllegalArgumentException if the hint is not found;@SuppressWarnings("unchecked")_	public static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName) {_		if (hints == null) {_			throw new IllegalArgumentException("No hints map for required hint '" + hintName + "'")__		}_		T hint = (T) hints.get(hintName)__		if (hint == null) {_			throw new IllegalArgumentException("Hints map must contain the hint '" + hintName + "'")__		}_		return hint__	};obtain,the,value,for,a,required,hint,param,hints,the,hints,map,param,hint,name,the,required,hint,name,param,t,the,hint,type,to,cast,to,return,the,hint,value,throws,illegal,argument,exception,if,the,hint,is,not,found;suppress,warnings,unchecked,public,static,t,t,get,required,hint,nullable,map,string,object,hints,string,hint,name,if,hints,null,throw,new,illegal,argument,exception,no,hints,map,for,required,hint,hint,name,t,hint,t,hints,get,hint,name,if,hint,null,throw,new,illegal,argument,exception,hints,map,must,contain,the,hint,hint,name,return,hint
Hints -> public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2);1530793695;Merge two maps of hints, creating and copying into a new map if both have_values, or returning the non-empty map, or an empty map if both are empty._@param hints1 1st map of hints_@param hints2 2nd map of hints_@return a single map with hints from both;public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2) {_		if (hints1.isEmpty() && hints2.isEmpty()) {_			return Collections.emptyMap()__		}_		else if (hints2.isEmpty()) {_			return hints1__		}_		else if (hints1.isEmpty()) {_			return hints2__		}_		else {_			Map<String, Object> result = new HashMap<>(hints1.size() + hints2.size())__			result.putAll(hints1)__			result.putAll(hints2)__			return result__		}_	};merge,two,maps,of,hints,creating,and,copying,into,a,new,map,if,both,have,values,or,returning,the,non,empty,map,or,an,empty,map,if,both,are,empty,param,hints1,1st,map,of,hints,param,hints2,2nd,map,of,hints,return,a,single,map,with,hints,from,both;public,static,map,string,object,merge,map,string,object,hints1,map,string,object,hints2,if,hints1,is,empty,hints2,is,empty,return,collections,empty,map,else,if,hints2,is,empty,return,hints1,else,if,hints1,is,empty,return,hints2,else,map,string,object,result,new,hash,map,hints1,size,hints2,size,result,put,all,hints1,result,put,all,hints2,return,result
Hints -> public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2);1530923528;Merge two maps of hints, creating and copying into a new map if both have_values, or returning the non-empty map, or an empty map if both are empty._@param hints1 1st map of hints_@param hints2 2nd map of hints_@return a single map with hints from both;public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2) {_		if (hints1.isEmpty() && hints2.isEmpty()) {_			return Collections.emptyMap()__		}_		else if (hints2.isEmpty()) {_			return hints1__		}_		else if (hints1.isEmpty()) {_			return hints2__		}_		else {_			Map<String, Object> result = new HashMap<>(hints1.size() + hints2.size())__			result.putAll(hints1)__			result.putAll(hints2)__			return result__		}_	};merge,two,maps,of,hints,creating,and,copying,into,a,new,map,if,both,have,values,or,returning,the,non,empty,map,or,an,empty,map,if,both,are,empty,param,hints1,1st,map,of,hints,param,hints2,2nd,map,of,hints,return,a,single,map,with,hints,from,both;public,static,map,string,object,merge,map,string,object,hints1,map,string,object,hints2,if,hints1,is,empty,hints2,is,empty,return,collections,empty,map,else,if,hints2,is,empty,return,hints1,else,if,hints1,is,empty,return,hints2,else,map,string,object,result,new,hash,map,hints1,size,hints2,size,result,put,all,hints1,result,put,all,hints2,return,result
Hints -> public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2);1531321803;Merge two maps of hints, creating and copying into a new map if both have_values, or returning the non-empty map, or an empty map if both are empty._@param hints1 1st map of hints_@param hints2 2nd map of hints_@return a single map with hints from both;public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2) {_		if (hints1.isEmpty() && hints2.isEmpty()) {_			return Collections.emptyMap()__		}_		else if (hints2.isEmpty()) {_			return hints1__		}_		else if (hints1.isEmpty()) {_			return hints2__		}_		else {_			Map<String, Object> result = new HashMap<>(hints1.size() + hints2.size())__			result.putAll(hints1)__			result.putAll(hints2)__			return result__		}_	};merge,two,maps,of,hints,creating,and,copying,into,a,new,map,if,both,have,values,or,returning,the,non,empty,map,or,an,empty,map,if,both,are,empty,param,hints1,1st,map,of,hints,param,hints2,2nd,map,of,hints,return,a,single,map,with,hints,from,both;public,static,map,string,object,merge,map,string,object,hints1,map,string,object,hints2,if,hints1,is,empty,hints2,is,empty,return,collections,empty,map,else,if,hints2,is,empty,return,hints1,else,if,hints1,is,empty,return,hints2,else,map,string,object,result,new,hash,map,hints1,size,hints2,size,result,put,all,hints1,result,put,all,hints2,return,result
Hints -> public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2);1532520962;Merge two maps of hints, creating and copying into a new map if both have_values, or returning the non-empty map, or an empty map if both are empty._@param hints1 1st map of hints_@param hints2 2nd map of hints_@return a single map with hints from both;public static Map<String, Object> merge(Map<String, Object> hints1, Map<String, Object> hints2) {_		if (hints1.isEmpty() && hints2.isEmpty()) {_			return Collections.emptyMap()__		}_		else if (hints2.isEmpty()) {_			return hints1__		}_		else if (hints1.isEmpty()) {_			return hints2__		}_		else {_			Map<String, Object> result = new HashMap<>(hints1.size() + hints2.size())__			result.putAll(hints1)__			result.putAll(hints2)__			return result__		}_	};merge,two,maps,of,hints,creating,and,copying,into,a,new,map,if,both,have,values,or,returning,the,non,empty,map,or,an,empty,map,if,both,are,empty,param,hints1,1st,map,of,hints,param,hints2,2nd,map,of,hints,return,a,single,map,with,hints,from,both;public,static,map,string,object,merge,map,string,object,hints1,map,string,object,hints2,if,hints1,is,empty,hints2,is,empty,return,collections,empty,map,else,if,hints2,is,empty,return,hints1,else,if,hints1,is,empty,return,hints2,else,map,string,object,result,new,hash,map,hints1,size,hints2,size,result,put,all,hints1,result,put,all,hints2,return,result
Hints -> public static boolean isLoggingSuppressed(@Nullable Map<String, Object> hints);1531321803;Whether to suppress logging based on the hint {@link #SUPPRESS_LOGGING_HINT}._@param hints the hints map_@return whether logging of data is allowed;public static boolean isLoggingSuppressed(@Nullable Map<String, Object> hints) {_		return hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false)__	};whether,to,suppress,logging,based,on,the,hint,link,param,hints,the,hints,map,return,whether,logging,of,data,is,allowed;public,static,boolean,is,logging,suppressed,nullable,map,string,object,hints,return,hints,null,boolean,hints,get,or,default,false
Hints -> public static boolean isLoggingSuppressed(@Nullable Map<String, Object> hints);1532520962;Whether to suppress logging based on the hint {@link #SUPPRESS_LOGGING_HINT}._@param hints the hints map_@return whether logging of data is allowed;public static boolean isLoggingSuppressed(@Nullable Map<String, Object> hints) {_		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false))__	};whether,to,suppress,logging,based,on,the,hint,link,param,hints,the,hints,map,return,whether,logging,of,data,is,allowed;public,static,boolean,is,logging,suppressed,nullable,map,string,object,hints,return,hints,null,boolean,hints,get,or,default,false
Hints -> public static Map<String, Object> none();1530793695;Return an empty map of hints via {@link Collections#emptyMap()}._@return the empty map;public static Map<String, Object> none() {_		return Collections.emptyMap()__	};return,an,empty,map,of,hints,via,link,collections,empty,map,return,the,empty,map;public,static,map,string,object,none,return,collections,empty,map
Hints -> public static Map<String, Object> none();1530923528;Return an empty map of hints via {@link Collections#emptyMap()}._@return the empty map;public static Map<String, Object> none() {_		return Collections.emptyMap()__	};return,an,empty,map,of,hints,via,link,collections,empty,map,return,the,empty,map;public,static,map,string,object,none,return,collections,empty,map
Hints -> public static Map<String, Object> none();1531321803;Return an empty map of hints via {@link Collections#emptyMap()}._@return the empty map;public static Map<String, Object> none() {_		return Collections.emptyMap()__	};return,an,empty,map,of,hints,via,link,collections,empty,map,return,the,empty,map;public,static,map,string,object,none,return,collections,empty,map
Hints -> public static Map<String, Object> none();1532520962;Return an empty map of hints via {@link Collections#emptyMap()}._@return the empty map;public static Map<String, Object> none() {_		return Collections.emptyMap()__	};return,an,empty,map,of,hints,via,link,collections,empty,map,return,the,empty,map;public,static,map,string,object,none,return,collections,empty,map
