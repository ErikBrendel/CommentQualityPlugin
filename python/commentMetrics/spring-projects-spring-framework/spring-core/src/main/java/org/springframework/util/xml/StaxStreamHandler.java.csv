commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void startDocumentInternal() throws XMLStreamException {     this.streamWriter.writeStartDocument(). }
false;protected;0;4;;@Override protected void endDocumentInternal() throws XMLStreamException {     this.streamWriter.writeEndDocument(). }
false;protected;3;25;;@Override protected void startElementInternal(QName name, Attributes attributes, Map<String, String> namespaceMapping) throws XMLStreamException {     this.streamWriter.writeStartElement(name.getPrefix(), name.getLocalPart(), name.getNamespaceURI()).     for (Map.Entry<String, String> entry : namespaceMapping.entrySet()) {         String prefix = entry.getKey().         String namespaceUri = entry.getValue().         this.streamWriter.writeNamespace(prefix, namespaceUri).         if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {             this.streamWriter.setDefaultNamespace(namespaceUri).         } else {             this.streamWriter.setPrefix(prefix, namespaceUri).         }     }     for (int i = 0. i < attributes.getLength(). i++) {         QName attrName = toQName(attributes.getURI(i), attributes.getQName(i)).         if (!isNamespaceDeclaration(attrName)) {             this.streamWriter.writeAttribute(attrName.getPrefix(), attrName.getNamespaceURI(), attrName.getLocalPart(), attributes.getValue(i)).         }     } }
false;protected;2;4;;@Override protected void endElementInternal(QName name, Map<String, String> namespaceMapping) throws XMLStreamException {     this.streamWriter.writeEndElement(). }
false;protected;1;4;;@Override protected void charactersInternal(String data) throws XMLStreamException {     this.streamWriter.writeCharacters(data). }
false;protected;1;4;;@Override protected void cDataInternal(String data) throws XMLStreamException {     this.streamWriter.writeCData(data). }
false;protected;1;4;;@Override protected void ignorableWhitespaceInternal(String data) throws XMLStreamException {     this.streamWriter.writeCharacters(data). }
false;protected;2;4;;@Override protected void processingInstructionInternal(String target, String data) throws XMLStreamException {     this.streamWriter.writeProcessingInstruction(target, data). }
false;protected;1;4;;@Override protected void dtdInternal(String dtd) throws XMLStreamException {     this.streamWriter.writeDTD(dtd). }
false;protected;1;4;;@Override protected void commentInternal(String comment) throws XMLStreamException {     this.streamWriter.writeComment(comment). }
false;public;1;3;;// Ignored @Override public void setDocumentLocator(Locator locator) { }
false;public;1;3;;@Override public void startEntity(String name) throws SAXException { }
false;public;1;3;;@Override public void endEntity(String name) throws SAXException { }
false;protected;1;3;;@Override protected void skippedEntityInternal(String name) throws XMLStreamException { }
