commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public QName getName() {     if (this.event.isStartElement()) {         return this.event.asStartElement().getName().     } else if (this.event.isEndElement()) {         return this.event.asEndElement().getName().     } else {         throw new IllegalStateException().     } }
false;public;0;4;;@Override public Location getLocation() {     return this.event.getLocation(). }
false;public;0;4;;@Override public int getEventType() {     return this.event.getEventType(). }
false;public;0;10;;@Override @Nullable public String getVersion() {     if (this.event.isStartDocument()) {         return ((StartDocument) this.event).getVersion().     } else {         return null.     } }
false;public;1;4;;@Override public Object getProperty(String name) throws IllegalArgumentException {     return this.eventReader.getProperty(name). }
false;public;0;9;;@Override public boolean isStandalone() {     if (this.event.isStartDocument()) {         return ((StartDocument) this.event).isStandalone().     } else {         throw new IllegalStateException().     } }
false;public;0;9;;@Override public boolean standaloneSet() {     if (this.event.isStartDocument()) {         return ((StartDocument) this.event).standaloneSet().     } else {         throw new IllegalStateException().     } }
false;public;0;5;;@Override @Nullable public String getEncoding() {     return null. }
false;public;0;5;;@Override @Nullable public String getCharacterEncodingScheme() {     return null. }
false;public;0;9;;@Override public String getPITarget() {     if (this.event.isProcessingInstruction()) {         return ((ProcessingInstruction) this.event).getTarget().     } else {         throw new IllegalStateException().     } }
false;public;0;9;;@Override public String getPIData() {     if (this.event.isProcessingInstruction()) {         return ((ProcessingInstruction) this.event).getData().     } else {         throw new IllegalStateException().     } }
false;public;0;4;;@Override public int getTextStart() {     return 0. }
false;public;0;12;;@Override public String getText() {     if (this.event.isCharacters()) {         return this.event.asCharacters().getData().     } else if (this.event.getEventType() == XMLEvent.COMMENT) {         return ((Comment) this.event).getText().     } else {         throw new IllegalStateException().     } }
false;public;0;9;;@Override @SuppressWarnings("rawtypes") public int getAttributeCount() {     if (!this.event.isStartElement()) {         throw new IllegalStateException().     }     Iterator attributes = this.event.asStartElement().getAttributes().     return countIterator(attributes). }
false;public;1;4;;@Override public boolean isAttributeSpecified(int index) {     return getAttribute(index).isSpecified(). }
false;public;1;4;;@Override public QName getAttributeName(int index) {     return getAttribute(index).getName(). }
false;public;1;4;;@Override public String getAttributeType(int index) {     return getAttribute(index).getDTDType(). }
false;public;1;4;;@Override public String getAttributeValue(int index) {     return getAttribute(index).getValue(). }
false;private;1;18;;@SuppressWarnings("rawtypes") private Attribute getAttribute(int index) {     if (!this.event.isStartElement()) {         throw new IllegalStateException().     }     int count = 0.     Iterator attributes = this.event.asStartElement().getAttributes().     while (attributes.hasNext()) {         Attribute attribute = (Attribute) attributes.next().         if (count == index) {             return attribute.         } else {             count++.         }     }     throw new IllegalArgumentException(). }
false;public;0;9;;@Override public NamespaceContext getNamespaceContext() {     if (this.event.isStartElement()) {         return this.event.asStartElement().getNamespaceContext().     } else {         throw new IllegalStateException().     } }
false;public;0;15;;@Override @SuppressWarnings("rawtypes") public int getNamespaceCount() {     Iterator namespaces.     if (this.event.isStartElement()) {         namespaces = this.event.asStartElement().getNamespaces().     } else if (this.event.isEndElement()) {         namespaces = this.event.asEndElement().getNamespaces().     } else {         throw new IllegalStateException().     }     return countIterator(namespaces). }
false;public;1;4;;@Override public String getNamespacePrefix(int index) {     return getNamespace(index).getPrefix(). }
false;public;1;4;;@Override public String getNamespaceURI(int index) {     return getNamespace(index).getNamespaceURI(). }
false;private;1;24;;@SuppressWarnings("rawtypes") private Namespace getNamespace(int index) {     Iterator namespaces.     if (this.event.isStartElement()) {         namespaces = this.event.asStartElement().getNamespaces().     } else if (this.event.isEndElement()) {         namespaces = this.event.asEndElement().getNamespaces().     } else {         throw new IllegalStateException().     }     int count = 0.     while (namespaces.hasNext()) {         Namespace namespace = (Namespace) namespaces.next().         if (count == index) {             return namespace.         } else {             count++.         }     }     throw new IllegalArgumentException(). }
false;public;0;5;;@Override public int next() throws XMLStreamException {     this.event = this.eventReader.nextEvent().     return this.event.getEventType(). }
false;public;0;4;;@Override public void close() throws XMLStreamException {     this.eventReader.close(). }
false;private,static;1;9;;@SuppressWarnings("rawtypes") private static int countIterator(Iterator iterator) {     int count = 0.     while (iterator.hasNext()) {         iterator.next().         count++.     }     return count. }
