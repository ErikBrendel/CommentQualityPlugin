# id;timestamp;commentText;codeText;commentWords;codeWords
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc);1366718246;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc,_                                tag == Opcodes.H_INVOKEINTERFACE))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,tag,opcodes,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc);1382700560;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc,_                                tag == Opcodes.H_INVOKEINTERFACE))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,tag,opcodes,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc);1395273982;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc,_                                tag == Opcodes.H_INVOKEINTERFACE))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,tag,opcodes,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc);1395744691;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc,_                                tag == Opcodes.H_INVOKEINTERFACE))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,tag,opcodes,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc);1398255950;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc,_                                tag == Opcodes.H_INVOKEINTERFACE))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,tag,opcodes,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc);1448383082;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc,_                                tag == Opcodes.H_INVOKEINTERFACE))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,tag,opcodes,result,new,item,index,key4,put,result,return,result
ClassWriter -> public byte[] toByteArray() throws ClassTooLargeException, MethodTooLargeException;1536664245;Returns the content of the class file that was built by this ClassWriter.__@return the binary content of the JVMS ClassFile structure that was built by this ClassWriter._@throws ClassTooLargeException if the constant pool of the class is too large._@throws MethodTooLargeException if the Code attribute of a method is too large.;public byte[] toByteArray() throws ClassTooLargeException, MethodTooLargeException {_    _    _    _    _    int size = 24 + 2 * interfaceCount__    int fieldsCount = 0__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      ++fieldsCount__      size += fieldWriter.computeFieldInfoSize()__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    int methodsCount = 0__    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      ++methodsCount__      size += methodWriter.computeMethodInfoSize()__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    int attributesCount = 0__    if (innerClasses != null) {_      ++attributesCount__      size += 8 + innerClasses.length__      symbolTable.addConstantUtf8(Constants.INNER_CLASSES)__    }_    if (enclosingClassIndex != 0) {_      ++attributesCount__      size += 10__      symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__    }_    if (signatureIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SIGNATURE)__    }_    if (sourceFileIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SOURCE_FILE)__    }_    if (debugExtension != null) {_      ++attributesCount__      size += 6 + debugExtension.length__      symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.DEPRECATED)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (symbolTable.computeBootstrapMethodsSize() > 0) {_      ++attributesCount__      size += symbolTable.computeBootstrapMethodsSize()__    }_    if (moduleWriter != null) {_      attributesCount += moduleWriter.getAttributeCount()__      size += moduleWriter.computeAttributesSize()__    }_    if (nestHostClassIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.NEST_HOST)__    }_    if (nestMemberClasses != null) {_      ++attributesCount__      size += 8 + nestMemberClasses.length__      symbolTable.addConstantUtf8(Constants.NEST_MEMBERS)__    }_    if (firstAttribute != null) {_      attributesCount += firstAttribute.getAttributeCount()__      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    _    _    size += symbolTable.getConstantPoolLength()__    int constantPoolCount = symbolTable.getConstantPoolCount()__    if (constantPoolCount > 0xFFFF) {_      throw new ClassTooLargeException(symbolTable.getClassName(), constantPoolCount)__    }__    _    _    ByteVector result = new ByteVector(size)__    result.putInt(0xCAFEBABE).putInt(version)__    symbolTable.putConstantPool(result)__    int mask = (version & 0xFFFF) < Opcodes.V1_5 ? Opcodes.ACC_SYNTHETIC : 0__    result.putShort(accessFlags & ~mask).putShort(thisClass).putShort(superClass)__    result.putShort(interfaceCount)__    for (int i = 0_ i < interfaceCount_ ++i) {_      result.putShort(interfaces[i])__    }_    result.putShort(fieldsCount)__    fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.putFieldInfo(result)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    result.putShort(methodsCount)__    boolean hasFrames = false__    boolean hasAsmInstructions = false__    methodWriter = firstMethod__    while (methodWriter != null) {_      hasFrames |= methodWriter.hasFrames()__      hasAsmInstructions |= methodWriter.hasAsmInstructions()__      methodWriter.putMethodInfo(result)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    result.putShort(attributesCount)__    if (innerClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.INNER_CLASSES))_          .putInt(innerClasses.length + 2)_          .putShort(numberOfInnerClasses)_          .putByteArray(innerClasses.data, 0, innerClasses.length)__    }_    if (enclosingClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD))_          .putInt(4)_          .putShort(enclosingClassIndex)_          .putShort(enclosingMethodIndex)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      result.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if (sourceFileIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_FILE))_          .putInt(2)_          .putShort(sourceFileIndex)__    }_    if (debugExtension != null) {_      int length = debugExtension.length__      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION))_          .putInt(length)_          .putByteArray(debugExtension.data, 0, length)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      result.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), result)__    }_    symbolTable.putBootstrapMethods(result)__    if (moduleWriter != null) {_      moduleWriter.putAttributes(result)__    }_    if (nestHostClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_HOST))_          .putInt(2)_          .putShort(nestHostClassIndex)__    }_    if (nestMemberClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_MEMBERS))_          .putInt(nestMemberClasses.length + 2)_          .putShort(numberOfNestMemberClasses)_          .putByteArray(nestMemberClasses.data, 0, nestMemberClasses.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, result)__    }__    _    if (hasAsmInstructions) {_      return replaceAsmInstructions(result.data, hasFrames)__    } else {_      return result.data__    }_  };returns,the,content,of,the,class,file,that,was,built,by,this,class,writer,return,the,binary,content,of,the,jvms,class,file,structure,that,was,built,by,this,class,writer,throws,class,too,large,exception,if,the,constant,pool,of,the,class,is,too,large,throws,method,too,large,exception,if,the,code,attribute,of,a,method,is,too,large;public,byte,to,byte,array,throws,class,too,large,exception,method,too,large,exception,int,size,24,2,interface,count,int,fields,count,0,field,writer,field,writer,first,field,while,field,writer,null,fields,count,size,field,writer,compute,field,info,size,field,writer,field,writer,field,writer,fv,int,methods,count,0,method,writer,method,writer,first,method,while,method,writer,null,methods,count,size,method,writer,compute,method,info,size,method,writer,method,writer,method,writer,mv,int,attributes,count,0,if,inner,classes,null,attributes,count,size,8,inner,classes,length,symbol,table,add,constant,utf8,constants,if,enclosing,class,index,0,attributes,count,size,10,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,version,0x,ffff,opcodes,attributes,count,size,6,symbol,table,add,constant,utf8,constants,synthetic,if,signature,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,signature,if,source,file,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,debug,extension,null,attributes,count,size,6,debug,extension,length,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,attributes,count,size,6,symbol,table,add,constant,utf8,constants,deprecated,if,last,runtime,visible,annotation,null,attributes,count,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,attributes,count,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,type,annotation,null,attributes,count,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,attributes,count,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,symbol,table,compute,bootstrap,methods,size,0,attributes,count,size,symbol,table,compute,bootstrap,methods,size,if,module,writer,null,attributes,count,module,writer,get,attribute,count,size,module,writer,compute,attributes,size,if,nest,host,class,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,nest,member,classes,null,attributes,count,size,8,nest,member,classes,length,symbol,table,add,constant,utf8,constants,if,first,attribute,null,attributes,count,first,attribute,get,attribute,count,size,first,attribute,compute,attributes,size,symbol,table,size,symbol,table,get,constant,pool,length,int,constant,pool,count,symbol,table,get,constant,pool,count,if,constant,pool,count,0x,ffff,throw,new,class,too,large,exception,symbol,table,get,class,name,constant,pool,count,byte,vector,result,new,byte,vector,size,result,put,int,0x,cafebabe,put,int,version,symbol,table,put,constant,pool,result,int,mask,version,0x,ffff,opcodes,opcodes,0,result,put,short,access,flags,mask,put,short,this,class,put,short,super,class,result,put,short,interface,count,for,int,i,0,i,interface,count,i,result,put,short,interfaces,i,result,put,short,fields,count,field,writer,first,field,while,field,writer,null,field,writer,put,field,info,result,field,writer,field,writer,field,writer,fv,result,put,short,methods,count,boolean,has,frames,false,boolean,has,asm,instructions,false,method,writer,first,method,while,method,writer,null,has,frames,method,writer,has,frames,has,asm,instructions,method,writer,has,asm,instructions,method,writer,put,method,info,result,method,writer,method,writer,method,writer,mv,result,put,short,attributes,count,if,inner,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,inner,classes,length,2,put,short,number,of,inner,classes,put,byte,array,inner,classes,data,0,inner,classes,length,if,enclosing,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,4,put,short,enclosing,class,index,put,short,enclosing,method,index,if,access,flags,opcodes,0,version,0x,ffff,opcodes,result,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,result,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,source,file,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,source,file,index,if,debug,extension,null,int,length,debug,extension,length,result,put,short,symbol,table,add,constant,utf8,constants,put,int,length,put,byte,array,debug,extension,data,0,length,if,access,flags,opcodes,0,result,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,symbol,table,put,bootstrap,methods,result,if,module,writer,null,module,writer,put,attributes,result,if,nest,host,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,nest,host,class,index,if,nest,member,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,nest,member,classes,length,2,put,short,number,of,nest,member,classes,put,byte,array,nest,member,classes,data,0,nest,member,classes,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,result,if,has,asm,instructions,return,replace,asm,instructions,result,data,has,frames,else,return,result,data
ClassWriter -> public byte[] toByteArray() throws ClassTooLargeException, MethodTooLargeException;1537204147;Returns the content of the class file that was built by this ClassWriter.__@return the binary content of the JVMS ClassFile structure that was built by this ClassWriter._@throws ClassTooLargeException if the constant pool of the class is too large._@throws MethodTooLargeException if the Code attribute of a method is too large.;public byte[] toByteArray() throws ClassTooLargeException, MethodTooLargeException {_    _    _    _    _    int size = 24 + 2 * interfaceCount__    int fieldsCount = 0__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      ++fieldsCount__      size += fieldWriter.computeFieldInfoSize()__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    int methodsCount = 0__    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      ++methodsCount__      size += methodWriter.computeMethodInfoSize()__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    int attributesCount = 0__    if (innerClasses != null) {_      ++attributesCount__      size += 8 + innerClasses.length__      symbolTable.addConstantUtf8(Constants.INNER_CLASSES)__    }_    if (enclosingClassIndex != 0) {_      ++attributesCount__      size += 10__      symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__    }_    if (signatureIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SIGNATURE)__    }_    if (sourceFileIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SOURCE_FILE)__    }_    if (debugExtension != null) {_      ++attributesCount__      size += 6 + debugExtension.length__      symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.DEPRECATED)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (symbolTable.computeBootstrapMethodsSize() > 0) {_      ++attributesCount__      size += symbolTable.computeBootstrapMethodsSize()__    }_    if (moduleWriter != null) {_      attributesCount += moduleWriter.getAttributeCount()__      size += moduleWriter.computeAttributesSize()__    }_    if (nestHostClassIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.NEST_HOST)__    }_    if (nestMemberClasses != null) {_      ++attributesCount__      size += 8 + nestMemberClasses.length__      symbolTable.addConstantUtf8(Constants.NEST_MEMBERS)__    }_    if (firstAttribute != null) {_      attributesCount += firstAttribute.getAttributeCount()__      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    _    _    size += symbolTable.getConstantPoolLength()__    int constantPoolCount = symbolTable.getConstantPoolCount()__    if (constantPoolCount > 0xFFFF) {_      throw new ClassTooLargeException(symbolTable.getClassName(), constantPoolCount)__    }__    _    _    ByteVector result = new ByteVector(size)__    result.putInt(0xCAFEBABE).putInt(version)__    symbolTable.putConstantPool(result)__    int mask = (version & 0xFFFF) < Opcodes.V1_5 ? Opcodes.ACC_SYNTHETIC : 0__    result.putShort(accessFlags & ~mask).putShort(thisClass).putShort(superClass)__    result.putShort(interfaceCount)__    for (int i = 0_ i < interfaceCount_ ++i) {_      result.putShort(interfaces[i])__    }_    result.putShort(fieldsCount)__    fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.putFieldInfo(result)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    result.putShort(methodsCount)__    boolean hasFrames = false__    boolean hasAsmInstructions = false__    methodWriter = firstMethod__    while (methodWriter != null) {_      hasFrames |= methodWriter.hasFrames()__      hasAsmInstructions |= methodWriter.hasAsmInstructions()__      methodWriter.putMethodInfo(result)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    result.putShort(attributesCount)__    if (innerClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.INNER_CLASSES))_          .putInt(innerClasses.length + 2)_          .putShort(numberOfInnerClasses)_          .putByteArray(innerClasses.data, 0, innerClasses.length)__    }_    if (enclosingClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD))_          .putInt(4)_          .putShort(enclosingClassIndex)_          .putShort(enclosingMethodIndex)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      result.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if (sourceFileIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_FILE))_          .putInt(2)_          .putShort(sourceFileIndex)__    }_    if (debugExtension != null) {_      int length = debugExtension.length__      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION))_          .putInt(length)_          .putByteArray(debugExtension.data, 0, length)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      result.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), result)__    }_    symbolTable.putBootstrapMethods(result)__    if (moduleWriter != null) {_      moduleWriter.putAttributes(result)__    }_    if (nestHostClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_HOST))_          .putInt(2)_          .putShort(nestHostClassIndex)__    }_    if (nestMemberClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_MEMBERS))_          .putInt(nestMemberClasses.length + 2)_          .putShort(numberOfNestMemberClasses)_          .putByteArray(nestMemberClasses.data, 0, nestMemberClasses.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, result)__    }__    _    if (hasAsmInstructions) {_      return replaceAsmInstructions(result.data, hasFrames)__    } else {_      return result.data__    }_  };returns,the,content,of,the,class,file,that,was,built,by,this,class,writer,return,the,binary,content,of,the,jvms,class,file,structure,that,was,built,by,this,class,writer,throws,class,too,large,exception,if,the,constant,pool,of,the,class,is,too,large,throws,method,too,large,exception,if,the,code,attribute,of,a,method,is,too,large;public,byte,to,byte,array,throws,class,too,large,exception,method,too,large,exception,int,size,24,2,interface,count,int,fields,count,0,field,writer,field,writer,first,field,while,field,writer,null,fields,count,size,field,writer,compute,field,info,size,field,writer,field,writer,field,writer,fv,int,methods,count,0,method,writer,method,writer,first,method,while,method,writer,null,methods,count,size,method,writer,compute,method,info,size,method,writer,method,writer,method,writer,mv,int,attributes,count,0,if,inner,classes,null,attributes,count,size,8,inner,classes,length,symbol,table,add,constant,utf8,constants,if,enclosing,class,index,0,attributes,count,size,10,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,version,0x,ffff,opcodes,attributes,count,size,6,symbol,table,add,constant,utf8,constants,synthetic,if,signature,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,signature,if,source,file,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,debug,extension,null,attributes,count,size,6,debug,extension,length,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,attributes,count,size,6,symbol,table,add,constant,utf8,constants,deprecated,if,last,runtime,visible,annotation,null,attributes,count,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,attributes,count,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,type,annotation,null,attributes,count,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,attributes,count,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,symbol,table,compute,bootstrap,methods,size,0,attributes,count,size,symbol,table,compute,bootstrap,methods,size,if,module,writer,null,attributes,count,module,writer,get,attribute,count,size,module,writer,compute,attributes,size,if,nest,host,class,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,nest,member,classes,null,attributes,count,size,8,nest,member,classes,length,symbol,table,add,constant,utf8,constants,if,first,attribute,null,attributes,count,first,attribute,get,attribute,count,size,first,attribute,compute,attributes,size,symbol,table,size,symbol,table,get,constant,pool,length,int,constant,pool,count,symbol,table,get,constant,pool,count,if,constant,pool,count,0x,ffff,throw,new,class,too,large,exception,symbol,table,get,class,name,constant,pool,count,byte,vector,result,new,byte,vector,size,result,put,int,0x,cafebabe,put,int,version,symbol,table,put,constant,pool,result,int,mask,version,0x,ffff,opcodes,opcodes,0,result,put,short,access,flags,mask,put,short,this,class,put,short,super,class,result,put,short,interface,count,for,int,i,0,i,interface,count,i,result,put,short,interfaces,i,result,put,short,fields,count,field,writer,first,field,while,field,writer,null,field,writer,put,field,info,result,field,writer,field,writer,field,writer,fv,result,put,short,methods,count,boolean,has,frames,false,boolean,has,asm,instructions,false,method,writer,first,method,while,method,writer,null,has,frames,method,writer,has,frames,has,asm,instructions,method,writer,has,asm,instructions,method,writer,put,method,info,result,method,writer,method,writer,method,writer,mv,result,put,short,attributes,count,if,inner,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,inner,classes,length,2,put,short,number,of,inner,classes,put,byte,array,inner,classes,data,0,inner,classes,length,if,enclosing,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,4,put,short,enclosing,class,index,put,short,enclosing,method,index,if,access,flags,opcodes,0,version,0x,ffff,opcodes,result,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,result,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,source,file,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,source,file,index,if,debug,extension,null,int,length,debug,extension,length,result,put,short,symbol,table,add,constant,utf8,constants,put,int,length,put,byte,array,debug,extension,data,0,length,if,access,flags,opcodes,0,result,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,symbol,table,put,bootstrap,methods,result,if,module,writer,null,module,writer,put,attributes,result,if,nest,host,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,nest,host,class,index,if,nest,member,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,nest,member,classes,length,2,put,short,number,of,nest,member,classes,put,byte,array,nest,member,classes,data,0,nest,member,classes,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,result,if,has,asm,instructions,return,replace,asm,instructions,result,data,has,frames,else,return,result,data
ClassWriter -> public byte[] toByteArray() throws ClassTooLargeException, MethodTooLargeException;1539119582;Returns the content of the class file that was built by this ClassWriter.__@return the binary content of the JVMS ClassFile structure that was built by this ClassWriter._@throws ClassTooLargeException if the constant pool of the class is too large._@throws MethodTooLargeException if the Code attribute of a method is too large.;public byte[] toByteArray() throws ClassTooLargeException, MethodTooLargeException {_    _    _    _    _    int size = 24 + 2 * interfaceCount__    int fieldsCount = 0__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      ++fieldsCount__      size += fieldWriter.computeFieldInfoSize()__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    int methodsCount = 0__    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      ++methodsCount__      size += methodWriter.computeMethodInfoSize()__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    int attributesCount = 0__    if (innerClasses != null) {_      ++attributesCount__      size += 8 + innerClasses.length__      symbolTable.addConstantUtf8(Constants.INNER_CLASSES)__    }_    if (enclosingClassIndex != 0) {_      ++attributesCount__      size += 10__      symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__    }_    if (signatureIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SIGNATURE)__    }_    if (sourceFileIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SOURCE_FILE)__    }_    if (debugExtension != null) {_      ++attributesCount__      size += 6 + debugExtension.length__      symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.DEPRECATED)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (symbolTable.computeBootstrapMethodsSize() > 0) {_      ++attributesCount__      size += symbolTable.computeBootstrapMethodsSize()__    }_    if (moduleWriter != null) {_      attributesCount += moduleWriter.getAttributeCount()__      size += moduleWriter.computeAttributesSize()__    }_    if (nestHostClassIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.NEST_HOST)__    }_    if (nestMemberClasses != null) {_      ++attributesCount__      size += 8 + nestMemberClasses.length__      symbolTable.addConstantUtf8(Constants.NEST_MEMBERS)__    }_    if (firstAttribute != null) {_      attributesCount += firstAttribute.getAttributeCount()__      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    _    _    size += symbolTable.getConstantPoolLength()__    int constantPoolCount = symbolTable.getConstantPoolCount()__    if (constantPoolCount > 0xFFFF) {_      throw new ClassTooLargeException(symbolTable.getClassName(), constantPoolCount)__    }__    _    _    ByteVector result = new ByteVector(size)__    result.putInt(0xCAFEBABE).putInt(version)__    symbolTable.putConstantPool(result)__    int mask = (version & 0xFFFF) < Opcodes.V1_5 ? Opcodes.ACC_SYNTHETIC : 0__    result.putShort(accessFlags & ~mask).putShort(thisClass).putShort(superClass)__    result.putShort(interfaceCount)__    for (int i = 0_ i < interfaceCount_ ++i) {_      result.putShort(interfaces[i])__    }_    result.putShort(fieldsCount)__    fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.putFieldInfo(result)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    result.putShort(methodsCount)__    boolean hasFrames = false__    boolean hasAsmInstructions = false__    methodWriter = firstMethod__    while (methodWriter != null) {_      hasFrames |= methodWriter.hasFrames()__      hasAsmInstructions |= methodWriter.hasAsmInstructions()__      methodWriter.putMethodInfo(result)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    result.putShort(attributesCount)__    if (innerClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.INNER_CLASSES))_          .putInt(innerClasses.length + 2)_          .putShort(numberOfInnerClasses)_          .putByteArray(innerClasses.data, 0, innerClasses.length)__    }_    if (enclosingClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD))_          .putInt(4)_          .putShort(enclosingClassIndex)_          .putShort(enclosingMethodIndex)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      result.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if (sourceFileIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_FILE))_          .putInt(2)_          .putShort(sourceFileIndex)__    }_    if (debugExtension != null) {_      int length = debugExtension.length__      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION))_          .putInt(length)_          .putByteArray(debugExtension.data, 0, length)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      result.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), result)__    }_    symbolTable.putBootstrapMethods(result)__    if (moduleWriter != null) {_      moduleWriter.putAttributes(result)__    }_    if (nestHostClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_HOST))_          .putInt(2)_          .putShort(nestHostClassIndex)__    }_    if (nestMemberClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_MEMBERS))_          .putInt(nestMemberClasses.length + 2)_          .putShort(numberOfNestMemberClasses)_          .putByteArray(nestMemberClasses.data, 0, nestMemberClasses.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, result)__    }__    _    if (hasAsmInstructions) {_      return replaceAsmInstructions(result.data, hasFrames)__    } else {_      return result.data__    }_  };returns,the,content,of,the,class,file,that,was,built,by,this,class,writer,return,the,binary,content,of,the,jvms,class,file,structure,that,was,built,by,this,class,writer,throws,class,too,large,exception,if,the,constant,pool,of,the,class,is,too,large,throws,method,too,large,exception,if,the,code,attribute,of,a,method,is,too,large;public,byte,to,byte,array,throws,class,too,large,exception,method,too,large,exception,int,size,24,2,interface,count,int,fields,count,0,field,writer,field,writer,first,field,while,field,writer,null,fields,count,size,field,writer,compute,field,info,size,field,writer,field,writer,field,writer,fv,int,methods,count,0,method,writer,method,writer,first,method,while,method,writer,null,methods,count,size,method,writer,compute,method,info,size,method,writer,method,writer,method,writer,mv,int,attributes,count,0,if,inner,classes,null,attributes,count,size,8,inner,classes,length,symbol,table,add,constant,utf8,constants,if,enclosing,class,index,0,attributes,count,size,10,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,version,0x,ffff,opcodes,attributes,count,size,6,symbol,table,add,constant,utf8,constants,synthetic,if,signature,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,signature,if,source,file,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,debug,extension,null,attributes,count,size,6,debug,extension,length,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,attributes,count,size,6,symbol,table,add,constant,utf8,constants,deprecated,if,last,runtime,visible,annotation,null,attributes,count,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,attributes,count,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,type,annotation,null,attributes,count,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,attributes,count,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,symbol,table,compute,bootstrap,methods,size,0,attributes,count,size,symbol,table,compute,bootstrap,methods,size,if,module,writer,null,attributes,count,module,writer,get,attribute,count,size,module,writer,compute,attributes,size,if,nest,host,class,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,nest,member,classes,null,attributes,count,size,8,nest,member,classes,length,symbol,table,add,constant,utf8,constants,if,first,attribute,null,attributes,count,first,attribute,get,attribute,count,size,first,attribute,compute,attributes,size,symbol,table,size,symbol,table,get,constant,pool,length,int,constant,pool,count,symbol,table,get,constant,pool,count,if,constant,pool,count,0x,ffff,throw,new,class,too,large,exception,symbol,table,get,class,name,constant,pool,count,byte,vector,result,new,byte,vector,size,result,put,int,0x,cafebabe,put,int,version,symbol,table,put,constant,pool,result,int,mask,version,0x,ffff,opcodes,opcodes,0,result,put,short,access,flags,mask,put,short,this,class,put,short,super,class,result,put,short,interface,count,for,int,i,0,i,interface,count,i,result,put,short,interfaces,i,result,put,short,fields,count,field,writer,first,field,while,field,writer,null,field,writer,put,field,info,result,field,writer,field,writer,field,writer,fv,result,put,short,methods,count,boolean,has,frames,false,boolean,has,asm,instructions,false,method,writer,first,method,while,method,writer,null,has,frames,method,writer,has,frames,has,asm,instructions,method,writer,has,asm,instructions,method,writer,put,method,info,result,method,writer,method,writer,method,writer,mv,result,put,short,attributes,count,if,inner,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,inner,classes,length,2,put,short,number,of,inner,classes,put,byte,array,inner,classes,data,0,inner,classes,length,if,enclosing,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,4,put,short,enclosing,class,index,put,short,enclosing,method,index,if,access,flags,opcodes,0,version,0x,ffff,opcodes,result,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,result,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,source,file,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,source,file,index,if,debug,extension,null,int,length,debug,extension,length,result,put,short,symbol,table,add,constant,utf8,constants,put,int,length,put,byte,array,debug,extension,data,0,length,if,access,flags,opcodes,0,result,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,symbol,table,put,bootstrap,methods,result,if,module,writer,null,module,writer,put,attributes,result,if,nest,host,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,nest,host,class,index,if,nest,member,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,nest,member,classes,length,2,put,short,number,of,nest,member,classes,put,byte,array,nest,member,classes,data,0,nest,member,classes,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,result,if,has,asm,instructions,return,replace,asm,instructions,result,data,has,frames,else,return,result,data
ClassWriter -> public int newClass(final String value);1366718246;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1382700560;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1395273982;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1395744691;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1398255950;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1448383082;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1457705343;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1483093254;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newClassItem(value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,class,item,value,index
ClassWriter -> public int newClass(final String value);1505821772;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newStringishItem(CLASS, value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,stringish,item,class,value,index
ClassWriter -> public int newClass(final String value);1518518428;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_        return newStringishItem(CLASS, value).index__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,new,stringish,item,class,value,index
ClassWriter -> public int newClass(final String value);1531241461;Adds a class reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param value the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_    return symbolTable.addConstantClass(value).index__  };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,symbol,table,add,constant,class,value,index
ClassWriter -> public int newClass(final String value);1536664245;Adds a class reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param value the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_    return symbolTable.addConstantClass(value).index__  };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,symbol,table,add,constant,class,value,index
ClassWriter -> public int newClass(final String value);1537204147;Adds a class reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param value the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_    return symbolTable.addConstantClass(value).index__  };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,symbol,table,add,constant,class,value,index
ClassWriter -> public int newClass(final String value);1539119582;Adds a class reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param value the internal name of the class._@return the index of a new or already existing class reference item.;public int newClass(final String value) {_    return symbolTable.addConstantClass(value).index__  };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,the,index,of,a,new,or,already,existing,class,reference,item;public,int,new,class,final,string,value,return,symbol,table,add,constant,class,value,index
ClassWriter -> int getMergedType(final int type1, final int type2);1366718246;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1382700560;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1395273982;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1395744691;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1398255950;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1448383082;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1457705343;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1483093254;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1505821772;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> int getMergedType(final int type1, final int type2);1518518428;Returns the index of the common super type of the two given types. This_method calls {@link #getCommonSuperClass} and caches the result in the_{@link #items} hash table to speedup future calls with the same_parameters.__@param type1_index of an internal name in {@link #typeTable}._@param type2_index of an internal name in {@link #typeTable}._@return the index of the common super type of the two given types.;int getMergedType(final int type1, final int type2) {_        key2.type = TYPE_MERGED__        key2.longVal = type1 | (((long) type2) << 32)__        key2.hashCode = 0x7FFFFFFF & (TYPE_MERGED + type1 + type2)__        Item result = get(key2)__        if (result == null) {_            String t = typeTable[type1].strVal1__            String u = typeTable[type2].strVal1__            key2.intVal = addType(getCommonSuperClass(t, u))__            result = new Item((short) 0, key2)__            put(result)__        }_        return result.intVal__    };returns,the,index,of,the,common,super,type,of,the,two,given,types,this,method,calls,link,get,common,super,class,and,caches,the,result,in,the,link,items,hash,table,to,speedup,future,calls,with,the,same,parameters,param,type1,index,of,an,internal,name,in,link,type,table,param,type2,index,of,an,internal,name,in,link,type,table,return,the,index,of,the,common,super,type,of,the,two,given,types;int,get,merged,type,final,int,type1,final,int,type2,key2,type,key2,long,val,type1,long,type2,32,key2,hash,code,0x7fffffff,type1,type2,item,result,get,key2,if,result,null,string,t,type,table,type1,str,val1,string,u,type,table,type2,str,val1,key2,int,val,add,type,get,common,super,class,t,u,result,new,item,short,0,key2,put,result,return,result,int,val
ClassWriter -> private Item get(final Item key);1366718246;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1382700560;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1395273982;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1395744691;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1398255950;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1448383082;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1457705343;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1483093254;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1505821772;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> private Item get(final Item key);1518518428;Returns the constant pool's hash table item which is equal to the given_item.__@param key_a constant pool item._@return the constant pool's hash table item which is equal to the given_item, or <tt>null</tt> if there is no such item.;private Item get(final Item key) {_        Item i = items[key.hashCode % items.length]__        while (i != null && (i.type != key.type || !key.isEqualTo(i))) {_            i = i.next__        }_        return i__    };returns,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,param,key,a,constant,pool,item,return,the,constant,pool,s,hash,table,item,which,is,equal,to,the,given,item,or,tt,null,tt,if,there,is,no,such,item;private,item,get,final,item,key,item,i,items,key,hash,code,items,length,while,i,null,i,type,key,type,key,is,equal,to,i,i,i,next,return,i
ClassWriter -> public ClassWriter(final int flags);1366718246;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM4)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm4,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1382700560;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM4)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm4,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1395273982;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM5)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm5,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1395744691;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM5)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm5,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1398255950;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM5)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm5,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1448383082;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM5)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm5,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1457705343;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM5)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.computeMaxs = (flags & COMPUTE_MAXS) != 0__        this.computeFrames = (flags & COMPUTE_FRAMES) != 0__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm5,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,maxs,flags,0,this,compute,frames,flags,0
ClassWriter -> public ClassWriter(final int flags);1483093254;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM5)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.compute = (flags & COMPUTE_FRAMES) != 0 ? MethodWriter.FRAMES_                : ((flags & COMPUTE_MAXS) != 0 ? MethodWriter.MAXS_                        : MethodWriter.NOTHING)__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm5,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,flags,0,method,writer,frames,flags,0,method,writer,maxs,method,writer,nothing
ClassWriter -> public ClassWriter(final int flags);1505821772;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM6)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.compute = (flags & COMPUTE_FRAMES) != 0 ? MethodWriter.FRAMES_                : ((flags & COMPUTE_MAXS) != 0 ? MethodWriter.MAXS_                        : MethodWriter.NOTHING)__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm6,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,flags,0,method,writer,frames,flags,0,method,writer,maxs,method,writer,nothing
ClassWriter -> public ClassWriter(final int flags);1518518428;Constructs a new {@link ClassWriter} object.__@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_        super(Opcodes.ASM6)__        index = 1__        pool = new ByteVector()__        items = new Item[256]__        threshold = (int) (0.75d * items.length)__        key = new Item()__        key2 = new Item()__        key3 = new Item()__        key4 = new Item()__        this.compute = (flags & COMPUTE_FRAMES) != 0 ? MethodWriter.FRAMES_                : ((flags & COMPUTE_MAXS) != 0 ? MethodWriter.MAXS_                        : MethodWriter.NOTHING)__    };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link;public,class,writer,final,int,flags,super,opcodes,asm6,index,1,pool,new,byte,vector,items,new,item,256,threshold,int,0,75d,items,length,key,new,item,key2,new,item,key3,new,item,key4,new,item,this,compute,flags,0,method,writer,frames,flags,0,method,writer,maxs,method,writer,nothing
ClassWriter -> public ClassWriter(final int flags);1531241461;Constructs a new {@link ClassWriter} object.__@param flags option flags that can be used to modify the default behavior of this class. Must_be zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_    this(null, flags)__  };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link;public,class,writer,final,int,flags,this,null,flags
ClassWriter -> public ClassWriter(final int flags);1536664245;Constructs a new {@link ClassWriter} object.__@param flags option flags that can be used to modify the default behavior of this class. Must_be zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_    this(null, flags)__  };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link;public,class,writer,final,int,flags,this,null,flags
ClassWriter -> public ClassWriter(final int flags);1537204147;Constructs a new {@link ClassWriter} object.__@param flags option flags that can be used to modify the default behavior of this class. Must_be zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_    this(null, flags)__  };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link;public,class,writer,final,int,flags,this,null,flags
ClassWriter -> public ClassWriter(final int flags);1539119582;Constructs a new {@link ClassWriter} object.__@param flags option flags that can be used to modify the default behavior of this class. Must_be zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}.;public ClassWriter(final int flags) {_    this(null, flags)__  };constructs,a,new,link,class,writer,object,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link;public,class,writer,final,int,flags,this,null,flags
ClassWriter -> public int newHandle(       final int tag,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1531241461;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@param isInterface true if the owner is an interface._@return the index of a new or already existing method type reference item.;public int newHandle(_      final int tag,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    return symbolTable.addConstantMethodHandle(tag, owner, name, descriptor, isInterface).index__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,param,is,interface,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,method,handle,tag,owner,name,descriptor,is,interface,index
ClassWriter -> public int newHandle(       final int tag,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1536664245;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@param isInterface true if the owner is an interface._@return the index of a new or already existing method type reference item.;public int newHandle(_      final int tag,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    return symbolTable.addConstantMethodHandle(tag, owner, name, descriptor, isInterface).index__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,param,is,interface,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,method,handle,tag,owner,name,descriptor,is,interface,index
ClassWriter -> public int newHandle(       final int tag,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1537204147;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@param isInterface true if the owner is an interface._@return the index of a new or already existing method type reference item.;public int newHandle(_      final int tag,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    return symbolTable.addConstantMethodHandle(tag, owner, name, descriptor, isInterface).index__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,param,is,interface,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,method,handle,tag,owner,name,descriptor,is,interface,index
ClassWriter -> public int newHandle(       final int tag,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1539119582;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@param isInterface true if the owner is an interface._@return the index of a new or already existing method type reference item.;public int newHandle(_      final int tag,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    return symbolTable.addConstantMethodHandle(tag, owner, name, descriptor, isInterface).index__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,param,is,interface,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,method,handle,tag,owner,name,descriptor,is,interface,index
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1366718246;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1382700560;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1395273982;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1395744691;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1398255950;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1448383082;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1457705343;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1483093254;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1505821772;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newMethodItem(final String owner, final String name,             final String desc, final boolean itf);1518518428;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return a new or already existing method reference item.;Item newMethodItem(final String owner, final String name,_            final String desc, final boolean itf) {_        int type = itf ? IMETH : METH__        key3.set(type, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(type, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,a,new,or,already,existing,method,reference,item;item,new,method,item,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,int,type,itf,imeth,meth,key3,set,type,owner,name,desc,item,result,get,key3,if,result,null,put122,type,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> private Item newString(final String value);1366718246;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1382700560;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1395273982;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1395744691;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1398255950;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1448383082;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1457705343;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> private Item newString(final String value);1483093254;Adds a string to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the String value._@return a new or already existing string item.;private Item newString(final String value) {_        key2.set(STR, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(STR, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,string,value,return,a,new,or,already,existing,string,item;private,item,new,string,final,string,value,key2,set,str,value,null,null,item,result,get,key2,if,result,null,pool,put12,str,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc, final boolean itf);1457705343;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc, itf))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,itf,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc, final boolean itf);1483093254;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc, itf))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,itf,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc, final boolean itf);1505821772;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc, itf))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,itf,result,new,item,index,key4,put,result,return,result
ClassWriter -> Item newHandleItem(final int tag, final String owner, final String name,             final String desc, final boolean itf);1518518428;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return a new or an already existing method type reference item.;Item newHandleItem(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        key4.set(HANDLE_BASE + tag, owner, name, desc)__        Item result = get(key4)__        if (result == null) {_            if (tag <= Opcodes.H_PUTSTATIC) {_                put112(HANDLE, tag, newField(owner, name, desc))__            } else {_                put112(HANDLE,_                        tag,_                        newMethod(owner, name, desc, itf))__            }_            result = new Item(index++, key4)__            put(result)__        }_        return result__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,a,new,or,an,already,existing,method,type,reference,item;item,new,handle,item,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,key4,set,tag,owner,name,desc,item,result,get,key4,if,result,null,if,tag,opcodes,put112,handle,tag,new,field,owner,name,desc,else,put112,handle,tag,new,method,owner,name,desc,itf,result,new,item,index,key4,put,result,return,result
ClassWriter -> public int newNameType(final String name, final String desc);1366718246;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1382700560;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1395273982;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1395744691;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1398255950;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1448383082;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1457705343;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1483093254;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1505821772;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> public int newNameType(final String name, final String desc);1518518428;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param name_a name._@param desc_a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String desc) {_        return newNameTypeItem(name, desc).index__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,desc,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,desc,return,new,name,type,item,name,desc,index
ClassWriter -> Item newFloat(final float value);1366718246;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1382700560;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1395273982;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1395744691;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1398255950;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1448383082;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1457705343;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1483093254;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1505821772;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newFloat(final float value);1518518428;Adds a float to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the float value._@return a new or already existing float item.;Item newFloat(final float value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(FLOAT).putInt(key.intVal)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,a,float,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,float,value,return,a,new,or,already,existing,float,item;item,new,float,final,float,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,float,put,int,key,int,val,result,new,item,index,key,put,result,return,result
ClassWriter -> public int newInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1531241461;Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor descriptor of the invoke method._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing invokedynamic reference item.;public int newInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantInvokeDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,descriptor,of,the,invoke,method,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,invoke,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1536664245;Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor descriptor of the invoke method._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing invokedynamic reference item.;public int newInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantInvokeDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,descriptor,of,the,invoke,method,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,invoke,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1537204147;Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor descriptor of the invoke method._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing invokedynamic reference item.;public int newInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantInvokeDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,descriptor,of,the,invoke,method,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,invoke,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newInvokeDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1539119582;Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor descriptor of the invoke method._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing invokedynamic reference item.;public int newInvokeDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantInvokeDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,descriptor,of,the,invoke,method,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,invoke,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newMethodType(final String methodDesc);1366718246;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1382700560;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1395273982;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1395744691;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1398255950;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1448383082;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1457705343;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1483093254;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newMethodTypeItem(methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,method,type,item,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1505821772;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newStringishItem(MTYPE, methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,stringish,item,mtype,method,desc,index
ClassWriter -> public int newMethodType(final String methodDesc);1518518428;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return the index of a new or already existing method type reference_item.;public int newMethodType(final String methodDesc) {_        return newStringishItem(MTYPE, methodDesc).index__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,desc,return,new,stringish,item,mtype,method,desc,index
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1366718246;Returns the common super type of the two given types. The default_implementation of this method <i>loads<i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        ClassLoader classLoader = getClass().getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1382700560;Returns the common super type of the two given types. The default_implementation of this method <i>loads<i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        ClassLoader classLoader = getClass().getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1395273982;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        ClassLoader classLoader = getClass().getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1395744691;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        ClassLoader classLoader = getClass().getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1398255950;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        ClassLoader classLoader = getClass().getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1448383082;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        _        ClassLoader classLoader = getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1457705343;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        _        ClassLoader classLoader = getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1483093254;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        _        ClassLoader classLoader = getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1505821772;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        _        ClassLoader classLoader = getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1518518428;Returns the common super type of the two given types. The default_implementation of this method <i>loads</i> the two given classes and uses_the java.lang.Class methods to find the common super class. It can be_overridden to compute this common super type in other ways, in particular_without actually loading any class, or to take into account the class_that is currently being generated by this ClassWriter, which can of_course not be loaded since it is under construction.__@param type1_the internal name of a class._@param type2_the internal name of another class._@return the internal name of the common super class of the two given_classes.;protected String getCommonSuperClass(final String type1, final String type2) {_        Class<?> c, d__        _        ClassLoader classLoader = getClassLoader()__        try {_            c = Class.forName(type1.replace('/', '.'), false, classLoader)__            d = Class.forName(type2.replace('/', '.'), false, classLoader)__        } catch (Exception e) {_            throw new RuntimeException(e.toString())__        }_        if (c.isAssignableFrom(d)) {_            return type1__        }_        if (d.isAssignableFrom(c)) {_            return type2__        }_        if (c.isInterface() || d.isInterface()) {_            return "java/lang/Object"__        } else {_            do {_                c = c.getSuperclass()__            } while (!c.isAssignableFrom(d))__            return c.getName().replace('.', '/')__        }_    };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,c,d,class,loader,class,loader,get,class,loader,try,c,class,for,name,type1,replace,false,class,loader,d,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,runtime,exception,e,to,string,if,c,is,assignable,from,d,return,type1,if,d,is,assignable,from,c,return,type2,if,c,is,interface,d,is,interface,return,java,lang,object,else,do,c,c,get,superclass,while,c,is,assignable,from,d,return,c,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1531241461;Returns the common super type of the two given types. The default implementation of this method_<i>loads</i> the two given classes and uses the java.lang.Class methods to find the common_super class. It can be overridden to compute this common super type in other ways, in_particular without actually loading any class, or to take into account the class that is_currently being generated by this ClassWriter, which can of course not be loaded since it is_under construction.__@param type1 the internal name of a class._@param type2 the internal name of another class._@return the internal name of the common super class of the two given classes.;protected String getCommonSuperClass(final String type1, final String type2) {_    ClassLoader classLoader = getClassLoader()__    Class<?> class1__    try {_      class1 = Class.forName(type1.replace('/', '.'), false, classLoader)__    } catch (Exception e) {_      throw new TypeNotPresentException(type1, e)__    }_    Class<?> class2__    try {_      class2 = Class.forName(type2.replace('/', '.'), false, classLoader)__    } catch (Exception e) {_      throw new TypeNotPresentException(type2, e)__    }_    if (class1.isAssignableFrom(class2)) {_      return type1__    }_    if (class2.isAssignableFrom(class1)) {_      return type2__    }_    if (class1.isInterface() || class2.isInterface()) {_      return "java/lang/Object"__    } else {_      do {_        class1 = class1.getSuperclass()__      } while (!class1.isAssignableFrom(class2))__      return class1.getName().replace('.', '/')__    }_  };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,loader,class,loader,get,class,loader,class,class1,try,class1,class,for,name,type1,replace,false,class,loader,catch,exception,e,throw,new,type,not,present,exception,type1,e,class,class2,try,class2,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,type,not,present,exception,type2,e,if,class1,is,assignable,from,class2,return,type1,if,class2,is,assignable,from,class1,return,type2,if,class1,is,interface,class2,is,interface,return,java,lang,object,else,do,class1,class1,get,superclass,while,class1,is,assignable,from,class2,return,class1,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1536664245;Returns the common super type of the two given types. The default implementation of this method_<i>loads</i> the two given classes and uses the java.lang.Class methods to find the common_super class. It can be overridden to compute this common super type in other ways, in_particular without actually loading any class, or to take into account the class that is_currently being generated by this ClassWriter, which can of course not be loaded since it is_under construction.__@param type1 the internal name of a class._@param type2 the internal name of another class._@return the internal name of the common super class of the two given classes.;protected String getCommonSuperClass(final String type1, final String type2) {_    ClassLoader classLoader = getClassLoader()__    Class<?> class1__    try {_      class1 = Class.forName(type1.replace('/', '.'), false, classLoader)__    } catch (Exception e) {_      throw new TypeNotPresentException(type1, e)__    }_    Class<?> class2__    try {_      class2 = Class.forName(type2.replace('/', '.'), false, classLoader)__    } catch (Exception e) {_      throw new TypeNotPresentException(type2, e)__    }_    if (class1.isAssignableFrom(class2)) {_      return type1__    }_    if (class2.isAssignableFrom(class1)) {_      return type2__    }_    if (class1.isInterface() || class2.isInterface()) {_      return "java/lang/Object"__    } else {_      do {_        class1 = class1.getSuperclass()__      } while (!class1.isAssignableFrom(class2))__      return class1.getName().replace('.', '/')__    }_  };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,loader,class,loader,get,class,loader,class,class1,try,class1,class,for,name,type1,replace,false,class,loader,catch,exception,e,throw,new,type,not,present,exception,type1,e,class,class2,try,class2,class,for,name,type2,replace,false,class,loader,catch,exception,e,throw,new,type,not,present,exception,type2,e,if,class1,is,assignable,from,class2,return,type1,if,class2,is,assignable,from,class1,return,type2,if,class1,is,interface,class2,is,interface,return,java,lang,object,else,do,class1,class1,get,superclass,while,class1,is,assignable,from,class2,return,class1,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1537204147;Returns the common super type of the two given types. The default implementation of this method_<i>loads</i> the two given classes and uses the java.lang.Class methods to find the common_super class. It can be overridden to compute this common super type in other ways, in_particular without actually loading any class, or to take into account the class that is_currently being generated by this ClassWriter, which can of course not be loaded since it is_under construction.__@param type1 the internal name of a class._@param type2 the internal name of another class._@return the internal name of the common super class of the two given classes.;protected String getCommonSuperClass(final String type1, final String type2) {_    ClassLoader classLoader = getClassLoader()__    Class<?> class1__    try {_      class1 = Class.forName(type1.replace('/', '.'), false, classLoader)__    } catch (ClassNotFoundException e) {_      throw new TypeNotPresentException(type1, e)__    }_    Class<?> class2__    try {_      class2 = Class.forName(type2.replace('/', '.'), false, classLoader)__    } catch (ClassNotFoundException e) {_      throw new TypeNotPresentException(type2, e)__    }_    if (class1.isAssignableFrom(class2)) {_      return type1__    }_    if (class2.isAssignableFrom(class1)) {_      return type2__    }_    if (class1.isInterface() || class2.isInterface()) {_      return "java/lang/Object"__    } else {_      do {_        class1 = class1.getSuperclass()__      } while (!class1.isAssignableFrom(class2))__      return class1.getName().replace('.', '/')__    }_  };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,loader,class,loader,get,class,loader,class,class1,try,class1,class,for,name,type1,replace,false,class,loader,catch,class,not,found,exception,e,throw,new,type,not,present,exception,type1,e,class,class2,try,class2,class,for,name,type2,replace,false,class,loader,catch,class,not,found,exception,e,throw,new,type,not,present,exception,type2,e,if,class1,is,assignable,from,class2,return,type1,if,class2,is,assignable,from,class1,return,type2,if,class1,is,interface,class2,is,interface,return,java,lang,object,else,do,class1,class1,get,superclass,while,class1,is,assignable,from,class2,return,class1,get,name,replace
ClassWriter -> protected String getCommonSuperClass(final String type1, final String type2);1539119582;Returns the common super type of the two given types. The default implementation of this method_<i>loads</i> the two given classes and uses the java.lang.Class methods to find the common_super class. It can be overridden to compute this common super type in other ways, in_particular without actually loading any class, or to take into account the class that is_currently being generated by this ClassWriter, which can of course not be loaded since it is_under construction.__@param type1 the internal name of a class._@param type2 the internal name of another class._@return the internal name of the common super class of the two given classes.;protected String getCommonSuperClass(final String type1, final String type2) {_    ClassLoader classLoader = getClassLoader()__    Class<?> class1__    try {_      class1 = Class.forName(type1.replace('/', '.'), false, classLoader)__    } catch (ClassNotFoundException e) {_      throw new TypeNotPresentException(type1, e)__    }_    Class<?> class2__    try {_      class2 = Class.forName(type2.replace('/', '.'), false, classLoader)__    } catch (ClassNotFoundException e) {_      throw new TypeNotPresentException(type2, e)__    }_    if (class1.isAssignableFrom(class2)) {_      return type1__    }_    if (class2.isAssignableFrom(class1)) {_      return type2__    }_    if (class1.isInterface() || class2.isInterface()) {_      return "java/lang/Object"__    } else {_      do {_        class1 = class1.getSuperclass()__      } while (!class1.isAssignableFrom(class2))__      return class1.getName().replace('.', '/')__    }_  };returns,the,common,super,type,of,the,two,given,types,the,default,implementation,of,this,method,i,loads,i,the,two,given,classes,and,uses,the,java,lang,class,methods,to,find,the,common,super,class,it,can,be,overridden,to,compute,this,common,super,type,in,other,ways,in,particular,without,actually,loading,any,class,or,to,take,into,account,the,class,that,is,currently,being,generated,by,this,class,writer,which,can,of,course,not,be,loaded,since,it,is,under,construction,param,type1,the,internal,name,of,a,class,param,type2,the,internal,name,of,another,class,return,the,internal,name,of,the,common,super,class,of,the,two,given,classes;protected,string,get,common,super,class,final,string,type1,final,string,type2,class,loader,class,loader,get,class,loader,class,class1,try,class1,class,for,name,type1,replace,false,class,loader,catch,class,not,found,exception,e,throw,new,type,not,present,exception,type1,e,class,class2,try,class2,class,for,name,type2,replace,false,class,loader,catch,class,not,found,exception,e,throw,new,type,not,present,exception,type2,e,if,class1,is,assignable,from,class2,return,type1,if,class2,is,assignable,from,class1,return,type2,if,class1,is,interface,class2,is,interface,return,java,lang,object,else,do,class1,class1,get,superclass,while,class1,is,assignable,from,class2,return,class1,get,name,replace
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1366718246;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1382700560;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1395273982;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1395744691;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1398255950;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1448383082;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1457705343;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that the_maximum stack size nor the stack frames will be computed for_these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1483093254;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that_neither the maximum stack size nor the stack frames will be_computed for these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1505821772;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that_neither the maximum stack size nor the stack frames will be_computed for these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1518518428;Constructs a new {@link ClassWriter} object and enables optimizations for_"mostly add" bytecode transformations. These optimizations are the_following:__<ul>_<li>The constant pool from the original class is copied as is in the new_class, which saves time. New constant pool entries will be added at the_end if necessary, but unused constant pool entries <i>won't be_removed</i>.</li>_<li>Methods that are not transformed are copied as is in the new class,_directly from the original class bytecode (i.e. without emitting visit_events for all the method instructions), which saves a <i>lot</i> of_time. Untransformed methods are detected by the fact that the_{@link ClassReader} receives {@link MethodVisitor} objects that come from_a {@link ClassWriter} (and not from any other {@link ClassVisitor}_instance).</li>_</ul>__@param classReader_the {@link ClassReader} used to read the original class. It_will be used to copy the entire constant pool from the_original class and also to copy other fragments of original_bytecode where applicable._@param flags_option flags that can be used to modify the default behavior_of this class. <i>These option flags do not affect methods_that are copied as is in the new class. This means that_neither the maximum stack size nor the stack frames will be_computed for these methods</i>. See {@link #COMPUTE_MAXS},_{@link #COMPUTE_FRAMES}.;public ClassWriter(final ClassReader classReader, final int flags) {_        this(flags)__        classReader.copyPool(this)__        this.cr = classReader__    };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,from,the,original,class,is,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,i,won,t,be,removed,i,li,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,li,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i,see,link,link;public,class,writer,final,class,reader,class,reader,final,int,flags,this,flags,class,reader,copy,pool,this,this,cr,class,reader
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1531241461;Constructs a new {@link ClassWriter} object and enables optimizations for "mostly add" bytecode_transformations. These optimizations are the following:__<ul>_<li>The constant pool and bootstrap methods from the original class are copied as is in the_new class, which saves time. New constant pool entries and new bootstrap methods will be_added at the end if necessary, but unused constant pool entries or bootstrap methods_<i>won't be removed</i>._<li>Methods that are not transformed are copied as is in the new class, directly from the_original class bytecode (i.e. without emitting visit events for all the method_instructions), which saves a <i>lot</i> of time. Untransformed methods are detected by_the fact that the {@link ClassReader} receives {@link MethodVisitor} objects that come_from a {@link ClassWriter} (and not from any other {@link ClassVisitor} instance)._</ul>__@param classReader the {@link ClassReader} used to read the original class. It will be used to_copy the entire constant pool and bootstrap methods from the original class and also to_copy other fragments of original bytecode where applicable._@param flags option flags that can be used to modify the default behavior of this class.Must be_zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}. <i>These option flags do_not affect methods that are copied as is in the new class. This means that neither the_maximum stack size nor the stack frames will be computed for these methods</i>.;public ClassWriter(final ClassReader classReader, final int flags) {_    super(Opcodes.ASM6)__    symbolTable = classReader == null ? new SymbolTable(this) : new SymbolTable(this, classReader)__    if ((flags & COMPUTE_FRAMES) != 0) {_      this.compute = MethodWriter.COMPUTE_ALL_FRAMES__    } else if ((flags & COMPUTE_MAXS) != 0) {_      this.compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL__    } else {_      this.compute = MethodWriter.COMPUTE_NOTHING__    }_  };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,and,bootstrap,methods,from,the,original,class,are,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,and,new,bootstrap,methods,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,or,bootstrap,methods,i,won,t,be,removed,i,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,and,bootstrap,methods,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i;public,class,writer,final,class,reader,class,reader,final,int,flags,super,opcodes,asm6,symbol,table,class,reader,null,new,symbol,table,this,new,symbol,table,this,class,reader,if,flags,0,this,compute,method,writer,else,if,flags,0,this,compute,method,writer,else,this,compute,method,writer
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1536664245;Constructs a new {@link ClassWriter} object and enables optimizations for "mostly add" bytecode_transformations. These optimizations are the following:__<ul>_<li>The constant pool and bootstrap methods from the original class are copied as is in the_new class, which saves time. New constant pool entries and new bootstrap methods will be_added at the end if necessary, but unused constant pool entries or bootstrap methods_<i>won't be removed</i>._<li>Methods that are not transformed are copied as is in the new class, directly from the_original class bytecode (i.e. without emitting visit events for all the method_instructions), which saves a <i>lot</i> of time. Untransformed methods are detected by_the fact that the {@link ClassReader} receives {@link MethodVisitor} objects that come_from a {@link ClassWriter} (and not from any other {@link ClassVisitor} instance)._</ul>__@param classReader the {@link ClassReader} used to read the original class. It will be used to_copy the entire constant pool and bootstrap methods from the original class and also to_copy other fragments of original bytecode where applicable._@param flags option flags that can be used to modify the default behavior of this class.Must be_zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}. <i>These option flags do_not affect methods that are copied as is in the new class. This means that neither the_maximum stack size nor the stack frames will be computed for these methods</i>.;public ClassWriter(final ClassReader classReader, final int flags) {_    super(Opcodes.ASM7)__    symbolTable = classReader == null ? new SymbolTable(this) : new SymbolTable(this, classReader)__    if ((flags & COMPUTE_FRAMES) != 0) {_      this.compute = MethodWriter.COMPUTE_ALL_FRAMES__    } else if ((flags & COMPUTE_MAXS) != 0) {_      this.compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL__    } else {_      this.compute = MethodWriter.COMPUTE_NOTHING__    }_  };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,and,bootstrap,methods,from,the,original,class,are,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,and,new,bootstrap,methods,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,or,bootstrap,methods,i,won,t,be,removed,i,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,and,bootstrap,methods,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i;public,class,writer,final,class,reader,class,reader,final,int,flags,super,opcodes,asm7,symbol,table,class,reader,null,new,symbol,table,this,new,symbol,table,this,class,reader,if,flags,0,this,compute,method,writer,else,if,flags,0,this,compute,method,writer,else,this,compute,method,writer
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1537204147;Constructs a new {@link ClassWriter} object and enables optimizations for "mostly add" bytecode_transformations. These optimizations are the following:__<ul>_<li>The constant pool and bootstrap methods from the original class are copied as is in the_new class, which saves time. New constant pool entries and new bootstrap methods will be_added at the end if necessary, but unused constant pool entries or bootstrap methods_<i>won't be removed</i>._<li>Methods that are not transformed are copied as is in the new class, directly from the_original class bytecode (i.e. without emitting visit events for all the method_instructions), which saves a <i>lot</i> of time. Untransformed methods are detected by_the fact that the {@link ClassReader} receives {@link MethodVisitor} objects that come_from a {@link ClassWriter} (and not from any other {@link ClassVisitor} instance)._</ul>__@param classReader the {@link ClassReader} used to read the original class. It will be used to_copy the entire constant pool and bootstrap methods from the original class and also to_copy other fragments of original bytecode where applicable._@param flags option flags that can be used to modify the default behavior of this class.Must be_zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}. <i>These option flags do_not affect methods that are copied as is in the new class. This means that neither the_maximum stack size nor the stack frames will be computed for these methods</i>.;public ClassWriter(final ClassReader classReader, final int flags) {_    super(Opcodes.ASM7)__    symbolTable = classReader == null ? new SymbolTable(this) : new SymbolTable(this, classReader)__    if ((flags & COMPUTE_FRAMES) != 0) {_      this.compute = MethodWriter.COMPUTE_ALL_FRAMES__    } else if ((flags & COMPUTE_MAXS) != 0) {_      this.compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL__    } else {_      this.compute = MethodWriter.COMPUTE_NOTHING__    }_  };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,and,bootstrap,methods,from,the,original,class,are,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,and,new,bootstrap,methods,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,or,bootstrap,methods,i,won,t,be,removed,i,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,and,bootstrap,methods,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i;public,class,writer,final,class,reader,class,reader,final,int,flags,super,opcodes,asm7,symbol,table,class,reader,null,new,symbol,table,this,new,symbol,table,this,class,reader,if,flags,0,this,compute,method,writer,else,if,flags,0,this,compute,method,writer,else,this,compute,method,writer
ClassWriter -> public ClassWriter(final ClassReader classReader, final int flags);1539119582;Constructs a new {@link ClassWriter} object and enables optimizations for "mostly add" bytecode_transformations. These optimizations are the following:__<ul>_<li>The constant pool and bootstrap methods from the original class are copied as is in the_new class, which saves time. New constant pool entries and new bootstrap methods will be_added at the end if necessary, but unused constant pool entries or bootstrap methods_<i>won't be removed</i>._<li>Methods that are not transformed are copied as is in the new class, directly from the_original class bytecode (i.e. without emitting visit events for all the method_instructions), which saves a <i>lot</i> of time. Untransformed methods are detected by_the fact that the {@link ClassReader} receives {@link MethodVisitor} objects that come_from a {@link ClassWriter} (and not from any other {@link ClassVisitor} instance)._</ul>__@param classReader the {@link ClassReader} used to read the original class. It will be used to_copy the entire constant pool and bootstrap methods from the original class and also to_copy other fragments of original bytecode where applicable._@param flags option flags that can be used to modify the default behavior of this class.Must be_zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}. <i>These option flags do_not affect methods that are copied as is in the new class. This means that neither the_maximum stack size nor the stack frames will be computed for these methods</i>.;public ClassWriter(final ClassReader classReader, final int flags) {_    super(Opcodes.ASM7)__    symbolTable = classReader == null ? new SymbolTable(this) : new SymbolTable(this, classReader)__    if ((flags & COMPUTE_FRAMES) != 0) {_      this.compute = MethodWriter.COMPUTE_ALL_FRAMES__    } else if ((flags & COMPUTE_MAXS) != 0) {_      this.compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL__    } else {_      this.compute = MethodWriter.COMPUTE_NOTHING__    }_  };constructs,a,new,link,class,writer,object,and,enables,optimizations,for,mostly,add,bytecode,transformations,these,optimizations,are,the,following,ul,li,the,constant,pool,and,bootstrap,methods,from,the,original,class,are,copied,as,is,in,the,new,class,which,saves,time,new,constant,pool,entries,and,new,bootstrap,methods,will,be,added,at,the,end,if,necessary,but,unused,constant,pool,entries,or,bootstrap,methods,i,won,t,be,removed,i,li,methods,that,are,not,transformed,are,copied,as,is,in,the,new,class,directly,from,the,original,class,bytecode,i,e,without,emitting,visit,events,for,all,the,method,instructions,which,saves,a,i,lot,i,of,time,untransformed,methods,are,detected,by,the,fact,that,the,link,class,reader,receives,link,method,visitor,objects,that,come,from,a,link,class,writer,and,not,from,any,other,link,class,visitor,instance,ul,param,class,reader,the,link,class,reader,used,to,read,the,original,class,it,will,be,used,to,copy,the,entire,constant,pool,and,bootstrap,methods,from,the,original,class,and,also,to,copy,other,fragments,of,original,bytecode,where,applicable,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,must,be,zero,or,more,of,link,and,link,i,these,option,flags,do,not,affect,methods,that,are,copied,as,is,in,the,new,class,this,means,that,neither,the,maximum,stack,size,nor,the,stack,frames,will,be,computed,for,these,methods,i;public,class,writer,final,class,reader,class,reader,final,int,flags,super,opcodes,asm7,symbol,table,class,reader,null,new,symbol,table,this,new,symbol,table,this,class,reader,if,flags,0,this,compute,method,writer,else,if,flags,0,this,compute,method,writer,else,this,compute,method,writer
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1366718246;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1382700560;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1395273982;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1395744691;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1398255950;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1448383082;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1457705343;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1483093254;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1505821772;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public int newInvokeDynamic(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1518518428;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return the index of a new or already existing invokedynamic reference_item.;public int newInvokeDynamic(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        return newInvokeDynamicItem(name, desc, bsm, bsmArgs).index__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,invokedynamic,reference,item;public,int,new,invoke,dynamic,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,return,new,invoke,dynamic,item,name,desc,bsm,bsm,args,index
ClassWriter -> public byte[] toByteArray();1366718246;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 4__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length - 2__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 2, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            ClassWriter cw = new ClassWriter(COMPUTE_FRAMES)__            new ClassReader(out.data).accept(cw, ClassReader.SKIP_FRAMES)__            return cw.toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,4,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,2,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,2,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,class,writer,cw,new,class,writer,new,class,reader,out,data,accept,cw,class,reader,return,cw,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1382700560;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 4__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length - 2__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 2, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            bootstrapMethodsCount = 0__            bootstrapMethods = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            computeMaxs = false__            computeFrames = true__            invalidFrames = false__            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,4,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,2,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,2,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,bootstrap,methods,count,0,bootstrap,methods,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,maxs,false,compute,frames,true,invalid,frames,false,new,class,reader,out,data,accept,this,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1395273982;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            bootstrapMethodsCount = 0__            bootstrapMethods = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            computeMaxs = false__            computeFrames = true__            invalidFrames = false__            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,bootstrap,methods,count,0,bootstrap,methods,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,maxs,false,compute,frames,true,invalid,frames,false,new,class,reader,out,data,accept,this,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1395744691;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            bootstrapMethodsCount = 0__            bootstrapMethods = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            computeMaxs = false__            computeFrames = true__            invalidFrames = false__            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,bootstrap,methods,count,0,bootstrap,methods,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,maxs,false,compute,frames,true,invalid,frames,false,new,class,reader,out,data,accept,this,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1398255950;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            bootstrapMethodsCount = 0__            bootstrapMethods = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            computeMaxs = false__            computeFrames = true__            invalidFrames = false__            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,bootstrap,methods,count,0,bootstrap,methods,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,maxs,false,compute,frames,true,invalid,frames,false,new,class,reader,out,data,accept,this,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1448383082;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            bootstrapMethodsCount = 0__            bootstrapMethods = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            computeMaxs = false__            computeFrames = true__            invalidFrames = false__            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,bootstrap,methods,count,0,bootstrap,methods,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,maxs,false,compute,frames,true,invalid,frames,false,new,class,reader,out,data,accept,this,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1457705343;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (invalidFrames) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            bootstrapMethodsCount = 0__            bootstrapMethods = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            computeMaxs = false__            computeFrames = true__            invalidFrames = false__            new ClassReader(out.data).accept(this, ClassReader.SKIP_FRAMES)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,invalid,frames,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,bootstrap,methods,count,0,bootstrap,methods,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,maxs,false,compute,frames,true,invalid,frames,false,new,class,reader,out,data,accept,this,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1483093254;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (hasAsmInsns) {_            anns = null__            ianns = null__            attrs = null__            innerClassesCount = 0__            innerClasses = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            compute = MethodWriter.INSERTED_FRAMES__            hasAsmInsns = false__            new ClassReader(out.data).accept(this, ClassReader.EXPAND_FRAMES_                    | ClassReader.EXPAND_ASM_INSNS)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,has,asm,insns,anns,null,ianns,null,attrs,null,inner,classes,count,0,inner,classes,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,method,writer,has,asm,insns,false,new,class,reader,out,data,accept,this,class,reader,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1505821772;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (moduleWriter != null) {_            attributeCount += 1 + moduleWriter.attributeCount__            size += 6 + moduleWriter.size + moduleWriter.attributesSize__            newUTF8("Module")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (moduleWriter != null) {_            out.putShort(newUTF8("Module"))__            moduleWriter.put(out)__            moduleWriter.putAttributes(out)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (hasAsmInsns) {_            boolean hasFrames = false__            mb = firstMethod__            while (mb != null) {_                hasFrames |= mb.frameCount > 0__                mb = (MethodWriter) mb.mv__            }_            anns = null__            ianns = null__            attrs = null__            moduleWriter = null__            innerClassesCount = 0__            innerClasses = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            compute = hasFrames ? MethodWriter.INSERTED_FRAMES : 0__            hasAsmInsns = false__            new ClassReader(out.data).accept(this,_                    (hasFrames ? ClassReader.EXPAND_FRAMES : 0)_                    | ClassReader.EXPAND_ASM_INSNS)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,module,writer,null,attribute,count,1,module,writer,attribute,count,size,6,module,writer,size,module,writer,attributes,size,new,utf8,module,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,module,writer,null,out,put,short,new,utf8,module,module,writer,put,out,module,writer,put,attributes,out,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,has,asm,insns,boolean,has,frames,false,mb,first,method,while,mb,null,has,frames,mb,frame,count,0,mb,method,writer,mb,mv,anns,null,ianns,null,attrs,null,module,writer,null,inner,classes,count,0,inner,classes,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,has,frames,method,writer,0,has,asm,insns,false,new,class,reader,out,data,accept,this,has,frames,class,reader,0,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1518518428;Returns the bytecode of the class that was build with this class writer.__@return the bytecode of the class that was build with this class writer.;public byte[] toByteArray() {_        if (index > 0xFFFF) {_            throw new RuntimeException("Class file too large!")__        }_        _        int size = 24 + 2 * interfaceCount__        int nbFields = 0__        FieldWriter fb = firstField__        while (fb != null) {_            ++nbFields__            size += fb.getSize()__            fb = (FieldWriter) fb.fv__        }_        int nbMethods = 0__        MethodWriter mb = firstMethod__        while (mb != null) {_            ++nbMethods__            size += mb.getSize()__            mb = (MethodWriter) mb.mv__        }_        int attributeCount = 0__        if (bootstrapMethods != null) {_            _            _            ++attributeCount__            size += 8 + bootstrapMethods.length__            newUTF8("BootstrapMethods")__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            ++attributeCount__            size += 8__            newUTF8("Signature")__        }_        if (sourceFile != 0) {_            ++attributeCount__            size += 8__            newUTF8("SourceFile")__        }_        if (sourceDebug != null) {_            ++attributeCount__            size += sourceDebug.length + 6__            newUTF8("SourceDebugExtension")__        }_        if (enclosingMethodOwner != 0) {_            ++attributeCount__            size += 10__            newUTF8("EnclosingMethod")__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__            size += 6__            newUTF8("Deprecated")__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__                size += 6__                newUTF8("Synthetic")__            }_        }_        if (innerClasses != null) {_            ++attributeCount__            size += 8 + innerClasses.length__            newUTF8("InnerClasses")__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__            size += 8 + anns.getSize()__            newUTF8("RuntimeVisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__            size += 8 + ianns.getSize()__            newUTF8("RuntimeInvisibleAnnotations")__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__            size += 8 + tanns.getSize()__            newUTF8("RuntimeVisibleTypeAnnotations")__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__            size += 8 + itanns.getSize()__            newUTF8("RuntimeInvisibleTypeAnnotations")__        }_        if (moduleWriter != null) {_            attributeCount += 1 + moduleWriter.attributeCount__            size += 6 + moduleWriter.size + moduleWriter.attributesSize__            newUTF8("Module")__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__            size += attrs.getSize(this, null, 0, -1, -1)__        }_        size += pool.length__        _        _        ByteVector out = new ByteVector(size)__        out.putInt(0xCAFEBABE).putInt(version)__        out.putShort(index).putByteArray(pool.data, 0, pool.length)__        int mask = Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC)__        out.putShort(access & ~mask).putShort(name).putShort(superName)__        out.putShort(interfaceCount)__        for (int i = 0_ i < interfaceCount_ ++i) {_            out.putShort(interfaces[i])__        }_        out.putShort(nbFields)__        fb = firstField__        while (fb != null) {_            fb.put(out)__            fb = (FieldWriter) fb.fv__        }_        out.putShort(nbMethods)__        mb = firstMethod__        while (mb != null) {_            mb.put(out)__            mb = (MethodWriter) mb.mv__        }_        out.putShort(attributeCount)__        if (bootstrapMethods != null) {_            out.putShort(newUTF8("BootstrapMethods"))__            out.putInt(bootstrapMethods.length + 2).putShort(_                    bootstrapMethodsCount)__            out.putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length)__        }_        if (ClassReader.SIGNATURES && signature != 0) {_            out.putShort(newUTF8("Signature")).putInt(2).putShort(signature)__        }_        if (sourceFile != 0) {_            out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile)__        }_        if (sourceDebug != null) {_            int len = sourceDebug.length__            out.putShort(newUTF8("SourceDebugExtension")).putInt(len)__            out.putByteArray(sourceDebug.data, 0, len)__        }_        if (moduleWriter != null) {_            out.putShort(newUTF8("Module"))__            moduleWriter.put(out)__            moduleWriter.putAttributes(out)__        }_        if (enclosingMethodOwner != 0) {_            out.putShort(newUTF8("EnclosingMethod")).putInt(4)__            out.putShort(enclosingMethodOwner).putShort(enclosingMethod)__        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(newUTF8("Deprecated")).putInt(0)__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((version & 0xFFFF) < Opcodes.V1_5_                    || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(newUTF8("Synthetic")).putInt(0)__            }_        }_        if (innerClasses != null) {_            out.putShort(newUTF8("InnerClasses"))__            out.putInt(innerClasses.length + 2).putShort(innerClassesCount)__            out.putByteArray(innerClasses.data, 0, innerClasses.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (attrs != null) {_            attrs.put(this, null, 0, -1, -1, out)__        }_        if (hasAsmInsns) {_            boolean hasFrames = false__            mb = firstMethod__            while (mb != null) {_                hasFrames |= mb.frameCount > 0__                mb = (MethodWriter) mb.mv__            }_            anns = null__            ianns = null__            attrs = null__            moduleWriter = null__            innerClassesCount = 0__            innerClasses = null__            firstField = null__            lastField = null__            firstMethod = null__            lastMethod = null__            compute = hasFrames ? MethodWriter.INSERTED_FRAMES : 0__            hasAsmInsns = false__            new ClassReader(out.data).accept(this,_                    (hasFrames ? ClassReader.EXPAND_FRAMES : 0)_                    | ClassReader.EXPAND_ASM_INSNS)__            return toByteArray()__        }_        return out.data__    };returns,the,bytecode,of,the,class,that,was,build,with,this,class,writer,return,the,bytecode,of,the,class,that,was,build,with,this,class,writer;public,byte,to,byte,array,if,index,0x,ffff,throw,new,runtime,exception,class,file,too,large,int,size,24,2,interface,count,int,nb,fields,0,field,writer,fb,first,field,while,fb,null,nb,fields,size,fb,get,size,fb,field,writer,fb,fv,int,nb,methods,0,method,writer,mb,first,method,while,mb,null,nb,methods,size,mb,get,size,mb,method,writer,mb,mv,int,attribute,count,0,if,bootstrap,methods,null,attribute,count,size,8,bootstrap,methods,length,new,utf8,bootstrap,methods,if,class,reader,signatures,signature,0,attribute,count,size,8,new,utf8,signature,if,source,file,0,attribute,count,size,8,new,utf8,source,file,if,source,debug,null,attribute,count,size,source,debug,length,6,new,utf8,source,debug,extension,if,enclosing,method,owner,0,attribute,count,size,10,new,utf8,enclosing,method,if,access,opcodes,0,attribute,count,size,6,new,utf8,deprecated,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,attribute,count,size,6,new,utf8,synthetic,if,inner,classes,null,attribute,count,size,8,inner,classes,length,new,utf8,inner,classes,if,class,reader,annotations,anns,null,attribute,count,size,8,anns,get,size,new,utf8,runtime,visible,annotations,if,class,reader,annotations,ianns,null,attribute,count,size,8,ianns,get,size,new,utf8,runtime,invisible,annotations,if,class,reader,annotations,tanns,null,attribute,count,size,8,tanns,get,size,new,utf8,runtime,visible,type,annotations,if,class,reader,annotations,itanns,null,attribute,count,size,8,itanns,get,size,new,utf8,runtime,invisible,type,annotations,if,module,writer,null,attribute,count,1,module,writer,attribute,count,size,6,module,writer,size,module,writer,attributes,size,new,utf8,module,if,attrs,null,attribute,count,attrs,get,count,size,attrs,get,size,this,null,0,1,1,size,pool,length,byte,vector,out,new,byte,vector,size,out,put,int,0x,cafebabe,put,int,version,out,put,short,index,put,byte,array,pool,data,0,pool,length,int,mask,opcodes,access,out,put,short,access,mask,put,short,name,put,short,super,name,out,put,short,interface,count,for,int,i,0,i,interface,count,i,out,put,short,interfaces,i,out,put,short,nb,fields,fb,first,field,while,fb,null,fb,put,out,fb,field,writer,fb,fv,out,put,short,nb,methods,mb,first,method,while,mb,null,mb,put,out,mb,method,writer,mb,mv,out,put,short,attribute,count,if,bootstrap,methods,null,out,put,short,new,utf8,bootstrap,methods,out,put,int,bootstrap,methods,length,2,put,short,bootstrap,methods,count,out,put,byte,array,bootstrap,methods,data,0,bootstrap,methods,length,if,class,reader,signatures,signature,0,out,put,short,new,utf8,signature,put,int,2,put,short,signature,if,source,file,0,out,put,short,new,utf8,source,file,put,int,2,put,short,source,file,if,source,debug,null,int,len,source,debug,length,out,put,short,new,utf8,source,debug,extension,put,int,len,out,put,byte,array,source,debug,data,0,len,if,module,writer,null,out,put,short,new,utf8,module,module,writer,put,out,module,writer,put,attributes,out,if,enclosing,method,owner,0,out,put,short,new,utf8,enclosing,method,put,int,4,out,put,short,enclosing,method,owner,put,short,enclosing,method,if,access,opcodes,0,out,put,short,new,utf8,deprecated,put,int,0,if,access,opcodes,0,if,version,0x,ffff,opcodes,access,0,out,put,short,new,utf8,synthetic,put,int,0,if,inner,classes,null,out,put,short,new,utf8,inner,classes,out,put,int,inner,classes,length,2,put,short,inner,classes,count,out,put,byte,array,inner,classes,data,0,inner,classes,length,if,class,reader,annotations,anns,null,out,put,short,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,attrs,null,attrs,put,this,null,0,1,1,out,if,has,asm,insns,boolean,has,frames,false,mb,first,method,while,mb,null,has,frames,mb,frame,count,0,mb,method,writer,mb,mv,anns,null,ianns,null,attrs,null,module,writer,null,inner,classes,count,0,inner,classes,null,first,field,null,last,field,null,first,method,null,last,method,null,compute,has,frames,method,writer,0,has,asm,insns,false,new,class,reader,out,data,accept,this,has,frames,class,reader,0,class,reader,return,to,byte,array,return,out,data
ClassWriter -> public byte[] toByteArray();1531241461;Returns the content of the class file that was built by this ClassWriter.__@return the binary content of the JVMS ClassFile structure that was built by this ClassWriter.;public byte[] toByteArray() {_    _    _    _    _    int size = 24 + 2 * interfaceCount__    int fieldsCount = 0__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      ++fieldsCount__      size += fieldWriter.computeFieldInfoSize()__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    int methodsCount = 0__    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      ++methodsCount__      size += methodWriter.computeMethodInfoSize()__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    int attributesCount = 0__    if (innerClasses != null) {_      ++attributesCount__      size += 8 + innerClasses.length__      symbolTable.addConstantUtf8(Constants.INNER_CLASSES)__    }_    if (enclosingClassIndex != 0) {_      ++attributesCount__      size += 10__      symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__    }_    if (signatureIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SIGNATURE)__    }_    if (sourceFileIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.SOURCE_FILE)__    }_    if (debugExtension != null) {_      ++attributesCount__      size += 6 + debugExtension.length__      symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributesCount__      size += 6__      symbolTable.addConstantUtf8(Constants.DEPRECATED)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributesCount__      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (symbolTable.computeBootstrapMethodsSize() > 0) {_      ++attributesCount__      size += symbolTable.computeBootstrapMethodsSize()__    }_    if (moduleWriter != null) {_      attributesCount += moduleWriter.getAttributeCount()__      size += moduleWriter.computeAttributesSize()__    }_    if (nestHostClassIndex != 0) {_      ++attributesCount__      size += 8__      symbolTable.addConstantUtf8(Constants.NEST_HOST)__    }_    if (nestMemberClasses != null) {_      ++attributesCount__      size += 8 + nestMemberClasses.length__      symbolTable.addConstantUtf8(Constants.NEST_MEMBERS)__    }_    if (firstAttribute != null) {_      attributesCount += firstAttribute.getAttributeCount()__      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    _    _    size += symbolTable.getConstantPoolLength()__    if (symbolTable.getConstantPoolCount() > 0xFFFF) {_      throw new IndexOutOfBoundsException("Class file too large!")__    }__    _    _    ByteVector result = new ByteVector(size)__    result.putInt(0xCAFEBABE).putInt(version)__    symbolTable.putConstantPool(result)__    int mask = (version & 0xFFFF) < Opcodes.V1_5 ? Opcodes.ACC_SYNTHETIC : 0__    result.putShort(accessFlags & ~mask).putShort(thisClass).putShort(superClass)__    result.putShort(interfaceCount)__    for (int i = 0_ i < interfaceCount_ ++i) {_      result.putShort(interfaces[i])__    }_    result.putShort(fieldsCount)__    fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.putFieldInfo(result)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    result.putShort(methodsCount)__    boolean hasFrames = false__    boolean hasAsmInstructions = false__    methodWriter = firstMethod__    while (methodWriter != null) {_      hasFrames |= methodWriter.hasFrames()__      hasAsmInstructions |= methodWriter.hasAsmInstructions()__      methodWriter.putMethodInfo(result)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    _    result.putShort(attributesCount)__    if (innerClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.INNER_CLASSES))_          .putInt(innerClasses.length + 2)_          .putShort(numberOfInnerClasses)_          .putByteArray(innerClasses.data, 0, innerClasses.length)__    }_    if (enclosingClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.ENCLOSING_METHOD))_          .putInt(4)_          .putShort(enclosingClassIndex)_          .putShort(enclosingMethodIndex)__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xFFFF) < Opcodes.V1_5) {_      result.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if (sourceFileIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_FILE))_          .putInt(2)_          .putShort(sourceFileIndex)__    }_    if (debugExtension != null) {_      int length = debugExtension.length__      result_          .putShort(symbolTable.addConstantUtf8(Constants.SOURCE_DEBUG_EXTENSION))_          .putInt(length)_          .putByteArray(debugExtension.data, 0, length)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      result.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), result)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), result)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), result)__    }_    symbolTable.putBootstrapMethods(result)__    if (moduleWriter != null) {_      moduleWriter.putAttributes(result)__    }_    if (nestHostClassIndex != 0) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_HOST))_          .putInt(2)_          .putShort(nestHostClassIndex)__    }_    if (nestMemberClasses != null) {_      result_          .putShort(symbolTable.addConstantUtf8(Constants.NEST_MEMBERS))_          .putInt(nestMemberClasses.length + 2)_          .putShort(numberOfNestMemberClasses)_          .putByteArray(nestMemberClasses.data, 0, nestMemberClasses.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, result)__    }__    _    if (hasAsmInstructions) {_      return replaceAsmInstructions(result.data, hasFrames)__    } else {_      return result.data__    }_  };returns,the,content,of,the,class,file,that,was,built,by,this,class,writer,return,the,binary,content,of,the,jvms,class,file,structure,that,was,built,by,this,class,writer;public,byte,to,byte,array,int,size,24,2,interface,count,int,fields,count,0,field,writer,field,writer,first,field,while,field,writer,null,fields,count,size,field,writer,compute,field,info,size,field,writer,field,writer,field,writer,fv,int,methods,count,0,method,writer,method,writer,first,method,while,method,writer,null,methods,count,size,method,writer,compute,method,info,size,method,writer,method,writer,method,writer,mv,int,attributes,count,0,if,inner,classes,null,attributes,count,size,8,inner,classes,length,symbol,table,add,constant,utf8,constants,if,enclosing,class,index,0,attributes,count,size,10,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,version,0x,ffff,opcodes,attributes,count,size,6,symbol,table,add,constant,utf8,constants,synthetic,if,signature,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,signature,if,source,file,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,debug,extension,null,attributes,count,size,6,debug,extension,length,symbol,table,add,constant,utf8,constants,if,access,flags,opcodes,0,attributes,count,size,6,symbol,table,add,constant,utf8,constants,deprecated,if,last,runtime,visible,annotation,null,attributes,count,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,attributes,count,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,type,annotation,null,attributes,count,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,attributes,count,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,symbol,table,compute,bootstrap,methods,size,0,attributes,count,size,symbol,table,compute,bootstrap,methods,size,if,module,writer,null,attributes,count,module,writer,get,attribute,count,size,module,writer,compute,attributes,size,if,nest,host,class,index,0,attributes,count,size,8,symbol,table,add,constant,utf8,constants,if,nest,member,classes,null,attributes,count,size,8,nest,member,classes,length,symbol,table,add,constant,utf8,constants,if,first,attribute,null,attributes,count,first,attribute,get,attribute,count,size,first,attribute,compute,attributes,size,symbol,table,size,symbol,table,get,constant,pool,length,if,symbol,table,get,constant,pool,count,0x,ffff,throw,new,index,out,of,bounds,exception,class,file,too,large,byte,vector,result,new,byte,vector,size,result,put,int,0x,cafebabe,put,int,version,symbol,table,put,constant,pool,result,int,mask,version,0x,ffff,opcodes,opcodes,0,result,put,short,access,flags,mask,put,short,this,class,put,short,super,class,result,put,short,interface,count,for,int,i,0,i,interface,count,i,result,put,short,interfaces,i,result,put,short,fields,count,field,writer,first,field,while,field,writer,null,field,writer,put,field,info,result,field,writer,field,writer,field,writer,fv,result,put,short,methods,count,boolean,has,frames,false,boolean,has,asm,instructions,false,method,writer,first,method,while,method,writer,null,has,frames,method,writer,has,frames,has,asm,instructions,method,writer,has,asm,instructions,method,writer,put,method,info,result,method,writer,method,writer,method,writer,mv,result,put,short,attributes,count,if,inner,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,inner,classes,length,2,put,short,number,of,inner,classes,put,byte,array,inner,classes,data,0,inner,classes,length,if,enclosing,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,4,put,short,enclosing,class,index,put,short,enclosing,method,index,if,access,flags,opcodes,0,version,0x,ffff,opcodes,result,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,result,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,source,file,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,source,file,index,if,debug,extension,null,int,length,debug,extension,length,result,put,short,symbol,table,add,constant,utf8,constants,put,int,length,put,byte,array,debug,extension,data,0,length,if,access,flags,opcodes,0,result,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,result,symbol,table,put,bootstrap,methods,result,if,module,writer,null,module,writer,put,attributes,result,if,nest,host,class,index,0,result,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,nest,host,class,index,if,nest,member,classes,null,result,put,short,symbol,table,add,constant,utf8,constants,put,int,nest,member,classes,length,2,put,short,number,of,nest,member,classes,put,byte,array,nest,member,classes,data,0,nest,member,classes,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,result,if,has,asm,instructions,return,replace,asm,instructions,result,data,has,frames,else,return,result,data
ClassWriter -> public int newModule(final String moduleName);1505821772;Adds a module reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param moduleName_name of the module._@return the index of a new or already existing module reference_item.;public int newModule(final String moduleName) {_        return newStringishItem(MODULE, moduleName).index__    };adds,a,module,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,module,name,name,of,the,module,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,module,final,string,module,name,return,new,stringish,item,module,module,name,index
ClassWriter -> public int newModule(final String moduleName);1518518428;Adds a module reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param moduleName_name of the module._@return the index of a new or already existing module reference_item.;public int newModule(final String moduleName) {_        return newStringishItem(MODULE, moduleName).index__    };adds,a,module,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,module,name,name,of,the,module,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,module,final,string,module,name,return,new,stringish,item,module,module,name,index
ClassWriter -> public int newModule(final String moduleName);1531241461;Adds a module reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param moduleName name of the module._@return the index of a new or already existing module reference item.;public int newModule(final String moduleName) {_    return symbolTable.addConstantModule(moduleName).index__  };adds,a,module,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,module,name,name,of,the,module,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,module,final,string,module,name,return,symbol,table,add,constant,module,module,name,index
ClassWriter -> public int newModule(final String moduleName);1536664245;Adds a module reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param moduleName name of the module._@return the index of a new or already existing module reference item.;public int newModule(final String moduleName) {_    return symbolTable.addConstantModule(moduleName).index__  };adds,a,module,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,module,name,name,of,the,module,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,module,final,string,module,name,return,symbol,table,add,constant,module,module,name,index
ClassWriter -> public int newModule(final String moduleName);1537204147;Adds a module reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param moduleName name of the module._@return the index of a new or already existing module reference item.;public int newModule(final String moduleName) {_    return symbolTable.addConstantModule(moduleName).index__  };adds,a,module,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,module,name,name,of,the,module,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,module,final,string,module,name,return,symbol,table,add,constant,module,module,name,index
ClassWriter -> public int newModule(final String moduleName);1539119582;Adds a module reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param moduleName name of the module._@return the index of a new or already existing module reference item.;public int newModule(final String moduleName) {_    return symbolTable.addConstantModule(moduleName).index__  };adds,a,module,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,module,name,name,of,the,module,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,module,final,string,module,name,return,symbol,table,add,constant,module,module,name,index
ClassWriter -> Item newConstItem(final Object cst);1366718246;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1382700560;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1395273982;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1395744691;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1398255950;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1448383082;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1457705343;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc, h.itf)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,h,itf,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1483093254;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newString((String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newClassItem(t.getInternalName())__            } else if (s == Type.METHOD) {_                return newMethodTypeItem(t.getDescriptor())__            } else { _                return newClassItem(t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc, h.itf)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,string,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,class,item,t,get,internal,name,else,if,s,type,method,return,new,method,type,item,t,get,descriptor,else,return,new,class,item,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,h,itf,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1505821772;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newStringishItem(STR, (String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newStringishItem(CLASS, t.getInternalName())__            } else if (s == Type.METHOD) {_                return newStringishItem(MTYPE, t.getDescriptor())__            } else { _                return newStringishItem(CLASS, t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc, h.itf)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,stringish,item,str,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,stringish,item,class,t,get,internal,name,else,if,s,type,method,return,new,stringish,item,mtype,t,get,descriptor,else,return,new,stringish,item,class,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,h,itf,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> Item newConstItem(final Object cst);1518518428;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item.__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double}, a {@link String} or a_{@link Type}._@return a new or already existing constant item with the given value.;Item newConstItem(final Object cst) {_        if (cst instanceof Integer) {_            int val = ((Integer) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Byte) {_            int val = ((Byte) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Character) {_            int val = ((Character) cst).charValue()__            return newInteger(val)__        } else if (cst instanceof Short) {_            int val = ((Short) cst).intValue()__            return newInteger(val)__        } else if (cst instanceof Boolean) {_            int val = ((Boolean) cst).booleanValue() ? 1 : 0__            return newInteger(val)__        } else if (cst instanceof Float) {_            float val = ((Float) cst).floatValue()__            return newFloat(val)__        } else if (cst instanceof Long) {_            long val = ((Long) cst).longValue()__            return newLong(val)__        } else if (cst instanceof Double) {_            double val = ((Double) cst).doubleValue()__            return newDouble(val)__        } else if (cst instanceof String) {_            return newStringishItem(STR, (String) cst)__        } else if (cst instanceof Type) {_            Type t = (Type) cst__            int s = t.getSort()__            if (s == Type.OBJECT) {_                return newStringishItem(CLASS, t.getInternalName())__            } else if (s == Type.METHOD) {_                return newStringishItem(MTYPE, t.getDescriptor())__            } else { _                return newStringishItem(CLASS, t.getDescriptor())__            }_        } else if (cst instanceof Handle) {_            Handle h = (Handle) cst__            return newHandleItem(h.tag, h.owner, h.name, h.desc, h.itf)__        } else {_            throw new IllegalArgumentException("value " + cst)__        }_    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,or,a,link,type,return,a,new,or,already,existing,constant,item,with,the,given,value;item,new,const,item,final,object,cst,if,cst,instanceof,integer,int,val,integer,cst,int,value,return,new,integer,val,else,if,cst,instanceof,byte,int,val,byte,cst,int,value,return,new,integer,val,else,if,cst,instanceof,character,int,val,character,cst,char,value,return,new,integer,val,else,if,cst,instanceof,short,int,val,short,cst,int,value,return,new,integer,val,else,if,cst,instanceof,boolean,int,val,boolean,cst,boolean,value,1,0,return,new,integer,val,else,if,cst,instanceof,float,float,val,float,cst,float,value,return,new,float,val,else,if,cst,instanceof,long,long,val,long,cst,long,value,return,new,long,val,else,if,cst,instanceof,double,double,val,double,cst,double,value,return,new,double,val,else,if,cst,instanceof,string,return,new,stringish,item,str,string,cst,else,if,cst,instanceof,type,type,t,type,cst,int,s,t,get,sort,if,s,type,object,return,new,stringish,item,class,t,get,internal,name,else,if,s,type,method,return,new,stringish,item,mtype,t,get,descriptor,else,return,new,stringish,item,class,t,get,descriptor,else,if,cst,instanceof,handle,handle,h,handle,cst,return,new,handle,item,h,tag,h,owner,h,name,h,desc,h,itf,else,throw,new,illegal,argument,exception,value,cst
ClassWriter -> private void put122(final int b, final int s1, final int s2);1366718246;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1382700560;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1395273982;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1395744691;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1398255950;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1448383082;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1457705343;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1483093254;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1505821772;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> private void put122(final int b, final int s1, final int s2);1518518428;Puts one byte and two shorts into the constant pool.__@param b_a byte._@param s1_a short._@param s2_another short.;private void put122(final int b, final int s1, final int s2) {_        pool.put12(b, s1).putShort(s2)__    };puts,one,byte,and,two,shorts,into,the,constant,pool,param,b,a,byte,param,s1,a,short,param,s2,another,short;private,void,put122,final,int,b,final,int,s1,final,int,s2,pool,put12,b,s1,put,short,s2
ClassWriter -> protected ClassLoader getClassLoader();1531241461;Returns the {@link ClassLoader} to be used by the default implementation of {@link_#getCommonSuperClass(String, String)}, that of this {@link ClassWriter}'s runtime type by_default.__@return ClassLoader;protected ClassLoader getClassLoader() {_    _    ClassLoader classLoader = null__    try {_      classLoader = Thread.currentThread().getContextClassLoader()__    } catch (Throwable ex) {_      _    }_    return (classLoader != null ? classLoader : getClass().getClassLoader())__  };returns,the,link,class,loader,to,be,used,by,the,default,implementation,of,link,get,common,super,class,string,string,that,of,this,link,class,writer,s,runtime,type,by,default,return,class,loader;protected,class,loader,get,class,loader,class,loader,class,loader,null,try,class,loader,thread,current,thread,get,context,class,loader,catch,throwable,ex,return,class,loader,null,class,loader,get,class,get,class,loader
ClassWriter -> protected ClassLoader getClassLoader();1536664245;Returns the {@link ClassLoader} to be used by the default implementation of {@link_#getCommonSuperClass(String, String)}, that of this {@link ClassWriter}'s runtime type by_default.__@return ClassLoader;protected ClassLoader getClassLoader() {_    _    ClassLoader classLoader = null__    try {_      classLoader = Thread.currentThread().getContextClassLoader()__    } catch (Throwable ex) {_      _    }_    return (classLoader != null ? classLoader : getClass().getClassLoader())__  };returns,the,link,class,loader,to,be,used,by,the,default,implementation,of,link,get,common,super,class,string,string,that,of,this,link,class,writer,s,runtime,type,by,default,return,class,loader;protected,class,loader,get,class,loader,class,loader,class,loader,null,try,class,loader,thread,current,thread,get,context,class,loader,catch,throwable,ex,return,class,loader,null,class,loader,get,class,get,class,loader
ClassWriter -> protected ClassLoader getClassLoader();1537204147;Returns the {@link ClassLoader} to be used by the default implementation of {@link_#getCommonSuperClass(String, String)}, that of this {@link ClassWriter}'s runtime type by_default.__@return ClassLoader;protected ClassLoader getClassLoader() {_    _    ClassLoader classLoader = null__    try {_      classLoader = Thread.currentThread().getContextClassLoader()__    } catch (Throwable ex) {_      _    }_    return (classLoader != null ? classLoader : getClass().getClassLoader())__  };returns,the,link,class,loader,to,be,used,by,the,default,implementation,of,link,get,common,super,class,string,string,that,of,this,link,class,writer,s,runtime,type,by,default,return,class,loader;protected,class,loader,get,class,loader,class,loader,class,loader,null,try,class,loader,thread,current,thread,get,context,class,loader,catch,throwable,ex,return,class,loader,null,class,loader,get,class,get,class,loader
ClassWriter -> protected ClassLoader getClassLoader();1539119582;Returns the {@link ClassLoader} to be used by the default implementation of {@link_#getCommonSuperClass(String, String)}, that of this {@link ClassWriter}'s runtime type by_default.__@return ClassLoader;protected ClassLoader getClassLoader() {_    _    ClassLoader classLoader = null__    try {_      classLoader = Thread.currentThread().getContextClassLoader()__    } catch (Throwable ex) {_      _    }_    return (classLoader != null ? classLoader : getClass().getClassLoader())__  };returns,the,link,class,loader,to,be,used,by,the,default,implementation,of,link,get,common,super,class,string,string,that,of,this,link,class,writer,s,runtime,type,by,default,return,class,loader;protected,class,loader,get,class,loader,class,loader,class,loader,null,try,class,loader,thread,current,thread,get,context,class,loader,catch,throwable,ex,return,class,loader,null,class,loader,get,class,get,class,loader
ClassWriter -> @Deprecated     public int newHandle(final int tag, final String owner, final String name,             final String desc);1457705343;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.__@deprecated this method is superseded by_{@link #newHandle(int, String, String, String, boolean)}.;@Deprecated_    public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandle(tag, owner, name, desc, tag == Opcodes.H_INVOKEINTERFACE)__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,tag,owner,name,desc,tag,opcodes
ClassWriter -> @Deprecated     public int newHandle(final int tag, final String owner, final String name,             final String desc);1483093254;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.__@deprecated this method is superseded by_{@link #newHandle(int, String, String, String, boolean)}.;@Deprecated_    public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandle(tag, owner, name, desc, tag == Opcodes.H_INVOKEINTERFACE)__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,tag,owner,name,desc,tag,opcodes
ClassWriter -> @Deprecated     public int newHandle(final int tag, final String owner, final String name,             final String desc);1505821772;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.__@deprecated this method is superseded by_{@link #newHandle(int, String, String, String, boolean)}.;@Deprecated_    public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandle(tag, owner, name, desc, tag == Opcodes.H_INVOKEINTERFACE)__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,tag,owner,name,desc,tag,opcodes
ClassWriter -> @Deprecated     public int newHandle(final int tag, final String owner, final String name,             final String desc);1518518428;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.__@deprecated this method is superseded by_{@link #newHandle(int, String, String, String, boolean)}.;@Deprecated_    public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandle(tag, owner, name, desc, tag == Opcodes.H_INVOKEINTERFACE)__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,tag,owner,name,desc,tag,opcodes
ClassWriter -> public int newConst(final Object cst);1366718246;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1382700560;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1395273982;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1395744691;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1398255950;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1448383082;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1457705343;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1483093254;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1505821772;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> public int newConst(final Object cst);1518518428;Adds a number or string constant to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param cst_the value of the constant to be added to the constant pool._This parameter must be an {@link Integer}, a {@link Float}, a_{@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the_given value.;public int newConst(final Object cst) {_        return newConstItem(cst).index__    };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,cst,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,cst,return,new,const,item,cst,index
ClassWriter -> private void put112(final int b1, final int b2, final int s);1366718246;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1382700560;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1395273982;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1395744691;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1398255950;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1448383082;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1457705343;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1483093254;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1505821772;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> private void put112(final int b1, final int b2, final int s);1518518428;Puts two bytes and one short into the constant pool.__@param b1_a byte._@param b2_another byte._@param s_a short.;private void put112(final int b1, final int b2, final int s) {_        pool.put11(b1, b2).putShort(s)__    };puts,two,bytes,and,one,short,into,the,constant,pool,param,b1,a,byte,param,b2,another,byte,param,s,a,short;private,void,put112,final,int,b1,final,int,b2,final,int,s,pool,put11,b1,b2,put,short,s
ClassWriter -> Item newDouble(final double value);1366718246;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1382700560;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1395273982;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1395744691;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1398255950;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1448383082;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1457705343;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1483093254;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1505821772;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newDouble(final double value);1518518428;Adds a double to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the double value._@return a new or already existing double item.;Item newDouble(final double value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(DOUBLE).putLong(key.longVal)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,double,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,double,value,return,a,new,or,already,existing,double,item;item,new,double,final,double,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,double,put,long,key,long,val,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1366718246;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1382700560;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1395273982;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1395744691;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1398255950;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1448383082;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1457705343;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1483093254;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1505821772;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newFieldItem(final String owner, final String name, final String desc);1518518428;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return a new or already existing field reference item.;Item newFieldItem(final String owner, final String name, final String desc) {_        key3.set(FIELD, owner, name, desc)__        Item result = get(key3)__        if (result == null) {_            put122(FIELD, newClass(owner), newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,a,new,or,already,existing,field,reference,item;item,new,field,item,final,string,owner,final,string,name,final,string,desc,key3,set,field,owner,name,desc,item,result,get,key3,if,result,null,put122,field,new,class,owner,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc);1366718246;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandleItem(tag, owner, name, desc).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,item,tag,owner,name,desc,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc);1382700560;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandleItem(tag, owner, name, desc).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,item,tag,owner,name,desc,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc);1395273982;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandleItem(tag, owner, name, desc).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,item,tag,owner,name,desc,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc);1395744691;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandleItem(tag, owner, name, desc).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,item,tag,owner,name,desc,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc);1398255950;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandleItem(tag, owner, name, desc).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,item,tag,owner,name,desc,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc);1448383082;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc) {_        return newHandleItem(tag, owner, name, desc).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,return,new,handle,item,tag,owner,name,desc,index
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1366718246;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1382700560;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1395273982;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1395744691;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1398255950;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1448383082;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1457705343;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newMethodTypeItem(final String methodDesc);1483093254;Adds a method type reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param methodDesc_method descriptor of the method type._@return a new or already existing method type reference item.;Item newMethodTypeItem(final String methodDesc) {_        key2.set(MTYPE, methodDesc, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(MTYPE, newUTF8(methodDesc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,desc,method,descriptor,of,the,method,type,return,a,new,or,already,existing,method,type,reference,item;item,new,method,type,item,final,string,method,desc,key2,set,mtype,method,desc,null,null,item,result,get,key2,if,result,null,pool,put12,mtype,new,utf8,method,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> public int newUTF8(final String value);1366718246;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1382700560;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1395273982;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1395744691;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1398255950;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1448383082;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1457705343;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1483093254;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1505821772;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1518518428;Adds an UTF8 string to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param value_the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_        key.set(UTF8, value, null, null)__        Item result = get(key)__        if (result == null) {_            pool.putByte(UTF8).putUTF8(value)__            result = new Item(index++, key)__            put(result)__        }_        return result.index__    };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,key,set,utf8,value,null,null,item,result,get,key,if,result,null,pool,put,byte,utf8,put,utf8,value,result,new,item,index,key,put,result,return,result,index
ClassWriter -> public int newUTF8(final String value);1531241461;Adds an UTF8 string to the constant pool of the class being build. Does nothing if the constant_pool already contains a similar item. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param value the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_    return symbolTable.addConstantUtf8(value)__  };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,return,symbol,table,add,constant,utf8,value
ClassWriter -> public int newUTF8(final String value);1536664245;Adds an UTF8 string to the constant pool of the class being build. Does nothing if the constant_pool already contains a similar item. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param value the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_    return symbolTable.addConstantUtf8(value)__  };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,return,symbol,table,add,constant,utf8,value
ClassWriter -> public int newUTF8(final String value);1537204147;Adds an UTF8 string to the constant pool of the class being build. Does nothing if the constant_pool already contains a similar item. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param value the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_    return symbolTable.addConstantUtf8(value)__  };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,return,symbol,table,add,constant,utf8,value
ClassWriter -> public int newUTF8(final String value);1539119582;Adds an UTF8 string to the constant pool of the class being build. Does nothing if the constant_pool already contains a similar item. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param value the String value._@return the index of a new or already existing UTF8 item.;public int newUTF8(final String value) {_    return symbolTable.addConstantUtf8(value)__  };adds,an,utf8,string,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,string,value,return,the,index,of,a,new,or,already,existing,utf8,item;public,int,new,utf8,final,string,value,return,symbol,table,add,constant,utf8,value
ClassWriter -> private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames);1531241461;Returns the equivalent of the given class file, with the ASM specific instructions replaced_with standard ones. This is done with a ClassReader -&gt_ ClassWriter round trip.__@param classFile a class file containing ASM specific instructions, generated by this_ClassWriter._@param hasFrames whether there is at least one stack map frames in 'classFile'._@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard_ones.;private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) {_    Attribute[] attributes = getAttributePrototypes()__    firstField = null__    lastField = null__    firstMethod = null__    lastMethod = null__    lastRuntimeVisibleAnnotation = null__    lastRuntimeInvisibleAnnotation = null__    lastRuntimeVisibleTypeAnnotation = null__    lastRuntimeInvisibleTypeAnnotation = null__    moduleWriter = null__    nestHostClassIndex = 0__    numberOfNestMemberClasses = 0__    nestMemberClasses = null__    firstAttribute = null__    compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING__    new ClassReader(classFile, 0,  false)_        .accept(_            this,_            attributes,_            (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS)__    return toByteArray()__  };returns,the,equivalent,of,the,given,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones,this,is,done,with,a,class,reader,gt,class,writer,round,trip,param,class,file,a,class,file,containing,asm,specific,instructions,generated,by,this,class,writer,param,has,frames,whether,there,is,at,least,one,stack,map,frames,in,class,file,return,an,equivalent,of,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones;private,byte,replace,asm,instructions,final,byte,class,file,final,boolean,has,frames,attribute,attributes,get,attribute,prototypes,first,field,null,last,field,null,first,method,null,last,method,null,last,runtime,visible,annotation,null,last,runtime,invisible,annotation,null,last,runtime,visible,type,annotation,null,last,runtime,invisible,type,annotation,null,module,writer,null,nest,host,class,index,0,number,of,nest,member,classes,0,nest,member,classes,null,first,attribute,null,compute,has,frames,method,writer,method,writer,new,class,reader,class,file,0,false,accept,this,attributes,has,frames,class,reader,0,class,reader,return,to,byte,array
ClassWriter -> private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames);1536664245;Returns the equivalent of the given class file, with the ASM specific instructions replaced_with standard ones. This is done with a ClassReader -&gt_ ClassWriter round trip.__@param classFile a class file containing ASM specific instructions, generated by this_ClassWriter._@param hasFrames whether there is at least one stack map frames in 'classFile'._@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard_ones.;private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) {_    Attribute[] attributes = getAttributePrototypes()__    firstField = null__    lastField = null__    firstMethod = null__    lastMethod = null__    lastRuntimeVisibleAnnotation = null__    lastRuntimeInvisibleAnnotation = null__    lastRuntimeVisibleTypeAnnotation = null__    lastRuntimeInvisibleTypeAnnotation = null__    moduleWriter = null__    nestHostClassIndex = 0__    numberOfNestMemberClasses = 0__    nestMemberClasses = null__    firstAttribute = null__    compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING__    new ClassReader(classFile, 0,  false)_        .accept(_            this,_            attributes,_            (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS)__    return toByteArray()__  };returns,the,equivalent,of,the,given,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones,this,is,done,with,a,class,reader,gt,class,writer,round,trip,param,class,file,a,class,file,containing,asm,specific,instructions,generated,by,this,class,writer,param,has,frames,whether,there,is,at,least,one,stack,map,frames,in,class,file,return,an,equivalent,of,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones;private,byte,replace,asm,instructions,final,byte,class,file,final,boolean,has,frames,attribute,attributes,get,attribute,prototypes,first,field,null,last,field,null,first,method,null,last,method,null,last,runtime,visible,annotation,null,last,runtime,invisible,annotation,null,last,runtime,visible,type,annotation,null,last,runtime,invisible,type,annotation,null,module,writer,null,nest,host,class,index,0,number,of,nest,member,classes,0,nest,member,classes,null,first,attribute,null,compute,has,frames,method,writer,method,writer,new,class,reader,class,file,0,false,accept,this,attributes,has,frames,class,reader,0,class,reader,return,to,byte,array
ClassWriter -> private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames);1537204147;Returns the equivalent of the given class file, with the ASM specific instructions replaced_with standard ones. This is done with a ClassReader -&gt_ ClassWriter round trip.__@param classFile a class file containing ASM specific instructions, generated by this_ClassWriter._@param hasFrames whether there is at least one stack map frames in 'classFile'._@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard_ones.;private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) {_    final Attribute[] attributes = getAttributePrototypes()__    firstField = null__    lastField = null__    firstMethod = null__    lastMethod = null__    lastRuntimeVisibleAnnotation = null__    lastRuntimeInvisibleAnnotation = null__    lastRuntimeVisibleTypeAnnotation = null__    lastRuntimeInvisibleTypeAnnotation = null__    moduleWriter = null__    nestHostClassIndex = 0__    numberOfNestMemberClasses = 0__    nestMemberClasses = null__    firstAttribute = null__    compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING__    new ClassReader(classFile, 0,  false)_        .accept(_            this,_            attributes,_            (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS)__    return toByteArray()__  };returns,the,equivalent,of,the,given,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones,this,is,done,with,a,class,reader,gt,class,writer,round,trip,param,class,file,a,class,file,containing,asm,specific,instructions,generated,by,this,class,writer,param,has,frames,whether,there,is,at,least,one,stack,map,frames,in,class,file,return,an,equivalent,of,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones;private,byte,replace,asm,instructions,final,byte,class,file,final,boolean,has,frames,final,attribute,attributes,get,attribute,prototypes,first,field,null,last,field,null,first,method,null,last,method,null,last,runtime,visible,annotation,null,last,runtime,invisible,annotation,null,last,runtime,visible,type,annotation,null,last,runtime,invisible,type,annotation,null,module,writer,null,nest,host,class,index,0,number,of,nest,member,classes,0,nest,member,classes,null,first,attribute,null,compute,has,frames,method,writer,method,writer,new,class,reader,class,file,0,false,accept,this,attributes,has,frames,class,reader,0,class,reader,return,to,byte,array
ClassWriter -> private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames);1539119582;Returns the equivalent of the given class file, with the ASM specific instructions replaced_with standard ones. This is done with a ClassReader -&gt_ ClassWriter round trip.__@param classFile a class file containing ASM specific instructions, generated by this_ClassWriter._@param hasFrames whether there is at least one stack map frames in 'classFile'._@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard_ones.;private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) {_    final Attribute[] attributes = getAttributePrototypes()__    firstField = null__    lastField = null__    firstMethod = null__    lastMethod = null__    lastRuntimeVisibleAnnotation = null__    lastRuntimeInvisibleAnnotation = null__    lastRuntimeVisibleTypeAnnotation = null__    lastRuntimeInvisibleTypeAnnotation = null__    moduleWriter = null__    nestHostClassIndex = 0__    numberOfNestMemberClasses = 0__    nestMemberClasses = null__    firstAttribute = null__    compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING__    new ClassReader(classFile, 0,  false)_        .accept(_            this,_            attributes,_            (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS)__    return toByteArray()__  };returns,the,equivalent,of,the,given,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones,this,is,done,with,a,class,reader,gt,class,writer,round,trip,param,class,file,a,class,file,containing,asm,specific,instructions,generated,by,this,class,writer,param,has,frames,whether,there,is,at,least,one,stack,map,frames,in,class,file,return,an,equivalent,of,class,file,with,the,asm,specific,instructions,replaced,with,standard,ones;private,byte,replace,asm,instructions,final,byte,class,file,final,boolean,has,frames,final,attribute,attributes,get,attribute,prototypes,first,field,null,last,field,null,first,method,null,last,method,null,last,runtime,visible,annotation,null,last,runtime,invisible,annotation,null,last,runtime,visible,type,annotation,null,last,runtime,invisible,type,annotation,null,module,writer,null,nest,host,class,index,0,number,of,nest,member,classes,0,nest,member,classes,null,first,attribute,null,compute,has,frames,method,writer,method,writer,new,class,reader,class,file,0,false,accept,this,attributes,has,frames,class,reader,0,class,reader,return,to,byte,array
ClassWriter -> public int newConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1531241461;Adds a dynamic constant reference to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor field descriptor of the constant type._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing dynamic constant reference item.;public int newConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,a,dynamic,constant,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,field,descriptor,of,the,constant,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,dynamic,constant,reference,item;public,int,new,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1536664245;Adds a dynamic constant reference to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor field descriptor of the constant type._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing dynamic constant reference item.;public int newConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,a,dynamic,constant,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,field,descriptor,of,the,constant,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,dynamic,constant,reference,item;public,int,new,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1537204147;Adds a dynamic constant reference to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor field descriptor of the constant type._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing dynamic constant reference item.;public int newConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,a,dynamic,constant,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,field,descriptor,of,the,constant,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,dynamic,constant,reference,item;public,int,new,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> public int newConstantDynamic(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1539119582;Adds a dynamic constant reference to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param name name of the invoked method._@param descriptor field descriptor of the constant type._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments._@return the index of a new or already existing dynamic constant reference item.;public int newConstantDynamic(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    return symbolTable.addConstantDynamic(_            name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)_        .index__  };adds,a,dynamic,constant,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,descriptor,field,descriptor,of,the,constant,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,return,the,index,of,a,new,or,already,existing,dynamic,constant,reference,item;public,int,new,constant,dynamic,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,return,symbol,table,add,constant,dynamic,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments,index
ClassWriter -> private Item addType(final Item item);1366718246;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1382700560;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1395273982;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1395744691;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1398255950;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1448383082;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1457705343;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1483093254;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1505821772;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, key)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,key,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> private Item addType(final Item item);1518518428;Adds the given Item to {@link #typeTable}.__@param item_the value to be added to the type table._@return the added Item, which a new Item instance with the same value as_the given Item.;private Item addType(final Item item) {_        ++typeCount__        Item result = new Item(typeCount, item)__        put(result)__        if (typeTable == null) {_            typeTable = new Item[16]__        }_        if (typeCount == typeTable.length) {_            Item[] newTable = new Item[2 * typeTable.length]__            System.arraycopy(typeTable, 0, newTable, 0, typeTable.length)__            typeTable = newTable__        }_        typeTable[typeCount] = result__        return result__    };adds,the,given,item,to,link,type,table,param,item,the,value,to,be,added,to,the,type,table,return,the,added,item,which,a,new,item,instance,with,the,same,value,as,the,given,item;private,item,add,type,final,item,item,type,count,item,result,new,item,type,count,item,put,result,if,type,table,null,type,table,new,item,16,if,type,count,type,table,length,item,new,table,new,item,2,type,table,length,system,arraycopy,type,table,0,new,table,0,type,table,length,type,table,new,table,type,table,type,count,result,return,result
ClassWriter -> public int newMethod(       final String owner, final String name, final String descriptor, final boolean isInterface);1531241461;Adds a method reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the method's owner class._@param name the method's name._@param descriptor the method's descriptor._@param isInterface <tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    return symbolTable.addConstantMethodref(owner, name, descriptor, isInterface).index__  };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,param,is,interface,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,methodref,owner,name,descriptor,is,interface,index
ClassWriter -> public int newMethod(       final String owner, final String name, final String descriptor, final boolean isInterface);1536664245;Adds a method reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the method's owner class._@param name the method's name._@param descriptor the method's descriptor._@param isInterface {@literal true} if {@code owner} is an interface._@return the index of a new or already existing method reference item.;public int newMethod(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    return symbolTable.addConstantMethodref(owner, name, descriptor, isInterface).index__  };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,param,is,interface,literal,true,if,code,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,methodref,owner,name,descriptor,is,interface,index
ClassWriter -> public int newMethod(       final String owner, final String name, final String descriptor, final boolean isInterface);1537204147;Adds a method reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the method's owner class._@param name the method's name._@param descriptor the method's descriptor._@param isInterface {@literal true} if {@code owner} is an interface._@return the index of a new or already existing method reference item.;public int newMethod(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    return symbolTable.addConstantMethodref(owner, name, descriptor, isInterface).index__  };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,param,is,interface,literal,true,if,code,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,methodref,owner,name,descriptor,is,interface,index
ClassWriter -> public int newMethod(       final String owner, final String name, final String descriptor, final boolean isInterface);1539119582;Adds a method reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the method's owner class._@param name the method's name._@param descriptor the method's descriptor._@param isInterface {@literal true} if {@code owner} is an interface._@return the index of a new or already existing method reference item.;public int newMethod(_      final String owner, final String name, final String descriptor, final boolean isInterface) {_    return symbolTable.addConstantMethodref(owner, name, descriptor, isInterface).index__  };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,param,is,interface,literal,true,if,code,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,return,symbol,table,add,constant,methodref,owner,name,descriptor,is,interface,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1366718246;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1382700560;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1395273982;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1395744691;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1398255950;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1448383082;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1457705343;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1483093254;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1505821772;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newField(final String owner, final String name, final String desc);1518518428;Adds a field reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the field's owner class._@param name_the field's name._@param desc_the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String desc) {_        return newFieldItem(owner, name, desc).index__    };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,desc,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,desc,return,new,field,item,owner,name,desc,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1366718246;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1382700560;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1395273982;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1395744691;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1398255950;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1448383082;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1457705343;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1483093254;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1505821772;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> public int newMethod(final String owner, final String name,             final String desc, final boolean itf);1518518428;Adds a method reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param owner_the internal name of the method's owner class._@param name_the method's name._@param desc_the method's descriptor._@param itf_<tt>true</tt> if <tt>owner</tt> is an interface._@return the index of a new or already existing method reference item.;public int newMethod(final String owner, final String name,_            final String desc, final boolean itf) {_        return newMethodItem(owner, name, desc, itf).index__    };adds,a,method,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,method,s,owner,class,param,name,the,method,s,name,param,desc,the,method,s,descriptor,param,itf,tt,true,tt,if,tt,owner,tt,is,an,interface,return,the,index,of,a,new,or,already,existing,method,reference,item;public,int,new,method,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,method,item,owner,name,desc,itf,index
ClassWriter -> Item newInteger(final int value);1366718246;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1382700560;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1395273982;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1395744691;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1398255950;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1448383082;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1457705343;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1483093254;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1505821772;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> Item newInteger(final int value);1518518428;Adds an integer to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param value_the int value._@return a new or already existing int item.;Item newInteger(final int value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(INT).putInt(value)__            result = new Item(index++, key)__            put(result)__        }_        return result__    };adds,an,integer,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,int,value,return,a,new,or,already,existing,int,item;item,new,integer,final,int,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,int,put,int,value,result,new,item,index,key,put,result,return,result
ClassWriter -> public int newField(final String owner, final String name, final String descriptor);1531241461;Adds a field reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the field's owner class._@param name the field's name._@param descriptor the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String descriptor) {_    return symbolTable.addConstantFieldref(owner, name, descriptor).index__  };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,descriptor,return,symbol,table,add,constant,fieldref,owner,name,descriptor,index
ClassWriter -> public int newField(final String owner, final String name, final String descriptor);1536664245;Adds a field reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the field's owner class._@param name the field's name._@param descriptor the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String descriptor) {_    return symbolTable.addConstantFieldref(owner, name, descriptor).index__  };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,descriptor,return,symbol,table,add,constant,fieldref,owner,name,descriptor,index
ClassWriter -> public int newField(final String owner, final String name, final String descriptor);1537204147;Adds a field reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the field's owner class._@param name the field's name._@param descriptor the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String descriptor) {_    return symbolTable.addConstantFieldref(owner, name, descriptor).index__  };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,descriptor,return,symbol,table,add,constant,fieldref,owner,name,descriptor,index
ClassWriter -> public int newField(final String owner, final String name, final String descriptor);1539119582;Adds a field reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param owner the internal name of the field's owner class._@param name the field's name._@param descriptor the field's descriptor._@return the index of a new or already existing field reference item.;public int newField(final String owner, final String name, final String descriptor) {_    return symbolTable.addConstantFieldref(owner, name, descriptor).index__  };adds,a,field,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,owner,the,internal,name,of,the,field,s,owner,class,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,return,the,index,of,a,new,or,already,existing,field,reference,item;public,int,new,field,final,string,owner,final,string,name,final,string,descriptor,return,symbol,table,add,constant,fieldref,owner,name,descriptor,index
ClassWriter -> private void put(final Item i);1366718246;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1382700560;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1395273982;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1395744691;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1398255950;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1448383082;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1457705343;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1483093254;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1505821772;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> private void put(final Item i);1518518428;Puts the given item in the constant pool's hash table. The hash table_<i>must</i> not already contains this item.__@param i_the item to be added to the constant pool's hash table.;private void put(final Item i) {_        if (index + typeCount > threshold) {_            int ll = items.length__            int nl = ll * 2 + 1__            Item[] newItems = new Item[nl]__            for (int l = ll - 1_ l >= 0_ --l) {_                Item j = items[l]__                while (j != null) {_                    int index = j.hashCode % newItems.length__                    Item k = j.next__                    j.next = newItems[index]__                    newItems[index] = j__                    j = k__                }_            }_            items = newItems__            threshold = (int) (nl * 0.75)__        }_        int index = i.hashCode % items.length__        i.next = items[index]__        items[index] = i__    };puts,the,given,item,in,the,constant,pool,s,hash,table,the,hash,table,i,must,i,not,already,contains,this,item,param,i,the,item,to,be,added,to,the,constant,pool,s,hash,table;private,void,put,final,item,i,if,index,type,count,threshold,int,ll,items,length,int,nl,ll,2,1,item,new,items,new,item,nl,for,int,l,ll,1,l,0,l,item,j,items,l,while,j,null,int,index,j,hash,code,new,items,length,item,k,j,next,j,next,new,items,index,new,items,index,j,j,k,items,new,items,threshold,int,nl,0,75,int,index,i,hash,code,items,length,i,next,items,index,items,index,i
ClassWriter -> public int newPackage(final String packageName);1505821772;Adds a package reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param packageName_name of the package in its internal form._@return the index of a new or already existing module reference_item.;public int newPackage(final String packageName) {_        return newStringishItem(PACKAGE, packageName).index__    };adds,a,package,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,package,name,name,of,the,package,in,its,internal,form,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,package,final,string,package,name,return,new,stringish,item,package,package,name,index
ClassWriter -> public int newPackage(final String packageName);1518518428;Adds a package reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param packageName_name of the package in its internal form._@return the index of a new or already existing module reference_item.;public int newPackage(final String packageName) {_        return newStringishItem(PACKAGE, packageName).index__    };adds,a,package,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,package,name,name,of,the,package,in,its,internal,form,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,package,final,string,package,name,return,new,stringish,item,package,package,name,index
ClassWriter -> public int newPackage(final String packageName);1531241461;Adds a package reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param packageName name of the package in its internal form._@return the index of a new or already existing module reference item.;public int newPackage(final String packageName) {_    return symbolTable.addConstantPackage(packageName).index__  };adds,a,package,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,package,name,name,of,the,package,in,its,internal,form,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,package,final,string,package,name,return,symbol,table,add,constant,package,package,name,index
ClassWriter -> public int newPackage(final String packageName);1536664245;Adds a package reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param packageName name of the package in its internal form._@return the index of a new or already existing module reference item.;public int newPackage(final String packageName) {_    return symbolTable.addConstantPackage(packageName).index__  };adds,a,package,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,package,name,name,of,the,package,in,its,internal,form,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,package,final,string,package,name,return,symbol,table,add,constant,package,package,name,index
ClassWriter -> public int newPackage(final String packageName);1537204147;Adds a package reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param packageName name of the package in its internal form._@return the index of a new or already existing module reference item.;public int newPackage(final String packageName) {_    return symbolTable.addConstantPackage(packageName).index__  };adds,a,package,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,package,name,name,of,the,package,in,its,internal,form,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,package,final,string,package,name,return,symbol,table,add,constant,package,package,name,index
ClassWriter -> public int newPackage(final String packageName);1539119582;Adds a package reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param packageName name of the package in its internal form._@return the index of a new or already existing module reference item.;public int newPackage(final String packageName) {_    return symbolTable.addConstantPackage(packageName).index__  };adds,a,package,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,package,name,name,of,the,package,in,its,internal,form,return,the,index,of,a,new,or,already,existing,module,reference,item;public,int,new,package,final,string,package,name,return,symbol,table,add,constant,package,package,name,index
ClassWriter -> public int newNameType(final String name, final String descriptor);1531241461;Adds a name and type to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param name a name._@param descriptor a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String descriptor) {_    return symbolTable.addConstantNameAndType(name, descriptor)__  };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,descriptor,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,descriptor,return,symbol,table,add,constant,name,and,type,name,descriptor
ClassWriter -> public int newNameType(final String name, final String descriptor);1536664245;Adds a name and type to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param name a name._@param descriptor a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String descriptor) {_    return symbolTable.addConstantNameAndType(name, descriptor)__  };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,descriptor,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,descriptor,return,symbol,table,add,constant,name,and,type,name,descriptor
ClassWriter -> public int newNameType(final String name, final String descriptor);1537204147;Adds a name and type to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param name a name._@param descriptor a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String descriptor) {_    return symbolTable.addConstantNameAndType(name, descriptor)__  };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,descriptor,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,descriptor,return,symbol,table,add,constant,name,and,type,name,descriptor
ClassWriter -> public int newNameType(final String name, final String descriptor);1539119582;Adds a name and type to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param name a name._@param descriptor a type descriptor._@return the index of a new or already existing name and type item.;public int newNameType(final String name, final String descriptor) {_    return symbolTable.addConstantNameAndType(name, descriptor)__  };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,a,name,param,descriptor,a,type,descriptor,return,the,index,of,a,new,or,already,existing,name,and,type,item;public,int,new,name,type,final,string,name,final,string,descriptor,return,symbol,table,add,constant,name,and,type,name,descriptor
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1366718246;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1382700560;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1395273982;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1395744691;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1398255950;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1448383082;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1457705343;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc, bsm.isInterface()))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,bsm,is,interface,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1483093254;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc, bsm.isInterface()))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,bsm,is,interface,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1505821772;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc, bsm.isInterface()))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,bsm,is,interface,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> Item newInvokeDynamicItem(final String name, final String desc,             final Handle bsm, final Object... bsmArgs);1518518428;Adds an invokedynamic reference to the constant pool of the class being_build. Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param name_name of the invoked method._@param desc_descriptor of the invoke method._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments.__@return a new or an already existing invokedynamic type reference item.;Item newInvokeDynamicItem(final String name, final String desc,_            final Handle bsm, final Object... bsmArgs) {_        _        ByteVector bootstrapMethods = this.bootstrapMethods__        if (bootstrapMethods == null) {_            bootstrapMethods = this.bootstrapMethods = new ByteVector()__        }__        int position = bootstrapMethods.length_ __        int hashCode = bsm.hashCode()__        bootstrapMethods.putShort(newHandle(bsm.tag, bsm.owner, bsm.name,_                bsm.desc, bsm.isInterface()))___        int argsLength = bsmArgs.length__        bootstrapMethods.putShort(argsLength)___        for (int i = 0_ i < argsLength_ i++) {_            Object bsmArg = bsmArgs[i]__            hashCode ^= bsmArg.hashCode()__            bootstrapMethods.putShort(newConst(bsmArg))__        }__        byte[] data = bootstrapMethods.data__        int length = (1 + 1 + argsLength) << 1_ _        hashCode &= 0x7FFFFFFF__        Item result = items[hashCode % items.length]__        loop: while (result != null) {_            if (result.type != BSM || result.hashCode != hashCode) {_                result = result.next__                continue__            }__            _            _            int resultPosition = result.intVal__            for (int p = 0_ p < length_ p++) {_                if (data[position + p] != data[resultPosition + p]) {_                    result = result.next__                    continue loop__                }_            }_            break__        }__        int bootstrapMethodIndex__        if (result != null) {_            bootstrapMethodIndex = result.index__            bootstrapMethods.length = position_ _        } else {_            bootstrapMethodIndex = bootstrapMethodsCount++__            result = new Item(bootstrapMethodIndex)__            result.set(position, hashCode)__            put(result)__        }__        _        key3.set(name, desc, bootstrapMethodIndex)__        result = get(key3)__        if (result == null) {_            put122(INDY, bootstrapMethodIndex, newNameType(name, desc))__            result = new Item(index++, key3)__            put(result)__        }_        return result__    };adds,an,invokedynamic,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,name,name,of,the,invoked,method,param,desc,descriptor,of,the,invoke,method,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,return,a,new,or,an,already,existing,invokedynamic,type,reference,item;item,new,invoke,dynamic,item,final,string,name,final,string,desc,final,handle,bsm,final,object,bsm,args,byte,vector,bootstrap,methods,this,bootstrap,methods,if,bootstrap,methods,null,bootstrap,methods,this,bootstrap,methods,new,byte,vector,int,position,bootstrap,methods,length,int,hash,code,bsm,hash,code,bootstrap,methods,put,short,new,handle,bsm,tag,bsm,owner,bsm,name,bsm,desc,bsm,is,interface,int,args,length,bsm,args,length,bootstrap,methods,put,short,args,length,for,int,i,0,i,args,length,i,object,bsm,arg,bsm,args,i,hash,code,bsm,arg,hash,code,bootstrap,methods,put,short,new,const,bsm,arg,byte,data,bootstrap,methods,data,int,length,1,1,args,length,1,hash,code,0x7fffffff,item,result,items,hash,code,items,length,loop,while,result,null,if,result,type,bsm,result,hash,code,hash,code,result,result,next,continue,int,result,position,result,int,val,for,int,p,0,p,length,p,if,data,position,p,data,result,position,p,result,result,next,continue,loop,break,int,bootstrap,method,index,if,result,null,bootstrap,method,index,result,index,bootstrap,methods,length,position,else,bootstrap,method,index,bootstrap,methods,count,result,new,item,bootstrap,method,index,result,set,position,hash,code,put,result,key3,set,name,desc,bootstrap,method,index,result,get,key3,if,result,null,put122,indy,bootstrap,method,index,new,name,type,name,desc,result,new,item,index,key3,put,result,return,result
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc, final boolean itf);1457705343;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        return newHandleItem(tag, owner, name, desc, itf).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,handle,item,tag,owner,name,desc,itf,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc, final boolean itf);1483093254;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        return newHandleItem(tag, owner, name, desc, itf).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,handle,item,tag,owner,name,desc,itf,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc, final boolean itf);1505821772;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        return newHandleItem(tag, owner, name, desc, itf).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,handle,item,tag,owner,name,desc,itf,index
ClassWriter -> public int newHandle(final int tag, final String owner, final String name,             final String desc, final boolean itf);1518518428;Adds a handle to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param tag_the kind of this handle. Must be {@link Opcodes#H_GETFIELD},_{@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},_{@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL},_{@link Opcodes#H_INVOKESTATIC},_{@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or_{@link Opcodes#H_INVOKEINTERFACE}._@param owner_the internal name of the field or method owner class._@param name_the name of the field or method._@param desc_the descriptor of the field or method._@param itf_true if the owner is an interface._@return the index of a new or already existing method type reference_item.;public int newHandle(final int tag, final String owner, final String name,_            final String desc, final boolean itf) {_        return newHandleItem(tag, owner, name, desc, itf).index__    };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,desc,the,descriptor,of,the,field,or,method,param,itf,true,if,the,owner,is,an,interface,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,desc,final,boolean,itf,return,new,handle,item,tag,owner,name,desc,itf,index
ClassWriter -> Item newStringishItem(final int type, final String value);1505821772;Adds a string reference, a class reference, a method type, a module_or a package to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param type_a type among STR, CLASS, MTYPE, MODULE or PACKAGE_@param value_string value of the reference._@return a new or already existing reference item.;Item newStringishItem(final int type, final String value) {_        key2.set(type, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(type, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,reference,a,class,reference,a,method,type,a,module,or,a,package,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,type,a,type,among,str,class,mtype,module,or,package,param,value,string,value,of,the,reference,return,a,new,or,already,existing,reference,item;item,new,stringish,item,final,int,type,final,string,value,key2,set,type,value,null,null,item,result,get,key2,if,result,null,pool,put12,type,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newStringishItem(final int type, final String value);1518518428;Adds a string reference, a class reference, a method type, a module_or a package to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item.__@param type_a type among STR, CLASS, MTYPE, MODULE or PACKAGE_@param value_string value of the reference._@return a new or already existing reference item.;Item newStringishItem(final int type, final String value) {_        key2.set(type, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(type, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,string,reference,a,class,reference,a,method,type,a,module,or,a,package,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,type,a,type,among,str,class,mtype,module,or,package,param,value,string,value,of,the,reference,return,a,new,or,already,existing,reference,item;item,new,stringish,item,final,int,type,final,string,value,key2,set,type,value,null,null,item,result,get,key2,if,result,null,pool,put12,type,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> int addType(final String type);1366718246;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1382700560;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1395273982;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1395744691;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1398255950;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1448383082;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1457705343;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1483093254;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1505821772;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addType(final String type);1518518428;Adds the given internal name to {@link #typeTable} and returns its index._Does nothing if the type table already contains this internal name.__@param type_the internal name to be added to the type table._@return the index of this internal name in the type table.;int addType(final String type) {_        key.set(TYPE_NORMAL, type, null, null)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,internal,name,to,link,type,table,and,returns,its,index,does,nothing,if,the,type,table,already,contains,this,internal,name,param,type,the,internal,name,to,be,added,to,the,type,table,return,the,index,of,this,internal,name,in,the,type,table;int,add,type,final,string,type,key,set,type,null,null,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> public int newMethodType(final String methodDescriptor);1531241461;Adds a method type reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param methodDescriptor method descriptor of the method type._@return the index of a new or already existing method type reference item.;public int newMethodType(final String methodDescriptor) {_    return symbolTable.addConstantMethodType(methodDescriptor).index__  };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,descriptor,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,descriptor,return,symbol,table,add,constant,method,type,method,descriptor,index
ClassWriter -> public int newMethodType(final String methodDescriptor);1536664245;Adds a method type reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param methodDescriptor method descriptor of the method type._@return the index of a new or already existing method type reference item.;public int newMethodType(final String methodDescriptor) {_    return symbolTable.addConstantMethodType(methodDescriptor).index__  };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,descriptor,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,descriptor,return,symbol,table,add,constant,method,type,method,descriptor,index
ClassWriter -> public int newMethodType(final String methodDescriptor);1537204147;Adds a method type reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param methodDescriptor method descriptor of the method type._@return the index of a new or already existing method type reference item.;public int newMethodType(final String methodDescriptor) {_    return symbolTable.addConstantMethodType(methodDescriptor).index__  };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,descriptor,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,descriptor,return,symbol,table,add,constant,method,type,method,descriptor,index
ClassWriter -> public int newMethodType(final String methodDescriptor);1539119582;Adds a method type reference to the constant pool of the class being build. Does nothing if the_constant pool already contains a similar item. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param methodDescriptor method descriptor of the method type._@return the index of a new or already existing method type reference item.;public int newMethodType(final String methodDescriptor) {_    return symbolTable.addConstantMethodType(methodDescriptor).index__  };adds,a,method,type,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,method,descriptor,method,descriptor,of,the,method,type,return,the,index,of,a,new,or,already,existing,method,type,reference,item;public,int,new,method,type,final,string,method,descriptor,return,symbol,table,add,constant,method,type,method,descriptor,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1366718246;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1382700560;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1395273982;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1395744691;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1398255950;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1448383082;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1457705343;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1483093254;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1505821772;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> int addUninitializedType(final String type, final int offset);1518518428;Adds the given "uninitialized" type to {@link #typeTable} and returns its_index. This method is used for UNINITIALIZED types, made of an internal_name and a bytecode offset.__@param type_the internal name to be added to the type table._@param offset_the bytecode offset of the NEW instruction that created this_UNINITIALIZED type value._@return the index of this internal name in the type table.;int addUninitializedType(final String type, final int offset) {_        key.type = TYPE_UNINIT__        key.intVal = offset__        key.strVal1 = type__        key.hashCode = 0x7FFFFFFF & (TYPE_UNINIT + type.hashCode() + offset)__        Item result = get(key)__        if (result == null) {_            result = addType(key)__        }_        return result.index__    };adds,the,given,uninitialized,type,to,link,type,table,and,returns,its,index,this,method,is,used,for,uninitialized,types,made,of,an,internal,name,and,a,bytecode,offset,param,type,the,internal,name,to,be,added,to,the,type,table,param,offset,the,bytecode,offset,of,the,new,instruction,that,created,this,uninitialized,type,value,return,the,index,of,this,internal,name,in,the,type,table;int,add,uninitialized,type,final,string,type,final,int,offset,key,type,key,int,val,offset,key,str,val1,type,key,hash,code,0x7fffffff,type,hash,code,offset,item,result,get,key,if,result,null,result,add,type,key,return,result,index
ClassWriter -> Item newClassItem(final String value);1366718246;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1382700560;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1395273982;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1395744691;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1398255950;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1448383082;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1457705343;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newClassItem(final String value);1483093254;Adds a class reference to the constant pool of the class being build._Does nothing if the constant pool already contains a similar item._<i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param value_the internal name of the class._@return a new or already existing class reference item.;Item newClassItem(final String value) {_        key2.set(CLASS, value, null, null)__        Item result = get(key2)__        if (result == null) {_            pool.put12(CLASS, newUTF8(value))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,class,reference,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,internal,name,of,the,class,return,a,new,or,already,existing,class,reference,item;item,new,class,item,final,string,value,key2,set,class,value,null,null,item,result,get,key2,if,result,null,pool,put12,class,new,utf8,value,result,new,item,index,key2,put,result,return,result
ClassWriter -> public int newConst(final Object value);1531241461;Adds a number or string constant to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the given value.;public int newConst(final Object value) {_    return symbolTable.addConstant(value).index__  };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,value,return,symbol,table,add,constant,value,index
ClassWriter -> public int newConst(final Object value);1536664245;Adds a number or string constant to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the given value.;public int newConst(final Object value) {_    return symbolTable.addConstant(value).index__  };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,value,return,symbol,table,add,constant,value,index
ClassWriter -> public int newConst(final Object value);1537204147;Adds a number or string constant to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the given value.;public int newConst(final Object value) {_    return symbolTable.addConstant(value).index__  };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,value,return,symbol,table,add,constant,value,index
ClassWriter -> public int newConst(final Object value);1539119582;Adds a number or string constant to the constant pool of the class being build. Does nothing if_the constant pool already contains a similar item. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param value the value of the constant to be added to the constant pool. This parameter must be_an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}._@return the index of a new or already existing constant item with the given value.;public int newConst(final Object value) {_    return symbolTable.addConstant(value).index__  };adds,a,number,or,string,constant,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,value,the,value,of,the,constant,to,be,added,to,the,constant,pool,this,parameter,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,return,the,index,of,a,new,or,already,existing,constant,item,with,the,given,value;public,int,new,const,final,object,value,return,symbol,table,add,constant,value,index
ClassWriter -> private Attribute[] getAttributePrototypes();1531241461;Returns the prototypes of the attributes used by this class, its fields and its methods.__@return the prototypes of the attributes used by this class, its fields and its methods.;private Attribute[] getAttributePrototypes() {_    Attribute.Set attributePrototypes = new Attribute.Set()__    attributePrototypes.addAttributes(firstAttribute)__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.collectAttributePrototypes(attributePrototypes)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      methodWriter.collectAttributePrototypes(attributePrototypes)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    return attributePrototypes.toArray()__  };returns,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods,return,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods;private,attribute,get,attribute,prototypes,attribute,set,attribute,prototypes,new,attribute,set,attribute,prototypes,add,attributes,first,attribute,field,writer,field,writer,first,field,while,field,writer,null,field,writer,collect,attribute,prototypes,attribute,prototypes,field,writer,field,writer,field,writer,fv,method,writer,method,writer,first,method,while,method,writer,null,method,writer,collect,attribute,prototypes,attribute,prototypes,method,writer,method,writer,method,writer,mv,return,attribute,prototypes,to,array
ClassWriter -> private Attribute[] getAttributePrototypes();1536664245;Returns the prototypes of the attributes used by this class, its fields and its methods.__@return the prototypes of the attributes used by this class, its fields and its methods.;private Attribute[] getAttributePrototypes() {_    Attribute.Set attributePrototypes = new Attribute.Set()__    attributePrototypes.addAttributes(firstAttribute)__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.collectAttributePrototypes(attributePrototypes)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      methodWriter.collectAttributePrototypes(attributePrototypes)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    return attributePrototypes.toArray()__  };returns,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods,return,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods;private,attribute,get,attribute,prototypes,attribute,set,attribute,prototypes,new,attribute,set,attribute,prototypes,add,attributes,first,attribute,field,writer,field,writer,first,field,while,field,writer,null,field,writer,collect,attribute,prototypes,attribute,prototypes,field,writer,field,writer,field,writer,fv,method,writer,method,writer,first,method,while,method,writer,null,method,writer,collect,attribute,prototypes,attribute,prototypes,method,writer,method,writer,method,writer,mv,return,attribute,prototypes,to,array
ClassWriter -> private Attribute[] getAttributePrototypes();1537204147;Returns the prototypes of the attributes used by this class, its fields and its methods.__@return the prototypes of the attributes used by this class, its fields and its methods.;private Attribute[] getAttributePrototypes() {_    Attribute.Set attributePrototypes = new Attribute.Set()__    attributePrototypes.addAttributes(firstAttribute)__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.collectAttributePrototypes(attributePrototypes)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      methodWriter.collectAttributePrototypes(attributePrototypes)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    return attributePrototypes.toArray()__  };returns,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods,return,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods;private,attribute,get,attribute,prototypes,attribute,set,attribute,prototypes,new,attribute,set,attribute,prototypes,add,attributes,first,attribute,field,writer,field,writer,first,field,while,field,writer,null,field,writer,collect,attribute,prototypes,attribute,prototypes,field,writer,field,writer,field,writer,fv,method,writer,method,writer,first,method,while,method,writer,null,method,writer,collect,attribute,prototypes,attribute,prototypes,method,writer,method,writer,method,writer,mv,return,attribute,prototypes,to,array
ClassWriter -> private Attribute[] getAttributePrototypes();1539119582;Returns the prototypes of the attributes used by this class, its fields and its methods.__@return the prototypes of the attributes used by this class, its fields and its methods.;private Attribute[] getAttributePrototypes() {_    Attribute.Set attributePrototypes = new Attribute.Set()__    attributePrototypes.addAttributes(firstAttribute)__    FieldWriter fieldWriter = firstField__    while (fieldWriter != null) {_      fieldWriter.collectAttributePrototypes(attributePrototypes)__      fieldWriter = (FieldWriter) fieldWriter.fv__    }_    MethodWriter methodWriter = firstMethod__    while (methodWriter != null) {_      methodWriter.collectAttributePrototypes(attributePrototypes)__      methodWriter = (MethodWriter) methodWriter.mv__    }_    return attributePrototypes.toArray()__  };returns,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods,return,the,prototypes,of,the,attributes,used,by,this,class,its,fields,and,its,methods;private,attribute,get,attribute,prototypes,attribute,set,attribute,prototypes,new,attribute,set,attribute,prototypes,add,attributes,first,attribute,field,writer,field,writer,first,field,while,field,writer,null,field,writer,collect,attribute,prototypes,attribute,prototypes,field,writer,field,writer,field,writer,fv,method,writer,method,writer,first,method,while,method,writer,null,method,writer,collect,attribute,prototypes,attribute,prototypes,method,writer,method,writer,method,writer,mv,return,attribute,prototypes,to,array
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1366718246;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1382700560;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1395273982;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1395744691;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1398255950;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1448383082;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1457705343;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1483093254;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1505821772;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> Item newNameTypeItem(final String name, final String desc);1518518428;Adds a name and type to the constant pool of the class being build. Does_nothing if the constant pool already contains a similar item.__@param name_a name._@param desc_a type descriptor._@return a new or already existing name and type item.;Item newNameTypeItem(final String name, final String desc) {_        key2.set(NAME_TYPE, name, desc, null)__        Item result = get(key2)__        if (result == null) {_            put122(NAME_TYPE, newUTF8(name), newUTF8(desc))__            result = new Item(index++, key2)__            put(result)__        }_        return result__    };adds,a,name,and,type,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,name,a,name,param,desc,a,type,descriptor,return,a,new,or,already,existing,name,and,type,item;item,new,name,type,item,final,string,name,final,string,desc,key2,set,name,desc,null,item,result,get,key2,if,result,null,put122,new,utf8,name,new,utf8,desc,result,new,item,index,key2,put,result,return,result
ClassWriter -> @Deprecated   public int newHandle(       final int tag, final String owner, final String name, final String descriptor);1531241461;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@return the index of a new or already existing method type reference item._@deprecated this method is superseded by {@link #newHandle(int, String, String, String,_boolean)}.;@Deprecated_  public int newHandle(_      final int tag, final String owner, final String name, final String descriptor) {_    return newHandle(tag, owner, name, descriptor, tag == Opcodes.H_INVOKEINTERFACE)__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,return,new,handle,tag,owner,name,descriptor,tag,opcodes
ClassWriter -> @Deprecated   public int newHandle(       final int tag, final String owner, final String name, final String descriptor);1536664245;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@return the index of a new or already existing method type reference item._@deprecated this method is superseded by {@link #newHandle(int, String, String, String,_boolean)}.;@Deprecated_  public int newHandle(_      final int tag, final String owner, final String name, final String descriptor) {_    return newHandle(tag, owner, name, descriptor, tag == Opcodes.H_INVOKEINTERFACE)__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,return,new,handle,tag,owner,name,descriptor,tag,opcodes
ClassWriter -> @Deprecated   public int newHandle(       final int tag, final String owner, final String name, final String descriptor);1537204147;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@return the index of a new or already existing method type reference item._@deprecated this method is superseded by {@link #newHandle(int, String, String, String,_boolean)}.;@Deprecated_  public int newHandle(_      final int tag, final String owner, final String name, final String descriptor) {_    return newHandle(tag, owner, name, descriptor, tag == Opcodes.H_INVOKEINTERFACE)__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,return,new,handle,tag,owner,name,descriptor,tag,opcodes
ClassWriter -> @Deprecated   public int newHandle(       final int tag, final String owner, final String name, final String descriptor);1539119582;Adds a handle to the constant pool of the class being build. Does nothing if the constant pool_already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link_Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link_Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},_{@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}._@param owner the internal name of the field or method owner class._@param name the name of the field or method._@param descriptor the descriptor of the field or method._@return the index of a new or already existing method type reference item._@deprecated this method is superseded by {@link #newHandle(int, String, String, String,_boolean)}.;@Deprecated_  public int newHandle(_      final int tag, final String owner, final String name, final String descriptor) {_    return newHandle(tag, owner, name, descriptor, tag == Opcodes.H_INVOKEINTERFACE)__  };adds,a,handle,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,tag,the,kind,of,this,handle,must,be,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,param,owner,the,internal,name,of,the,field,or,method,owner,class,param,name,the,name,of,the,field,or,method,param,descriptor,the,descriptor,of,the,field,or,method,return,the,index,of,a,new,or,already,existing,method,type,reference,item,deprecated,this,method,is,superseded,by,link,new,handle,int,string,string,string,boolean;deprecated,public,int,new,handle,final,int,tag,final,string,owner,final,string,name,final,string,descriptor,return,new,handle,tag,owner,name,descriptor,tag,opcodes
ClassWriter -> Item newLong(final long value);1366718246;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1382700560;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1395273982;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1395744691;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1398255950;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1448383082;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1457705343;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1483093254;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1505821772;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
ClassWriter -> Item newLong(final long value);1518518428;Adds a long to the constant pool of the class being build. Does nothing_if the constant pool already contains a similar item.__@param value_the long value._@return a new or already existing long item.;Item newLong(final long value) {_        key.set(value)__        Item result = get(key)__        if (result == null) {_            pool.putByte(LONG).putLong(value)__            result = new Item(index, key)__            index += 2__            put(result)__        }_        return result__    };adds,a,long,to,the,constant,pool,of,the,class,being,build,does,nothing,if,the,constant,pool,already,contains,a,similar,item,param,value,the,long,value,return,a,new,or,already,existing,long,item;item,new,long,final,long,value,key,set,value,item,result,get,key,if,result,null,pool,put,byte,long,put,long,value,result,new,item,index,key,index,2,put,result,return,result
