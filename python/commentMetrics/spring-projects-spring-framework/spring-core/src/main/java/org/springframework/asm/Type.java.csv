# id;timestamp;commentText;codeText;commentWords;codeWords
Type -> public static Type getMethodType(final Type returnType,             final Type... argumentTypes);1366718246;Returns the Java method type corresponding to the given argument and_return types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the Java type corresponding to the given argument and return_types.;public static Type getMethodType(final Type returnType,_            final Type... argumentTypes) {_        return getType(getMethodDescriptor(returnType, argumentTypes))__    };returns,the,java,method,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,java,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType,             final Type... argumentTypes);1400531367;Returns the Java method type corresponding to the given argument and_return types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the Java type corresponding to the given argument and return_types.;public static Type getMethodType(final Type returnType,_            final Type... argumentTypes) {_        return getType(getMethodDescriptor(returnType, argumentTypes))__    };returns,the,java,method,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,java,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType,             final Type... argumentTypes);1400538684;Returns the Java method type corresponding to the given argument and_return types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the Java type corresponding to the given argument and return_types.;public static Type getMethodType(final Type returnType,_            final Type... argumentTypes) {_        return getType(getMethodDescriptor(returnType, argumentTypes))__    };returns,the,java,method,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,java,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType,             final Type... argumentTypes);1477913309;Returns the Java method type corresponding to the given argument and_return types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the Java type corresponding to the given argument and return_types.;public static Type getMethodType(final Type returnType,_            final Type... argumentTypes) {_        return getType(getMethodDescriptor(returnType, argumentTypes))__    };returns,the,java,method,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,java,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType,             final Type... argumentTypes);1483093254;Returns the Java method type corresponding to the given argument and_return types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the Java type corresponding to the given argument and return_types.;public static Type getMethodType(final Type returnType,_            final Type... argumentTypes) {_        return getType(getMethodDescriptor(returnType, argumentTypes))__    };returns,the,java,method,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,java,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static String getMethodDescriptor(final Method m);1366718246;Returns the descriptor corresponding to the given method.__@param m_a {@link Method Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method m) {_        Class<?>[] parameters = m.getParameterTypes()__        StringBuffer buf = new StringBuffer()__        buf.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(buf, parameters[i])__        }_        buf.append(')')__        getDescriptor(buf, m.getReturnType())__        return buf.toString()__    };returns,the,descriptor,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,m,class,parameters,m,get,parameter,types,string,buffer,buf,new,string,buffer,buf,append,for,int,i,0,i,parameters,length,i,get,descriptor,buf,parameters,i,buf,append,get,descriptor,buf,m,get,return,type,return,buf,to,string
Type -> public static String getMethodDescriptor(final Method m);1400531367;Returns the descriptor corresponding to the given method.__@param m_a {@link Method Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method m) {_        Class<?>[] parameters = m.getParameterTypes()__		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(sb, parameters[i])__        }_        sb.append(')')__        getDescriptor(sb, m.getReturnType())__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,m,class,parameters,m,get,parameter,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,parameters,length,i,get,descriptor,sb,parameters,i,sb,append,get,descriptor,sb,m,get,return,type,return,sb,to,string
Type -> public static String getMethodDescriptor(final Method m);1400538684;Returns the descriptor corresponding to the given method.__@param m_a {@link Method Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method m) {_        Class<?>[] parameters = m.getParameterTypes()__		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(sb, parameters[i])__        }_        sb.append(')')__        getDescriptor(sb, m.getReturnType())__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,m,class,parameters,m,get,parameter,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,parameters,length,i,get,descriptor,sb,parameters,i,sb,append,get,descriptor,sb,m,get,return,type,return,sb,to,string
Type -> public static String getMethodDescriptor(final Method m);1477913309;Returns the descriptor corresponding to the given method.__@param m_a {@link Method Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method m) {_        Class<?>[] parameters = m.getParameterTypes()__		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(sb, parameters[i])__        }_        sb.append(')')__        getDescriptor(sb, m.getReturnType())__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,m,class,parameters,m,get,parameter,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,parameters,length,i,get,descriptor,sb,parameters,i,sb,append,get,descriptor,sb,m,get,return,type,return,sb,to,string
Type -> public static String getMethodDescriptor(final Method m);1483093254;Returns the descriptor corresponding to the given method.__@param m_a {@link Method Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method m) {_        Class<?>[] parameters = m.getParameterTypes()__        StringBuilder buf = new StringBuilder()__        buf.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(buf, parameters[i])__        }_        buf.append(')')__        getDescriptor(buf, m.getReturnType())__        return buf.toString()__    };returns,the,descriptor,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,m,class,parameters,m,get,parameter,types,string,builder,buf,new,string,builder,buf,append,for,int,i,0,i,parameters,length,i,get,descriptor,buf,parameters,i,buf,append,get,descriptor,buf,m,get,return,type,return,buf,to,string
Type -> public static Type getType(final Method method);1531241461;Returns the method {@link Type} corresponding to the given method.__@param method a {@link Method} object._@return the method {@link Type} corresponding to the given method.;public static Type getType(final Method method) {_    return getType(getMethodDescriptor(method))__  };returns,the,method,link,type,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,method,link,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,method,return,get,type,get,method,descriptor,method
Type -> public static Type getType(final Method method);1536664245;Returns the method {@link Type} corresponding to the given method.__@param method a {@link Method} object._@return the method {@link Type} corresponding to the given method.;public static Type getType(final Method method) {_    return getType(getMethodDescriptor(method))__  };returns,the,method,link,type,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,method,link,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,method,return,get,type,get,method,descriptor,method
Type -> public static Type getType(final Method method);1537204147;Returns the method {@link Type} corresponding to the given method.__@param method a {@link Method} object._@return the method {@link Type} corresponding to the given method.;public static Type getType(final Method method) {_    return getType(getMethodDescriptor(method))__  };returns,the,method,link,type,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,method,link,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,method,return,get,type,get,method,descriptor,method
Type -> public static Type getType(final Method method);1539119582;Returns the method {@link Type} corresponding to the given method.__@param method a {@link Method} object._@return the method {@link Type} corresponding to the given method.;public static Type getType(final Method method) {_    return getType(getMethodDescriptor(method))__  };returns,the,method,link,type,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,method,link,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,method,return,get,type,get,method,descriptor,method
Type -> public static Type getMethodType(final Type returnType, final Type... argumentTypes);1531241461;Returns the method {@link Type} corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the method {@link Type} corresponding to the given argument and return types.;public static Type getMethodType(final Type returnType, final Type... argumentTypes) {_    return getType(getMethodDescriptor(returnType, argumentTypes))__  };returns,the,method,link,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,method,link,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType, final Type... argumentTypes);1536664245;Returns the method {@link Type} corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the method {@link Type} corresponding to the given argument and return types.;public static Type getMethodType(final Type returnType, final Type... argumentTypes) {_    return getType(getMethodDescriptor(returnType, argumentTypes))__  };returns,the,method,link,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,method,link,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType, final Type... argumentTypes);1537204147;Returns the method {@link Type} corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the method {@link Type} corresponding to the given argument and return types.;public static Type getMethodType(final Type returnType, final Type... argumentTypes) {_    return getType(getMethodDescriptor(returnType, argumentTypes))__  };returns,the,method,link,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,method,link,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public static Type getMethodType(final Type returnType, final Type... argumentTypes);1539119582;Returns the method {@link Type} corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the method {@link Type} corresponding to the given argument and return types.;public static Type getMethodType(final Type returnType, final Type... argumentTypes) {_    return getType(getMethodDescriptor(returnType, argumentTypes))__  };returns,the,method,link,type,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,method,link,type,corresponding,to,the,given,argument,and,return,types;public,static,type,get,method,type,final,type,return,type,final,type,argument,types,return,get,type,get,method,descriptor,return,type,argument,types
Type -> public Type[] getArgumentTypes();1366718246;Returns the argument types of methods of this type. This method should_only be used for method types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_        return getArgumentTypes(getDescriptor())__    };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1400531367;Returns the argument types of methods of this type. This method should_only be used for method types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_        return getArgumentTypes(getDescriptor())__    };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1400538684;Returns the argument types of methods of this type. This method should_only be used for method types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_        return getArgumentTypes(getDescriptor())__    };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1477913309;Returns the argument types of methods of this type. This method should_only be used for method types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_        return getArgumentTypes(getDescriptor())__    };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1483093254;Returns the argument types of methods of this type. This method should_only be used for method types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_        return getArgumentTypes(getDescriptor())__    };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1531241461;Returns the argument types of methods of this type. This method should only be used for method_types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_    return getArgumentTypes(getDescriptor())__  };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1536664245;Returns the argument types of methods of this type. This method should only be used for method_types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_    return getArgumentTypes(getDescriptor())__  };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1537204147;Returns the argument types of methods of this type. This method should only be used for method_types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_    return getArgumentTypes(getDescriptor())__  };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> public Type[] getArgumentTypes();1539119582;Returns the argument types of methods of this type. This method should only be used for method_types.__@return the argument types of methods of this type.;public Type[] getArgumentTypes() {_    return getArgumentTypes(getDescriptor())__  };returns,the,argument,types,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,argument,types,of,methods,of,this,type;public,type,get,argument,types,return,get,argument,types,get,descriptor
Type -> @Override     public String toString();1366718246;Returns a string representation of this type.__@return the descriptor of this type.;@Override_    public String toString() {_        return getDescriptor()__    };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override     public String toString();1400531367;Returns a string representation of this type.__@return the descriptor of this type.;@Override_    public String toString() {_        return getDescriptor()__    };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override     public String toString();1400538684;Returns a string representation of this type.__@return the descriptor of this type.;@Override_    public String toString() {_        return getDescriptor()__    };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override     public String toString();1477913309;Returns a string representation of this type.__@return the descriptor of this type.;@Override_    public String toString() {_        return getDescriptor()__    };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override     public String toString();1483093254;Returns a string representation of this type.__@return the descriptor of this type.;@Override_    public String toString() {_        return getDescriptor()__    };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> public static Type getType(final Class<?> clazz);1531241461;Returns the {@link Type} corresponding to the given class.__@param clazz a class._@return the {@link Type} corresponding to the given class.;public static Type getType(final Class<?> clazz) {_    if (clazz.isPrimitive()) {_      if (clazz == Integer.TYPE) {_        return INT_TYPE__      } else if (clazz == Void.TYPE) {_        return VOID_TYPE__      } else if (clazz == Boolean.TYPE) {_        return BOOLEAN_TYPE__      } else if (clazz == Byte.TYPE) {_        return BYTE_TYPE__      } else if (clazz == Character.TYPE) {_        return CHAR_TYPE__      } else if (clazz == Short.TYPE) {_        return SHORT_TYPE__      } else if (clazz == Double.TYPE) {_        return DOUBLE_TYPE__      } else if (clazz == Float.TYPE) {_        return FLOAT_TYPE__      } else if (clazz == Long.TYPE) {_        return LONG_TYPE__      } else {_        throw new AssertionError()__      }_    } else {_      return getType(getDescriptor(clazz))__    }_  };returns,the,link,type,corresponding,to,the,given,class,param,clazz,a,class,return,the,link,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,clazz,if,clazz,is,primitive,if,clazz,integer,type,return,else,if,clazz,void,type,return,else,if,clazz,boolean,type,return,else,if,clazz,byte,type,return,else,if,clazz,character,type,return,else,if,clazz,short,type,return,else,if,clazz,double,type,return,else,if,clazz,float,type,return,else,if,clazz,long,type,return,else,throw,new,assertion,error,else,return,get,type,get,descriptor,clazz
Type -> public static Type getType(final Class<?> clazz);1536664245;Returns the {@link Type} corresponding to the given class.__@param clazz a class._@return the {@link Type} corresponding to the given class.;public static Type getType(final Class<?> clazz) {_    if (clazz.isPrimitive()) {_      if (clazz == Integer.TYPE) {_        return INT_TYPE__      } else if (clazz == Void.TYPE) {_        return VOID_TYPE__      } else if (clazz == Boolean.TYPE) {_        return BOOLEAN_TYPE__      } else if (clazz == Byte.TYPE) {_        return BYTE_TYPE__      } else if (clazz == Character.TYPE) {_        return CHAR_TYPE__      } else if (clazz == Short.TYPE) {_        return SHORT_TYPE__      } else if (clazz == Double.TYPE) {_        return DOUBLE_TYPE__      } else if (clazz == Float.TYPE) {_        return FLOAT_TYPE__      } else if (clazz == Long.TYPE) {_        return LONG_TYPE__      } else {_        throw new AssertionError()__      }_    } else {_      return getType(getDescriptor(clazz))__    }_  };returns,the,link,type,corresponding,to,the,given,class,param,clazz,a,class,return,the,link,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,clazz,if,clazz,is,primitive,if,clazz,integer,type,return,else,if,clazz,void,type,return,else,if,clazz,boolean,type,return,else,if,clazz,byte,type,return,else,if,clazz,character,type,return,else,if,clazz,short,type,return,else,if,clazz,double,type,return,else,if,clazz,float,type,return,else,if,clazz,long,type,return,else,throw,new,assertion,error,else,return,get,type,get,descriptor,clazz
Type -> public static Type getType(final Class<?> clazz);1537204147;Returns the {@link Type} corresponding to the given class.__@param clazz a class._@return the {@link Type} corresponding to the given class.;public static Type getType(final Class<?> clazz) {_    if (clazz.isPrimitive()) {_      if (clazz == Integer.TYPE) {_        return INT_TYPE__      } else if (clazz == Void.TYPE) {_        return VOID_TYPE__      } else if (clazz == Boolean.TYPE) {_        return BOOLEAN_TYPE__      } else if (clazz == Byte.TYPE) {_        return BYTE_TYPE__      } else if (clazz == Character.TYPE) {_        return CHAR_TYPE__      } else if (clazz == Short.TYPE) {_        return SHORT_TYPE__      } else if (clazz == Double.TYPE) {_        return DOUBLE_TYPE__      } else if (clazz == Float.TYPE) {_        return FLOAT_TYPE__      } else if (clazz == Long.TYPE) {_        return LONG_TYPE__      } else {_        throw new AssertionError()__      }_    } else {_      return getType(getDescriptor(clazz))__    }_  };returns,the,link,type,corresponding,to,the,given,class,param,clazz,a,class,return,the,link,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,clazz,if,clazz,is,primitive,if,clazz,integer,type,return,else,if,clazz,void,type,return,else,if,clazz,boolean,type,return,else,if,clazz,byte,type,return,else,if,clazz,character,type,return,else,if,clazz,short,type,return,else,if,clazz,double,type,return,else,if,clazz,float,type,return,else,if,clazz,long,type,return,else,throw,new,assertion,error,else,return,get,type,get,descriptor,clazz
Type -> public static Type getType(final Class<?> clazz);1539119582;Returns the {@link Type} corresponding to the given class.__@param clazz a class._@return the {@link Type} corresponding to the given class.;public static Type getType(final Class<?> clazz) {_    if (clazz.isPrimitive()) {_      if (clazz == Integer.TYPE) {_        return INT_TYPE__      } else if (clazz == Void.TYPE) {_        return VOID_TYPE__      } else if (clazz == Boolean.TYPE) {_        return BOOLEAN_TYPE__      } else if (clazz == Byte.TYPE) {_        return BYTE_TYPE__      } else if (clazz == Character.TYPE) {_        return CHAR_TYPE__      } else if (clazz == Short.TYPE) {_        return SHORT_TYPE__      } else if (clazz == Double.TYPE) {_        return DOUBLE_TYPE__      } else if (clazz == Float.TYPE) {_        return FLOAT_TYPE__      } else if (clazz == Long.TYPE) {_        return LONG_TYPE__      } else {_        throw new AssertionError()__      }_    } else {_      return getType(getDescriptor(clazz))__    }_  };returns,the,link,type,corresponding,to,the,given,class,param,clazz,a,class,return,the,link,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,clazz,if,clazz,is,primitive,if,clazz,integer,type,return,else,if,clazz,void,type,return,else,if,clazz,boolean,type,return,else,if,clazz,byte,type,return,else,if,clazz,character,type,return,else,if,clazz,short,type,return,else,if,clazz,double,type,return,else,if,clazz,float,type,return,else,if,clazz,long,type,return,else,throw,new,assertion,error,else,return,get,type,get,descriptor,clazz
Type -> private Type(final int sort, final char[] buf, final int off, final int len);1366718246;Constructs a reference type.__@param sort_the sort of the reference type to be constructed._@param buf_a buffer containing the descriptor of the previous type._@param off_the offset of this descriptor in the previous buffer._@param len_the length of this descriptor.;private Type(final int sort, final char[] buf, final int off, final int len) {_        this.sort = sort__        this.buf = buf__        this.off = off__        this.len = len__    };constructs,a,reference,type,param,sort,the,sort,of,the,reference,type,to,be,constructed,param,buf,a,buffer,containing,the,descriptor,of,the,previous,type,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,param,len,the,length,of,this,descriptor;private,type,final,int,sort,final,char,buf,final,int,off,final,int,len,this,sort,sort,this,buf,buf,this,off,off,this,len,len
Type -> private Type(final int sort, final char[] buf, final int off, final int len);1400531367;Constructs a reference type.__@param sort_the sort of the reference type to be constructed._@param buf_a buffer containing the descriptor of the previous type._@param off_the offset of this descriptor in the previous buffer._@param len_the length of this descriptor.;private Type(final int sort, final char[] buf, final int off, final int len) {_        this.sort = sort__        this.buf = buf__        this.off = off__        this.len = len__    };constructs,a,reference,type,param,sort,the,sort,of,the,reference,type,to,be,constructed,param,buf,a,buffer,containing,the,descriptor,of,the,previous,type,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,param,len,the,length,of,this,descriptor;private,type,final,int,sort,final,char,buf,final,int,off,final,int,len,this,sort,sort,this,buf,buf,this,off,off,this,len,len
Type -> private Type(final int sort, final char[] buf, final int off, final int len);1400538684;Constructs a reference type.__@param sort_the sort of the reference type to be constructed._@param buf_a buffer containing the descriptor of the previous type._@param off_the offset of this descriptor in the previous buffer._@param len_the length of this descriptor.;private Type(final int sort, final char[] buf, final int off, final int len) {_        this.sort = sort__        this.buf = buf__        this.off = off__        this.len = len__    };constructs,a,reference,type,param,sort,the,sort,of,the,reference,type,to,be,constructed,param,buf,a,buffer,containing,the,descriptor,of,the,previous,type,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,param,len,the,length,of,this,descriptor;private,type,final,int,sort,final,char,buf,final,int,off,final,int,len,this,sort,sort,this,buf,buf,this,off,off,this,len,len
Type -> private Type(final int sort, final char[] buf, final int off, final int len);1477913309;Constructs a reference type.__@param sort_the sort of the reference type to be constructed._@param buf_a buffer containing the descriptor of the previous type._@param off_the offset of this descriptor in the previous buffer._@param len_the length of this descriptor.;private Type(final int sort, final char[] buf, final int off, final int len) {_        this.sort = sort__        this.buf = buf__        this.off = off__        this.len = len__    };constructs,a,reference,type,param,sort,the,sort,of,the,reference,type,to,be,constructed,param,buf,a,buffer,containing,the,descriptor,of,the,previous,type,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,param,len,the,length,of,this,descriptor;private,type,final,int,sort,final,char,buf,final,int,off,final,int,len,this,sort,sort,this,buf,buf,this,off,off,this,len,len
Type -> private Type(final int sort, final char[] buf, final int off, final int len);1483093254;Constructs a reference type.__@param sort_the sort of the reference type to be constructed._@param buf_a buffer containing the descriptor of the previous type._@param off_the offset of this descriptor in the previous buffer._@param len_the length of this descriptor.;private Type(final int sort, final char[] buf, final int off, final int len) {_        this.sort = sort__        this.buf = buf__        this.off = off__        this.len = len__    };constructs,a,reference,type,param,sort,the,sort,of,the,reference,type,to,be,constructed,param,buf,a,buffer,containing,the,descriptor,of,the,previous,type,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,param,len,the,length,of,this,descriptor;private,type,final,int,sort,final,char,buf,final,int,off,final,int,len,this,sort,sort,this,buf,buf,this,off,off,this,len,len
Type -> public static String getConstructorDescriptor(final Constructor<?> constructor);1531241461;Returns the descriptor corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> constructor) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = constructor.getParameterTypes()__    for (int i = 0_ i < parameters.length_ ++i) {_      appendDescriptor(stringBuilder, parameters[i])__    }_    return stringBuilder.append(")V").toString()__  };returns,the,descriptor,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,constructor,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,constructor,get,parameter,types,for,int,i,0,i,parameters,length,i,append,descriptor,string,builder,parameters,i,return,string,builder,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> constructor);1536664245;Returns the descriptor corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> constructor) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = constructor.getParameterTypes()__    for (int i = 0_ i < parameters.length_ ++i) {_      appendDescriptor(stringBuilder, parameters[i])__    }_    return stringBuilder.append(")V").toString()__  };returns,the,descriptor,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,constructor,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,constructor,get,parameter,types,for,int,i,0,i,parameters,length,i,append,descriptor,string,builder,parameters,i,return,string,builder,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> constructor);1537204147;Returns the descriptor corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> constructor) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = constructor.getParameterTypes()__    for (int i = 0_ i < parameters.length_ ++i) {_      appendDescriptor(parameters[i], stringBuilder)__    }_    return stringBuilder.append(")V").toString()__  };returns,the,descriptor,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,constructor,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,constructor,get,parameter,types,for,int,i,0,i,parameters,length,i,append,descriptor,parameters,i,string,builder,return,string,builder,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> constructor);1539119582;Returns the descriptor corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> constructor) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = constructor.getParameterTypes()__    for (Class<?> parameter : parameters) {_      appendDescriptor(parameter, stringBuilder)__    }_    return stringBuilder.append(")V").toString()__  };returns,the,descriptor,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,constructor,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,constructor,get,parameter,types,for,class,parameter,parameters,append,descriptor,parameter,string,builder,return,string,builder,append,v,to,string
Type -> public static int getArgumentsAndReturnSizes(final String methodDescriptor);1531241461;Computes the size of the arguments and of the return value of a method.__@param methodDescriptor a method descriptor._@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_<tt>(argumentsSize &lt_&lt_ 2) | returnSize</tt> (argumentsSize is therefore equal to <tt>i_&gt_&gt_ 2</tt>, and returnSize to <tt>i &amp_ 0x03</tt>).;public static int getArgumentsAndReturnSizes(final String methodDescriptor) {_    int argumentsSize = 1__    _    int currentOffset = 1__    int currentChar = methodDescriptor.charAt(currentOffset)__    _    while (currentChar != ')') {_      if (currentChar == 'J' || currentChar == 'D') {_        currentOffset++__        argumentsSize += 2__      } else {_        while (methodDescriptor.charAt(currentOffset) == '[') {_          currentOffset++__        }_        if (methodDescriptor.charAt(currentOffset++) == 'L') {_          while (methodDescriptor.charAt(currentOffset++) != '_') {_            _          }_        }_        argumentsSize += 1__      }_      currentChar = methodDescriptor.charAt(currentOffset)__    }_    currentChar = methodDescriptor.charAt(currentOffset + 1)__    if (currentChar == 'V') {_      return argumentsSize << 2__    } else {_      int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1__      return argumentsSize << 2 | returnSize__    }_  };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,method,descriptor,a,method,descriptor,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,tt,arguments,size,lt,lt,2,return,size,tt,arguments,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,return,size,to,tt,i,amp,0x03,tt;public,static,int,get,arguments,and,return,sizes,final,string,method,descriptor,int,arguments,size,1,int,current,offset,1,int,current,char,method,descriptor,char,at,current,offset,while,current,char,if,current,char,j,current,char,d,current,offset,arguments,size,2,else,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,arguments,size,1,current,char,method,descriptor,char,at,current,offset,current,char,method,descriptor,char,at,current,offset,1,if,current,char,v,return,arguments,size,2,else,int,return,size,current,char,j,current,char,d,2,1,return,arguments,size,2,return,size
Type -> public static int getArgumentsAndReturnSizes(final String methodDescriptor);1536664245;Computes the size of the arguments and of the return value of a method.__@param methodDescriptor a method descriptor._@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_{@code (argumentsSize &lt_&lt_ 2) | returnSize} (argumentsSize is therefore equal to {@code_i &gt_&gt_ 2}, and returnSize to {@code i &amp_ 0x03}).;public static int getArgumentsAndReturnSizes(final String methodDescriptor) {_    int argumentsSize = 1__    _    int currentOffset = 1__    int currentChar = methodDescriptor.charAt(currentOffset)__    _    while (currentChar != ')') {_      if (currentChar == 'J' || currentChar == 'D') {_        currentOffset++__        argumentsSize += 2__      } else {_        while (methodDescriptor.charAt(currentOffset) == '[') {_          currentOffset++__        }_        if (methodDescriptor.charAt(currentOffset++) == 'L') {_          while (methodDescriptor.charAt(currentOffset++) != '_') {_            _          }_        }_        argumentsSize += 1__      }_      currentChar = methodDescriptor.charAt(currentOffset)__    }_    currentChar = methodDescriptor.charAt(currentOffset + 1)__    if (currentChar == 'V') {_      return argumentsSize << 2__    } else {_      int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1__      return argumentsSize << 2 | returnSize__    }_  };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,method,descriptor,a,method,descriptor,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,code,arguments,size,lt,lt,2,return,size,arguments,size,is,therefore,equal,to,code,i,gt,gt,2,and,return,size,to,code,i,amp,0x03;public,static,int,get,arguments,and,return,sizes,final,string,method,descriptor,int,arguments,size,1,int,current,offset,1,int,current,char,method,descriptor,char,at,current,offset,while,current,char,if,current,char,j,current,char,d,current,offset,arguments,size,2,else,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,arguments,size,1,current,char,method,descriptor,char,at,current,offset,current,char,method,descriptor,char,at,current,offset,1,if,current,char,v,return,arguments,size,2,else,int,return,size,current,char,j,current,char,d,2,1,return,arguments,size,2,return,size
Type -> public static int getArgumentsAndReturnSizes(final String methodDescriptor);1537204147;Computes the size of the arguments and of the return value of a method.__@param methodDescriptor a method descriptor._@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_{@code (argumentsSize &lt_&lt_ 2) | returnSize} (argumentsSize is therefore equal to {@code_i &gt_&gt_ 2}, and returnSize to {@code i &amp_ 0x03}).;public static int getArgumentsAndReturnSizes(final String methodDescriptor) {_    int argumentsSize = 1__    _    int currentOffset = 1__    int currentChar = methodDescriptor.charAt(currentOffset)__    _    while (currentChar != ')') {_      if (currentChar == 'J' || currentChar == 'D') {_        currentOffset++__        argumentsSize += 2__      } else {_        while (methodDescriptor.charAt(currentOffset) == '[') {_          currentOffset++__        }_        if (methodDescriptor.charAt(currentOffset++) == 'L') {_          while (methodDescriptor.charAt(currentOffset++) != '_') {_            _          }_        }_        argumentsSize += 1__      }_      currentChar = methodDescriptor.charAt(currentOffset)__    }_    currentChar = methodDescriptor.charAt(currentOffset + 1)__    if (currentChar == 'V') {_      return argumentsSize << 2__    } else {_      int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1__      return argumentsSize << 2 | returnSize__    }_  };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,method,descriptor,a,method,descriptor,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,code,arguments,size,lt,lt,2,return,size,arguments,size,is,therefore,equal,to,code,i,gt,gt,2,and,return,size,to,code,i,amp,0x03;public,static,int,get,arguments,and,return,sizes,final,string,method,descriptor,int,arguments,size,1,int,current,offset,1,int,current,char,method,descriptor,char,at,current,offset,while,current,char,if,current,char,j,current,char,d,current,offset,arguments,size,2,else,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,arguments,size,1,current,char,method,descriptor,char,at,current,offset,current,char,method,descriptor,char,at,current,offset,1,if,current,char,v,return,arguments,size,2,else,int,return,size,current,char,j,current,char,d,2,1,return,arguments,size,2,return,size
Type -> public static int getArgumentsAndReturnSizes(final String methodDescriptor);1539119582;Computes the size of the arguments and of the return value of a method.__@param methodDescriptor a method descriptor._@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_{@code (argumentsSize &lt_&lt_ 2) | returnSize} (argumentsSize is therefore equal to {@code_i &gt_&gt_ 2}, and returnSize to {@code i &amp_ 0x03}).;public static int getArgumentsAndReturnSizes(final String methodDescriptor) {_    int argumentsSize = 1__    _    int currentOffset = 1__    int currentChar = methodDescriptor.charAt(currentOffset)__    _    while (currentChar != ')') {_      if (currentChar == 'J' || currentChar == 'D') {_        currentOffset++__        argumentsSize += 2__      } else {_        while (methodDescriptor.charAt(currentOffset) == '[') {_          currentOffset++__        }_        if (methodDescriptor.charAt(currentOffset++) == 'L') {_          _          currentOffset = methodDescriptor.indexOf('_', currentOffset) + 1__        }_        argumentsSize += 1__      }_      currentChar = methodDescriptor.charAt(currentOffset)__    }_    currentChar = methodDescriptor.charAt(currentOffset + 1)__    if (currentChar == 'V') {_      return argumentsSize << 2__    } else {_      int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1__      return argumentsSize << 2 | returnSize__    }_  };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,method,descriptor,a,method,descriptor,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,code,arguments,size,lt,lt,2,return,size,arguments,size,is,therefore,equal,to,code,i,gt,gt,2,and,return,size,to,code,i,amp,0x03;public,static,int,get,arguments,and,return,sizes,final,string,method,descriptor,int,arguments,size,1,int,current,offset,1,int,current,char,method,descriptor,char,at,current,offset,while,current,char,if,current,char,j,current,char,d,current,offset,arguments,size,2,else,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,current,offset,method,descriptor,index,of,current,offset,1,arguments,size,1,current,char,method,descriptor,char,at,current,offset,current,char,method,descriptor,char,at,current,offset,1,if,current,char,v,return,arguments,size,2,else,int,return,size,current,char,j,current,char,d,2,1,return,arguments,size,2,return,size
Type -> public static Type getType(final Constructor<?> c);1366718246;Returns the Java method type corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the Java method type corresponding to the given constructor.;public static Type getType(final Constructor<?> c) {_        return getType(getConstructorDescriptor(c))__    };returns,the,java,method,type,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,java,method,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,c,return,get,type,get,constructor,descriptor,c
Type -> public static Type getType(final Constructor<?> c);1400531367;Returns the Java method type corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the Java method type corresponding to the given constructor.;public static Type getType(final Constructor<?> c) {_        return getType(getConstructorDescriptor(c))__    };returns,the,java,method,type,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,java,method,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,c,return,get,type,get,constructor,descriptor,c
Type -> public static Type getType(final Constructor<?> c);1400538684;Returns the Java method type corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the Java method type corresponding to the given constructor.;public static Type getType(final Constructor<?> c) {_        return getType(getConstructorDescriptor(c))__    };returns,the,java,method,type,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,java,method,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,c,return,get,type,get,constructor,descriptor,c
Type -> public static Type getType(final Constructor<?> c);1477913309;Returns the Java method type corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the Java method type corresponding to the given constructor.;public static Type getType(final Constructor<?> c) {_        return getType(getConstructorDescriptor(c))__    };returns,the,java,method,type,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,java,method,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,c,return,get,type,get,constructor,descriptor,c
Type -> public static Type getType(final Constructor<?> c);1483093254;Returns the Java method type corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the Java method type corresponding to the given constructor.;public static Type getType(final Constructor<?> c) {_        return getType(getConstructorDescriptor(c))__    };returns,the,java,method,type,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,java,method,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,c,return,get,type,get,constructor,descriptor,c
Type -> public Type getReturnType();1366718246;Returns the return type of methods of this type. This method should only_be used for method types.__@return the return type of methods of this type.;public Type getReturnType() {_        return getReturnType(getDescriptor())__    };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1400531367;Returns the return type of methods of this type. This method should only_be used for method types.__@return the return type of methods of this type.;public Type getReturnType() {_        return getReturnType(getDescriptor())__    };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1400538684;Returns the return type of methods of this type. This method should only_be used for method types.__@return the return type of methods of this type.;public Type getReturnType() {_        return getReturnType(getDescriptor())__    };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1477913309;Returns the return type of methods of this type. This method should only_be used for method types.__@return the return type of methods of this type.;public Type getReturnType() {_        return getReturnType(getDescriptor())__    };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1483093254;Returns the return type of methods of this type. This method should only_be used for method types.__@return the return type of methods of this type.;public Type getReturnType() {_        return getReturnType(getDescriptor())__    };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1531241461;Returns the return type of methods of this type. This method should only be used for method_types.__@return the return type of methods of this type.;public Type getReturnType() {_    return getReturnType(getDescriptor())__  };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1536664245;Returns the return type of methods of this type. This method should only be used for method_types.__@return the return type of methods of this type.;public Type getReturnType() {_    return getReturnType(getDescriptor())__  };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1537204147;Returns the return type of methods of this type. This method should only be used for method_types.__@return the return type of methods of this type.;public Type getReturnType() {_    return getReturnType(getDescriptor())__  };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getReturnType();1539119582;Returns the return type of methods of this type. This method should only be used for method_types.__@return the return type of methods of this type.;public Type getReturnType() {_    return getReturnType(getDescriptor())__  };returns,the,return,type,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,return,type,of,methods,of,this,type;public,type,get,return,type,return,get,return,type,get,descriptor
Type -> public Type getElementType();1366718246;Returns the type of the elements of this array type. This method should_only be used for an array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_        return getType(buf, off + getDimensions())__    };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,return,get,type,buf,off,get,dimensions
Type -> public Type getElementType();1400531367;Returns the type of the elements of this array type. This method should_only be used for an array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_        return getType(buf, off + getDimensions())__    };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,return,get,type,buf,off,get,dimensions
Type -> public Type getElementType();1400538684;Returns the type of the elements of this array type. This method should_only be used for an array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_        return getType(buf, off + getDimensions())__    };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,return,get,type,buf,off,get,dimensions
Type -> public Type getElementType();1477913309;Returns the type of the elements of this array type. This method should_only be used for an array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_        return getType(buf, off + getDimensions())__    };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,return,get,type,buf,off,get,dimensions
Type -> public Type getElementType();1483093254;Returns the type of the elements of this array type. This method should_only be used for an array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_        return getType(buf, off + getDimensions())__    };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,return,get,type,buf,off,get,dimensions
Type -> public Type getElementType();1531241461;Returns the type of the elements of this array type. This method should only be used for an_array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_    final int numDimensions = getDimensions()__    return getType(valueBuffer, valueBegin + numDimensions, valueEnd)__  };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,final,int,num,dimensions,get,dimensions,return,get,type,value,buffer,value,begin,num,dimensions,value,end
Type -> public Type getElementType();1536664245;Returns the type of the elements of this array type. This method should only be used for an_array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_    final int numDimensions = getDimensions()__    return getType(valueBuffer, valueBegin + numDimensions, valueEnd)__  };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,final,int,num,dimensions,get,dimensions,return,get,type,value,buffer,value,begin,num,dimensions,value,end
Type -> public Type getElementType();1537204147;Returns the type of the elements of this array type. This method should only be used for an_array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_    final int numDimensions = getDimensions()__    return getTypeInternal(valueBuffer, valueBegin + numDimensions, valueEnd)__  };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,final,int,num,dimensions,get,dimensions,return,get,type,internal,value,buffer,value,begin,num,dimensions,value,end
Type -> public Type getElementType();1539119582;Returns the type of the elements of this array type. This method should only be used for an_array type.__@return Returns the type of the elements of this array type.;public Type getElementType() {_    final int numDimensions = getDimensions()__    return getTypeInternal(valueBuffer, valueBegin + numDimensions, valueEnd)__  };returns,the,type,of,the,elements,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,returns,the,type,of,the,elements,of,this,array,type;public,type,get,element,type,final,int,num,dimensions,get,dimensions,return,get,type,internal,value,buffer,value,begin,num,dimensions,value,end
Type -> public static Type getReturnType(final Method method);1366718246;Returns the Java type corresponding to the return type of the given_method.__@param method_a method._@return the Java type corresponding to the return type of the given_method.;public static Type getReturnType(final Method method) {_        return getType(method.getReturnType())__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,java,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1400531367;Returns the Java type corresponding to the return type of the given_method.__@param method_a method._@return the Java type corresponding to the return type of the given_method.;public static Type getReturnType(final Method method) {_        return getType(method.getReturnType())__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,java,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1400538684;Returns the Java type corresponding to the return type of the given_method.__@param method_a method._@return the Java type corresponding to the return type of the given_method.;public static Type getReturnType(final Method method) {_        return getType(method.getReturnType())__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,java,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1477913309;Returns the Java type corresponding to the return type of the given_method.__@param method_a method._@return the Java type corresponding to the return type of the given_method.;public static Type getReturnType(final Method method) {_        return getType(method.getReturnType())__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,java,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1483093254;Returns the Java type corresponding to the return type of the given_method.__@param method_a method._@return the Java type corresponding to the return type of the given_method.;public static Type getReturnType(final Method method) {_        return getType(method.getReturnType())__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,java,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1531241461;Returns the {@link Type} corresponding to the return type of the given method.__@param method a method._@return the {@link Type} corresponding to the return type of the given method.;public static Type getReturnType(final Method method) {_    return getType(method.getReturnType())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,link,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1536664245;Returns the {@link Type} corresponding to the return type of the given method.__@param method a method._@return the {@link Type} corresponding to the return type of the given method.;public static Type getReturnType(final Method method) {_    return getType(method.getReturnType())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,link,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1537204147;Returns the {@link Type} corresponding to the return type of the given method.__@param method a method._@return the {@link Type} corresponding to the return type of the given method.;public static Type getReturnType(final Method method) {_    return getType(method.getReturnType())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,link,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static Type getReturnType(final Method method);1539119582;Returns the {@link Type} corresponding to the return type of the given method.__@param method a method._@return the {@link Type} corresponding to the return type of the given method.;public static Type getReturnType(final Method method) {_    return getType(method.getReturnType())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,param,method,a,method,return,the,link,type,corresponding,to,the,return,type,of,the,given,method;public,static,type,get,return,type,final,method,method,return,get,type,method,get,return,type
Type -> public static String getDescriptor(final Class<?> c);1366718246;Returns the descriptor corresponding to the given Java type.__@param c_an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> c) {_        StringBuffer buf = new StringBuffer()__        getDescriptor(buf, c)__        return buf.toString()__    };returns,the,descriptor,corresponding,to,the,given,java,type,param,c,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,c,string,buffer,buf,new,string,buffer,get,descriptor,buf,c,return,buf,to,string
Type -> public static String getDescriptor(final Class<?> c);1400531367;Returns the descriptor corresponding to the given Java type.__@param c_an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> c) {_		StringBuilder sb = new StringBuilder()__        getDescriptor(sb, c)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,java,type,param,c,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,c,string,builder,sb,new,string,builder,get,descriptor,sb,c,return,sb,to,string
Type -> public static String getDescriptor(final Class<?> c);1400538684;Returns the descriptor corresponding to the given Java type.__@param c_an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> c) {_		StringBuilder sb = new StringBuilder()__        getDescriptor(sb, c)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,java,type,param,c,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,c,string,builder,sb,new,string,builder,get,descriptor,sb,c,return,sb,to,string
Type -> public static String getDescriptor(final Class<?> c);1477913309;Returns the descriptor corresponding to the given Java type.__@param c_an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> c) {_		StringBuilder sb = new StringBuilder()__        getDescriptor(sb, c)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,java,type,param,c,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,c,string,builder,sb,new,string,builder,get,descriptor,sb,c,return,sb,to,string
Type -> public static String getDescriptor(final Class<?> c);1483093254;Returns the descriptor corresponding to the given Java type.__@param c_an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> c) {_        StringBuilder buf = new StringBuilder()__        getDescriptor(buf, c)__        return buf.toString()__    };returns,the,descriptor,corresponding,to,the,given,java,type,param,c,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,c,string,builder,buf,new,string,builder,get,descriptor,buf,c,return,buf,to,string
Type -> public static Type getType(final Method m);1366718246;Returns the Java method type corresponding to the given method.__@param m_a {@link Method Method} object._@return the Java method type corresponding to the given method.;public static Type getType(final Method m) {_        return getType(getMethodDescriptor(m))__    };returns,the,java,method,type,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,java,method,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,m,return,get,type,get,method,descriptor,m
Type -> public static Type getType(final Method m);1400531367;Returns the Java method type corresponding to the given method.__@param m_a {@link Method Method} object._@return the Java method type corresponding to the given method.;public static Type getType(final Method m) {_        return getType(getMethodDescriptor(m))__    };returns,the,java,method,type,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,java,method,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,m,return,get,type,get,method,descriptor,m
Type -> public static Type getType(final Method m);1400538684;Returns the Java method type corresponding to the given method.__@param m_a {@link Method Method} object._@return the Java method type corresponding to the given method.;public static Type getType(final Method m) {_        return getType(getMethodDescriptor(m))__    };returns,the,java,method,type,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,java,method,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,m,return,get,type,get,method,descriptor,m
Type -> public static Type getType(final Method m);1477913309;Returns the Java method type corresponding to the given method.__@param m_a {@link Method Method} object._@return the Java method type corresponding to the given method.;public static Type getType(final Method m) {_        return getType(getMethodDescriptor(m))__    };returns,the,java,method,type,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,java,method,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,m,return,get,type,get,method,descriptor,m
Type -> public static Type getType(final Method m);1483093254;Returns the Java method type corresponding to the given method.__@param m_a {@link Method Method} object._@return the Java method type corresponding to the given method.;public static Type getType(final Method m) {_        return getType(getMethodDescriptor(m))__    };returns,the,java,method,type,corresponding,to,the,given,method,param,m,a,link,method,method,object,return,the,java,method,type,corresponding,to,the,given,method;public,static,type,get,type,final,method,m,return,get,type,get,method,descriptor,m
Type -> private static void appendDescriptor(final Class<?> clazz, final StringBuilder stringBuilder);1537204147;Appends the descriptor of the given class to the given string builder.__@param clazz the class whose descriptor must be computed._@param stringBuilder the string builder to which the descriptor must be appended.;private static void appendDescriptor(final Class<?> clazz, final StringBuilder stringBuilder) {_    Class<?> currentClass = clazz__    while (currentClass.isArray()) {_      stringBuilder.append('[')__      currentClass = currentClass.getComponentType()__    }_    if (currentClass.isPrimitive()) {_      char descriptor__      if (currentClass == Integer.TYPE) {_        descriptor = 'I'__      } else if (currentClass == Void.TYPE) {_        descriptor = 'V'__      } else if (currentClass == Boolean.TYPE) {_        descriptor = 'Z'__      } else if (currentClass == Byte.TYPE) {_        descriptor = 'B'__      } else if (currentClass == Character.TYPE) {_        descriptor = 'C'__      } else if (currentClass == Short.TYPE) {_        descriptor = 'S'__      } else if (currentClass == Double.TYPE) {_        descriptor = 'D'__      } else if (currentClass == Float.TYPE) {_        descriptor = 'F'__      } else if (currentClass == Long.TYPE) {_        descriptor = 'J'__      } else {_        throw new AssertionError()__      }_      stringBuilder.append(descriptor)__    } else {_      stringBuilder.append('L')__      String name = currentClass.getName()__      int nameLength = name.length()__      for (int i = 0_ i < nameLength_ ++i) {_        char car = name.charAt(i)__        stringBuilder.append(car == '.' ? '/' : car)__      }_      stringBuilder.append('_')__    }_  };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,clazz,the,class,whose,descriptor,must,be,computed,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended;private,static,void,append,descriptor,final,class,clazz,final,string,builder,string,builder,class,current,class,clazz,while,current,class,is,array,string,builder,append,current,class,current,class,get,component,type,if,current,class,is,primitive,char,descriptor,if,current,class,integer,type,descriptor,i,else,if,current,class,void,type,descriptor,v,else,if,current,class,boolean,type,descriptor,z,else,if,current,class,byte,type,descriptor,b,else,if,current,class,character,type,descriptor,c,else,if,current,class,short,type,descriptor,s,else,if,current,class,double,type,descriptor,d,else,if,current,class,float,type,descriptor,f,else,if,current,class,long,type,descriptor,j,else,throw,new,assertion,error,string,builder,append,descriptor,else,string,builder,append,l,string,name,current,class,get,name,int,name,length,name,length,for,int,i,0,i,name,length,i,char,car,name,char,at,i,string,builder,append,car,car,string,builder,append
Type -> private static void appendDescriptor(final Class<?> clazz, final StringBuilder stringBuilder);1539119582;Appends the descriptor of the given class to the given string builder.__@param clazz the class whose descriptor must be computed._@param stringBuilder the string builder to which the descriptor must be appended.;private static void appendDescriptor(final Class<?> clazz, final StringBuilder stringBuilder) {_    Class<?> currentClass = clazz__    while (currentClass.isArray()) {_      stringBuilder.append('[')__      currentClass = currentClass.getComponentType()__    }_    if (currentClass.isPrimitive()) {_      char descriptor__      if (currentClass == Integer.TYPE) {_        descriptor = 'I'__      } else if (currentClass == Void.TYPE) {_        descriptor = 'V'__      } else if (currentClass == Boolean.TYPE) {_        descriptor = 'Z'__      } else if (currentClass == Byte.TYPE) {_        descriptor = 'B'__      } else if (currentClass == Character.TYPE) {_        descriptor = 'C'__      } else if (currentClass == Short.TYPE) {_        descriptor = 'S'__      } else if (currentClass == Double.TYPE) {_        descriptor = 'D'__      } else if (currentClass == Float.TYPE) {_        descriptor = 'F'__      } else if (currentClass == Long.TYPE) {_        descriptor = 'J'__      } else {_        throw new AssertionError()__      }_      stringBuilder.append(descriptor)__    } else {_      stringBuilder.append('L')__      String name = currentClass.getName()__      int nameLength = name.length()__      for (int i = 0_ i < nameLength_ ++i) {_        char car = name.charAt(i)__        stringBuilder.append(car == '.' ? '/' : car)__      }_      stringBuilder.append('_')__    }_  };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,clazz,the,class,whose,descriptor,must,be,computed,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended;private,static,void,append,descriptor,final,class,clazz,final,string,builder,string,builder,class,current,class,clazz,while,current,class,is,array,string,builder,append,current,class,current,class,get,component,type,if,current,class,is,primitive,char,descriptor,if,current,class,integer,type,descriptor,i,else,if,current,class,void,type,descriptor,v,else,if,current,class,boolean,type,descriptor,z,else,if,current,class,byte,type,descriptor,b,else,if,current,class,character,type,descriptor,c,else,if,current,class,short,type,descriptor,s,else,if,current,class,double,type,descriptor,d,else,if,current,class,float,type,descriptor,f,else,if,current,class,long,type,descriptor,j,else,throw,new,assertion,error,string,builder,append,descriptor,else,string,builder,append,l,string,name,current,class,get,name,int,name,length,name,length,for,int,i,0,i,name,length,i,char,car,name,char,at,i,string,builder,append,car,car,string,builder,append
Type -> @Override   public int hashCode();1531241461;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_  public int hashCode() {_    int hashCode = 13 * (sort == INTERNAL ? OBJECT : sort)__    if (sort >= ARRAY) {_      for (int i = valueBegin, end = valueEnd_ i < end_ i++) {_        hashCode = 17 * (hashCode + valueBuffer.charAt(i))__      }_    }_    return hashCode__  };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hash,code,13,sort,internal,object,sort,if,sort,array,for,int,i,value,begin,end,value,end,i,end,i,hash,code,17,hash,code,value,buffer,char,at,i,return,hash,code
Type -> @Override   public int hashCode();1536664245;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_  public int hashCode() {_    int hashCode = 13 * (sort == INTERNAL ? OBJECT : sort)__    if (sort >= ARRAY) {_      for (int i = valueBegin, end = valueEnd_ i < end_ i++) {_        hashCode = 17 * (hashCode + valueBuffer.charAt(i))__      }_    }_    return hashCode__  };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hash,code,13,sort,internal,object,sort,if,sort,array,for,int,i,value,begin,end,value,end,i,end,i,hash,code,17,hash,code,value,buffer,char,at,i,return,hash,code
Type -> @Override   public int hashCode();1537204147;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_  public int hashCode() {_    int hashCode = 13 * (sort == INTERNAL ? OBJECT : sort)__    if (sort >= ARRAY) {_      for (int i = valueBegin, end = valueEnd_ i < end_ i++) {_        hashCode = 17 * (hashCode + valueBuffer.charAt(i))__      }_    }_    return hashCode__  };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hash,code,13,sort,internal,object,sort,if,sort,array,for,int,i,value,begin,end,value,end,i,end,i,hash,code,17,hash,code,value,buffer,char,at,i,return,hash,code
Type -> @Override   public int hashCode();1539119582;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_  public int hashCode() {_    int hashCode = 13 * (sort == INTERNAL ? OBJECT : sort)__    if (sort >= ARRAY) {_      for (int i = valueBegin, end = valueEnd_ i < end_ i++) {_        hashCode = 17 * (hashCode + valueBuffer.charAt(i))__      }_    }_    return hashCode__  };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hash,code,13,sort,internal,object,sort,if,sort,array,for,int,i,value,begin,end,value,end,i,end,i,hash,code,17,hash,code,value,buffer,char,at,i,return,hash,code
Type -> public static Type getType(final Constructor<?> constructor);1531241461;Returns the method {@link Type} corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the method {@link Type} corresponding to the given constructor.;public static Type getType(final Constructor<?> constructor) {_    return getType(getConstructorDescriptor(constructor))__  };returns,the,method,link,type,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,method,link,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,constructor,return,get,type,get,constructor,descriptor,constructor
Type -> public static Type getType(final Constructor<?> constructor);1536664245;Returns the method {@link Type} corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the method {@link Type} corresponding to the given constructor.;public static Type getType(final Constructor<?> constructor) {_    return getType(getConstructorDescriptor(constructor))__  };returns,the,method,link,type,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,method,link,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,constructor,return,get,type,get,constructor,descriptor,constructor
Type -> public static Type getType(final Constructor<?> constructor);1537204147;Returns the method {@link Type} corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the method {@link Type} corresponding to the given constructor.;public static Type getType(final Constructor<?> constructor) {_    return getType(getConstructorDescriptor(constructor))__  };returns,the,method,link,type,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,method,link,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,constructor,return,get,type,get,constructor,descriptor,constructor
Type -> public static Type getType(final Constructor<?> constructor);1539119582;Returns the method {@link Type} corresponding to the given constructor.__@param constructor a {@link Constructor} object._@return the method {@link Type} corresponding to the given constructor.;public static Type getType(final Constructor<?> constructor) {_    return getType(getConstructorDescriptor(constructor))__  };returns,the,method,link,type,corresponding,to,the,given,constructor,param,constructor,a,link,constructor,object,return,the,method,link,type,corresponding,to,the,given,constructor;public,static,type,get,type,final,constructor,constructor,return,get,type,get,constructor,descriptor,constructor
Type -> public int getArgumentsAndReturnSizes();1366718246;Returns the size of the arguments and of the return value of methods of_this type. This method should only be used for method types.__@return the size of the arguments (plus one for the implicit this_argument), argSize, and the size of the return value, retSize,_packed into a single int i = <tt>(argSize << 2) | retSize</tt>_(argSize is therefore equal to <tt>i >> 2</tt>, and retSize to_<tt>i & 0x03</tt>).;public int getArgumentsAndReturnSizes() {_        return getArgumentsAndReturnSizes(getDescriptor())__    };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,the,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,2,tt,and,ret,size,to,tt,i,0x03,tt;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1400531367;Returns the size of the arguments and of the return value of methods of_this type. This method should only be used for method types.__@return the size of the arguments (plus one for the implicit this_argument), argSize, and the size of the return value, retSize,_packed into a single_int i = <tt>(argSize &lt_&lt_ 2) | retSize</tt>_(argSize is therefore equal to <tt>i &gt_&gt_ 2</tt>,_and retSize to <tt>i &amp_ 0x03</tt>).;public int getArgumentsAndReturnSizes() {_        return getArgumentsAndReturnSizes(getDescriptor())__    };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,the,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1400538684;Returns the size of the arguments and of the return value of methods of_this type. This method should only be used for method types.__@return the size of the arguments (plus one for the implicit this_argument), argSize, and the size of the return value, retSize,_packed into a single_int i = <tt>(argSize &lt_&lt_ 2) | retSize</tt>_(argSize is therefore equal to <tt>i &gt_&gt_ 2</tt>,_and retSize to <tt>i &amp_ 0x03</tt>).;public int getArgumentsAndReturnSizes() {_        return getArgumentsAndReturnSizes(getDescriptor())__    };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,the,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1477913309;Returns the size of the arguments and of the return value of methods of_this type. This method should only be used for method types.__@return the size of the arguments (plus one for the implicit this_argument), argSize, and the size of the return value, retSize,_packed into a single_int i = <tt>(argSize &lt_&lt_ 2) | retSize</tt>_(argSize is therefore equal to <tt>i &gt_&gt_ 2</tt>,_and retSize to <tt>i &amp_ 0x03</tt>).;public int getArgumentsAndReturnSizes() {_        return getArgumentsAndReturnSizes(getDescriptor())__    };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,the,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1483093254;Returns the size of the arguments and of the return value of methods of_this type. This method should only be used for method types.__@return the size of the arguments (plus one for the implicit this_argument), argSize, and the size of the return value, retSize,_packed into a single_int i = <tt>(argSize &lt_&lt_ 2) | retSize</tt>_(argSize is therefore equal to <tt>i &gt_&gt_ 2</tt>,_and retSize to <tt>i &amp_ 0x03</tt>).;public int getArgumentsAndReturnSizes() {_        return getArgumentsAndReturnSizes(getDescriptor())__    };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,the,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1531241461;Returns the size of the arguments and of the return value of methods of this type. This method_should only be used for method types.__@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_<tt>(argumentsSize &lt_&lt_ 2) | returnSize</tt> (argumentsSize is therefore equal to <tt>i_&gt_&gt_ 2</tt>, and returnSize to <tt>i &amp_ 0x03</tt>).;public int getArgumentsAndReturnSizes() {_    return getArgumentsAndReturnSizes(getDescriptor())__  };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,tt,arguments,size,lt,lt,2,return,size,tt,arguments,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,return,size,to,tt,i,amp,0x03,tt;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1536664245;Returns the size of the arguments and of the return value of methods of this type. This method_should only be used for method types.__@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_{@code (argumentsSize &lt_&lt_ 2) | returnSize} (argumentsSize is therefore equal to {@code_i &gt_&gt_ 2}, and returnSize to {@code i &amp_ 0x03}).;public int getArgumentsAndReturnSizes() {_    return getArgumentsAndReturnSizes(getDescriptor())__  };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,code,arguments,size,lt,lt,2,return,size,arguments,size,is,therefore,equal,to,code,i,gt,gt,2,and,return,size,to,code,i,amp,0x03;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1537204147;Returns the size of the arguments and of the return value of methods of this type. This method_should only be used for method types.__@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_{@code (argumentsSize &lt_&lt_ 2) | returnSize} (argumentsSize is therefore equal to {@code_i &gt_&gt_ 2}, and returnSize to {@code i &amp_ 0x03}).;public int getArgumentsAndReturnSizes() {_    return getArgumentsAndReturnSizes(getDescriptor())__  };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,code,arguments,size,lt,lt,2,return,size,arguments,size,is,therefore,equal,to,code,i,gt,gt,2,and,return,size,to,code,i,amp,0x03;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public int getArgumentsAndReturnSizes();1539119582;Returns the size of the arguments and of the return value of methods of this type. This method_should only be used for method types.__@return the size of the arguments of the method (plus one for the implicit this argument),_argumentsSize, and the size of its return value, returnSize, packed into a single int i =_{@code (argumentsSize &lt_&lt_ 2) | returnSize} (argumentsSize is therefore equal to {@code_i &gt_&gt_ 2}, and returnSize to {@code i &amp_ 0x03}).;public int getArgumentsAndReturnSizes() {_    return getArgumentsAndReturnSizes(getDescriptor())__  };returns,the,size,of,the,arguments,and,of,the,return,value,of,methods,of,this,type,this,method,should,only,be,used,for,method,types,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arguments,size,and,the,size,of,its,return,value,return,size,packed,into,a,single,int,i,code,arguments,size,lt,lt,2,return,size,arguments,size,is,therefore,equal,to,code,i,gt,gt,2,and,return,size,to,code,i,amp,0x03;public,int,get,arguments,and,return,sizes,return,get,arguments,and,return,sizes,get,descriptor
Type -> public static Type getType(final String typeDescriptor);1366718246;Returns the Java type corresponding to the given type descriptor.__@param typeDescriptor_a field or method type descriptor._@return the Java type corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_        return getType(typeDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,java,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,to,char,array,0
Type -> public static Type getType(final String typeDescriptor);1400531367;Returns the Java type corresponding to the given type descriptor.__@param typeDescriptor_a field or method type descriptor._@return the Java type corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_        return getType(typeDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,java,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,to,char,array,0
Type -> public static Type getType(final String typeDescriptor);1400538684;Returns the Java type corresponding to the given type descriptor.__@param typeDescriptor_a field or method type descriptor._@return the Java type corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_        return getType(typeDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,java,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,to,char,array,0
Type -> public static Type getType(final String typeDescriptor);1477913309;Returns the Java type corresponding to the given type descriptor.__@param typeDescriptor_a field or method type descriptor._@return the Java type corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_        return getType(typeDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,java,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,to,char,array,0
Type -> public static Type getType(final String typeDescriptor);1483093254;Returns the Java type corresponding to the given type descriptor.__@param typeDescriptor_a field or method type descriptor._@return the Java type corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_        return getType(typeDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,java,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,to,char,array,0
Type -> public static Type getType(final String typeDescriptor);1531241461;Returns the {@link Type} corresponding to the given type descriptor.__@param typeDescriptor a field or method type descriptor._@return the {@link Type} corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_    return getType(typeDescriptor, 0, typeDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,link,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,0,type,descriptor,length
Type -> public static Type getType(final String typeDescriptor);1536664245;Returns the {@link Type} corresponding to the given type descriptor.__@param typeDescriptor a field or method type descriptor._@return the {@link Type} corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_    return getType(typeDescriptor, 0, typeDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,link,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,type,descriptor,0,type,descriptor,length
Type -> public static Type getType(final String typeDescriptor);1537204147;Returns the {@link Type} corresponding to the given type descriptor.__@param typeDescriptor a field or method type descriptor._@return the {@link Type} corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_    return getTypeInternal(typeDescriptor, 0, typeDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,link,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,internal,type,descriptor,0,type,descriptor,length
Type -> public static Type getType(final String typeDescriptor);1539119582;Returns the {@link Type} corresponding to the given type descriptor.__@param typeDescriptor a field or method type descriptor._@return the {@link Type} corresponding to the given type descriptor.;public static Type getType(final String typeDescriptor) {_    return getTypeInternal(typeDescriptor, 0, typeDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,type,descriptor,param,type,descriptor,a,field,or,method,type,descriptor,return,the,link,type,corresponding,to,the,given,type,descriptor;public,static,type,get,type,final,string,type,descriptor,return,get,type,internal,type,descriptor,0,type,descriptor,length
Type -> public static Type getType(final Class<?> c);1366718246;Returns the Java type corresponding to the given class.__@param c_a class._@return the Java type corresponding to the given class.;public static Type getType(final Class<?> c) {_        if (c.isPrimitive()) {_            if (c == Integer.TYPE) {_                return INT_TYPE__            } else if (c == Void.TYPE) {_                return VOID_TYPE__            } else if (c == Boolean.TYPE) {_                return BOOLEAN_TYPE__            } else if (c == Byte.TYPE) {_                return BYTE_TYPE__            } else if (c == Character.TYPE) {_                return CHAR_TYPE__            } else if (c == Short.TYPE) {_                return SHORT_TYPE__            } else if (c == Double.TYPE) {_                return DOUBLE_TYPE__            } else if (c == Float.TYPE) {_                return FLOAT_TYPE__            } else {_                return LONG_TYPE__            }_        } else {_            return getType(getDescriptor(c))__        }_    };returns,the,java,type,corresponding,to,the,given,class,param,c,a,class,return,the,java,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,c,if,c,is,primitive,if,c,integer,type,return,else,if,c,void,type,return,else,if,c,boolean,type,return,else,if,c,byte,type,return,else,if,c,character,type,return,else,if,c,short,type,return,else,if,c,double,type,return,else,if,c,float,type,return,else,return,else,return,get,type,get,descriptor,c
Type -> public static Type getType(final Class<?> c);1400531367;Returns the Java type corresponding to the given class.__@param c_a class._@return the Java type corresponding to the given class.;public static Type getType(final Class<?> c) {_        if (c.isPrimitive()) {_            if (c == Integer.TYPE) {_                return INT_TYPE__            } else if (c == Void.TYPE) {_                return VOID_TYPE__            } else if (c == Boolean.TYPE) {_                return BOOLEAN_TYPE__            } else if (c == Byte.TYPE) {_                return BYTE_TYPE__            } else if (c == Character.TYPE) {_                return CHAR_TYPE__            } else if (c == Short.TYPE) {_                return SHORT_TYPE__            } else if (c == Double.TYPE) {_                return DOUBLE_TYPE__            } else if (c == Float.TYPE) {_                return FLOAT_TYPE__            } else {_                return LONG_TYPE__            }_        } else {_            return getType(getDescriptor(c))__        }_    };returns,the,java,type,corresponding,to,the,given,class,param,c,a,class,return,the,java,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,c,if,c,is,primitive,if,c,integer,type,return,else,if,c,void,type,return,else,if,c,boolean,type,return,else,if,c,byte,type,return,else,if,c,character,type,return,else,if,c,short,type,return,else,if,c,double,type,return,else,if,c,float,type,return,else,return,else,return,get,type,get,descriptor,c
Type -> public static Type getType(final Class<?> c);1400538684;Returns the Java type corresponding to the given class.__@param c_a class._@return the Java type corresponding to the given class.;public static Type getType(final Class<?> c) {_        if (c.isPrimitive()) {_            if (c == Integer.TYPE) {_                return INT_TYPE__            } else if (c == Void.TYPE) {_                return VOID_TYPE__            } else if (c == Boolean.TYPE) {_                return BOOLEAN_TYPE__            } else if (c == Byte.TYPE) {_                return BYTE_TYPE__            } else if (c == Character.TYPE) {_                return CHAR_TYPE__            } else if (c == Short.TYPE) {_                return SHORT_TYPE__            } else if (c == Double.TYPE) {_                return DOUBLE_TYPE__            } else if (c == Float.TYPE) {_                return FLOAT_TYPE__            } else {_                return LONG_TYPE__            }_        } else {_            return getType(getDescriptor(c))__        }_    };returns,the,java,type,corresponding,to,the,given,class,param,c,a,class,return,the,java,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,c,if,c,is,primitive,if,c,integer,type,return,else,if,c,void,type,return,else,if,c,boolean,type,return,else,if,c,byte,type,return,else,if,c,character,type,return,else,if,c,short,type,return,else,if,c,double,type,return,else,if,c,float,type,return,else,return,else,return,get,type,get,descriptor,c
Type -> public static Type getType(final Class<?> c);1477913309;Returns the Java type corresponding to the given class.__@param c_a class._@return the Java type corresponding to the given class.;public static Type getType(final Class<?> c) {_        if (c.isPrimitive()) {_            if (c == Integer.TYPE) {_                return INT_TYPE__            } else if (c == Void.TYPE) {_                return VOID_TYPE__            } else if (c == Boolean.TYPE) {_                return BOOLEAN_TYPE__            } else if (c == Byte.TYPE) {_                return BYTE_TYPE__            } else if (c == Character.TYPE) {_                return CHAR_TYPE__            } else if (c == Short.TYPE) {_                return SHORT_TYPE__            } else if (c == Double.TYPE) {_                return DOUBLE_TYPE__            } else if (c == Float.TYPE) {_                return FLOAT_TYPE__            } else {_                return LONG_TYPE__            }_        } else {_            return getType(getDescriptor(c))__        }_    };returns,the,java,type,corresponding,to,the,given,class,param,c,a,class,return,the,java,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,c,if,c,is,primitive,if,c,integer,type,return,else,if,c,void,type,return,else,if,c,boolean,type,return,else,if,c,byte,type,return,else,if,c,character,type,return,else,if,c,short,type,return,else,if,c,double,type,return,else,if,c,float,type,return,else,return,else,return,get,type,get,descriptor,c
Type -> public static Type getType(final Class<?> c);1483093254;Returns the Java type corresponding to the given class.__@param c_a class._@return the Java type corresponding to the given class.;public static Type getType(final Class<?> c) {_        if (c.isPrimitive()) {_            if (c == Integer.TYPE) {_                return INT_TYPE__            } else if (c == Void.TYPE) {_                return VOID_TYPE__            } else if (c == Boolean.TYPE) {_                return BOOLEAN_TYPE__            } else if (c == Byte.TYPE) {_                return BYTE_TYPE__            } else if (c == Character.TYPE) {_                return CHAR_TYPE__            } else if (c == Short.TYPE) {_                return SHORT_TYPE__            } else if (c == Double.TYPE) {_                return DOUBLE_TYPE__            } else if (c == Float.TYPE) {_                return FLOAT_TYPE__            } else {_                return LONG_TYPE__            }_        } else {_            return getType(getDescriptor(c))__        }_    };returns,the,java,type,corresponding,to,the,given,class,param,c,a,class,return,the,java,type,corresponding,to,the,given,class;public,static,type,get,type,final,class,c,if,c,is,primitive,if,c,integer,type,return,else,if,c,void,type,return,else,if,c,boolean,type,return,else,if,c,byte,type,return,else,if,c,character,type,return,else,if,c,short,type,return,else,if,c,double,type,return,else,if,c,float,type,return,else,return,else,return,get,type,get,descriptor,c
Type -> private static Type getType(       final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd);1531241461;Returns the {@link Type} corresponding to the given field or method descriptor.__@param descriptorBuffer a buffer containing the field or method descriptor._@param descriptorBegin the beginning index, inclusive, of the field or method descriptor in_descriptorBuffer._@param descriptorEnd the end index, exclusive, of the field or method descriptor in_descriptorBuffer._@return the {@link Type} corresponding to the given type descriptor.;private static Type getType(_      final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd) {_    switch (descriptorBuffer.charAt(descriptorBegin)) {_      case 'V':_        return VOID_TYPE__      case 'Z':_        return BOOLEAN_TYPE__      case 'C':_        return CHAR_TYPE__      case 'B':_        return BYTE_TYPE__      case 'S':_        return SHORT_TYPE__      case 'I':_        return INT_TYPE__      case 'F':_        return FLOAT_TYPE__      case 'J':_        return LONG_TYPE__      case 'D':_        return DOUBLE_TYPE__      case '[':_        return new Type(ARRAY, descriptorBuffer, descriptorBegin, descriptorEnd)__      case 'L':_        return new Type(OBJECT, descriptorBuffer, descriptorBegin + 1, descriptorEnd - 1)__      case '(':_        return new Type(METHOD, descriptorBuffer, descriptorBegin, descriptorEnd)__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,link,type,corresponding,to,the,given,field,or,method,descriptor,param,descriptor,buffer,a,buffer,containing,the,field,or,method,descriptor,param,descriptor,begin,the,beginning,index,inclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,param,descriptor,end,the,end,index,exclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,return,the,link,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,string,descriptor,buffer,final,int,descriptor,begin,final,int,descriptor,end,switch,descriptor,buffer,char,at,descriptor,begin,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,return,new,type,array,descriptor,buffer,descriptor,begin,descriptor,end,case,l,return,new,type,object,descriptor,buffer,descriptor,begin,1,descriptor,end,1,case,return,new,type,method,descriptor,buffer,descriptor,begin,descriptor,end,default,throw,new,illegal,argument,exception
Type -> private static Type getType(       final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd);1536664245;Returns the {@link Type} corresponding to the given field or method descriptor.__@param descriptorBuffer a buffer containing the field or method descriptor._@param descriptorBegin the beginning index, inclusive, of the field or method descriptor in_descriptorBuffer._@param descriptorEnd the end index, exclusive, of the field or method descriptor in_descriptorBuffer._@return the {@link Type} corresponding to the given type descriptor.;private static Type getType(_      final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd) {_    switch (descriptorBuffer.charAt(descriptorBegin)) {_      case 'V':_        return VOID_TYPE__      case 'Z':_        return BOOLEAN_TYPE__      case 'C':_        return CHAR_TYPE__      case 'B':_        return BYTE_TYPE__      case 'S':_        return SHORT_TYPE__      case 'I':_        return INT_TYPE__      case 'F':_        return FLOAT_TYPE__      case 'J':_        return LONG_TYPE__      case 'D':_        return DOUBLE_TYPE__      case '[':_        return new Type(ARRAY, descriptorBuffer, descriptorBegin, descriptorEnd)__      case 'L':_        return new Type(OBJECT, descriptorBuffer, descriptorBegin + 1, descriptorEnd - 1)__      case '(':_        return new Type(METHOD, descriptorBuffer, descriptorBegin, descriptorEnd)__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,link,type,corresponding,to,the,given,field,or,method,descriptor,param,descriptor,buffer,a,buffer,containing,the,field,or,method,descriptor,param,descriptor,begin,the,beginning,index,inclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,param,descriptor,end,the,end,index,exclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,return,the,link,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,string,descriptor,buffer,final,int,descriptor,begin,final,int,descriptor,end,switch,descriptor,buffer,char,at,descriptor,begin,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,return,new,type,array,descriptor,buffer,descriptor,begin,descriptor,end,case,l,return,new,type,object,descriptor,buffer,descriptor,begin,1,descriptor,end,1,case,return,new,type,method,descriptor,buffer,descriptor,begin,descriptor,end,default,throw,new,illegal,argument,exception
Type -> public static String getInternalName(final Class<?> c);1366718246;Returns the internal name of the given class. The internal name of a_class is its fully qualified name, as returned by Class.getName(), where_'.' are replaced by '/'.__@param c_an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> c) {_        return c.getName().replace('.', '/')__    };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,c,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,c,return,c,get,name,replace
Type -> public static String getInternalName(final Class<?> c);1400531367;Returns the internal name of the given class. The internal name of a_class is its fully qualified name, as returned by Class.getName(), where_'.' are replaced by '/'.__@param c_an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> c) {_        return c.getName().replace('.', '/')__    };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,c,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,c,return,c,get,name,replace
Type -> public static String getInternalName(final Class<?> c);1400538684;Returns the internal name of the given class. The internal name of a_class is its fully qualified name, as returned by Class.getName(), where_'.' are replaced by '/'.__@param c_an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> c) {_        return c.getName().replace('.', '/')__    };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,c,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,c,return,c,get,name,replace
Type -> public static String getInternalName(final Class<?> c);1477913309;Returns the internal name of the given class. The internal name of a_class is its fully qualified name, as returned by Class.getName(), where_'.' are replaced by '/'.__@param c_an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> c) {_        return c.getName().replace('.', '/')__    };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,c,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,c,return,c,get,name,replace
Type -> public static String getInternalName(final Class<?> c);1483093254;Returns the internal name of the given class. The internal name of a_class is its fully qualified name, as returned by Class.getName(), where_'.' are replaced by '/'.__@param c_an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> c) {_        return c.getName().replace('.', '/')__    };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,c,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,c,return,c,get,name,replace
Type -> private void appendDescriptor(final StringBuilder stringBuilder);1531241461;Appends the descriptor corresponding to this type to the given string buffer.__@param stringBuilder the string builder to which the descriptor must be appended.;private void appendDescriptor(final StringBuilder stringBuilder) {_    if (sort == OBJECT) {_      stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      stringBuilder.append('L')__      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__      stringBuilder.append('_')__    } else {_      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__    }_  };appends,the,descriptor,corresponding,to,this,type,to,the,given,string,buffer,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,append,descriptor,final,string,builder,string,builder,if,sort,object,string,builder,append,value,buffer,value,begin,1,value,end,1,else,if,sort,internal,string,builder,append,l,string,builder,append,value,buffer,value,begin,value,end,string,builder,append,else,string,builder,append,value,buffer,value,begin,value,end
Type -> private void appendDescriptor(final StringBuilder stringBuilder);1536664245;Appends the descriptor corresponding to this type to the given string buffer.__@param stringBuilder the string builder to which the descriptor must be appended.;private void appendDescriptor(final StringBuilder stringBuilder) {_    if (sort == OBJECT) {_      stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      stringBuilder.append('L')__      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__      stringBuilder.append('_')__    } else {_      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__    }_  };appends,the,descriptor,corresponding,to,this,type,to,the,given,string,buffer,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,append,descriptor,final,string,builder,string,builder,if,sort,object,string,builder,append,value,buffer,value,begin,1,value,end,1,else,if,sort,internal,string,builder,append,l,string,builder,append,value,buffer,value,begin,value,end,string,builder,append,else,string,builder,append,value,buffer,value,begin,value,end
Type -> private void appendDescriptor(final StringBuilder stringBuilder);1537204147;Appends the descriptor corresponding to this type to the given string buffer.__@param stringBuilder the string builder to which the descriptor must be appended.;private void appendDescriptor(final StringBuilder stringBuilder) {_    if (sort == OBJECT) {_      stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      stringBuilder.append('L')__      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__      stringBuilder.append('_')__    } else {_      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__    }_  };appends,the,descriptor,corresponding,to,this,type,to,the,given,string,buffer,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,append,descriptor,final,string,builder,string,builder,if,sort,object,string,builder,append,value,buffer,value,begin,1,value,end,1,else,if,sort,internal,string,builder,append,l,string,builder,append,value,buffer,value,begin,value,end,string,builder,append,else,string,builder,append,value,buffer,value,begin,value,end
Type -> private void appendDescriptor(final StringBuilder stringBuilder);1539119582;Appends the descriptor corresponding to this type to the given string buffer.__@param stringBuilder the string builder to which the descriptor must be appended.;private void appendDescriptor(final StringBuilder stringBuilder) {_    if (sort == OBJECT) {_      stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append('_')__    } else {_      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__    }_  };appends,the,descriptor,corresponding,to,this,type,to,the,given,string,buffer,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,append,descriptor,final,string,builder,string,builder,if,sort,object,string,builder,append,value,buffer,value,begin,1,value,end,1,else,if,sort,internal,string,builder,append,l,append,value,buffer,value,begin,value,end,append,else,string,builder,append,value,buffer,value,begin,value,end
Type -> private static Type getTypeInternal(       final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd);1537204147;Returns the {@link Type} corresponding to the given field or method descriptor.__@param descriptorBuffer a buffer containing the field or method descriptor._@param descriptorBegin the beginning index, inclusive, of the field or method descriptor in_descriptorBuffer._@param descriptorEnd the end index, exclusive, of the field or method descriptor in_descriptorBuffer._@return the {@link Type} corresponding to the given type descriptor.;private static Type getTypeInternal(_      final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd) {_    switch (descriptorBuffer.charAt(descriptorBegin)) {_      case 'V':_        return VOID_TYPE__      case 'Z':_        return BOOLEAN_TYPE__      case 'C':_        return CHAR_TYPE__      case 'B':_        return BYTE_TYPE__      case 'S':_        return SHORT_TYPE__      case 'I':_        return INT_TYPE__      case 'F':_        return FLOAT_TYPE__      case 'J':_        return LONG_TYPE__      case 'D':_        return DOUBLE_TYPE__      case '[':_        return new Type(ARRAY, descriptorBuffer, descriptorBegin, descriptorEnd)__      case 'L':_        return new Type(OBJECT, descriptorBuffer, descriptorBegin + 1, descriptorEnd - 1)__      case '(':_        return new Type(METHOD, descriptorBuffer, descriptorBegin, descriptorEnd)__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,link,type,corresponding,to,the,given,field,or,method,descriptor,param,descriptor,buffer,a,buffer,containing,the,field,or,method,descriptor,param,descriptor,begin,the,beginning,index,inclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,param,descriptor,end,the,end,index,exclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,return,the,link,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,internal,final,string,descriptor,buffer,final,int,descriptor,begin,final,int,descriptor,end,switch,descriptor,buffer,char,at,descriptor,begin,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,return,new,type,array,descriptor,buffer,descriptor,begin,descriptor,end,case,l,return,new,type,object,descriptor,buffer,descriptor,begin,1,descriptor,end,1,case,return,new,type,method,descriptor,buffer,descriptor,begin,descriptor,end,default,throw,new,illegal,argument,exception
Type -> private static Type getTypeInternal(       final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd);1539119582;Returns the {@link Type} corresponding to the given field or method descriptor.__@param descriptorBuffer a buffer containing the field or method descriptor._@param descriptorBegin the beginning index, inclusive, of the field or method descriptor in_descriptorBuffer._@param descriptorEnd the end index, exclusive, of the field or method descriptor in_descriptorBuffer._@return the {@link Type} corresponding to the given type descriptor.;private static Type getTypeInternal(_      final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd) {_    switch (descriptorBuffer.charAt(descriptorBegin)) {_      case 'V':_        return VOID_TYPE__      case 'Z':_        return BOOLEAN_TYPE__      case 'C':_        return CHAR_TYPE__      case 'B':_        return BYTE_TYPE__      case 'S':_        return SHORT_TYPE__      case 'I':_        return INT_TYPE__      case 'F':_        return FLOAT_TYPE__      case 'J':_        return LONG_TYPE__      case 'D':_        return DOUBLE_TYPE__      case '[':_        return new Type(ARRAY, descriptorBuffer, descriptorBegin, descriptorEnd)__      case 'L':_        return new Type(OBJECT, descriptorBuffer, descriptorBegin + 1, descriptorEnd - 1)__      case '(':_        return new Type(METHOD, descriptorBuffer, descriptorBegin, descriptorEnd)__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,link,type,corresponding,to,the,given,field,or,method,descriptor,param,descriptor,buffer,a,buffer,containing,the,field,or,method,descriptor,param,descriptor,begin,the,beginning,index,inclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,param,descriptor,end,the,end,index,exclusive,of,the,field,or,method,descriptor,in,descriptor,buffer,return,the,link,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,internal,final,string,descriptor,buffer,final,int,descriptor,begin,final,int,descriptor,end,switch,descriptor,buffer,char,at,descriptor,begin,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,return,new,type,array,descriptor,buffer,descriptor,begin,descriptor,end,case,l,return,new,type,object,descriptor,buffer,descriptor,begin,1,descriptor,end,1,case,return,new,type,method,descriptor,buffer,descriptor,begin,descriptor,end,default,throw,new,illegal,argument,exception
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1366718246;Returns the Java types corresponding to the argument types of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java types corresponding to the argument types of the given_method descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        int off = 1__        int size = 0__        while (true) {_            char car = buf[off++]__            if (car == ')') {_                break__            } else if (car == 'L') {_                while (buf[off++] != '_') {_                }_                ++size__            } else if (car != '[') {_                ++size__            }_        }_        Type[] args = new Type[size]__        off = 1__        size = 0__        while (buf[off] != ')') {_            args[size] = getType(buf, off)__            off += args[size].len + (args[size].sort == OBJECT ? 2 : 0)__            size += 1__        }_        return args__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,int,off,1,int,size,0,while,true,char,car,buf,off,if,car,break,else,if,car,l,while,buf,off,size,else,if,car,size,type,args,new,type,size,off,1,size,0,while,buf,off,args,size,get,type,buf,off,off,args,size,len,args,size,sort,object,2,0,size,1,return,args
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1400531367;Returns the Java types corresponding to the argument types of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java types corresponding to the argument types of the given_method descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        int off = 1__        int size = 0__        while (true) {_            char car = buf[off++]__            if (car == ')') {_                break__            } else if (car == 'L') {_                while (buf[off++] != '_') {_                }_                ++size__            } else if (car != '[') {_                ++size__            }_        }_        Type[] args = new Type[size]__        off = 1__        size = 0__        while (buf[off] != ')') {_            args[size] = getType(buf, off)__            off += args[size].len + (args[size].sort == OBJECT ? 2 : 0)__            size += 1__        }_        return args__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,int,off,1,int,size,0,while,true,char,car,buf,off,if,car,break,else,if,car,l,while,buf,off,size,else,if,car,size,type,args,new,type,size,off,1,size,0,while,buf,off,args,size,get,type,buf,off,off,args,size,len,args,size,sort,object,2,0,size,1,return,args
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1400538684;Returns the Java types corresponding to the argument types of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java types corresponding to the argument types of the given_method descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        int off = 1__        int size = 0__        while (true) {_            char car = buf[off++]__            if (car == ')') {_                break__            } else if (car == 'L') {_                while (buf[off++] != '_') {_                }_                ++size__            } else if (car != '[') {_                ++size__            }_        }_        Type[] args = new Type[size]__        off = 1__        size = 0__        while (buf[off] != ')') {_            args[size] = getType(buf, off)__            off += args[size].len + (args[size].sort == OBJECT ? 2 : 0)__            size += 1__        }_        return args__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,int,off,1,int,size,0,while,true,char,car,buf,off,if,car,break,else,if,car,l,while,buf,off,size,else,if,car,size,type,args,new,type,size,off,1,size,0,while,buf,off,args,size,get,type,buf,off,off,args,size,len,args,size,sort,object,2,0,size,1,return,args
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1477913309;Returns the Java types corresponding to the argument types of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java types corresponding to the argument types of the given_method descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        int off = 1__        int size = 0__        while (true) {_            char car = buf[off++]__            if (car == ')') {_                break__            } else if (car == 'L') {_                while (buf[off++] != '_') {_                }_                ++size__            } else if (car != '[') {_                ++size__            }_        }_        Type[] args = new Type[size]__        off = 1__        size = 0__        while (buf[off] != ')') {_            args[size] = getType(buf, off)__            off += args[size].len + (args[size].sort == OBJECT ? 2 : 0)__            size += 1__        }_        return args__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,int,off,1,int,size,0,while,true,char,car,buf,off,if,car,break,else,if,car,l,while,buf,off,size,else,if,car,size,type,args,new,type,size,off,1,size,0,while,buf,off,args,size,get,type,buf,off,off,args,size,len,args,size,sort,object,2,0,size,1,return,args
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1483093254;Returns the Java types corresponding to the argument types of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java types corresponding to the argument types of the given_method descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        int off = 1__        int size = 0__        while (true) {_            char car = buf[off++]__            if (car == ')') {_                break__            } else if (car == 'L') {_                while (buf[off++] != '_') {_                }_                ++size__            } else if (car != '[') {_                ++size__            }_        }_        Type[] args = new Type[size]__        off = 1__        size = 0__        while (buf[off] != ')') {_            args[size] = getType(buf, off)__            off += args[size].len + (args[size].sort == OBJECT ? 2 : 0)__            size += 1__        }_        return args__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,int,off,1,int,size,0,while,true,char,car,buf,off,if,car,break,else,if,car,l,while,buf,off,size,else,if,car,size,type,args,new,type,size,off,1,size,0,while,buf,off,args,size,get,type,buf,off,off,args,size,len,args,size,sort,object,2,0,size,1,return,args
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1531241461;Returns the {@link Type} values corresponding to the argument types of the given method_descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} values corresponding to the argument types of the given method_descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_    _    int numArgumentTypes = 0__    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_      ++numArgumentTypes__    }__    _    Type[] argumentTypes = new Type[numArgumentTypes]__    _    currentOffset = 1__    _    int currentArgumentTypeIndex = 0__    while (methodDescriptor.charAt(currentOffset) != ')') {_      final int currentArgumentTypeOffset = currentOffset__      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_      argumentTypes[currentArgumentTypeIndex++] =_          getType(methodDescriptor, currentArgumentTypeOffset, currentOffset)__    }_    return argumentTypes__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,int,num,argument,types,0,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,num,argument,types,type,argument,types,new,type,num,argument,types,current,offset,1,int,current,argument,type,index,0,while,method,descriptor,char,at,current,offset,final,int,current,argument,type,offset,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,argument,types,current,argument,type,index,get,type,method,descriptor,current,argument,type,offset,current,offset,return,argument,types
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1536664245;Returns the {@link Type} values corresponding to the argument types of the given method_descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} values corresponding to the argument types of the given method_descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_    _    int numArgumentTypes = 0__    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_      ++numArgumentTypes__    }__    _    Type[] argumentTypes = new Type[numArgumentTypes]__    _    currentOffset = 1__    _    int currentArgumentTypeIndex = 0__    while (methodDescriptor.charAt(currentOffset) != ')') {_      final int currentArgumentTypeOffset = currentOffset__      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_      argumentTypes[currentArgumentTypeIndex++] =_          getType(methodDescriptor, currentArgumentTypeOffset, currentOffset)__    }_    return argumentTypes__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,int,num,argument,types,0,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,num,argument,types,type,argument,types,new,type,num,argument,types,current,offset,1,int,current,argument,type,index,0,while,method,descriptor,char,at,current,offset,final,int,current,argument,type,offset,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,argument,types,current,argument,type,index,get,type,method,descriptor,current,argument,type,offset,current,offset,return,argument,types
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1537204147;Returns the {@link Type} values corresponding to the argument types of the given method_descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} values corresponding to the argument types of the given method_descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_    _    int numArgumentTypes = 0__    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_      ++numArgumentTypes__    }__    _    Type[] argumentTypes = new Type[numArgumentTypes]__    _    currentOffset = 1__    _    int currentArgumentTypeIndex = 0__    while (methodDescriptor.charAt(currentOffset) != ')') {_      final int currentArgumentTypeOffset = currentOffset__      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_      argumentTypes[currentArgumentTypeIndex++] =_          getTypeInternal(methodDescriptor, currentArgumentTypeOffset, currentOffset)__    }_    return argumentTypes__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,int,num,argument,types,0,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,num,argument,types,type,argument,types,new,type,num,argument,types,current,offset,1,int,current,argument,type,index,0,while,method,descriptor,char,at,current,offset,final,int,current,argument,type,offset,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,argument,types,current,argument,type,index,get,type,internal,method,descriptor,current,argument,type,offset,current,offset,return,argument,types
Type -> public static Type[] getArgumentTypes(final String methodDescriptor);1539119582;Returns the {@link Type} values corresponding to the argument types of the given method_descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} values corresponding to the argument types of the given method_descriptor.;public static Type[] getArgumentTypes(final String methodDescriptor) {_    _    int numArgumentTypes = 0__    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        _        currentOffset = methodDescriptor.indexOf('_', currentOffset) + 1__      }_      ++numArgumentTypes__    }__    _    Type[] argumentTypes = new Type[numArgumentTypes]__    _    currentOffset = 1__    _    int currentArgumentTypeIndex = 0__    while (methodDescriptor.charAt(currentOffset) != ')') {_      final int currentArgumentTypeOffset = currentOffset__      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        _        currentOffset = methodDescriptor.indexOf('_', currentOffset) + 1__      }_      argumentTypes[currentArgumentTypeIndex++] =_          getTypeInternal(methodDescriptor, currentArgumentTypeOffset, currentOffset)__    }_    return argumentTypes__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,descriptor;public,static,type,get,argument,types,final,string,method,descriptor,int,num,argument,types,0,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,current,offset,method,descriptor,index,of,current,offset,1,num,argument,types,type,argument,types,new,type,num,argument,types,current,offset,1,int,current,argument,type,index,0,while,method,descriptor,char,at,current,offset,final,int,current,argument,type,offset,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,current,offset,method,descriptor,index,of,current,offset,1,argument,types,current,argument,type,index,get,type,internal,method,descriptor,current,argument,type,offset,current,offset,return,argument,types
Type -> public static String getMethodDescriptor(final Method method);1531241461;Returns the descriptor corresponding to the given method.__@param method a {@link Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method method) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = method.getParameterTypes()__    for (int i = 0_ i < parameters.length_ ++i) {_      appendDescriptor(stringBuilder, parameters[i])__    }_    stringBuilder.append(')')__    appendDescriptor(stringBuilder, method.getReturnType())__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,method,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,method,get,parameter,types,for,int,i,0,i,parameters,length,i,append,descriptor,string,builder,parameters,i,string,builder,append,append,descriptor,string,builder,method,get,return,type,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Method method);1536664245;Returns the descriptor corresponding to the given method.__@param method a {@link Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method method) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = method.getParameterTypes()__    for (int i = 0_ i < parameters.length_ ++i) {_      appendDescriptor(stringBuilder, parameters[i])__    }_    stringBuilder.append(')')__    appendDescriptor(stringBuilder, method.getReturnType())__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,method,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,method,get,parameter,types,for,int,i,0,i,parameters,length,i,append,descriptor,string,builder,parameters,i,string,builder,append,append,descriptor,string,builder,method,get,return,type,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Method method);1537204147;Returns the descriptor corresponding to the given method.__@param method a {@link Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method method) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = method.getParameterTypes()__    for (int i = 0_ i < parameters.length_ ++i) {_      appendDescriptor(parameters[i], stringBuilder)__    }_    stringBuilder.append(')')__    appendDescriptor(method.getReturnType(), stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,method,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,method,get,parameter,types,for,int,i,0,i,parameters,length,i,append,descriptor,parameters,i,string,builder,string,builder,append,append,descriptor,method,get,return,type,string,builder,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Method method);1539119582;Returns the descriptor corresponding to the given method.__@param method a {@link Method} object._@return the descriptor of the given method.;public static String getMethodDescriptor(final Method method) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    Class<?>[] parameters = method.getParameterTypes()__    for (Class<?> parameter : parameters) {_      appendDescriptor(parameter, stringBuilder)__    }_    stringBuilder.append(')')__    appendDescriptor(method.getReturnType(), stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,method,param,method,a,link,method,object,return,the,descriptor,of,the,given,method;public,static,string,get,method,descriptor,final,method,method,string,builder,string,builder,new,string,builder,string,builder,append,class,parameters,method,get,parameter,types,for,class,parameter,parameters,append,descriptor,parameter,string,builder,string,builder,append,append,descriptor,method,get,return,type,string,builder,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Type returnType,             final Type... argumentTypes);1366718246;Returns the descriptor corresponding to the given argument and return_types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the descriptor corresponding to the given argument and return_types.;public static String getMethodDescriptor(final Type returnType,_            final Type... argumentTypes) {_        StringBuffer buf = new StringBuffer()__        buf.append('(')__        for (int i = 0_ i < argumentTypes.length_ ++i) {_            argumentTypes[i].getDescriptor(buf)__        }_        buf.append(')')__        returnType.getDescriptor(buf)__        return buf.toString()__    };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,buffer,buf,new,string,buffer,buf,append,for,int,i,0,i,argument,types,length,i,argument,types,i,get,descriptor,buf,buf,append,return,type,get,descriptor,buf,return,buf,to,string
Type -> public static String getMethodDescriptor(final Type returnType,             final Type... argumentTypes);1400531367;Returns the descriptor corresponding to the given argument and return_types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the descriptor corresponding to the given argument and return_types.;public static String getMethodDescriptor(final Type returnType,_            final Type... argumentTypes) {_		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < argumentTypes.length_ ++i) {_            argumentTypes[i].getDescriptor(sb)__        }_        sb.append(')')__        returnType.getDescriptor(sb)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,argument,types,length,i,argument,types,i,get,descriptor,sb,sb,append,return,type,get,descriptor,sb,return,sb,to,string
Type -> public static String getMethodDescriptor(final Type returnType,             final Type... argumentTypes);1400538684;Returns the descriptor corresponding to the given argument and return_types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the descriptor corresponding to the given argument and return_types.;public static String getMethodDescriptor(final Type returnType,_            final Type... argumentTypes) {_		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < argumentTypes.length_ ++i) {_            argumentTypes[i].getDescriptor(sb)__        }_        sb.append(')')__        returnType.getDescriptor(sb)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,argument,types,length,i,argument,types,i,get,descriptor,sb,sb,append,return,type,get,descriptor,sb,return,sb,to,string
Type -> public static String getMethodDescriptor(final Type returnType,             final Type... argumentTypes);1477913309;Returns the descriptor corresponding to the given argument and return_types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the descriptor corresponding to the given argument and return_types.;public static String getMethodDescriptor(final Type returnType,_            final Type... argumentTypes) {_		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < argumentTypes.length_ ++i) {_            argumentTypes[i].getDescriptor(sb)__        }_        sb.append(')')__        returnType.getDescriptor(sb)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,argument,types,length,i,argument,types,i,get,descriptor,sb,sb,append,return,type,get,descriptor,sb,return,sb,to,string
Type -> public static String getMethodDescriptor(final Type returnType,             final Type... argumentTypes);1483093254;Returns the descriptor corresponding to the given argument and return_types.__@param returnType_the return type of the method._@param argumentTypes_the argument types of the method._@return the descriptor corresponding to the given argument and return_types.;public static String getMethodDescriptor(final Type returnType,_            final Type... argumentTypes) {_        StringBuilder buf = new StringBuilder()__        buf.append('(')__        for (int i = 0_ i < argumentTypes.length_ ++i) {_            argumentTypes[i].getDescriptor(buf)__        }_        buf.append(')')__        returnType.getDescriptor(buf)__        return buf.toString()__    };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,buf,new,string,builder,buf,append,for,int,i,0,i,argument,types,length,i,argument,types,i,get,descriptor,buf,buf,append,return,type,get,descriptor,buf,return,buf,to,string
Type -> @Override     public boolean equals(final Object o);1366718246;Tests if the given object is equal to this type.__@param o_the object to be compared to this type._@return <tt>true</tt> if the given object is equal to this type.;@Override_    public boolean equals(final Object o) {_        if (this == o) {_            return true__        }_        if (!(o instanceof Type)) {_            return false__        }_        Type t = (Type) o__        if (sort != t.sort) {_            return false__        }_        if (sort >= ARRAY) {_            if (len != t.len) {_                return false__            }_            for (int i = off, j = t.off, end = i + len_ i < end_ i++, j++) {_                if (buf[i] != t.buf[j]) {_                    return false__                }_            }_        }_        return true__    };tests,if,the,given,object,is,equal,to,this,type,param,o,the,object,to,be,compared,to,this,type,return,tt,true,tt,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,o,if,this,o,return,true,if,o,instanceof,type,return,false,type,t,type,o,if,sort,t,sort,return,false,if,sort,array,if,len,t,len,return,false,for,int,i,off,j,t,off,end,i,len,i,end,i,j,if,buf,i,t,buf,j,return,false,return,true
Type -> @Override     public boolean equals(final Object o);1400531367;Tests if the given object is equal to this type.__@param o_the object to be compared to this type._@return <tt>true</tt> if the given object is equal to this type.;@Override_    public boolean equals(final Object o) {_        if (this == o) {_            return true__        }_        if (!(o instanceof Type)) {_            return false__        }_        Type t = (Type) o__        if (sort != t.sort) {_            return false__        }_        if (sort >= ARRAY) {_            if (len != t.len) {_                return false__            }_            for (int i = off, j = t.off, end = i + len_ i < end_ i++, j++) {_                if (buf[i] != t.buf[j]) {_                    return false__                }_            }_        }_        return true__    };tests,if,the,given,object,is,equal,to,this,type,param,o,the,object,to,be,compared,to,this,type,return,tt,true,tt,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,o,if,this,o,return,true,if,o,instanceof,type,return,false,type,t,type,o,if,sort,t,sort,return,false,if,sort,array,if,len,t,len,return,false,for,int,i,off,j,t,off,end,i,len,i,end,i,j,if,buf,i,t,buf,j,return,false,return,true
Type -> @Override     public boolean equals(final Object o);1400538684;Tests if the given object is equal to this type.__@param o_the object to be compared to this type._@return <tt>true</tt> if the given object is equal to this type.;@Override_    public boolean equals(final Object o) {_        if (this == o) {_            return true__        }_        if (!(o instanceof Type)) {_            return false__        }_        Type t = (Type) o__        if (sort != t.sort) {_            return false__        }_        if (sort >= ARRAY) {_            if (len != t.len) {_                return false__            }_            for (int i = off, j = t.off, end = i + len_ i < end_ i++, j++) {_                if (buf[i] != t.buf[j]) {_                    return false__                }_            }_        }_        return true__    };tests,if,the,given,object,is,equal,to,this,type,param,o,the,object,to,be,compared,to,this,type,return,tt,true,tt,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,o,if,this,o,return,true,if,o,instanceof,type,return,false,type,t,type,o,if,sort,t,sort,return,false,if,sort,array,if,len,t,len,return,false,for,int,i,off,j,t,off,end,i,len,i,end,i,j,if,buf,i,t,buf,j,return,false,return,true
Type -> @Override     public boolean equals(final Object o);1477913309;Tests if the given object is equal to this type.__@param o_the object to be compared to this type._@return <tt>true</tt> if the given object is equal to this type.;@Override_    public boolean equals(final Object o) {_        if (this == o) {_            return true__        }_        if (!(o instanceof Type)) {_            return false__        }_        Type t = (Type) o__        if (sort != t.sort) {_            return false__        }_        if (sort >= ARRAY) {_            if (len != t.len) {_                return false__            }_            for (int i = off, j = t.off, end = i + len_ i < end_ i++, j++) {_                if (buf[i] != t.buf[j]) {_                    return false__                }_            }_        }_        return true__    };tests,if,the,given,object,is,equal,to,this,type,param,o,the,object,to,be,compared,to,this,type,return,tt,true,tt,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,o,if,this,o,return,true,if,o,instanceof,type,return,false,type,t,type,o,if,sort,t,sort,return,false,if,sort,array,if,len,t,len,return,false,for,int,i,off,j,t,off,end,i,len,i,end,i,j,if,buf,i,t,buf,j,return,false,return,true
Type -> @Override     public boolean equals(final Object o);1483093254;Tests if the given object is equal to this type.__@param o_the object to be compared to this type._@return <tt>true</tt> if the given object is equal to this type.;@Override_    public boolean equals(final Object o) {_        if (this == o) {_            return true__        }_        if (!(o instanceof Type)) {_            return false__        }_        Type t = (Type) o__        if (sort != t.sort) {_            return false__        }_        if (sort >= ARRAY) {_            if (len != t.len) {_                return false__            }_            for (int i = off, j = t.off, end = i + len_ i < end_ i++, j++) {_                if (buf[i] != t.buf[j]) {_                    return false__                }_            }_        }_        return true__    };tests,if,the,given,object,is,equal,to,this,type,param,o,the,object,to,be,compared,to,this,type,return,tt,true,tt,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,o,if,this,o,return,true,if,o,instanceof,type,return,false,type,t,type,o,if,sort,t,sort,return,false,if,sort,array,if,len,t,len,return,false,for,int,i,off,j,t,off,end,i,len,i,end,i,j,if,buf,i,t,buf,j,return,false,return,true
Type -> public int getOpcode(final int opcode);1366718246;Returns a JVM instruction opcode adapted to this Java type. This method_must not be used for method types.__@param opcode_a JVM instruction opcode. This opcode must be one of ILOAD,_ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG,_ISHL, ISHR, IUSHR, IAND, IOR, IXOR and IRETURN._@return an opcode that is similar to the given opcode, but adapted to_this Java type. For example, if this type is <tt>float</tt> and_<tt>opcode</tt> is IRETURN, this method returns FRETURN.;public int getOpcode(final int opcode) {_        if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_            _            _            return opcode + (buf == null ? (off & 0xFF00) >> 8 : 4)__        } else {_            _            _            return opcode + (buf == null ? (off & 0xFF0000) >> 16 : 4)__        }_    };returns,a,jvm,instruction,opcode,adapted,to,this,java,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,java,type,for,example,if,this,type,is,tt,float,tt,and,tt,opcode,tt,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,return,opcode,buf,null,off,0x,ff00,8,4,else,return,opcode,buf,null,off,0x,ff0000,16,4
Type -> public int getOpcode(final int opcode);1400531367;Returns a JVM instruction opcode adapted to this Java type. This method_must not be used for method types.__@param opcode_a JVM instruction opcode. This opcode must be one of ILOAD,_ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG,_ISHL, ISHR, IUSHR, IAND, IOR, IXOR and IRETURN._@return an opcode that is similar to the given opcode, but adapted to_this Java type. For example, if this type is <tt>float</tt> and_<tt>opcode</tt> is IRETURN, this method returns FRETURN.;public int getOpcode(final int opcode) {_        if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_            _            _            return opcode + (buf == null ? (off & 0xFF00) >> 8 : 4)__        } else {_            _            _            return opcode + (buf == null ? (off & 0xFF0000) >> 16 : 4)__        }_    };returns,a,jvm,instruction,opcode,adapted,to,this,java,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,java,type,for,example,if,this,type,is,tt,float,tt,and,tt,opcode,tt,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,return,opcode,buf,null,off,0x,ff00,8,4,else,return,opcode,buf,null,off,0x,ff0000,16,4
Type -> public int getOpcode(final int opcode);1400538684;Returns a JVM instruction opcode adapted to this Java type. This method_must not be used for method types.__@param opcode_a JVM instruction opcode. This opcode must be one of ILOAD,_ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG,_ISHL, ISHR, IUSHR, IAND, IOR, IXOR and IRETURN._@return an opcode that is similar to the given opcode, but adapted to_this Java type. For example, if this type is <tt>float</tt> and_<tt>opcode</tt> is IRETURN, this method returns FRETURN.;public int getOpcode(final int opcode) {_        if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_            _            _            return opcode + (buf == null ? (off & 0xFF00) >> 8 : 4)__        } else {_            _            _            return opcode + (buf == null ? (off & 0xFF0000) >> 16 : 4)__        }_    };returns,a,jvm,instruction,opcode,adapted,to,this,java,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,java,type,for,example,if,this,type,is,tt,float,tt,and,tt,opcode,tt,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,return,opcode,buf,null,off,0x,ff00,8,4,else,return,opcode,buf,null,off,0x,ff0000,16,4
Type -> public int getOpcode(final int opcode);1477913309;Returns a JVM instruction opcode adapted to this Java type. This method_must not be used for method types.__@param opcode_a JVM instruction opcode. This opcode must be one of ILOAD,_ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG,_ISHL, ISHR, IUSHR, IAND, IOR, IXOR and IRETURN._@return an opcode that is similar to the given opcode, but adapted to_this Java type. For example, if this type is <tt>float</tt> and_<tt>opcode</tt> is IRETURN, this method returns FRETURN.;public int getOpcode(final int opcode) {_        if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_            _            _            return opcode + (buf == null ? (off & 0xFF00) >> 8 : 4)__        } else {_            _            _            return opcode + (buf == null ? (off & 0xFF0000) >> 16 : 4)__        }_    };returns,a,jvm,instruction,opcode,adapted,to,this,java,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,java,type,for,example,if,this,type,is,tt,float,tt,and,tt,opcode,tt,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,return,opcode,buf,null,off,0x,ff00,8,4,else,return,opcode,buf,null,off,0x,ff0000,16,4
Type -> public int getOpcode(final int opcode);1483093254;Returns a JVM instruction opcode adapted to this Java type. This method_must not be used for method types.__@param opcode_a JVM instruction opcode. This opcode must be one of ILOAD,_ISTORE, IALOAD, IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG,_ISHL, ISHR, IUSHR, IAND, IOR, IXOR and IRETURN._@return an opcode that is similar to the given opcode, but adapted to_this Java type. For example, if this type is <tt>float</tt> and_<tt>opcode</tt> is IRETURN, this method returns FRETURN.;public int getOpcode(final int opcode) {_        if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_            _            _            return opcode + (buf == null ? (off & 0xFF00) >> 8 : 4)__        } else {_            _            _            return opcode + (buf == null ? (off & 0xFF0000) >> 16 : 4)__        }_    };returns,a,jvm,instruction,opcode,adapted,to,this,java,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,java,type,for,example,if,this,type,is,tt,float,tt,and,tt,opcode,tt,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,return,opcode,buf,null,off,0x,ff00,8,4,else,return,opcode,buf,null,off,0x,ff0000,16,4
Type -> public int getOpcode(final int opcode);1531241461;Returns a JVM instruction opcode adapted to this {@link Type}. This method must not be used for_method types.__@param opcode a JVM instruction opcode. This opcode must be one of ILOAD, ISTORE, IALOAD,_IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL, ISHR, IUSHR, IAND, IOR, IXOR and_IRETURN._@return an opcode that is similar to the given opcode, but adapted to this {@link Type}. For_example, if this type is <tt>float</tt> and <tt>opcode</tt> is IRETURN, this method returns_FRETURN.;public int getOpcode(final int opcode) {_    if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_      switch (sort) {_        case BOOLEAN:_        case BYTE:_          return opcode + (Opcodes.BALOAD - Opcodes.IALOAD)__        case CHAR:_          return opcode + (Opcodes.CALOAD - Opcodes.IALOAD)__        case SHORT:_          return opcode + (Opcodes.SALOAD - Opcodes.IALOAD)__        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FALOAD - Opcodes.IALOAD)__        case LONG:_          return opcode + (Opcodes.LALOAD - Opcodes.IALOAD)__        case DOUBLE:_          return opcode + (Opcodes.DALOAD - Opcodes.IALOAD)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          return opcode + (Opcodes.AALOAD - Opcodes.IALOAD)__        case METHOD:_        case VOID:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    } else {_      switch (sort) {_        case VOID:_          if (opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return Opcodes.RETURN__        case BOOLEAN:_        case BYTE:_        case CHAR:_        case SHORT:_        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FRETURN - Opcodes.IRETURN)__        case LONG:_          return opcode + (Opcodes.LRETURN - Opcodes.IRETURN)__        case DOUBLE:_          return opcode + (Opcodes.DRETURN - Opcodes.IRETURN)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          if (opcode != Opcodes.ILOAD && opcode != Opcodes.ISTORE && opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return opcode + (Opcodes.ARETURN - Opcodes.IRETURN)__        case METHOD:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    }_  };returns,a,jvm,instruction,opcode,adapted,to,this,link,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,link,type,for,example,if,this,type,is,tt,float,tt,and,tt,opcode,tt,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,switch,sort,case,boolean,case,byte,return,opcode,opcodes,baload,opcodes,iaload,case,char,return,opcode,opcodes,caload,opcodes,iaload,case,short,return,opcode,opcodes,saload,opcodes,iaload,case,int,return,opcode,case,float,return,opcode,opcodes,faload,opcodes,iaload,case,long,return,opcode,opcodes,laload,opcodes,iaload,case,double,return,opcode,opcodes,daload,opcodes,iaload,case,array,case,object,case,internal,return,opcode,opcodes,aaload,opcodes,iaload,case,method,case,void,throw,new,unsupported,operation,exception,default,throw,new,assertion,error,else,switch,sort,case,void,if,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcodes,return,case,boolean,case,byte,case,char,case,short,case,int,return,opcode,case,float,return,opcode,opcodes,freturn,opcodes,ireturn,case,long,return,opcode,opcodes,lreturn,opcodes,ireturn,case,double,return,opcode,opcodes,dreturn,opcodes,ireturn,case,array,case,object,case,internal,if,opcode,opcodes,iload,opcode,opcodes,istore,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcode,opcodes,areturn,opcodes,ireturn,case,method,throw,new,unsupported,operation,exception,default,throw,new,assertion,error
Type -> public int getOpcode(final int opcode);1536664245;Returns a JVM instruction opcode adapted to this {@link Type}. This method must not be used for_method types.__@param opcode a JVM instruction opcode. This opcode must be one of ILOAD, ISTORE, IALOAD,_IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL, ISHR, IUSHR, IAND, IOR, IXOR and_IRETURN._@return an opcode that is similar to the given opcode, but adapted to this {@link Type}. For_example, if this type is {@code float} and {@code opcode} is IRETURN, this method returns_FRETURN.;public int getOpcode(final int opcode) {_    if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_      switch (sort) {_        case BOOLEAN:_        case BYTE:_          return opcode + (Opcodes.BALOAD - Opcodes.IALOAD)__        case CHAR:_          return opcode + (Opcodes.CALOAD - Opcodes.IALOAD)__        case SHORT:_          return opcode + (Opcodes.SALOAD - Opcodes.IALOAD)__        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FALOAD - Opcodes.IALOAD)__        case LONG:_          return opcode + (Opcodes.LALOAD - Opcodes.IALOAD)__        case DOUBLE:_          return opcode + (Opcodes.DALOAD - Opcodes.IALOAD)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          return opcode + (Opcodes.AALOAD - Opcodes.IALOAD)__        case METHOD:_        case VOID:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    } else {_      switch (sort) {_        case VOID:_          if (opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return Opcodes.RETURN__        case BOOLEAN:_        case BYTE:_        case CHAR:_        case SHORT:_        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FRETURN - Opcodes.IRETURN)__        case LONG:_          return opcode + (Opcodes.LRETURN - Opcodes.IRETURN)__        case DOUBLE:_          return opcode + (Opcodes.DRETURN - Opcodes.IRETURN)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          if (opcode != Opcodes.ILOAD && opcode != Opcodes.ISTORE && opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return opcode + (Opcodes.ARETURN - Opcodes.IRETURN)__        case METHOD:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    }_  };returns,a,jvm,instruction,opcode,adapted,to,this,link,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,link,type,for,example,if,this,type,is,code,float,and,code,opcode,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,switch,sort,case,boolean,case,byte,return,opcode,opcodes,baload,opcodes,iaload,case,char,return,opcode,opcodes,caload,opcodes,iaload,case,short,return,opcode,opcodes,saload,opcodes,iaload,case,int,return,opcode,case,float,return,opcode,opcodes,faload,opcodes,iaload,case,long,return,opcode,opcodes,laload,opcodes,iaload,case,double,return,opcode,opcodes,daload,opcodes,iaload,case,array,case,object,case,internal,return,opcode,opcodes,aaload,opcodes,iaload,case,method,case,void,throw,new,unsupported,operation,exception,default,throw,new,assertion,error,else,switch,sort,case,void,if,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcodes,return,case,boolean,case,byte,case,char,case,short,case,int,return,opcode,case,float,return,opcode,opcodes,freturn,opcodes,ireturn,case,long,return,opcode,opcodes,lreturn,opcodes,ireturn,case,double,return,opcode,opcodes,dreturn,opcodes,ireturn,case,array,case,object,case,internal,if,opcode,opcodes,iload,opcode,opcodes,istore,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcode,opcodes,areturn,opcodes,ireturn,case,method,throw,new,unsupported,operation,exception,default,throw,new,assertion,error
Type -> public int getOpcode(final int opcode);1537204147;Returns a JVM instruction opcode adapted to this {@link Type}. This method must not be used for_method types.__@param opcode a JVM instruction opcode. This opcode must be one of ILOAD, ISTORE, IALOAD,_IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL, ISHR, IUSHR, IAND, IOR, IXOR and_IRETURN._@return an opcode that is similar to the given opcode, but adapted to this {@link Type}. For_example, if this type is {@code float} and {@code opcode} is IRETURN, this method returns_FRETURN.;public int getOpcode(final int opcode) {_    if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_      switch (sort) {_        case BOOLEAN:_        case BYTE:_          return opcode + (Opcodes.BALOAD - Opcodes.IALOAD)__        case CHAR:_          return opcode + (Opcodes.CALOAD - Opcodes.IALOAD)__        case SHORT:_          return opcode + (Opcodes.SALOAD - Opcodes.IALOAD)__        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FALOAD - Opcodes.IALOAD)__        case LONG:_          return opcode + (Opcodes.LALOAD - Opcodes.IALOAD)__        case DOUBLE:_          return opcode + (Opcodes.DALOAD - Opcodes.IALOAD)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          return opcode + (Opcodes.AALOAD - Opcodes.IALOAD)__        case METHOD:_        case VOID:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    } else {_      switch (sort) {_        case VOID:_          if (opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return Opcodes.RETURN__        case BOOLEAN:_        case BYTE:_        case CHAR:_        case SHORT:_        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FRETURN - Opcodes.IRETURN)__        case LONG:_          return opcode + (Opcodes.LRETURN - Opcodes.IRETURN)__        case DOUBLE:_          return opcode + (Opcodes.DRETURN - Opcodes.IRETURN)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          if (opcode != Opcodes.ILOAD && opcode != Opcodes.ISTORE && opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return opcode + (Opcodes.ARETURN - Opcodes.IRETURN)__        case METHOD:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    }_  };returns,a,jvm,instruction,opcode,adapted,to,this,link,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,link,type,for,example,if,this,type,is,code,float,and,code,opcode,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,switch,sort,case,boolean,case,byte,return,opcode,opcodes,baload,opcodes,iaload,case,char,return,opcode,opcodes,caload,opcodes,iaload,case,short,return,opcode,opcodes,saload,opcodes,iaload,case,int,return,opcode,case,float,return,opcode,opcodes,faload,opcodes,iaload,case,long,return,opcode,opcodes,laload,opcodes,iaload,case,double,return,opcode,opcodes,daload,opcodes,iaload,case,array,case,object,case,internal,return,opcode,opcodes,aaload,opcodes,iaload,case,method,case,void,throw,new,unsupported,operation,exception,default,throw,new,assertion,error,else,switch,sort,case,void,if,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcodes,return,case,boolean,case,byte,case,char,case,short,case,int,return,opcode,case,float,return,opcode,opcodes,freturn,opcodes,ireturn,case,long,return,opcode,opcodes,lreturn,opcodes,ireturn,case,double,return,opcode,opcodes,dreturn,opcodes,ireturn,case,array,case,object,case,internal,if,opcode,opcodes,iload,opcode,opcodes,istore,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcode,opcodes,areturn,opcodes,ireturn,case,method,throw,new,unsupported,operation,exception,default,throw,new,assertion,error
Type -> public int getOpcode(final int opcode);1539119582;Returns a JVM instruction opcode adapted to this {@link Type}. This method must not be used for_method types.__@param opcode a JVM instruction opcode. This opcode must be one of ILOAD, ISTORE, IALOAD,_IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL, ISHR, IUSHR, IAND, IOR, IXOR and_IRETURN._@return an opcode that is similar to the given opcode, but adapted to this {@link Type}. For_example, if this type is {@code float} and {@code opcode} is IRETURN, this method returns_FRETURN.;public int getOpcode(final int opcode) {_    if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {_      switch (sort) {_        case BOOLEAN:_        case BYTE:_          return opcode + (Opcodes.BALOAD - Opcodes.IALOAD)__        case CHAR:_          return opcode + (Opcodes.CALOAD - Opcodes.IALOAD)__        case SHORT:_          return opcode + (Opcodes.SALOAD - Opcodes.IALOAD)__        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FALOAD - Opcodes.IALOAD)__        case LONG:_          return opcode + (Opcodes.LALOAD - Opcodes.IALOAD)__        case DOUBLE:_          return opcode + (Opcodes.DALOAD - Opcodes.IALOAD)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          return opcode + (Opcodes.AALOAD - Opcodes.IALOAD)__        case METHOD:_        case VOID:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    } else {_      switch (sort) {_        case VOID:_          if (opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return Opcodes.RETURN__        case BOOLEAN:_        case BYTE:_        case CHAR:_        case SHORT:_        case INT:_          return opcode__        case FLOAT:_          return opcode + (Opcodes.FRETURN - Opcodes.IRETURN)__        case LONG:_          return opcode + (Opcodes.LRETURN - Opcodes.IRETURN)__        case DOUBLE:_          return opcode + (Opcodes.DRETURN - Opcodes.IRETURN)__        case ARRAY:_        case OBJECT:_        case INTERNAL:_          if (opcode != Opcodes.ILOAD && opcode != Opcodes.ISTORE && opcode != Opcodes.IRETURN) {_            throw new UnsupportedOperationException()__          }_          return opcode + (Opcodes.ARETURN - Opcodes.IRETURN)__        case METHOD:_          throw new UnsupportedOperationException()__        default:_          throw new AssertionError()__      }_    }_  };returns,a,jvm,instruction,opcode,adapted,to,this,link,type,this,method,must,not,be,used,for,method,types,param,opcode,a,jvm,instruction,opcode,this,opcode,must,be,one,of,iload,istore,iaload,iastore,iadd,isub,imul,idiv,irem,ineg,ishl,ishr,iushr,iand,ior,ixor,and,ireturn,return,an,opcode,that,is,similar,to,the,given,opcode,but,adapted,to,this,link,type,for,example,if,this,type,is,code,float,and,code,opcode,is,ireturn,this,method,returns,freturn;public,int,get,opcode,final,int,opcode,if,opcode,opcodes,iaload,opcode,opcodes,iastore,switch,sort,case,boolean,case,byte,return,opcode,opcodes,baload,opcodes,iaload,case,char,return,opcode,opcodes,caload,opcodes,iaload,case,short,return,opcode,opcodes,saload,opcodes,iaload,case,int,return,opcode,case,float,return,opcode,opcodes,faload,opcodes,iaload,case,long,return,opcode,opcodes,laload,opcodes,iaload,case,double,return,opcode,opcodes,daload,opcodes,iaload,case,array,case,object,case,internal,return,opcode,opcodes,aaload,opcodes,iaload,case,method,case,void,throw,new,unsupported,operation,exception,default,throw,new,assertion,error,else,switch,sort,case,void,if,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcodes,return,case,boolean,case,byte,case,char,case,short,case,int,return,opcode,case,float,return,opcode,opcodes,freturn,opcodes,ireturn,case,long,return,opcode,opcodes,lreturn,opcodes,ireturn,case,double,return,opcode,opcodes,dreturn,opcodes,ireturn,case,array,case,object,case,internal,if,opcode,opcodes,iload,opcode,opcodes,istore,opcode,opcodes,ireturn,throw,new,unsupported,operation,exception,return,opcode,opcodes,areturn,opcodes,ireturn,case,method,throw,new,unsupported,operation,exception,default,throw,new,assertion,error
Type -> private void getDescriptor(final StringBuilder sb);1400538684;Appends the descriptor corresponding to this Java type to the given_string builder.__@param sb_the string builder to which the descriptor must be appended.;private void getDescriptor(final StringBuilder sb) {_        if (this.buf == null) {_            _            _            sb.append((char) ((off & 0xFF000000) >>> 24))__        } else if (sort == OBJECT) {_            sb.append('L')__            sb.append(this.buf, off, len)__            sb.append('_')__        } else { _            sb.append(this.buf, off, len)__        }_    };appends,the,descriptor,corresponding,to,this,java,type,to,the,given,string,builder,param,sb,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,get,descriptor,final,string,builder,sb,if,this,buf,null,sb,append,char,off,0x,ff000000,24,else,if,sort,object,sb,append,l,sb,append,this,buf,off,len,sb,append,else,sb,append,this,buf,off,len
Type -> private void getDescriptor(final StringBuilder sb);1477913309;Appends the descriptor corresponding to this Java type to the given_string builder.__@param sb_the string builder to which the descriptor must be appended.;private void getDescriptor(final StringBuilder sb) {_        if (this.buf == null) {_            _            _            sb.append((char) ((off & 0xFF000000) >>> 24))__        } else if (sort == OBJECT) {_            sb.append('L')__            sb.append(this.buf, off, len)__            sb.append('_')__        } else { _            sb.append(this.buf, off, len)__        }_    };appends,the,descriptor,corresponding,to,this,java,type,to,the,given,string,builder,param,sb,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,get,descriptor,final,string,builder,sb,if,this,buf,null,sb,append,char,off,0x,ff000000,24,else,if,sort,object,sb,append,l,sb,append,this,buf,off,len,sb,append,else,sb,append,this,buf,off,len
Type -> public static String getDescriptor(final Class<?> clazz);1531241461;Returns the descriptor corresponding to the given class.__@param clazz an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> clazz) {_    StringBuilder stringBuilder = new StringBuilder()__    appendDescriptor(stringBuilder, clazz)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,class,param,clazz,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,clazz,string,builder,string,builder,new,string,builder,append,descriptor,string,builder,clazz,return,string,builder,to,string
Type -> public static String getDescriptor(final Class<?> clazz);1536664245;Returns the descriptor corresponding to the given class.__@param clazz an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> clazz) {_    StringBuilder stringBuilder = new StringBuilder()__    appendDescriptor(stringBuilder, clazz)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,class,param,clazz,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,clazz,string,builder,string,builder,new,string,builder,append,descriptor,string,builder,clazz,return,string,builder,to,string
Type -> public static String getDescriptor(final Class<?> clazz);1537204147;Returns the descriptor corresponding to the given class.__@param clazz an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> clazz) {_    StringBuilder stringBuilder = new StringBuilder()__    appendDescriptor(clazz, stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,class,param,clazz,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,clazz,string,builder,string,builder,new,string,builder,append,descriptor,clazz,string,builder,return,string,builder,to,string
Type -> public static String getDescriptor(final Class<?> clazz);1539119582;Returns the descriptor corresponding to the given class.__@param clazz an object class, a primitive class or an array class._@return the descriptor corresponding to the given class.;public static String getDescriptor(final Class<?> clazz) {_    StringBuilder stringBuilder = new StringBuilder()__    appendDescriptor(clazz, stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,class,param,clazz,an,object,class,a,primitive,class,or,an,array,class,return,the,descriptor,corresponding,to,the,given,class;public,static,string,get,descriptor,final,class,clazz,string,builder,string,builder,new,string,builder,append,descriptor,clazz,string,builder,return,string,builder,to,string
Type -> @Override     public int hashCode();1366718246;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_    public int hashCode() {_        int hc = 13 * sort__        if (sort >= ARRAY) {_            for (int i = off, end = i + len_ i < end_ i++) {_                hc = 17 * (hc + buf[i])__            }_        }_        return hc__    };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hc,13,sort,if,sort,array,for,int,i,off,end,i,len,i,end,i,hc,17,hc,buf,i,return,hc
Type -> @Override     public int hashCode();1400531367;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_    public int hashCode() {_        int hc = 13 * sort__        if (sort >= ARRAY) {_            for (int i = off, end = i + len_ i < end_ i++) {_                hc = 17 * (hc + buf[i])__            }_        }_        return hc__    };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hc,13,sort,if,sort,array,for,int,i,off,end,i,len,i,end,i,hc,17,hc,buf,i,return,hc
Type -> @Override     public int hashCode();1400538684;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_    public int hashCode() {_        int hc = 13 * sort__        if (sort >= ARRAY) {_            for (int i = off, end = i + len_ i < end_ i++) {_                hc = 17 * (hc + buf[i])__            }_        }_        return hc__    };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hc,13,sort,if,sort,array,for,int,i,off,end,i,len,i,end,i,hc,17,hc,buf,i,return,hc
Type -> @Override     public int hashCode();1477913309;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_    public int hashCode() {_        int hc = 13 * sort__        if (sort >= ARRAY) {_            for (int i = off, end = i + len_ i < end_ i++) {_                hc = 17 * (hc + buf[i])__            }_        }_        return hc__    };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hc,13,sort,if,sort,array,for,int,i,off,end,i,len,i,end,i,hc,17,hc,buf,i,return,hc
Type -> @Override     public int hashCode();1483093254;Returns a hash code value for this type.__@return a hash code value for this type.;@Override_    public int hashCode() {_        int hc = 13 * sort__        if (sort >= ARRAY) {_            for (int i = off, end = i + len_ i < end_ i++) {_                hc = 17 * (hc + buf[i])__            }_        }_        return hc__    };returns,a,hash,code,value,for,this,type,return,a,hash,code,value,for,this,type;override,public,int,hash,code,int,hc,13,sort,if,sort,array,for,int,i,off,end,i,len,i,end,i,hc,17,hc,buf,i,return,hc
Type -> private static void appendDescriptor(final StringBuilder stringBuilder, final Class<?> clazz);1531241461;Appends the descriptor of the given class to the given string builder.__@param stringBuilder the string builder to which the descriptor must be appended._@param clazz the class whose descriptor must be computed.;private static void appendDescriptor(final StringBuilder stringBuilder, final Class<?> clazz) {_    Class<?> currentClass = clazz__    while (currentClass.isArray()) {_      stringBuilder.append('[')__      currentClass = currentClass.getComponentType()__    }_    if (currentClass.isPrimitive()) {_      char descriptor__      if (currentClass == Integer.TYPE) {_        descriptor = 'I'__      } else if (currentClass == Void.TYPE) {_        descriptor = 'V'__      } else if (currentClass == Boolean.TYPE) {_        descriptor = 'Z'__      } else if (currentClass == Byte.TYPE) {_        descriptor = 'B'__      } else if (currentClass == Character.TYPE) {_        descriptor = 'C'__      } else if (currentClass == Short.TYPE) {_        descriptor = 'S'__      } else if (currentClass == Double.TYPE) {_        descriptor = 'D'__      } else if (currentClass == Float.TYPE) {_        descriptor = 'F'__      } else if (currentClass == Long.TYPE) {_        descriptor = 'J'__      } else {_        throw new AssertionError()__      }_      stringBuilder.append(descriptor)__    } else {_      stringBuilder.append('L')__      String name = currentClass.getName()__      int nameLength = name.length()__      for (int i = 0_ i < nameLength_ ++i) {_        char car = name.charAt(i)__        stringBuilder.append(car == '.' ? '/' : car)__      }_      stringBuilder.append('_')__    }_  };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended,param,clazz,the,class,whose,descriptor,must,be,computed;private,static,void,append,descriptor,final,string,builder,string,builder,final,class,clazz,class,current,class,clazz,while,current,class,is,array,string,builder,append,current,class,current,class,get,component,type,if,current,class,is,primitive,char,descriptor,if,current,class,integer,type,descriptor,i,else,if,current,class,void,type,descriptor,v,else,if,current,class,boolean,type,descriptor,z,else,if,current,class,byte,type,descriptor,b,else,if,current,class,character,type,descriptor,c,else,if,current,class,short,type,descriptor,s,else,if,current,class,double,type,descriptor,d,else,if,current,class,float,type,descriptor,f,else,if,current,class,long,type,descriptor,j,else,throw,new,assertion,error,string,builder,append,descriptor,else,string,builder,append,l,string,name,current,class,get,name,int,name,length,name,length,for,int,i,0,i,name,length,i,char,car,name,char,at,i,string,builder,append,car,car,string,builder,append
Type -> private static void appendDescriptor(final StringBuilder stringBuilder, final Class<?> clazz);1536664245;Appends the descriptor of the given class to the given string builder.__@param stringBuilder the string builder to which the descriptor must be appended._@param clazz the class whose descriptor must be computed.;private static void appendDescriptor(final StringBuilder stringBuilder, final Class<?> clazz) {_    Class<?> currentClass = clazz__    while (currentClass.isArray()) {_      stringBuilder.append('[')__      currentClass = currentClass.getComponentType()__    }_    if (currentClass.isPrimitive()) {_      char descriptor__      if (currentClass == Integer.TYPE) {_        descriptor = 'I'__      } else if (currentClass == Void.TYPE) {_        descriptor = 'V'__      } else if (currentClass == Boolean.TYPE) {_        descriptor = 'Z'__      } else if (currentClass == Byte.TYPE) {_        descriptor = 'B'__      } else if (currentClass == Character.TYPE) {_        descriptor = 'C'__      } else if (currentClass == Short.TYPE) {_        descriptor = 'S'__      } else if (currentClass == Double.TYPE) {_        descriptor = 'D'__      } else if (currentClass == Float.TYPE) {_        descriptor = 'F'__      } else if (currentClass == Long.TYPE) {_        descriptor = 'J'__      } else {_        throw new AssertionError()__      }_      stringBuilder.append(descriptor)__    } else {_      stringBuilder.append('L')__      String name = currentClass.getName()__      int nameLength = name.length()__      for (int i = 0_ i < nameLength_ ++i) {_        char car = name.charAt(i)__        stringBuilder.append(car == '.' ? '/' : car)__      }_      stringBuilder.append('_')__    }_  };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,string,builder,the,string,builder,to,which,the,descriptor,must,be,appended,param,clazz,the,class,whose,descriptor,must,be,computed;private,static,void,append,descriptor,final,string,builder,string,builder,final,class,clazz,class,current,class,clazz,while,current,class,is,array,string,builder,append,current,class,current,class,get,component,type,if,current,class,is,primitive,char,descriptor,if,current,class,integer,type,descriptor,i,else,if,current,class,void,type,descriptor,v,else,if,current,class,boolean,type,descriptor,z,else,if,current,class,byte,type,descriptor,b,else,if,current,class,character,type,descriptor,c,else,if,current,class,short,type,descriptor,s,else,if,current,class,double,type,descriptor,d,else,if,current,class,float,type,descriptor,f,else,if,current,class,long,type,descriptor,j,else,throw,new,assertion,error,string,builder,append,descriptor,else,string,builder,append,l,string,name,current,class,get,name,int,name,length,name,length,for,int,i,0,i,name,length,i,char,car,name,char,at,i,string,builder,append,car,car,string,builder,append
Type -> public int getSize();1366718246;Returns the size of values of this type. This method must not be used for_method types.__@return the size of values of this type, i.e., 2 for <tt>long</tt> and_<tt>double</tt>, 0 for <tt>void</tt> and 1 otherwise.;public int getSize() {_        _        return buf == null ? (off & 0xFF) : 1__    };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,tt,long,tt,and,tt,double,tt,0,for,tt,void,tt,and,1,otherwise;public,int,get,size,return,buf,null,off,0x,ff,1
Type -> public int getSize();1400531367;Returns the size of values of this type. This method must not be used for_method types.__@return the size of values of this type, i.e., 2 for <tt>long</tt> and_<tt>double</tt>, 0 for <tt>void</tt> and 1 otherwise.;public int getSize() {_        _        return buf == null ? (off & 0xFF) : 1__    };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,tt,long,tt,and,tt,double,tt,0,for,tt,void,tt,and,1,otherwise;public,int,get,size,return,buf,null,off,0x,ff,1
Type -> public int getSize();1400538684;Returns the size of values of this type. This method must not be used for_method types.__@return the size of values of this type, i.e., 2 for <tt>long</tt> and_<tt>double</tt>, 0 for <tt>void</tt> and 1 otherwise.;public int getSize() {_        _        return buf == null ? (off & 0xFF) : 1__    };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,tt,long,tt,and,tt,double,tt,0,for,tt,void,tt,and,1,otherwise;public,int,get,size,return,buf,null,off,0x,ff,1
Type -> public int getSize();1477913309;Returns the size of values of this type. This method must not be used for_method types.__@return the size of values of this type, i.e., 2 for <tt>long</tt> and_<tt>double</tt>, 0 for <tt>void</tt> and 1 otherwise.;public int getSize() {_        _        return buf == null ? (off & 0xFF) : 1__    };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,tt,long,tt,and,tt,double,tt,0,for,tt,void,tt,and,1,otherwise;public,int,get,size,return,buf,null,off,0x,ff,1
Type -> public int getSize();1483093254;Returns the size of values of this type. This method must not be used for_method types.__@return the size of values of this type, i.e., 2 for <tt>long</tt> and_<tt>double</tt>, 0 for <tt>void</tt> and 1 otherwise.;public int getSize() {_        _        return buf == null ? (off & 0xFF) : 1__    };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,tt,long,tt,and,tt,double,tt,0,for,tt,void,tt,and,1,otherwise;public,int,get,size,return,buf,null,off,0x,ff,1
Type -> public int getSize();1531241461;Returns the size of values of this type. This method must not be used for method types.__@return the size of values of this type, i.e., 2 for <tt>long</tt> and <tt>double</tt>, 0 for_<tt>void</tt> and 1 otherwise.;public int getSize() {_    switch (sort) {_      case VOID:_        return 0__      case BOOLEAN:_      case CHAR:_      case BYTE:_      case SHORT:_      case INT:_      case FLOAT:_      case ARRAY:_      case OBJECT:_      case INTERNAL:_        return 1__      case LONG:_      case DOUBLE:_        return 2__      default:_        throw new AssertionError()__    }_  };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,tt,long,tt,and,tt,double,tt,0,for,tt,void,tt,and,1,otherwise;public,int,get,size,switch,sort,case,void,return,0,case,boolean,case,char,case,byte,case,short,case,int,case,float,case,array,case,object,case,internal,return,1,case,long,case,double,return,2,default,throw,new,assertion,error
Type -> public int getSize();1536664245;Returns the size of values of this type. This method must not be used for method types.__@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for_{@code void} and 1 otherwise.;public int getSize() {_    switch (sort) {_      case VOID:_        return 0__      case BOOLEAN:_      case CHAR:_      case BYTE:_      case SHORT:_      case INT:_      case FLOAT:_      case ARRAY:_      case OBJECT:_      case INTERNAL:_        return 1__      case LONG:_      case DOUBLE:_        return 2__      default:_        throw new AssertionError()__    }_  };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,code,long,and,code,double,0,for,code,void,and,1,otherwise;public,int,get,size,switch,sort,case,void,return,0,case,boolean,case,char,case,byte,case,short,case,int,case,float,case,array,case,object,case,internal,return,1,case,long,case,double,return,2,default,throw,new,assertion,error
Type -> public int getSize();1537204147;Returns the size of values of this type. This method must not be used for method types.__@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for_{@code void} and 1 otherwise.;public int getSize() {_    switch (sort) {_      case VOID:_        return 0__      case BOOLEAN:_      case CHAR:_      case BYTE:_      case SHORT:_      case INT:_      case FLOAT:_      case ARRAY:_      case OBJECT:_      case INTERNAL:_        return 1__      case LONG:_      case DOUBLE:_        return 2__      default:_        throw new AssertionError()__    }_  };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,code,long,and,code,double,0,for,code,void,and,1,otherwise;public,int,get,size,switch,sort,case,void,return,0,case,boolean,case,char,case,byte,case,short,case,int,case,float,case,array,case,object,case,internal,return,1,case,long,case,double,return,2,default,throw,new,assertion,error
Type -> public int getSize();1539119582;Returns the size of values of this type. This method must not be used for method types.__@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for_{@code void} and 1 otherwise.;public int getSize() {_    switch (sort) {_      case VOID:_        return 0__      case BOOLEAN:_      case CHAR:_      case BYTE:_      case SHORT:_      case INT:_      case FLOAT:_      case ARRAY:_      case OBJECT:_      case INTERNAL:_        return 1__      case LONG:_      case DOUBLE:_        return 2__      default:_        throw new AssertionError()__    }_  };returns,the,size,of,values,of,this,type,this,method,must,not,be,used,for,method,types,return,the,size,of,values,of,this,type,i,e,2,for,code,long,and,code,double,0,for,code,void,and,1,otherwise;public,int,get,size,switch,sort,case,void,return,0,case,boolean,case,char,case,byte,case,short,case,int,case,float,case,array,case,object,case,internal,return,1,case,long,case,double,return,2,default,throw,new,assertion,error
Type -> public static String getInternalName(final Class<?> clazz);1531241461;Returns the internal name of the given class. The internal name of a class is its fully_qualified name, as returned by Class.getName(), where '.' are replaced by '/'.__@param clazz an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> clazz) {_    return clazz.getName().replace('.', '/')__  };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,clazz,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,clazz,return,clazz,get,name,replace
Type -> public static String getInternalName(final Class<?> clazz);1536664245;Returns the internal name of the given class. The internal name of a class is its fully_qualified name, as returned by Class.getName(), where '.' are replaced by '/'.__@param clazz an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> clazz) {_    return clazz.getName().replace('.', '/')__  };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,clazz,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,clazz,return,clazz,get,name,replace
Type -> public static String getInternalName(final Class<?> clazz);1537204147;Returns the internal name of the given class. The internal name of a class is its fully_qualified name, as returned by Class.getName(), where '.' are replaced by '/'.__@param clazz an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> clazz) {_    return clazz.getName().replace('.', '/')__  };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,clazz,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,clazz,return,clazz,get,name,replace
Type -> public static String getInternalName(final Class<?> clazz);1539119582;Returns the internal name of the given class. The internal name of a class is its fully_qualified name, as returned by Class.getName(), where '.' are replaced by '/'.__@param clazz an object or array class._@return the internal name of the given class.;public static String getInternalName(final Class<?> clazz) {_    return clazz.getName().replace('.', '/')__  };returns,the,internal,name,of,the,given,class,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,param,clazz,an,object,or,array,class,return,the,internal,name,of,the,given,class;public,static,string,get,internal,name,final,class,clazz,return,clazz,get,name,replace
Type -> public int getDimensions();1366718246;Returns the number of dimensions of this array type. This method should_only be used for an array type.__@return the number of dimensions of this array type.;public int getDimensions() {_        int i = 1__        while (buf[off + i] == '[') {_            ++i__        }_        return i__    };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,i,1,while,buf,off,i,i,return,i
Type -> public int getDimensions();1400531367;Returns the number of dimensions of this array type. This method should_only be used for an array type.__@return the number of dimensions of this array type.;public int getDimensions() {_        int i = 1__        while (buf[off + i] == '[') {_            ++i__        }_        return i__    };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,i,1,while,buf,off,i,i,return,i
Type -> public int getDimensions();1400538684;Returns the number of dimensions of this array type. This method should_only be used for an array type.__@return the number of dimensions of this array type.;public int getDimensions() {_        int i = 1__        while (buf[off + i] == '[') {_            ++i__        }_        return i__    };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,i,1,while,buf,off,i,i,return,i
Type -> public int getDimensions();1477913309;Returns the number of dimensions of this array type. This method should_only be used for an array type.__@return the number of dimensions of this array type.;public int getDimensions() {_        int i = 1__        while (buf[off + i] == '[') {_            ++i__        }_        return i__    };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,i,1,while,buf,off,i,i,return,i
Type -> public int getDimensions();1483093254;Returns the number of dimensions of this array type. This method should_only be used for an array type.__@return the number of dimensions of this array type.;public int getDimensions() {_        int i = 1__        while (buf[off + i] == '[') {_            ++i__        }_        return i__    };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,i,1,while,buf,off,i,i,return,i
Type -> public int getDimensions();1531241461;Returns the number of dimensions of this array type. This method should only be used for an_array type.__@return the number of dimensions of this array type.;public int getDimensions() {_    int numDimensions = 1__    while (valueBuffer.charAt(valueBegin + numDimensions) == '[') {_      numDimensions++__    }_    return numDimensions__  };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,num,dimensions,1,while,value,buffer,char,at,value,begin,num,dimensions,num,dimensions,return,num,dimensions
Type -> public int getDimensions();1536664245;Returns the number of dimensions of this array type. This method should only be used for an_array type.__@return the number of dimensions of this array type.;public int getDimensions() {_    int numDimensions = 1__    while (valueBuffer.charAt(valueBegin + numDimensions) == '[') {_      numDimensions++__    }_    return numDimensions__  };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,num,dimensions,1,while,value,buffer,char,at,value,begin,num,dimensions,num,dimensions,return,num,dimensions
Type -> public int getDimensions();1537204147;Returns the number of dimensions of this array type. This method should only be used for an_array type.__@return the number of dimensions of this array type.;public int getDimensions() {_    int numDimensions = 1__    while (valueBuffer.charAt(valueBegin + numDimensions) == '[') {_      numDimensions++__    }_    return numDimensions__  };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,num,dimensions,1,while,value,buffer,char,at,value,begin,num,dimensions,num,dimensions,return,num,dimensions
Type -> public int getDimensions();1539119582;Returns the number of dimensions of this array type. This method should only be used for an_array type.__@return the number of dimensions of this array type.;public int getDimensions() {_    int numDimensions = 1__    while (valueBuffer.charAt(valueBegin + numDimensions) == '[') {_      numDimensions++__    }_    return numDimensions__  };returns,the,number,of,dimensions,of,this,array,type,this,method,should,only,be,used,for,an,array,type,return,the,number,of,dimensions,of,this,array,type;public,int,get,dimensions,int,num,dimensions,1,while,value,buffer,char,at,value,begin,num,dimensions,num,dimensions,return,num,dimensions
Type -> private static void getDescriptor(final StringBuilder sb, final Class<?> c);1400531367;Appends the descriptor of the given class to the given string builder.__@param sb_the string buffer to which the descriptor must be appended._@param c_the class whose descriptor must be computed.;private static void getDescriptor(final StringBuilder sb, final Class<?> c) {_        Class<?> d = c__        while (true) {_            if (d.isPrimitive()) {_                char car__                if (d == Integer.TYPE) {_                    car = 'I'__                } else if (d == Void.TYPE) {_                    car = 'V'__                } else if (d == Boolean.TYPE) {_                    car = 'Z'__                } else if (d == Byte.TYPE) {_                    car = 'B'__                } else if (d == Character.TYPE) {_                    car = 'C'__                } else if (d == Short.TYPE) {_                    car = 'S'__                } else if (d == Double.TYPE) {_                    car = 'D'__                } else if (d == Float.TYPE) {_                    car = 'F'__                } else {_                    car = 'J'__                }_                sb.append(car)__                return__            } else if (d.isArray()) {_                sb.append('[')__                d = d.getComponentType()__            } else {_                sb.append('L')__                String name = d.getName()__                int len = name.length()__                for (int i = 0_ i < len_ ++i) {_                    char car = name.charAt(i)__                    sb.append(car == '.' ? '/' : car)__                }_                sb.append('_')__                return__            }_        }_    };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,sb,the,string,buffer,to,which,the,descriptor,must,be,appended,param,c,the,class,whose,descriptor,must,be,computed;private,static,void,get,descriptor,final,string,builder,sb,final,class,c,class,d,c,while,true,if,d,is,primitive,char,car,if,d,integer,type,car,i,else,if,d,void,type,car,v,else,if,d,boolean,type,car,z,else,if,d,byte,type,car,b,else,if,d,character,type,car,c,else,if,d,short,type,car,s,else,if,d,double,type,car,d,else,if,d,float,type,car,f,else,car,j,sb,append,car,return,else,if,d,is,array,sb,append,d,d,get,component,type,else,sb,append,l,string,name,d,get,name,int,len,name,length,for,int,i,0,i,len,i,char,car,name,char,at,i,sb,append,car,car,sb,append,return
Type -> private static void getDescriptor(final StringBuilder sb, final Class<?> c);1400538684;Appends the descriptor of the given class to the given string builder.__@param sb_the string buffer to which the descriptor must be appended._@param c_the class whose descriptor must be computed.;private static void getDescriptor(final StringBuilder sb, final Class<?> c) {_        Class<?> d = c__        while (true) {_            if (d.isPrimitive()) {_                char car__                if (d == Integer.TYPE) {_                    car = 'I'__                } else if (d == Void.TYPE) {_                    car = 'V'__                } else if (d == Boolean.TYPE) {_                    car = 'Z'__                } else if (d == Byte.TYPE) {_                    car = 'B'__                } else if (d == Character.TYPE) {_                    car = 'C'__                } else if (d == Short.TYPE) {_                    car = 'S'__                } else if (d == Double.TYPE) {_                    car = 'D'__                } else if (d == Float.TYPE) {_                    car = 'F'__                } else {_                    car = 'J'__                }_                sb.append(car)__                return__            } else if (d.isArray()) {_                sb.append('[')__                d = d.getComponentType()__            } else {_                sb.append('L')__                String name = d.getName()__                int len = name.length()__                for (int i = 0_ i < len_ ++i) {_                    char car = name.charAt(i)__                    sb.append(car == '.' ? '/' : car)__                }_                sb.append('_')__                return__            }_        }_    };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,sb,the,string,buffer,to,which,the,descriptor,must,be,appended,param,c,the,class,whose,descriptor,must,be,computed;private,static,void,get,descriptor,final,string,builder,sb,final,class,c,class,d,c,while,true,if,d,is,primitive,char,car,if,d,integer,type,car,i,else,if,d,void,type,car,v,else,if,d,boolean,type,car,z,else,if,d,byte,type,car,b,else,if,d,character,type,car,c,else,if,d,short,type,car,s,else,if,d,double,type,car,d,else,if,d,float,type,car,f,else,car,j,sb,append,car,return,else,if,d,is,array,sb,append,d,d,get,component,type,else,sb,append,l,string,name,d,get,name,int,len,name,length,for,int,i,0,i,len,i,char,car,name,char,at,i,sb,append,car,car,sb,append,return
Type -> private static void getDescriptor(final StringBuilder sb, final Class<?> c);1477913309;Appends the descriptor of the given class to the given string builder.__@param sb_the string buffer to which the descriptor must be appended._@param c_the class whose descriptor must be computed.;private static void getDescriptor(final StringBuilder sb, final Class<?> c) {_        Class<?> d = c__        while (true) {_            if (d.isPrimitive()) {_                char car__                if (d == Integer.TYPE) {_                    car = 'I'__                } else if (d == Void.TYPE) {_                    car = 'V'__                } else if (d == Boolean.TYPE) {_                    car = 'Z'__                } else if (d == Byte.TYPE) {_                    car = 'B'__                } else if (d == Character.TYPE) {_                    car = 'C'__                } else if (d == Short.TYPE) {_                    car = 'S'__                } else if (d == Double.TYPE) {_                    car = 'D'__                } else if (d == Float.TYPE) {_                    car = 'F'__                } else {_                    car = 'J'__                }_                sb.append(car)__                return__            } else if (d.isArray()) {_                sb.append('[')__                d = d.getComponentType()__            } else {_                sb.append('L')__                String name = d.getName()__                int len = name.length()__                for (int i = 0_ i < len_ ++i) {_                    char car = name.charAt(i)__                    sb.append(car == '.' ? '/' : car)__                }_                sb.append('_')__                return__            }_        }_    };appends,the,descriptor,of,the,given,class,to,the,given,string,builder,param,sb,the,string,buffer,to,which,the,descriptor,must,be,appended,param,c,the,class,whose,descriptor,must,be,computed;private,static,void,get,descriptor,final,string,builder,sb,final,class,c,class,d,c,while,true,if,d,is,primitive,char,car,if,d,integer,type,car,i,else,if,d,void,type,car,v,else,if,d,boolean,type,car,z,else,if,d,byte,type,car,b,else,if,d,character,type,car,c,else,if,d,short,type,car,s,else,if,d,double,type,car,d,else,if,d,float,type,car,f,else,car,j,sb,append,car,return,else,if,d,is,array,sb,append,d,d,get,component,type,else,sb,append,l,string,name,d,get,name,int,len,name,length,for,int,i,0,i,len,i,char,car,name,char,at,i,sb,append,car,car,sb,append,return
Type -> private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd);1531241461;Constructs a reference type.__@param sort the sort of this type, see {@link #sort}._@param valueBuffer a buffer containing the value of this field or method type._@param valueBegin the beginning index, inclusive, of the value of this field or method type in_valueBuffer._@param valueEnd tne end index, exclusive, of the value of this field or method type in_valueBuffer.;private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd) {_    this.sort = sort__    this.valueBuffer = valueBuffer__    this.valueBegin = valueBegin__    this.valueEnd = valueEnd__  };constructs,a,reference,type,param,sort,the,sort,of,this,type,see,link,sort,param,value,buffer,a,buffer,containing,the,value,of,this,field,or,method,type,param,value,begin,the,beginning,index,inclusive,of,the,value,of,this,field,or,method,type,in,value,buffer,param,value,end,tne,end,index,exclusive,of,the,value,of,this,field,or,method,type,in,value,buffer;private,type,final,int,sort,final,string,value,buffer,final,int,value,begin,final,int,value,end,this,sort,sort,this,value,buffer,value,buffer,this,value,begin,value,begin,this,value,end,value,end
Type -> private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd);1536664245;Constructs a reference type.__@param sort the sort of this type, see {@link #sort}._@param valueBuffer a buffer containing the value of this field or method type._@param valueBegin the beginning index, inclusive, of the value of this field or method type in_valueBuffer._@param valueEnd tne end index, exclusive, of the value of this field or method type in_valueBuffer.;private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd) {_    this.sort = sort__    this.valueBuffer = valueBuffer__    this.valueBegin = valueBegin__    this.valueEnd = valueEnd__  };constructs,a,reference,type,param,sort,the,sort,of,this,type,see,link,sort,param,value,buffer,a,buffer,containing,the,value,of,this,field,or,method,type,param,value,begin,the,beginning,index,inclusive,of,the,value,of,this,field,or,method,type,in,value,buffer,param,value,end,tne,end,index,exclusive,of,the,value,of,this,field,or,method,type,in,value,buffer;private,type,final,int,sort,final,string,value,buffer,final,int,value,begin,final,int,value,end,this,sort,sort,this,value,buffer,value,buffer,this,value,begin,value,begin,this,value,end,value,end
Type -> private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd);1537204147;Constructs a reference type.__@param sort the sort of this type, see {@link #sort}._@param valueBuffer a buffer containing the value of this field or method type._@param valueBegin the beginning index, inclusive, of the value of this field or method type in_valueBuffer._@param valueEnd tne end index, exclusive, of the value of this field or method type in_valueBuffer.;private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd) {_    this.sort = sort__    this.valueBuffer = valueBuffer__    this.valueBegin = valueBegin__    this.valueEnd = valueEnd__  };constructs,a,reference,type,param,sort,the,sort,of,this,type,see,link,sort,param,value,buffer,a,buffer,containing,the,value,of,this,field,or,method,type,param,value,begin,the,beginning,index,inclusive,of,the,value,of,this,field,or,method,type,in,value,buffer,param,value,end,tne,end,index,exclusive,of,the,value,of,this,field,or,method,type,in,value,buffer;private,type,final,int,sort,final,string,value,buffer,final,int,value,begin,final,int,value,end,this,sort,sort,this,value,buffer,value,buffer,this,value,begin,value,begin,this,value,end,value,end
Type -> private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd);1539119582;Constructs a reference type.__@param sort the sort of this type, see {@link #sort}._@param valueBuffer a buffer containing the value of this field or method type._@param valueBegin the beginning index, inclusive, of the value of this field or method type in_valueBuffer._@param valueEnd the end index, exclusive, of the value of this field or method type in_valueBuffer.;private Type(final int sort, final String valueBuffer, final int valueBegin, final int valueEnd) {_    this.sort = sort__    this.valueBuffer = valueBuffer__    this.valueBegin = valueBegin__    this.valueEnd = valueEnd__  };constructs,a,reference,type,param,sort,the,sort,of,this,type,see,link,sort,param,value,buffer,a,buffer,containing,the,value,of,this,field,or,method,type,param,value,begin,the,beginning,index,inclusive,of,the,value,of,this,field,or,method,type,in,value,buffer,param,value,end,the,end,index,exclusive,of,the,value,of,this,field,or,method,type,in,value,buffer;private,type,final,int,sort,final,string,value,buffer,final,int,value,begin,final,int,value,end,this,sort,sort,this,value,buffer,value,buffer,this,value,begin,value,begin,this,value,end,value,end
Type -> public static String getConstructorDescriptor(final Constructor<?> c);1366718246;Returns the descriptor corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> c) {_        Class<?>[] parameters = c.getParameterTypes()__        StringBuffer buf = new StringBuffer()__        buf.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(buf, parameters[i])__        }_        return buf.append(")V").toString()__    };returns,the,descriptor,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,c,class,parameters,c,get,parameter,types,string,buffer,buf,new,string,buffer,buf,append,for,int,i,0,i,parameters,length,i,get,descriptor,buf,parameters,i,return,buf,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> c);1400531367;Returns the descriptor corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> c) {_        Class<?>[] parameters = c.getParameterTypes()__		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(sb, parameters[i])__        }_        return sb.append(")V").toString()__    };returns,the,descriptor,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,c,class,parameters,c,get,parameter,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,parameters,length,i,get,descriptor,sb,parameters,i,return,sb,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> c);1400538684;Returns the descriptor corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> c) {_        Class<?>[] parameters = c.getParameterTypes()__		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(sb, parameters[i])__        }_        return sb.append(")V").toString()__    };returns,the,descriptor,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,c,class,parameters,c,get,parameter,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,parameters,length,i,get,descriptor,sb,parameters,i,return,sb,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> c);1477913309;Returns the descriptor corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> c) {_        Class<?>[] parameters = c.getParameterTypes()__		StringBuilder sb = new StringBuilder()__        sb.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(sb, parameters[i])__        }_        return sb.append(")V").toString()__    };returns,the,descriptor,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,c,class,parameters,c,get,parameter,types,string,builder,sb,new,string,builder,sb,append,for,int,i,0,i,parameters,length,i,get,descriptor,sb,parameters,i,return,sb,append,v,to,string
Type -> public static String getConstructorDescriptor(final Constructor<?> c);1483093254;Returns the descriptor corresponding to the given constructor.__@param c_a {@link Constructor Constructor} object._@return the descriptor of the given constructor.;public static String getConstructorDescriptor(final Constructor<?> c) {_        Class<?>[] parameters = c.getParameterTypes()__        StringBuilder buf = new StringBuilder()__        buf.append('(')__        for (int i = 0_ i < parameters.length_ ++i) {_            getDescriptor(buf, parameters[i])__        }_        return buf.append(")V").toString()__    };returns,the,descriptor,corresponding,to,the,given,constructor,param,c,a,link,constructor,constructor,object,return,the,descriptor,of,the,given,constructor;public,static,string,get,constructor,descriptor,final,constructor,c,class,parameters,c,get,parameter,types,string,builder,buf,new,string,builder,buf,append,for,int,i,0,i,parameters,length,i,get,descriptor,buf,parameters,i,return,buf,append,v,to,string
Type -> private void getDescriptor(final StringBuilder buf);1400531367;Appends the descriptor corresponding to this Java type to the given_string builder.__@param buf_the string builder to which the descriptor must be appended.;private void getDescriptor(final StringBuilder buf) {_        if (this.buf == null) {_            _            _            buf.append((char) ((off & 0xFF000000) >>> 24))__        } else if (sort == OBJECT) {_            buf.append('L')__            buf.append(this.buf, off, len)__            buf.append('_')__        } else { _            buf.append(this.buf, off, len)__        }_    };appends,the,descriptor,corresponding,to,this,java,type,to,the,given,string,builder,param,buf,the,string,builder,to,which,the,descriptor,must,be,appended;private,void,get,descriptor,final,string,builder,buf,if,this,buf,null,buf,append,char,off,0x,ff000000,24,else,if,sort,object,buf,append,l,buf,append,this,buf,off,len,buf,append,else,buf,append,this,buf,off,len
Type -> private void getDescriptor(final StringBuilder buf);1483093254;Appends the descriptor corresponding to this Java type to the given_string buffer.__@param buf_the string buffer to which the descriptor must be appended.;private void getDescriptor(final StringBuilder buf) {_        if (this.buf == null) {_            _            _            buf.append((char) ((off & 0xFF000000) >>> 24))__        } else if (sort == OBJECT) {_            buf.append('L')__            buf.append(this.buf, off, len)__            buf.append('_')__        } else { _            buf.append(this.buf, off, len)__        }_    };appends,the,descriptor,corresponding,to,this,java,type,to,the,given,string,buffer,param,buf,the,string,buffer,to,which,the,descriptor,must,be,appended;private,void,get,descriptor,final,string,builder,buf,if,this,buf,null,buf,append,char,off,0x,ff000000,24,else,if,sort,object,buf,append,l,buf,append,this,buf,off,len,buf,append,else,buf,append,this,buf,off,len
Type -> @Override   public String toString();1531241461;Returns a string representation of this type.__@return the descriptor of this type.;@Override_  public String toString() {_    return getDescriptor()__  };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override   public String toString();1536664245;Returns a string representation of this type.__@return the descriptor of this type.;@Override_  public String toString() {_    return getDescriptor()__  };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override   public String toString();1537204147;Returns a string representation of this type.__@return the descriptor of this type.;@Override_  public String toString() {_    return getDescriptor()__  };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> @Override   public String toString();1539119582;Returns a string representation of this type.__@return the descriptor of this type.;@Override_  public String toString() {_    return getDescriptor()__  };returns,a,string,representation,of,this,type,return,the,descriptor,of,this,type;override,public,string,to,string,return,get,descriptor
Type -> public static Type[] getArgumentTypes(final Method method);1366718246;Returns the Java types corresponding to the argument types of the given_method.__@param method_a method._@return the Java types corresponding to the argument types of the given_method.;public static Type[] getArgumentTypes(final Method method) {_        Class<?>[] classes = method.getParameterTypes()__        Type[] types = new Type[classes.length]__        for (int i = classes.length - 1_ i >= 0_ --i) {_            types[i] = getType(classes[i])__        }_        return types__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1400531367;Returns the Java types corresponding to the argument types of the given_method.__@param method_a method._@return the Java types corresponding to the argument types of the given_method.;public static Type[] getArgumentTypes(final Method method) {_        Class<?>[] classes = method.getParameterTypes()__        Type[] types = new Type[classes.length]__        for (int i = classes.length - 1_ i >= 0_ --i) {_            types[i] = getType(classes[i])__        }_        return types__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1400538684;Returns the Java types corresponding to the argument types of the given_method.__@param method_a method._@return the Java types corresponding to the argument types of the given_method.;public static Type[] getArgumentTypes(final Method method) {_        Class<?>[] classes = method.getParameterTypes()__        Type[] types = new Type[classes.length]__        for (int i = classes.length - 1_ i >= 0_ --i) {_            types[i] = getType(classes[i])__        }_        return types__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1477913309;Returns the Java types corresponding to the argument types of the given_method.__@param method_a method._@return the Java types corresponding to the argument types of the given_method.;public static Type[] getArgumentTypes(final Method method) {_        Class<?>[] classes = method.getParameterTypes()__        Type[] types = new Type[classes.length]__        for (int i = classes.length - 1_ i >= 0_ --i) {_            types[i] = getType(classes[i])__        }_        return types__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1483093254;Returns the Java types corresponding to the argument types of the given_method.__@param method_a method._@return the Java types corresponding to the argument types of the given_method.;public static Type[] getArgumentTypes(final Method method) {_        Class<?>[] classes = method.getParameterTypes()__        Type[] types = new Type[classes.length]__        for (int i = classes.length - 1_ i >= 0_ --i) {_            types[i] = getType(classes[i])__        }_        return types__    };returns,the,java,types,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,java,types,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1531241461;Returns the {@link Type} values corresponding to the argument types of the given method.__@param method a method._@return the {@link Type} values corresponding to the argument types of the given method.;public static Type[] getArgumentTypes(final Method method) {_    Class<?>[] classes = method.getParameterTypes()__    Type[] types = new Type[classes.length]__    for (int i = classes.length - 1_ i >= 0_ --i) {_      types[i] = getType(classes[i])__    }_    return types__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1536664245;Returns the {@link Type} values corresponding to the argument types of the given method.__@param method a method._@return the {@link Type} values corresponding to the argument types of the given method.;public static Type[] getArgumentTypes(final Method method) {_    Class<?>[] classes = method.getParameterTypes()__    Type[] types = new Type[classes.length]__    for (int i = classes.length - 1_ i >= 0_ --i) {_      types[i] = getType(classes[i])__    }_    return types__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1537204147;Returns the {@link Type} values corresponding to the argument types of the given method.__@param method a method._@return the {@link Type} values corresponding to the argument types of the given method.;public static Type[] getArgumentTypes(final Method method) {_    Class<?>[] classes = method.getParameterTypes()__    Type[] types = new Type[classes.length]__    for (int i = classes.length - 1_ i >= 0_ --i) {_      types[i] = getType(classes[i])__    }_    return types__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public static Type[] getArgumentTypes(final Method method);1539119582;Returns the {@link Type} values corresponding to the argument types of the given method.__@param method a method._@return the {@link Type} values corresponding to the argument types of the given method.;public static Type[] getArgumentTypes(final Method method) {_    Class<?>[] classes = method.getParameterTypes()__    Type[] types = new Type[classes.length]__    for (int i = classes.length - 1_ i >= 0_ --i) {_      types[i] = getType(classes[i])__    }_    return types__  };returns,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method,param,method,a,method,return,the,link,type,values,corresponding,to,the,argument,types,of,the,given,method;public,static,type,get,argument,types,final,method,method,class,classes,method,get,parameter,types,type,types,new,type,classes,length,for,int,i,classes,length,1,i,0,i,types,i,get,type,classes,i,return,types
Type -> public int getSort();1366718246;Returns the sort of this Java type.__@return {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},_{@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT},_{@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE},_{@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD_METHOD}.;public int getSort() {_        return sort__    };returns,the,sort,of,this,java,type,return,link,void,void,link,boolean,boolean,link,char,char,link,byte,byte,link,short,short,link,int,int,link,float,float,link,long,long,link,double,double,link,array,array,link,object,object,or,link,method,method;public,int,get,sort,return,sort
Type -> public int getSort();1400531367;Returns the sort of this Java type.__@return {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},_{@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT},_{@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE},_{@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD_METHOD}.;public int getSort() {_        return sort__    };returns,the,sort,of,this,java,type,return,link,void,void,link,boolean,boolean,link,char,char,link,byte,byte,link,short,short,link,int,int,link,float,float,link,long,long,link,double,double,link,array,array,link,object,object,or,link,method,method;public,int,get,sort,return,sort
Type -> public int getSort();1400538684;Returns the sort of this Java type.__@return {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},_{@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT},_{@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE},_{@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD_METHOD}.;public int getSort() {_        return sort__    };returns,the,sort,of,this,java,type,return,link,void,void,link,boolean,boolean,link,char,char,link,byte,byte,link,short,short,link,int,int,link,float,float,link,long,long,link,double,double,link,array,array,link,object,object,or,link,method,method;public,int,get,sort,return,sort
Type -> public int getSort();1477913309;Returns the sort of this Java type.__@return {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},_{@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT},_{@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE},_{@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD_METHOD}.;public int getSort() {_        return sort__    };returns,the,sort,of,this,java,type,return,link,void,void,link,boolean,boolean,link,char,char,link,byte,byte,link,short,short,link,int,int,link,float,float,link,long,long,link,double,double,link,array,array,link,object,object,or,link,method,method;public,int,get,sort,return,sort
Type -> public int getSort();1483093254;Returns the sort of this Java type.__@return {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR},_{@link #BYTE BYTE}, {@link #SHORT SHORT}, {@link #INT INT},_{@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link #DOUBLE DOUBLE},_{@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD_METHOD}.;public int getSort() {_        return sort__    };returns,the,sort,of,this,java,type,return,link,void,void,link,boolean,boolean,link,char,char,link,byte,byte,link,short,short,link,int,int,link,float,float,link,long,long,link,double,double,link,array,array,link,object,object,or,link,method,method;public,int,get,sort,return,sort
Type -> public int getSort();1531241461;Returns the sort of this type.__@return {@link #VOID}, {@link #BOOLEAN}, {@link #CHAR}, {@link #BYTE}, {@link #SHORT}, {@link_#INT}, {@link #FLOAT}, {@link #LONG}, {@link #DOUBLE}, {@link #ARRAY}, {@link #OBJECT} or_{@link #METHOD}.;public int getSort() {_    return sort == INTERNAL ? OBJECT : sort__  };returns,the,sort,of,this,type,return,link,void,link,boolean,link,char,link,byte,link,short,link,int,link,float,link,long,link,double,link,array,link,object,or,link,method;public,int,get,sort,return,sort,internal,object,sort
Type -> public int getSort();1536664245;Returns the sort of this type.__@return {@link #VOID}, {@link #BOOLEAN}, {@link #CHAR}, {@link #BYTE}, {@link #SHORT}, {@link_#INT}, {@link #FLOAT}, {@link #LONG}, {@link #DOUBLE}, {@link #ARRAY}, {@link #OBJECT} or_{@link #METHOD}.;public int getSort() {_    return sort == INTERNAL ? OBJECT : sort__  };returns,the,sort,of,this,type,return,link,void,link,boolean,link,char,link,byte,link,short,link,int,link,float,link,long,link,double,link,array,link,object,or,link,method;public,int,get,sort,return,sort,internal,object,sort
Type -> public int getSort();1537204147;Returns the sort of this type.__@return {@link #VOID}, {@link #BOOLEAN}, {@link #CHAR}, {@link #BYTE}, {@link #SHORT}, {@link_#INT}, {@link #FLOAT}, {@link #LONG}, {@link #DOUBLE}, {@link #ARRAY}, {@link #OBJECT} or_{@link #METHOD}.;public int getSort() {_    return sort == INTERNAL ? OBJECT : sort__  };returns,the,sort,of,this,type,return,link,void,link,boolean,link,char,link,byte,link,short,link,int,link,float,link,long,link,double,link,array,link,object,or,link,method;public,int,get,sort,return,sort,internal,object,sort
Type -> public int getSort();1539119582;Returns the sort of this type.__@return {@link #VOID}, {@link #BOOLEAN}, {@link #CHAR}, {@link #BYTE}, {@link #SHORT}, {@link_#INT}, {@link #FLOAT}, {@link #LONG}, {@link #DOUBLE}, {@link #ARRAY}, {@link #OBJECT} or_{@link #METHOD}.;public int getSort() {_    return sort == INTERNAL ? OBJECT : sort__  };returns,the,sort,of,this,type,return,link,void,link,boolean,link,char,link,byte,link,short,link,int,link,float,link,long,link,double,link,array,link,object,or,link,method;public,int,get,sort,return,sort,internal,object,sort
Type -> public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes);1531241461;Returns the descriptor corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the descriptor corresponding to the given argument and return types.;public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    for (int i = 0_ i < argumentTypes.length_ ++i) {_      argumentTypes[i].appendDescriptor(stringBuilder)__    }_    stringBuilder.append(')')__    returnType.appendDescriptor(stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,string,builder,new,string,builder,string,builder,append,for,int,i,0,i,argument,types,length,i,argument,types,i,append,descriptor,string,builder,string,builder,append,return,type,append,descriptor,string,builder,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes);1536664245;Returns the descriptor corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the descriptor corresponding to the given argument and return types.;public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    for (int i = 0_ i < argumentTypes.length_ ++i) {_      argumentTypes[i].appendDescriptor(stringBuilder)__    }_    stringBuilder.append(')')__    returnType.appendDescriptor(stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,string,builder,new,string,builder,string,builder,append,for,int,i,0,i,argument,types,length,i,argument,types,i,append,descriptor,string,builder,string,builder,append,return,type,append,descriptor,string,builder,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes);1537204147;Returns the descriptor corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the descriptor corresponding to the given argument and return types.;public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    for (int i = 0_ i < argumentTypes.length_ ++i) {_      argumentTypes[i].appendDescriptor(stringBuilder)__    }_    stringBuilder.append(')')__    returnType.appendDescriptor(stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,string,builder,new,string,builder,string,builder,append,for,int,i,0,i,argument,types,length,i,argument,types,i,append,descriptor,string,builder,string,builder,append,return,type,append,descriptor,string,builder,return,string,builder,to,string
Type -> public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes);1539119582;Returns the descriptor corresponding to the given argument and return types.__@param returnType the return type of the method._@param argumentTypes the argument types of the method._@return the descriptor corresponding to the given argument and return types.;public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) {_    StringBuilder stringBuilder = new StringBuilder()__    stringBuilder.append('(')__    for (Type argumentType : argumentTypes) {_      argumentType.appendDescriptor(stringBuilder)__    }_    stringBuilder.append(')')__    returnType.appendDescriptor(stringBuilder)__    return stringBuilder.toString()__  };returns,the,descriptor,corresponding,to,the,given,argument,and,return,types,param,return,type,the,return,type,of,the,method,param,argument,types,the,argument,types,of,the,method,return,the,descriptor,corresponding,to,the,given,argument,and,return,types;public,static,string,get,method,descriptor,final,type,return,type,final,type,argument,types,string,builder,string,builder,new,string,builder,string,builder,append,for,type,argument,type,argument,types,argument,type,append,descriptor,string,builder,string,builder,append,return,type,append,descriptor,string,builder,return,string,builder,to,string
Type -> public static int getArgumentsAndReturnSizes(final String desc);1366718246;Computes the size of the arguments and of the return value of a method.__@param desc_the descriptor of a method._@return the size of the arguments of the method (plus one for the_implicit this argument), argSize, and the size of its return_value, retSize, packed into a single int i =_<tt>(argSize << 2) | retSize</tt> (argSize is therefore equal to_<tt>i >> 2</tt>, and retSize to <tt>i & 0x03</tt>).;public static int getArgumentsAndReturnSizes(final String desc) {_        int n = 1__        int c = 1__        while (true) {_            char car = desc.charAt(c++)__            if (car == ')') {_                car = desc.charAt(c)__                return n << 2_                        | (car == 'V' ? 0 : (car == 'D' || car == 'J' ? 2 : 1))__            } else if (car == 'L') {_                while (desc.charAt(c++) != '_') {_                }_                n += 1__            } else if (car == '[') {_                while ((car = desc.charAt(c)) == '[') {_                    ++c__                }_                if (car == 'D' || car == 'J') {_                    n -= 1__                }_            } else if (car == 'D' || car == 'J') {_                n += 2__            } else {_                n += 1__            }_        }_    };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,desc,the,descriptor,of,a,method,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,its,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,2,tt,and,ret,size,to,tt,i,0x03,tt;public,static,int,get,arguments,and,return,sizes,final,string,desc,int,n,1,int,c,1,while,true,char,car,desc,char,at,c,if,car,car,desc,char,at,c,return,n,2,car,v,0,car,d,car,j,2,1,else,if,car,l,while,desc,char,at,c,n,1,else,if,car,while,car,desc,char,at,c,c,if,car,d,car,j,n,1,else,if,car,d,car,j,n,2,else,n,1
Type -> public static int getArgumentsAndReturnSizes(final String desc);1400531367;Computes the size of the arguments and of the return value of a method.__@param desc_the descriptor of a method._@return the size of the arguments of the method (plus one for the_implicit this argument), argSize, and the size of its return_value, retSize, packed into a single int i =_<tt>(argSize &lt_&lt_ 2) | retSize</tt> (argSize is therefore equal to_<tt>i &gt_&gt_ 2</tt>, and retSize to <tt>i &amp_ 0x03</tt>).;public static int getArgumentsAndReturnSizes(final String desc) {_        int n = 1__        int c = 1__        while (true) {_            char car = desc.charAt(c++)__            if (car == ')') {_                car = desc.charAt(c)__                return n << 2_                        | (car == 'V' ? 0 : (car == 'D' || car == 'J' ? 2 : 1))__            } else if (car == 'L') {_                while (desc.charAt(c++) != '_') {_                }_                n += 1__            } else if (car == '[') {_                while ((car = desc.charAt(c)) == '[') {_                    ++c__                }_                if (car == 'D' || car == 'J') {_                    n -= 1__                }_            } else if (car == 'D' || car == 'J') {_                n += 2__            } else {_                n += 1__            }_        }_    };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,desc,the,descriptor,of,a,method,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,its,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,static,int,get,arguments,and,return,sizes,final,string,desc,int,n,1,int,c,1,while,true,char,car,desc,char,at,c,if,car,car,desc,char,at,c,return,n,2,car,v,0,car,d,car,j,2,1,else,if,car,l,while,desc,char,at,c,n,1,else,if,car,while,car,desc,char,at,c,c,if,car,d,car,j,n,1,else,if,car,d,car,j,n,2,else,n,1
Type -> public static int getArgumentsAndReturnSizes(final String desc);1400538684;Computes the size of the arguments and of the return value of a method.__@param desc_the descriptor of a method._@return the size of the arguments of the method (plus one for the_implicit this argument), argSize, and the size of its return_value, retSize, packed into a single int i =_<tt>(argSize &lt_&lt_ 2) | retSize</tt> (argSize is therefore equal to_<tt>i &gt_&gt_ 2</tt>, and retSize to <tt>i &amp_ 0x03</tt>).;public static int getArgumentsAndReturnSizes(final String desc) {_        int n = 1__        int c = 1__        while (true) {_            char car = desc.charAt(c++)__            if (car == ')') {_                car = desc.charAt(c)__                return n << 2_                        | (car == 'V' ? 0 : (car == 'D' || car == 'J' ? 2 : 1))__            } else if (car == 'L') {_                while (desc.charAt(c++) != '_') {_                }_                n += 1__            } else if (car == '[') {_                while ((car = desc.charAt(c)) == '[') {_                    ++c__                }_                if (car == 'D' || car == 'J') {_                    n -= 1__                }_            } else if (car == 'D' || car == 'J') {_                n += 2__            } else {_                n += 1__            }_        }_    };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,desc,the,descriptor,of,a,method,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,its,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,static,int,get,arguments,and,return,sizes,final,string,desc,int,n,1,int,c,1,while,true,char,car,desc,char,at,c,if,car,car,desc,char,at,c,return,n,2,car,v,0,car,d,car,j,2,1,else,if,car,l,while,desc,char,at,c,n,1,else,if,car,while,car,desc,char,at,c,c,if,car,d,car,j,n,1,else,if,car,d,car,j,n,2,else,n,1
Type -> public static int getArgumentsAndReturnSizes(final String desc);1477913309;Computes the size of the arguments and of the return value of a method.__@param desc_the descriptor of a method._@return the size of the arguments of the method (plus one for the_implicit this argument), argSize, and the size of its return_value, retSize, packed into a single int i =_<tt>(argSize &lt_&lt_ 2) | retSize</tt> (argSize is therefore equal to_<tt>i &gt_&gt_ 2</tt>, and retSize to <tt>i &amp_ 0x03</tt>).;public static int getArgumentsAndReturnSizes(final String desc) {_        int n = 1__        int c = 1__        while (true) {_            char car = desc.charAt(c++)__            if (car == ')') {_                car = desc.charAt(c)__                return n << 2_                        | (car == 'V' ? 0 : (car == 'D' || car == 'J' ? 2 : 1))__            } else if (car == 'L') {_                while (desc.charAt(c++) != '_') {_                }_                n += 1__            } else if (car == '[') {_                while ((car = desc.charAt(c)) == '[') {_                    ++c__                }_                if (car == 'D' || car == 'J') {_                    n -= 1__                }_            } else if (car == 'D' || car == 'J') {_                n += 2__            } else {_                n += 1__            }_        }_    };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,desc,the,descriptor,of,a,method,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,its,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,static,int,get,arguments,and,return,sizes,final,string,desc,int,n,1,int,c,1,while,true,char,car,desc,char,at,c,if,car,car,desc,char,at,c,return,n,2,car,v,0,car,d,car,j,2,1,else,if,car,l,while,desc,char,at,c,n,1,else,if,car,while,car,desc,char,at,c,c,if,car,d,car,j,n,1,else,if,car,d,car,j,n,2,else,n,1
Type -> public static int getArgumentsAndReturnSizes(final String desc);1483093254;Computes the size of the arguments and of the return value of a method.__@param desc_the descriptor of a method._@return the size of the arguments of the method (plus one for the_implicit this argument), argSize, and the size of its return_value, retSize, packed into a single int i =_<tt>(argSize &lt_&lt_ 2) | retSize</tt> (argSize is therefore equal to_<tt>i &gt_&gt_ 2</tt>, and retSize to <tt>i &amp_ 0x03</tt>).;public static int getArgumentsAndReturnSizes(final String desc) {_        int n = 1__        int c = 1__        while (true) {_            char car = desc.charAt(c++)__            if (car == ')') {_                car = desc.charAt(c)__                return n << 2_                        | (car == 'V' ? 0 : (car == 'D' || car == 'J' ? 2 : 1))__            } else if (car == 'L') {_                while (desc.charAt(c++) != '_') {_                }_                n += 1__            } else if (car == '[') {_                while ((car = desc.charAt(c)) == '[') {_                    ++c__                }_                if (car == 'D' || car == 'J') {_                    n -= 1__                }_            } else if (car == 'D' || car == 'J') {_                n += 2__            } else {_                n += 1__            }_        }_    };computes,the,size,of,the,arguments,and,of,the,return,value,of,a,method,param,desc,the,descriptor,of,a,method,return,the,size,of,the,arguments,of,the,method,plus,one,for,the,implicit,this,argument,arg,size,and,the,size,of,its,return,value,ret,size,packed,into,a,single,int,i,tt,arg,size,lt,lt,2,ret,size,tt,arg,size,is,therefore,equal,to,tt,i,gt,gt,2,tt,and,ret,size,to,tt,i,amp,0x03,tt;public,static,int,get,arguments,and,return,sizes,final,string,desc,int,n,1,int,c,1,while,true,char,car,desc,char,at,c,if,car,car,desc,char,at,c,return,n,2,car,v,0,car,d,car,j,2,1,else,if,car,l,while,desc,char,at,c,n,1,else,if,car,while,car,desc,char,at,c,c,if,car,d,car,j,n,1,else,if,car,d,car,j,n,2,else,n,1
Type -> public static Type getMethodType(final String methodDescriptor);1366718246;Returns the Java type corresponding to the given method descriptor._Equivalent to <code>Type.getType(methodDescriptor)</code>.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_        return getType(methodDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,get,type,method,descriptor,to,char,array,0
Type -> public static Type getMethodType(final String methodDescriptor);1400531367;Returns the Java type corresponding to the given method descriptor._Equivalent to <code>Type.getType(methodDescriptor)</code>.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_        return getType(methodDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,get,type,method,descriptor,to,char,array,0
Type -> public static Type getMethodType(final String methodDescriptor);1400538684;Returns the Java type corresponding to the given method descriptor._Equivalent to <code>Type.getType(methodDescriptor)</code>.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_        return getType(methodDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,get,type,method,descriptor,to,char,array,0
Type -> public static Type getMethodType(final String methodDescriptor);1477913309;Returns the Java type corresponding to the given method descriptor._Equivalent to <code>Type.getType(methodDescriptor)</code>.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_        return getType(methodDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,get,type,method,descriptor,to,char,array,0
Type -> public static Type getMethodType(final String methodDescriptor);1483093254;Returns the Java type corresponding to the given method descriptor._Equivalent to <code>Type.getType(methodDescriptor)</code>.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_        return getType(methodDescriptor.toCharArray(), 0)__    };returns,the,java,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,get,type,method,descriptor,to,char,array,0
Type -> public static Type getMethodType(final String methodDescriptor);1531241461;Returns the {@link Type} corresponding to the given method descriptor. Equivalent to <code>_Type.getType(methodDescriptor)</code>.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_    return new Type(METHOD, methodDescriptor, 0, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,new,type,method,method,descriptor,0,method,descriptor,length
Type -> public static Type getMethodType(final String methodDescriptor);1536664245;Returns the {@link Type} corresponding to the given method descriptor. Equivalent to <code>_Type.getType(methodDescriptor)</code>.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_    return new Type(METHOD, methodDescriptor, 0, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,new,type,method,method,descriptor,0,method,descriptor,length
Type -> public static Type getMethodType(final String methodDescriptor);1537204147;Returns the {@link Type} corresponding to the given method descriptor. Equivalent to <code>_Type.getType(methodDescriptor)</code>.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_    return new Type(METHOD, methodDescriptor, 0, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,new,type,method,method,descriptor,0,method,descriptor,length
Type -> public static Type getMethodType(final String methodDescriptor);1539119582;Returns the {@link Type} corresponding to the given method descriptor. Equivalent to <code>_Type.getType(methodDescriptor)</code>.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the given method descriptor.;public static Type getMethodType(final String methodDescriptor) {_    return new Type(METHOD, methodDescriptor, 0, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,given,method,descriptor,equivalent,to,code,type,get,type,method,descriptor,code,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,given,method,descriptor;public,static,type,get,method,type,final,string,method,descriptor,return,new,type,method,method,descriptor,0,method,descriptor,length
Type -> public String getInternalName();1366718246;Returns the internal name of the class corresponding to this object or_array type. The internal name of a class is its fully qualified name (as_returned by Class.getName(), where '.' are replaced by '/'. This method_should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_        return new String(buf, off, len)__    };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,new,string,buf,off,len
Type -> public String getInternalName();1400531367;Returns the internal name of the class corresponding to this object or_array type. The internal name of a class is its fully qualified name (as_returned by Class.getName(), where '.' are replaced by '/'. This method_should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_        return new String(buf, off, len)__    };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,new,string,buf,off,len
Type -> public String getInternalName();1400538684;Returns the internal name of the class corresponding to this object or_array type. The internal name of a class is its fully qualified name (as_returned by Class.getName(), where '.' are replaced by '/'. This method_should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_        return new String(buf, off, len)__    };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,new,string,buf,off,len
Type -> public String getInternalName();1477913309;Returns the internal name of the class corresponding to this object or_array type. The internal name of a class is its fully qualified name (as_returned by Class.getName(), where '.' are replaced by '/'. This method_should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_        return new String(buf, off, len).intern()__    };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,new,string,buf,off,len,intern
Type -> public String getInternalName();1483093254;Returns the internal name of the class corresponding to this object or_array type. The internal name of a class is its fully qualified name (as_returned by Class.getName(), where '.' are replaced by '/'. This method_should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_        return new String(buf, off, len).intern()__    };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,new,string,buf,off,len,intern
Type -> public String getInternalName();1531241461;Returns the internal name of the class corresponding to this object or array type. The internal_name of a class is its fully qualified name (as returned by Class.getName(), where '.' are_replaced by '/'). This method should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_    return valueBuffer.substring(valueBegin, valueEnd)__  };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,value,buffer,substring,value,begin,value,end
Type -> public String getInternalName();1536664245;Returns the internal name of the class corresponding to this object or array type. The internal_name of a class is its fully qualified name (as returned by Class.getName(), where '.' are_replaced by '/'). This method should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_    return valueBuffer.substring(valueBegin, valueEnd)__  };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,value,buffer,substring,value,begin,value,end
Type -> public String getInternalName();1537204147;Returns the internal name of the class corresponding to this object or array type. The internal_name of a class is its fully qualified name (as returned by Class.getName(), where '.' are_replaced by '/'). This method should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_    return valueBuffer.substring(valueBegin, valueEnd)__  };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,value,buffer,substring,value,begin,value,end
Type -> public String getInternalName();1539119582;Returns the internal name of the class corresponding to this object or array type. The internal_name of a class is its fully qualified name (as returned by Class.getName(), where '.' are_replaced by '/'). This method should only be used for an object or array type.__@return the internal name of the class corresponding to this object type.;public String getInternalName() {_    return valueBuffer.substring(valueBegin, valueEnd)__  };returns,the,internal,name,of,the,class,corresponding,to,this,object,or,array,type,the,internal,name,of,a,class,is,its,fully,qualified,name,as,returned,by,class,get,name,where,are,replaced,by,this,method,should,only,be,used,for,an,object,or,array,type,return,the,internal,name,of,the,class,corresponding,to,this,object,type;public,string,get,internal,name,return,value,buffer,substring,value,begin,value,end
Type -> public static Type getObjectType(final String internalName);1366718246;Returns the Java type corresponding to the given internal name.__@param internalName_an internal name._@return the Java type corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_        char[] buf = internalName.toCharArray()__        return new Type(buf[0] == '[' ? ARRAY : OBJECT, buf, 0, buf.length)__    };returns,the,java,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,java,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,char,buf,internal,name,to,char,array,return,new,type,buf,0,array,object,buf,0,buf,length
Type -> public static Type getObjectType(final String internalName);1400531367;Returns the Java type corresponding to the given internal name.__@param internalName_an internal name._@return the Java type corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_        char[] buf = internalName.toCharArray()__        return new Type(buf[0] == '[' ? ARRAY : OBJECT, buf, 0, buf.length)__    };returns,the,java,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,java,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,char,buf,internal,name,to,char,array,return,new,type,buf,0,array,object,buf,0,buf,length
Type -> public static Type getObjectType(final String internalName);1400538684;Returns the Java type corresponding to the given internal name.__@param internalName_an internal name._@return the Java type corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_        char[] buf = internalName.toCharArray()__        return new Type(buf[0] == '[' ? ARRAY : OBJECT, buf, 0, buf.length)__    };returns,the,java,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,java,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,char,buf,internal,name,to,char,array,return,new,type,buf,0,array,object,buf,0,buf,length
Type -> public static Type getObjectType(final String internalName);1477913309;Returns the Java type corresponding to the given internal name.__@param internalName_an internal name._@return the Java type corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_        char[] buf = internalName.toCharArray()__        return new Type(buf[0] == '[' ? ARRAY : OBJECT, buf, 0, buf.length)__    };returns,the,java,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,java,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,char,buf,internal,name,to,char,array,return,new,type,buf,0,array,object,buf,0,buf,length
Type -> public static Type getObjectType(final String internalName);1483093254;Returns the Java type corresponding to the given internal name.__@param internalName_an internal name._@return the Java type corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_        char[] buf = internalName.toCharArray()__        return new Type(buf[0] == '[' ? ARRAY : OBJECT, buf, 0, buf.length)__    };returns,the,java,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,java,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,char,buf,internal,name,to,char,array,return,new,type,buf,0,array,object,buf,0,buf,length
Type -> public static Type getObjectType(final String internalName);1531241461;Returns the {@link Type} corresponding to the given internal name.__@param internalName an internal name._@return the {@link Type} corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_    return new Type(_        internalName.charAt(0) == '[' ? ARRAY : INTERNAL, internalName, 0, internalName.length())__  };returns,the,link,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,link,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,return,new,type,internal,name,char,at,0,array,internal,internal,name,0,internal,name,length
Type -> public static Type getObjectType(final String internalName);1536664245;Returns the {@link Type} corresponding to the given internal name.__@param internalName an internal name._@return the {@link Type} corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_    return new Type(_        internalName.charAt(0) == '[' ? ARRAY : INTERNAL, internalName, 0, internalName.length())__  };returns,the,link,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,link,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,return,new,type,internal,name,char,at,0,array,internal,internal,name,0,internal,name,length
Type -> public static Type getObjectType(final String internalName);1537204147;Returns the {@link Type} corresponding to the given internal name.__@param internalName an internal name._@return the {@link Type} corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_    return new Type(_        internalName.charAt(0) == '[' ? ARRAY : INTERNAL, internalName, 0, internalName.length())__  };returns,the,link,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,link,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,return,new,type,internal,name,char,at,0,array,internal,internal,name,0,internal,name,length
Type -> public static Type getObjectType(final String internalName);1539119582;Returns the {@link Type} corresponding to the given internal name.__@param internalName an internal name._@return the {@link Type} corresponding to the given internal name.;public static Type getObjectType(final String internalName) {_    return new Type(_        internalName.charAt(0) == '[' ? ARRAY : INTERNAL, internalName, 0, internalName.length())__  };returns,the,link,type,corresponding,to,the,given,internal,name,param,internal,name,an,internal,name,return,the,link,type,corresponding,to,the,given,internal,name;public,static,type,get,object,type,final,string,internal,name,return,new,type,internal,name,char,at,0,array,internal,internal,name,0,internal,name,length
Type -> private static Type getType(final char[] buf, final int off);1366718246;Returns the Java type corresponding to the given type descriptor. For_method descriptors, buf is supposed to contain nothing more than the_descriptor itself.__@param buf_a buffer containing a type descriptor._@param off_the offset of this descriptor in the previous buffer._@return the Java type corresponding to the given type descriptor.;private static Type getType(final char[] buf, final int off) {_        int len__        switch (buf[off]) {_        case 'V':_            return VOID_TYPE__        case 'Z':_            return BOOLEAN_TYPE__        case 'C':_            return CHAR_TYPE__        case 'B':_            return BYTE_TYPE__        case 'S':_            return SHORT_TYPE__        case 'I':_            return INT_TYPE__        case 'F':_            return FLOAT_TYPE__        case 'J':_            return LONG_TYPE__        case 'D':_            return DOUBLE_TYPE__        case '[':_            len = 1__            while (buf[off + len] == '[') {_                ++len__            }_            if (buf[off + len] == 'L') {_                ++len__                while (buf[off + len] != '_') {_                    ++len__                }_            }_            return new Type(ARRAY, buf, off, len + 1)__        case 'L':_            len = 1__            while (buf[off + len] != '_') {_                ++len__            }_            return new Type(OBJECT, buf, off + 1, len - 1)__            _        default:_            return new Type(METHOD, buf, off, buf.length - off)__        }_    };returns,the,java,type,corresponding,to,the,given,type,descriptor,for,method,descriptors,buf,is,supposed,to,contain,nothing,more,than,the,descriptor,itself,param,buf,a,buffer,containing,a,type,descriptor,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,return,the,java,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,char,buf,final,int,off,int,len,switch,buf,off,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,len,1,while,buf,off,len,len,if,buf,off,len,l,len,while,buf,off,len,len,return,new,type,array,buf,off,len,1,case,l,len,1,while,buf,off,len,len,return,new,type,object,buf,off,1,len,1,default,return,new,type,method,buf,off,buf,length,off
Type -> private static Type getType(final char[] buf, final int off);1400531367;Returns the Java type corresponding to the given type descriptor. For_method descriptors, buf is supposed to contain nothing more than the_descriptor itself.__@param buf_a buffer containing a type descriptor._@param off_the offset of this descriptor in the previous buffer._@return the Java type corresponding to the given type descriptor.;private static Type getType(final char[] buf, final int off) {_        int len__        switch (buf[off]) {_        case 'V':_            return VOID_TYPE__        case 'Z':_            return BOOLEAN_TYPE__        case 'C':_            return CHAR_TYPE__        case 'B':_            return BYTE_TYPE__        case 'S':_            return SHORT_TYPE__        case 'I':_            return INT_TYPE__        case 'F':_            return FLOAT_TYPE__        case 'J':_            return LONG_TYPE__        case 'D':_            return DOUBLE_TYPE__        case '[':_            len = 1__            while (buf[off + len] == '[') {_                ++len__            }_            if (buf[off + len] == 'L') {_                ++len__                while (buf[off + len] != '_') {_                    ++len__                }_            }_            return new Type(ARRAY, buf, off, len + 1)__        case 'L':_            len = 1__            while (buf[off + len] != '_') {_                ++len__            }_            return new Type(OBJECT, buf, off + 1, len - 1)__            _        default:_            return new Type(METHOD, buf, off, buf.length - off)__        }_    };returns,the,java,type,corresponding,to,the,given,type,descriptor,for,method,descriptors,buf,is,supposed,to,contain,nothing,more,than,the,descriptor,itself,param,buf,a,buffer,containing,a,type,descriptor,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,return,the,java,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,char,buf,final,int,off,int,len,switch,buf,off,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,len,1,while,buf,off,len,len,if,buf,off,len,l,len,while,buf,off,len,len,return,new,type,array,buf,off,len,1,case,l,len,1,while,buf,off,len,len,return,new,type,object,buf,off,1,len,1,default,return,new,type,method,buf,off,buf,length,off
Type -> private static Type getType(final char[] buf, final int off);1400538684;Returns the Java type corresponding to the given type descriptor. For_method descriptors, buf is supposed to contain nothing more than the_descriptor itself.__@param buf_a buffer containing a type descriptor._@param off_the offset of this descriptor in the previous buffer._@return the Java type corresponding to the given type descriptor.;private static Type getType(final char[] buf, final int off) {_        int len__        switch (buf[off]) {_        case 'V':_            return VOID_TYPE__        case 'Z':_            return BOOLEAN_TYPE__        case 'C':_            return CHAR_TYPE__        case 'B':_            return BYTE_TYPE__        case 'S':_            return SHORT_TYPE__        case 'I':_            return INT_TYPE__        case 'F':_            return FLOAT_TYPE__        case 'J':_            return LONG_TYPE__        case 'D':_            return DOUBLE_TYPE__        case '[':_            len = 1__            while (buf[off + len] == '[') {_                ++len__            }_            if (buf[off + len] == 'L') {_                ++len__                while (buf[off + len] != '_') {_                    ++len__                }_            }_            return new Type(ARRAY, buf, off, len + 1)__        case 'L':_            len = 1__            while (buf[off + len] != '_') {_                ++len__            }_            return new Type(OBJECT, buf, off + 1, len - 1)__            _        default:_            return new Type(METHOD, buf, off, buf.length - off)__        }_    };returns,the,java,type,corresponding,to,the,given,type,descriptor,for,method,descriptors,buf,is,supposed,to,contain,nothing,more,than,the,descriptor,itself,param,buf,a,buffer,containing,a,type,descriptor,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,return,the,java,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,char,buf,final,int,off,int,len,switch,buf,off,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,len,1,while,buf,off,len,len,if,buf,off,len,l,len,while,buf,off,len,len,return,new,type,array,buf,off,len,1,case,l,len,1,while,buf,off,len,len,return,new,type,object,buf,off,1,len,1,default,return,new,type,method,buf,off,buf,length,off
Type -> private static Type getType(final char[] buf, final int off);1477913309;Returns the Java type corresponding to the given type descriptor. For_method descriptors, buf is supposed to contain nothing more than the_descriptor itself.__@param buf_a buffer containing a type descriptor._@param off_the offset of this descriptor in the previous buffer._@return the Java type corresponding to the given type descriptor.;private static Type getType(final char[] buf, final int off) {_        int len__        switch (buf[off]) {_        case 'V':_            return VOID_TYPE__        case 'Z':_            return BOOLEAN_TYPE__        case 'C':_            return CHAR_TYPE__        case 'B':_            return BYTE_TYPE__        case 'S':_            return SHORT_TYPE__        case 'I':_            return INT_TYPE__        case 'F':_            return FLOAT_TYPE__        case 'J':_            return LONG_TYPE__        case 'D':_            return DOUBLE_TYPE__        case '[':_            len = 1__            while (buf[off + len] == '[') {_                ++len__            }_            if (buf[off + len] == 'L') {_                ++len__                while (buf[off + len] != '_') {_                    ++len__                }_            }_            return new Type(ARRAY, buf, off, len + 1)__        case 'L':_            len = 1__            while (buf[off + len] != '_') {_                ++len__            }_            return new Type(OBJECT, buf, off + 1, len - 1)__            _        default:_            return new Type(METHOD, buf, off, buf.length - off)__        }_    };returns,the,java,type,corresponding,to,the,given,type,descriptor,for,method,descriptors,buf,is,supposed,to,contain,nothing,more,than,the,descriptor,itself,param,buf,a,buffer,containing,a,type,descriptor,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,return,the,java,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,char,buf,final,int,off,int,len,switch,buf,off,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,len,1,while,buf,off,len,len,if,buf,off,len,l,len,while,buf,off,len,len,return,new,type,array,buf,off,len,1,case,l,len,1,while,buf,off,len,len,return,new,type,object,buf,off,1,len,1,default,return,new,type,method,buf,off,buf,length,off
Type -> private static Type getType(final char[] buf, final int off);1483093254;Returns the Java type corresponding to the given type descriptor. For_method descriptors, buf is supposed to contain nothing more than the_descriptor itself.__@param buf_a buffer containing a type descriptor._@param off_the offset of this descriptor in the previous buffer._@return the Java type corresponding to the given type descriptor.;private static Type getType(final char[] buf, final int off) {_        int len__        switch (buf[off]) {_        case 'V':_            return VOID_TYPE__        case 'Z':_            return BOOLEAN_TYPE__        case 'C':_            return CHAR_TYPE__        case 'B':_            return BYTE_TYPE__        case 'S':_            return SHORT_TYPE__        case 'I':_            return INT_TYPE__        case 'F':_            return FLOAT_TYPE__        case 'J':_            return LONG_TYPE__        case 'D':_            return DOUBLE_TYPE__        case '[':_            len = 1__            while (buf[off + len] == '[') {_                ++len__            }_            if (buf[off + len] == 'L') {_                ++len__                while (buf[off + len] != '_') {_                    ++len__                }_            }_            return new Type(ARRAY, buf, off, len + 1)__        case 'L':_            len = 1__            while (buf[off + len] != '_') {_                ++len__            }_            return new Type(OBJECT, buf, off + 1, len - 1)__            _        default:_            return new Type(METHOD, buf, off, buf.length - off)__        }_    };returns,the,java,type,corresponding,to,the,given,type,descriptor,for,method,descriptors,buf,is,supposed,to,contain,nothing,more,than,the,descriptor,itself,param,buf,a,buffer,containing,a,type,descriptor,param,off,the,offset,of,this,descriptor,in,the,previous,buffer,return,the,java,type,corresponding,to,the,given,type,descriptor;private,static,type,get,type,final,char,buf,final,int,off,int,len,switch,buf,off,case,v,return,case,z,return,case,c,return,case,b,return,case,s,return,case,i,return,case,f,return,case,j,return,case,d,return,case,len,1,while,buf,off,len,len,if,buf,off,len,l,len,while,buf,off,len,len,return,new,type,array,buf,off,len,1,case,l,len,1,while,buf,off,len,len,return,new,type,object,buf,off,1,len,1,default,return,new,type,method,buf,off,buf,length,off
Type -> public String getClassName();1366718246;Returns the binary name of the class corresponding to this type. This_method must not be used on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_        switch (sort) {_        case VOID:_            return "void"__        case BOOLEAN:_            return "boolean"__        case CHAR:_            return "char"__        case BYTE:_            return "byte"__        case SHORT:_            return "short"__        case INT:_            return "int"__        case FLOAT:_            return "float"__        case LONG:_            return "long"__        case DOUBLE:_            return "double"__        case ARRAY:_            StringBuffer b = new StringBuffer(getElementType().getClassName())__            for (int i = getDimensions()_ i > 0_ --i) {_                b.append("[]")__            }_            return b.toString()__        case OBJECT:_            return new String(buf, off, len).replace('/', '.')__        default:_            return null__        }_    };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,buffer,b,new,string,buffer,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,b,append,return,b,to,string,case,object,return,new,string,buf,off,len,replace,default,return,null
Type -> public String getClassName();1400531367;Returns the binary name of the class corresponding to this type. This_method must not be used on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_        switch (sort) {_        case VOID:_            return "void"__        case BOOLEAN:_            return "boolean"__        case CHAR:_            return "char"__        case BYTE:_            return "byte"__        case SHORT:_            return "short"__        case INT:_            return "int"__        case FLOAT:_            return "float"__        case LONG:_            return "long"__        case DOUBLE:_            return "double"__        case ARRAY:_            StringBuilder sb = new StringBuilder(getElementType().getClassName())__            for (int i = getDimensions()_ i > 0_ --i) {_                sb.append("[]")__            }_            return sb.toString()__        case OBJECT:_            return new String(buf, off, len).replace('/', '.')__        default:_            return null__        }_    };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,sb,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,sb,append,return,sb,to,string,case,object,return,new,string,buf,off,len,replace,default,return,null
Type -> public String getClassName();1400538684;Returns the binary name of the class corresponding to this type. This_method must not be used on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_        switch (sort) {_        case VOID:_            return "void"__        case BOOLEAN:_            return "boolean"__        case CHAR:_            return "char"__        case BYTE:_            return "byte"__        case SHORT:_            return "short"__        case INT:_            return "int"__        case FLOAT:_            return "float"__        case LONG:_            return "long"__        case DOUBLE:_            return "double"__        case ARRAY:_            StringBuilder sb = new StringBuilder(getElementType().getClassName())__            for (int i = getDimensions()_ i > 0_ --i) {_                sb.append("[]")__            }_            return sb.toString()__        case OBJECT:_            return new String(buf, off, len).replace('/', '.')__        default:_            return null__        }_    };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,sb,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,sb,append,return,sb,to,string,case,object,return,new,string,buf,off,len,replace,default,return,null
Type -> public String getClassName();1477913309;Returns the binary name of the class corresponding to this type. This_method must not be used on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_        switch (sort) {_        case VOID:_            return "void"__        case BOOLEAN:_            return "boolean"__        case CHAR:_            return "char"__        case BYTE:_            return "byte"__        case SHORT:_            return "short"__        case INT:_            return "int"__        case FLOAT:_            return "float"__        case LONG:_            return "long"__        case DOUBLE:_            return "double"__        case ARRAY:_            StringBuilder sb = new StringBuilder(getElementType().getClassName())__            for (int i = getDimensions()_ i > 0_ --i) {_                sb.append("[]")__            }_            return sb.toString()__        case OBJECT:_            return new String(buf, off, len).replace('/', '.').intern()__        default:_            return null__        }_    };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,sb,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,sb,append,return,sb,to,string,case,object,return,new,string,buf,off,len,replace,intern,default,return,null
Type -> public String getClassName();1483093254;Returns the binary name of the class corresponding to this type. This_method must not be used on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_        switch (sort) {_        case VOID:_            return "void"__        case BOOLEAN:_            return "boolean"__        case CHAR:_            return "char"__        case BYTE:_            return "byte"__        case SHORT:_            return "short"__        case INT:_            return "int"__        case FLOAT:_            return "float"__        case LONG:_            return "long"__        case DOUBLE:_            return "double"__        case ARRAY:_            StringBuilder sb = new StringBuilder(getElementType().getClassName())__            for (int i = getDimensions()_ i > 0_ --i) {_                sb.append("[]")__            }_            return sb.toString()__        case OBJECT:_            return new String(buf, off, len).replace('/', '.').intern()__        default:_            return null__        }_    };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,sb,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,sb,append,return,sb,to,string,case,object,return,new,string,buf,off,len,replace,intern,default,return,null
Type -> public String getClassName();1531241461;Returns the binary name of the class corresponding to this type. This method must not be used_on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_    switch (sort) {_      case VOID:_        return "void"__      case BOOLEAN:_        return "boolean"__      case CHAR:_        return "char"__      case BYTE:_        return "byte"__      case SHORT:_        return "short"__      case INT:_        return "int"__      case FLOAT:_        return "float"__      case LONG:_        return "long"__      case DOUBLE:_        return "double"__      case ARRAY:_        StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName())__        for (int i = getDimensions()_ i > 0_ --i) {_          stringBuilder.append("[]")__        }_        return stringBuilder.toString()__      case OBJECT:_      case INTERNAL:_        return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.')__      default:_        throw new AssertionError()__    }_  };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,string,builder,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,string,builder,append,return,string,builder,to,string,case,object,case,internal,return,value,buffer,substring,value,begin,value,end,replace,default,throw,new,assertion,error
Type -> public String getClassName();1536664245;Returns the binary name of the class corresponding to this type. This method must not be used_on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_    switch (sort) {_      case VOID:_        return "void"__      case BOOLEAN:_        return "boolean"__      case CHAR:_        return "char"__      case BYTE:_        return "byte"__      case SHORT:_        return "short"__      case INT:_        return "int"__      case FLOAT:_        return "float"__      case LONG:_        return "long"__      case DOUBLE:_        return "double"__      case ARRAY:_        StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName())__        for (int i = getDimensions()_ i > 0_ --i) {_          stringBuilder.append("[]")__        }_        return stringBuilder.toString()__      case OBJECT:_      case INTERNAL:_        return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.')__      default:_        throw new AssertionError()__    }_  };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,string,builder,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,string,builder,append,return,string,builder,to,string,case,object,case,internal,return,value,buffer,substring,value,begin,value,end,replace,default,throw,new,assertion,error
Type -> public String getClassName();1537204147;Returns the binary name of the class corresponding to this type. This method must not be used_on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_    switch (sort) {_      case VOID:_        return "void"__      case BOOLEAN:_        return "boolean"__      case CHAR:_        return "char"__      case BYTE:_        return "byte"__      case SHORT:_        return "short"__      case INT:_        return "int"__      case FLOAT:_        return "float"__      case LONG:_        return "long"__      case DOUBLE:_        return "double"__      case ARRAY:_        StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName())__        for (int i = getDimensions()_ i > 0_ --i) {_          stringBuilder.append("[]")__        }_        return stringBuilder.toString()__      case OBJECT:_      case INTERNAL:_        return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.')__      default:_        throw new AssertionError()__    }_  };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,string,builder,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,string,builder,append,return,string,builder,to,string,case,object,case,internal,return,value,buffer,substring,value,begin,value,end,replace,default,throw,new,assertion,error
Type -> public String getClassName();1539119582;Returns the binary name of the class corresponding to this type. This method must not be used_on method types.__@return the binary name of the class corresponding to this type.;public String getClassName() {_    switch (sort) {_      case VOID:_        return "void"__      case BOOLEAN:_        return "boolean"__      case CHAR:_        return "char"__      case BYTE:_        return "byte"__      case SHORT:_        return "short"__      case INT:_        return "int"__      case FLOAT:_        return "float"__      case LONG:_        return "long"__      case DOUBLE:_        return "double"__      case ARRAY:_        StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName())__        for (int i = getDimensions()_ i > 0_ --i) {_          stringBuilder.append("[]")__        }_        return stringBuilder.toString()__      case OBJECT:_      case INTERNAL:_        return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.')__      default:_        throw new AssertionError()__    }_  };returns,the,binary,name,of,the,class,corresponding,to,this,type,this,method,must,not,be,used,on,method,types,return,the,binary,name,of,the,class,corresponding,to,this,type;public,string,get,class,name,switch,sort,case,void,return,void,case,boolean,return,boolean,case,char,return,char,case,byte,return,byte,case,short,return,short,case,int,return,int,case,float,return,float,case,long,return,long,case,double,return,double,case,array,string,builder,string,builder,new,string,builder,get,element,type,get,class,name,for,int,i,get,dimensions,i,0,i,string,builder,append,return,string,builder,to,string,case,object,case,internal,return,value,buffer,substring,value,begin,value,end,replace,default,throw,new,assertion,error
Type -> public static Type getReturnType(final String methodDescriptor);1366718246;Returns the Java type corresponding to the return type of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the return type of the given_method descriptor.;public static Type getReturnType(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        return getType(buf, methodDescriptor.indexOf(')') + 1)__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,return,get,type,buf,method,descriptor,index,of,1
Type -> public static Type getReturnType(final String methodDescriptor);1400531367;Returns the Java type corresponding to the return type of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the return type of the given_method descriptor.;public static Type getReturnType(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        return getType(buf, methodDescriptor.indexOf(')') + 1)__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,return,get,type,buf,method,descriptor,index,of,1
Type -> public static Type getReturnType(final String methodDescriptor);1400538684;Returns the Java type corresponding to the return type of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the return type of the given_method descriptor.;public static Type getReturnType(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        return getType(buf, methodDescriptor.indexOf(')') + 1)__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,return,get,type,buf,method,descriptor,index,of,1
Type -> public static Type getReturnType(final String methodDescriptor);1477913309;Returns the Java type corresponding to the return type of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the return type of the given_method descriptor.;public static Type getReturnType(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        return getType(buf, methodDescriptor.indexOf(')') + 1)__    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,return,get,type,buf,method,descriptor,index,of,1
Type -> public static Type getReturnType(final String methodDescriptor);1483093254;Returns the Java type corresponding to the return type of the given_method descriptor.__@param methodDescriptor_a method descriptor._@return the Java type corresponding to the return type of the given_method descriptor.;public static Type getReturnType(final String methodDescriptor) {_        char[] buf = methodDescriptor.toCharArray()__        int off = 1__        while (true) {_            char car = buf[off++]__            if (car == ')') {_                return getType(buf, off)__            } else if (car == 'L') {_                while (buf[off++] != '_') {_                }_            }_        }_    };returns,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,java,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,char,buf,method,descriptor,to,char,array,int,off,1,while,true,char,car,buf,off,if,car,return,get,type,buf,off,else,if,car,l,while,buf,off
Type -> public static Type getReturnType(final String methodDescriptor);1531241461;Returns the {@link Type} corresponding to the return type of the given method descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the return type of the given method descriptor.;public static Type getReturnType(final String methodDescriptor) {_    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_    }_    return getType(methodDescriptor, currentOffset + 1, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,return,get,type,method,descriptor,current,offset,1,method,descriptor,length
Type -> public static Type getReturnType(final String methodDescriptor);1536664245;Returns the {@link Type} corresponding to the return type of the given method descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the return type of the given method descriptor.;public static Type getReturnType(final String methodDescriptor) {_    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_    }_    return getType(methodDescriptor, currentOffset + 1, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,return,get,type,method,descriptor,current,offset,1,method,descriptor,length
Type -> public static Type getReturnType(final String methodDescriptor);1537204147;Returns the {@link Type} corresponding to the return type of the given method descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the return type of the given method descriptor.;public static Type getReturnType(final String methodDescriptor) {_    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        while (methodDescriptor.charAt(currentOffset++) != '_') {_          _        }_      }_    }_    return getTypeInternal(methodDescriptor, currentOffset + 1, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,while,method,descriptor,char,at,current,offset,return,get,type,internal,method,descriptor,current,offset,1,method,descriptor,length
Type -> public static Type getReturnType(final String methodDescriptor);1539119582;Returns the {@link Type} corresponding to the return type of the given method descriptor.__@param methodDescriptor a method descriptor._@return the {@link Type} corresponding to the return type of the given method descriptor.;public static Type getReturnType(final String methodDescriptor) {_    _    int currentOffset = 1__    _    while (methodDescriptor.charAt(currentOffset) != ')') {_      while (methodDescriptor.charAt(currentOffset) == '[') {_        currentOffset++__      }_      if (methodDescriptor.charAt(currentOffset++) == 'L') {_        _        currentOffset = methodDescriptor.indexOf('_', currentOffset) + 1__      }_    }_    return getTypeInternal(methodDescriptor, currentOffset + 1, methodDescriptor.length())__  };returns,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor,param,method,descriptor,a,method,descriptor,return,the,link,type,corresponding,to,the,return,type,of,the,given,method,descriptor;public,static,type,get,return,type,final,string,method,descriptor,int,current,offset,1,while,method,descriptor,char,at,current,offset,while,method,descriptor,char,at,current,offset,current,offset,if,method,descriptor,char,at,current,offset,l,current,offset,method,descriptor,index,of,current,offset,1,return,get,type,internal,method,descriptor,current,offset,1,method,descriptor,length
Type -> @Override   public boolean equals(final Object object);1531241461;Tests if the given object is equal to this type.__@param object the object to be compared to this type._@return <tt>true</tt> if the given object is equal to this type.;@Override_  public boolean equals(final Object object) {_    if (this == object) {_      return true__    }_    if (!(object instanceof Type)) {_      return false__    }_    Type other = (Type) object__    if ((sort == INTERNAL ? OBJECT : sort) != (other.sort == INTERNAL ? OBJECT : other.sort)) {_      return false__    }_    int begin = valueBegin__    int end = valueEnd__    int otherBegin = other.valueBegin__    int otherEnd = other.valueEnd__    _    if (end - begin != otherEnd - otherBegin) {_      return false__    }_    for (int i = begin, j = otherBegin_ i < end_ i++, j++) {_      if (valueBuffer.charAt(i) != other.valueBuffer.charAt(j)) {_        return false__      }_    }_    return true__  };tests,if,the,given,object,is,equal,to,this,type,param,object,the,object,to,be,compared,to,this,type,return,tt,true,tt,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,object,if,this,object,return,true,if,object,instanceof,type,return,false,type,other,type,object,if,sort,internal,object,sort,other,sort,internal,object,other,sort,return,false,int,begin,value,begin,int,end,value,end,int,other,begin,other,value,begin,int,other,end,other,value,end,if,end,begin,other,end,other,begin,return,false,for,int,i,begin,j,other,begin,i,end,i,j,if,value,buffer,char,at,i,other,value,buffer,char,at,j,return,false,return,true
Type -> @Override   public boolean equals(final Object object);1536664245;Tests if the given object is equal to this type.__@param object the object to be compared to this type._@return {@literal true} if the given object is equal to this type.;@Override_  public boolean equals(final Object object) {_    if (this == object) {_      return true__    }_    if (!(object instanceof Type)) {_      return false__    }_    Type other = (Type) object__    if ((sort == INTERNAL ? OBJECT : sort) != (other.sort == INTERNAL ? OBJECT : other.sort)) {_      return false__    }_    int begin = valueBegin__    int end = valueEnd__    int otherBegin = other.valueBegin__    int otherEnd = other.valueEnd__    _    if (end - begin != otherEnd - otherBegin) {_      return false__    }_    for (int i = begin, j = otherBegin_ i < end_ i++, j++) {_      if (valueBuffer.charAt(i) != other.valueBuffer.charAt(j)) {_        return false__      }_    }_    return true__  };tests,if,the,given,object,is,equal,to,this,type,param,object,the,object,to,be,compared,to,this,type,return,literal,true,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,object,if,this,object,return,true,if,object,instanceof,type,return,false,type,other,type,object,if,sort,internal,object,sort,other,sort,internal,object,other,sort,return,false,int,begin,value,begin,int,end,value,end,int,other,begin,other,value,begin,int,other,end,other,value,end,if,end,begin,other,end,other,begin,return,false,for,int,i,begin,j,other,begin,i,end,i,j,if,value,buffer,char,at,i,other,value,buffer,char,at,j,return,false,return,true
Type -> @Override   public boolean equals(final Object object);1537204147;Tests if the given object is equal to this type.__@param object the object to be compared to this type._@return {@literal true} if the given object is equal to this type.;@Override_  public boolean equals(final Object object) {_    if (this == object) {_      return true__    }_    if (!(object instanceof Type)) {_      return false__    }_    Type other = (Type) object__    if ((sort == INTERNAL ? OBJECT : sort) != (other.sort == INTERNAL ? OBJECT : other.sort)) {_      return false__    }_    int begin = valueBegin__    int end = valueEnd__    int otherBegin = other.valueBegin__    int otherEnd = other.valueEnd__    _    if (end - begin != otherEnd - otherBegin) {_      return false__    }_    for (int i = begin, j = otherBegin_ i < end_ i++, j++) {_      if (valueBuffer.charAt(i) != other.valueBuffer.charAt(j)) {_        return false__      }_    }_    return true__  };tests,if,the,given,object,is,equal,to,this,type,param,object,the,object,to,be,compared,to,this,type,return,literal,true,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,object,if,this,object,return,true,if,object,instanceof,type,return,false,type,other,type,object,if,sort,internal,object,sort,other,sort,internal,object,other,sort,return,false,int,begin,value,begin,int,end,value,end,int,other,begin,other,value,begin,int,other,end,other,value,end,if,end,begin,other,end,other,begin,return,false,for,int,i,begin,j,other,begin,i,end,i,j,if,value,buffer,char,at,i,other,value,buffer,char,at,j,return,false,return,true
Type -> @Override   public boolean equals(final Object object);1539119582;Tests if the given object is equal to this type.__@param object the object to be compared to this type._@return {@literal true} if the given object is equal to this type.;@Override_  public boolean equals(final Object object) {_    if (this == object) {_      return true__    }_    if (!(object instanceof Type)) {_      return false__    }_    Type other = (Type) object__    if ((sort == INTERNAL ? OBJECT : sort) != (other.sort == INTERNAL ? OBJECT : other.sort)) {_      return false__    }_    int begin = valueBegin__    int end = valueEnd__    int otherBegin = other.valueBegin__    int otherEnd = other.valueEnd__    _    if (end - begin != otherEnd - otherBegin) {_      return false__    }_    for (int i = begin, j = otherBegin_ i < end_ i++, j++) {_      if (valueBuffer.charAt(i) != other.valueBuffer.charAt(j)) {_        return false__      }_    }_    return true__  };tests,if,the,given,object,is,equal,to,this,type,param,object,the,object,to,be,compared,to,this,type,return,literal,true,if,the,given,object,is,equal,to,this,type;override,public,boolean,equals,final,object,object,if,this,object,return,true,if,object,instanceof,type,return,false,type,other,type,object,if,sort,internal,object,sort,other,sort,internal,object,other,sort,return,false,int,begin,value,begin,int,end,value,end,int,other,begin,other,value,begin,int,other,end,other,value,end,if,end,begin,other,end,other,begin,return,false,for,int,i,begin,j,other,begin,i,end,i,j,if,value,buffer,char,at,i,other,value,buffer,char,at,j,return,false,return,true
Type -> public String getDescriptor();1366718246;Returns the descriptor corresponding to this Java type.__@return the descriptor corresponding to this Java type.;public String getDescriptor() {_        StringBuffer buf = new StringBuffer()__        getDescriptor(buf)__        return buf.toString()__    };returns,the,descriptor,corresponding,to,this,java,type,return,the,descriptor,corresponding,to,this,java,type;public,string,get,descriptor,string,buffer,buf,new,string,buffer,get,descriptor,buf,return,buf,to,string
Type -> public String getDescriptor();1400531367;Returns the descriptor corresponding to this Java type.__@return the descriptor corresponding to this Java type.;public String getDescriptor() {_        StringBuilder sb = new StringBuilder()__        getDescriptor(sb)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,this,java,type,return,the,descriptor,corresponding,to,this,java,type;public,string,get,descriptor,string,builder,sb,new,string,builder,get,descriptor,sb,return,sb,to,string
Type -> public String getDescriptor();1400538684;Returns the descriptor corresponding to this Java type.__@return the descriptor corresponding to this Java type.;public String getDescriptor() {_        StringBuilder sb = new StringBuilder()__        getDescriptor(sb)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,this,java,type,return,the,descriptor,corresponding,to,this,java,type;public,string,get,descriptor,string,builder,sb,new,string,builder,get,descriptor,sb,return,sb,to,string
Type -> public String getDescriptor();1477913309;Returns the descriptor corresponding to this Java type.__@return the descriptor corresponding to this Java type.;public String getDescriptor() {_        StringBuilder sb = new StringBuilder()__        getDescriptor(sb)__        return sb.toString()__    };returns,the,descriptor,corresponding,to,this,java,type,return,the,descriptor,corresponding,to,this,java,type;public,string,get,descriptor,string,builder,sb,new,string,builder,get,descriptor,sb,return,sb,to,string
Type -> public String getDescriptor();1483093254;Returns the descriptor corresponding to this Java type.__@return the descriptor corresponding to this Java type.;public String getDescriptor() {_        StringBuilder buf = new StringBuilder()__        getDescriptor(buf)__        return buf.toString()__    };returns,the,descriptor,corresponding,to,this,java,type,return,the,descriptor,corresponding,to,this,java,type;public,string,get,descriptor,string,builder,buf,new,string,builder,get,descriptor,buf,return,buf,to,string
Type -> public String getDescriptor();1531241461;Returns the descriptor corresponding to this type.__@return the descriptor corresponding to this type.;public String getDescriptor() {_    if (sort == OBJECT) {_      return valueBuffer.substring(valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      StringBuilder stringBuilder = new StringBuilder()__      stringBuilder.append('L')__      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__      stringBuilder.append('_')__      return stringBuilder.toString()__    } else {_      return valueBuffer.substring(valueBegin, valueEnd)__    }_  };returns,the,descriptor,corresponding,to,this,type,return,the,descriptor,corresponding,to,this,type;public,string,get,descriptor,if,sort,object,return,value,buffer,substring,value,begin,1,value,end,1,else,if,sort,internal,string,builder,string,builder,new,string,builder,string,builder,append,l,string,builder,append,value,buffer,value,begin,value,end,string,builder,append,return,string,builder,to,string,else,return,value,buffer,substring,value,begin,value,end
Type -> public String getDescriptor();1536664245;Returns the descriptor corresponding to this type.__@return the descriptor corresponding to this type.;public String getDescriptor() {_    if (sort == OBJECT) {_      return valueBuffer.substring(valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      StringBuilder stringBuilder = new StringBuilder()__      stringBuilder.append('L')__      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__      stringBuilder.append('_')__      return stringBuilder.toString()__    } else {_      return valueBuffer.substring(valueBegin, valueEnd)__    }_  };returns,the,descriptor,corresponding,to,this,type,return,the,descriptor,corresponding,to,this,type;public,string,get,descriptor,if,sort,object,return,value,buffer,substring,value,begin,1,value,end,1,else,if,sort,internal,string,builder,string,builder,new,string,builder,string,builder,append,l,string,builder,append,value,buffer,value,begin,value,end,string,builder,append,return,string,builder,to,string,else,return,value,buffer,substring,value,begin,value,end
Type -> public String getDescriptor();1537204147;Returns the descriptor corresponding to this type.__@return the descriptor corresponding to this type.;public String getDescriptor() {_    if (sort == OBJECT) {_      return valueBuffer.substring(valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      StringBuilder stringBuilder = new StringBuilder()__      stringBuilder.append('L')__      stringBuilder.append(valueBuffer, valueBegin, valueEnd)__      stringBuilder.append('_')__      return stringBuilder.toString()__    } else {_      return valueBuffer.substring(valueBegin, valueEnd)__    }_  };returns,the,descriptor,corresponding,to,this,type,return,the,descriptor,corresponding,to,this,type;public,string,get,descriptor,if,sort,object,return,value,buffer,substring,value,begin,1,value,end,1,else,if,sort,internal,string,builder,string,builder,new,string,builder,string,builder,append,l,string,builder,append,value,buffer,value,begin,value,end,string,builder,append,return,string,builder,to,string,else,return,value,buffer,substring,value,begin,value,end
Type -> public String getDescriptor();1539119582;Returns the descriptor corresponding to this type.__@return the descriptor corresponding to this type.;public String getDescriptor() {_    if (sort == OBJECT) {_      return valueBuffer.substring(valueBegin - 1, valueEnd + 1)__    } else if (sort == INTERNAL) {_      return new StringBuilder()_          .append('L')_          .append(valueBuffer, valueBegin, valueEnd)_          .append('_')_          .toString()__    } else {_      return valueBuffer.substring(valueBegin, valueEnd)__    }_  };returns,the,descriptor,corresponding,to,this,type,return,the,descriptor,corresponding,to,this,type;public,string,get,descriptor,if,sort,object,return,value,buffer,substring,value,begin,1,value,end,1,else,if,sort,internal,return,new,string,builder,append,l,append,value,buffer,value,begin,value,end,append,to,string,else,return,value,buffer,substring,value,begin,value,end
