# id;timestamp;commentText;codeText;commentWords;codeWords
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1402947751;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1402952812;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1403791284;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1405521701;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1409784938;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1413848647;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1464284362;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1467730834;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1485874672;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@return The value associated with this future.;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.listenableFuture.get()__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,listenable,future,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1486061648;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1487378610;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1491565198;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1496259743;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1496837955;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1497341397;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1498517017;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1498780456;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> @Override 	public T get() throws InterruptedException, ExecutionException;1530174524;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@return the value associated with this future;@Override_	public T get() throws InterruptedException, ExecutionException {_		return this.settableTask.get()__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,return,the,value,associated,with,this,future;override,public,t,get,throws,interrupted,exception,execution,exception,return,this,settable,task,get
SettableListenableFuture -> protected void interruptTask();1402947751;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}.__<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1402952812;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}.__<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1403791284;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1405521701;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1409784938;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1413848647;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1464284362;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1467730834;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1485874672;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation does nothing.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,does,nothing;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1486061648;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1487378610;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1491565198;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1496259743;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1496837955;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1497341397;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1498517017;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1498780456;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> protected void interruptTask();1530174524;Subclasses can override this method to implement interruption of the future's_computation. The method is invoked automatically by a successful call to_{@link #cancel(boolean) cancel(true)}._<p>The default implementation is empty.;protected void interruptTask() {_	};subclasses,can,override,this,method,to,implement,interruption,of,the,future,s,computation,the,method,is,invoked,automatically,by,a,successful,call,to,link,cancel,boolean,cancel,true,p,the,default,implementation,is,empty;protected,void,interrupt,task
SettableListenableFuture -> public boolean setException(Throwable exception);1402947751;Set the exception of this future. This method will return {@code true} if_the exception was set successfully, or {@code false} if the future has already_been set or cancelled._@param exception the value that will be set._@return {@code true} if the exception was successfully set, else {@code false}.;public boolean setException(Throwable exception) {_		Assert.notNull(exception, "'exception' must not be null")__		boolean success = this.settableTask.setValue(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,value,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1402952812;Set the exception of this future. This method will return {@code true} if_the exception was set successfully, or {@code false} if the future has already_been set or cancelled._@param exception the value that will be set._@return {@code true} if the exception was successfully set, else {@code false}.;public boolean setException(Throwable exception) {_		Assert.notNull(exception, "'exception' must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1403791284;Set the exception of this future. This method will return {@code true} if_the exception was set successfully, or {@code false} if the future has already_been set or cancelled._@param exception the value that will be set._@return {@code true} if the exception was successfully set, else {@code false}.;public boolean setException(Throwable exception) {_		Assert.notNull(exception, "'exception' must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1405521701;Set the exception of this future. This method will return {@code true} if_the exception was set successfully, or {@code false} if the future has already_been set or cancelled._@param exception the value that will be set._@return {@code true} if the exception was successfully set, else {@code false}.;public boolean setException(Throwable exception) {_		Assert.notNull(exception, "'exception' must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1409784938;Set the exception of this future. This method will return {@code true} if_the exception was set successfully, or {@code false} if the future has already_been set or cancelled._@param exception the value that will be set._@return {@code true} if the exception was successfully set, else {@code false}.;public boolean setException(Throwable exception) {_		Assert.notNull(exception, "'exception' must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1413848647;Set the exception of this future. This method will return {@code true} if_the exception was set successfully, or {@code false} if the future has already_been set or cancelled._@param exception the value that will be set._@return {@code true} if the exception was successfully set, else {@code false}.;public boolean setException(Throwable exception) {_		Assert.notNull(exception, "'exception' must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1464284362;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1467730834;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1485874672;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		boolean success = this.settableTask.setException(exception)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,boolean,success,this,settable,task,set,exception,exception,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean setException(Throwable exception);1486061648;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1487378610;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1491565198;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1496259743;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1496837955;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1497341397;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1498517017;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1498780456;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean setException(Throwable exception);1530174524;Set the exception of this future. This method will return {@code true} if the_exception was set successfully, or {@code false} if the future has already been_set or cancelled._@param exception the value that will be set_@return {@code true} if the exception was successfully set, else {@code false};public boolean setException(Throwable exception) {_		Assert.notNull(exception, "Exception must not be null")__		return this.settableTask.setExceptionResult(exception)__	};set,the,exception,of,this,future,this,method,will,return,code,true,if,the,exception,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,exception,the,value,that,will,be,set,return,code,true,if,the,exception,was,successfully,set,else,code,false;public,boolean,set,exception,throwable,exception,assert,not,null,exception,exception,must,not,be,null,return,this,settable,task,set,exception,result,exception
SettableListenableFuture -> public boolean set(T value);1402947751;Set the value of this future. This method will return {@code true} if_the value was set successfully, or {@code false} if the future has already_been set or cancelled._@param value the value that will be set._@return {@code true} if the value was successfully set, else {@code false}.;public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1402952812;Set the value of this future. This method will return {@code true} if_the value was set successfully, or {@code false} if the future has already_been set or cancelled._@param value the value that will be set._@return {@code true} if the value was successfully set, else {@code false}.;public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1403791284;Set the value of this future. This method will return {@code true} if_the value was set successfully, or {@code false} if the future has already_been set or cancelled._@param value the value that will be set._@return {@code true} if the value was successfully set, else {@code false}.;public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1405521701;Set the value of this future. This method will return {@code true} if_the value was set successfully, or {@code false} if the future has already_been set or cancelled._@param value the value that will be set._@return {@code true} if the value was successfully set, else {@code false}.;public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1409784938;Set the value of this future. This method will return {@code true} if_the value was set successfully, or {@code false} if the future has already_been set or cancelled._@param value the value that will be set._@return {@code true} if the value was successfully set, else {@code false}.;public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1413848647;Set the value of this future. This method will return {@code true} if_the value was set successfully, or {@code false} if the future has already_been set or cancelled._@param value the value that will be set._@return {@code true} if the value was successfully set, else {@code false}.;public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1464284362;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1467730834;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1485874672;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(T value) {_		boolean success = this.settableTask.setValue(value)__		if (success) {_			this.listenableFuture.run()__		}_		return success__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,boolean,success,this,settable,task,set,value,value,if,success,this,listenable,future,run,return,success
SettableListenableFuture -> public boolean set(T value);1486061648;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(T value);1487378610;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(T value);1491565198;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1402947751;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1402952812;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1403791284;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1405521701;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1409784938;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1413848647;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1464284362;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1467730834;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1485874672;Retrieve the value._<p>Will return the value if it has been set via {@link #set(Object)},_throw an {@link java.util.concurrent.ExecutionException} if it has been_set via {@link #setException(Throwable)} or  throw a_{@link java.util.concurrent.CancellationException} if it has been cancelled._@param timeout the maximum time to wait._@param unit the time unit of the timeout argument._@return The value associated with this future.;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.listenableFuture.get(timeout, unit)__	};retrieve,the,value,p,will,return,the,value,if,it,has,been,set,via,link,set,object,throw,an,link,java,util,concurrent,execution,exception,if,it,has,been,set,via,link,set,exception,throwable,or,throw,a,link,java,util,concurrent,cancellation,exception,if,it,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,time,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,listenable,future,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1486061648;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1487378610;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1491565198;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1496259743;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1496837955;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1497341397;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1498517017;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1498780456;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> @Override 	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;1530174524;Retrieve the value._<p>This method returns the value if it has been set via {@link #set(Object)},_throws an {@link java.util.concurrent.ExecutionException} if an exception has_been set via {@link #setException(Throwable)}, or throws a_{@link java.util.concurrent.CancellationException} if the future has been cancelled._@param timeout the maximum time to wait_@param unit the unit of the timeout argument_@return the value associated with this future;@Override_	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {_		return this.settableTask.get(timeout, unit)__	};retrieve,the,value,p,this,method,returns,the,value,if,it,has,been,set,via,link,set,object,throws,an,link,java,util,concurrent,execution,exception,if,an,exception,has,been,set,via,link,set,exception,throwable,or,throws,a,link,java,util,concurrent,cancellation,exception,if,the,future,has,been,cancelled,param,timeout,the,maximum,time,to,wait,param,unit,the,unit,of,the,timeout,argument,return,the,value,associated,with,this,future;override,public,t,get,long,timeout,time,unit,unit,throws,interrupted,exception,execution,exception,timeout,exception,return,this,settable,task,get,timeout,unit
SettableListenableFuture -> public boolean set(@Nullable T value);1496259743;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(@Nullable T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,nullable,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(@Nullable T value);1496837955;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(@Nullable T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,nullable,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(@Nullable T value);1497341397;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(@Nullable T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,nullable,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(@Nullable T value);1498517017;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(@Nullable T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,nullable,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(@Nullable T value);1498780456;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(@Nullable T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,nullable,t,value,return,this,settable,task,set,result,value,value
SettableListenableFuture -> public boolean set(@Nullable T value);1530174524;Set the value of this future. This method will return {@code true} if the_value was set successfully, or {@code false} if the future has already been_set or cancelled._@param value the value that will be set_@return {@code true} if the value was successfully set, else {@code false};public boolean set(@Nullable T value) {_		return this.settableTask.setResultValue(value)__	};set,the,value,of,this,future,this,method,will,return,code,true,if,the,value,was,set,successfully,or,code,false,if,the,future,has,already,been,set,or,cancelled,param,value,the,value,that,will,be,set,return,code,true,if,the,value,was,successfully,set,else,code,false;public,boolean,set,nullable,t,value,return,this,settable,task,set,result,value,value
