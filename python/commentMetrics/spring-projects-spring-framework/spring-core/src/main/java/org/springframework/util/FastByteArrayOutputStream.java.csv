# id;timestamp;commentText;codeText;commentWords;codeWords
FastByteArrayOutputStream -> public void resize(int targetCapacity);1420729689;Resize the internal buffer size to a specified capacity.__@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (buffers.peekFirst() == null) {_			nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> iter = buffers.iterator()__			while (iter.hasNext()) {_				byte[] bytes = iter.next()__				if (iter.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, index)__				}_			}_			buffers.clear()__			buffers.add(data)__			index = totalSize__			alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,buffers,peek,first,null,next,block,size,target,capacity,size,else,if,size,target,capacity,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,iter,buffers,iterator,while,iter,has,next,byte,bytes,iter,next,if,iter,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,index,buffers,clear,buffers,add,data,index,total,size,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1425077395;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1435680162;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1447399873;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1452685474;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1461047077;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1461683397;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1467730834;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1496837955;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1498780456;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1506097334;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1519859718;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1530174524;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public void resize(int targetCapacity);1542730081;Resize the internal buffer size to a specified capacity._@param targetCapacity the desired size of the buffer_@throws IllegalArgumentException if the given capacity is smaller than_the actual size of the content stored in the buffer already_@see FastByteArrayOutputStream#size();public void resize(int targetCapacity) {_		Assert.isTrue(targetCapacity >= size(), "New capacity must not be smaller than current size")__		if (this.buffers.peekFirst() == null) {_			this.nextBlockSize = targetCapacity - size()__		}_		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {_			_		}_		else {_			int totalSize = size()__			byte[] data = new byte[targetCapacity]__			int pos = 0__			Iterator<byte[]> it = this.buffers.iterator()__			while (it.hasNext()) {_				byte[] bytes = it.next()__				if (it.hasNext()) {_					System.arraycopy(bytes, 0, data, pos, bytes.length)__					pos += bytes.length__				}_				else {_					System.arraycopy(bytes, 0, data, pos, this.index)__				}_			}_			this.buffers.clear()__			this.buffers.add(data)__			this.index = totalSize__			this.alreadyBufferedSize = 0__		}_	};resize,the,internal,buffer,size,to,a,specified,capacity,param,target,capacity,the,desired,size,of,the,buffer,throws,illegal,argument,exception,if,the,given,capacity,is,smaller,than,the,actual,size,of,the,content,stored,in,the,buffer,already,see,fast,byte,array,output,stream,size;public,void,resize,int,target,capacity,assert,is,true,target,capacity,size,new,capacity,must,not,be,smaller,than,current,size,if,this,buffers,peek,first,null,this,next,block,size,target,capacity,size,else,if,size,target,capacity,this,buffers,get,first,length,target,capacity,else,int,total,size,size,byte,data,new,byte,target,capacity,int,pos,0,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,system,arraycopy,bytes,0,data,pos,bytes,length,pos,bytes,length,else,system,arraycopy,bytes,0,data,pos,this,index,this,buffers,clear,this,buffers,add,data,this,index,total,size,this,already,buffered,size,0
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1420729689;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1425077395;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1435680162;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1447399873;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1452685474;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1461047077;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1461683397;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1467730834;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1496837955;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1498780456;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1506097334;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1519859718;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1530174524;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public FastByteArrayOutputStream(int initialBlockSize);1542730081;Create a new <code>FastByteArrayOutputStream</code>_with the specified initial capacity._@param initialBlockSize the initial buffer size in bytes;public FastByteArrayOutputStream(int initialBlockSize) {_		Assert.isTrue(initialBlockSize > 0, "Initial block size must be greater than 0")__		this.initialBlockSize = initialBlockSize__		this.nextBlockSize = initialBlockSize__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,specified,initial,capacity,param,initial,block,size,the,initial,buffer,size,in,bytes;public,fast,byte,array,output,stream,int,initial,block,size,assert,is,true,initial,block,size,0,initial,block,size,must,be,greater,than,0,this,initial,block,size,initial,block,size,this,next,block,size,initial,block,size
FastByteArrayOutputStream -> public byte[] toByteArray();1420729689;Creates a newly allocated byte array.__<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>__@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1425077395;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1435680162;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1447399873;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1452685474;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1461047077;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1461683397;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1467730834;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1496837955;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1498780456;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1506097334;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1519859718;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1530174524;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public byte[] toByteArray();1542730081;Creates a newly allocated byte array._<p>Its size is the current_size of this output stream and the valid contents of the buffer_have been copied into it.</p>_@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArrayUnsafe();public byte[] toByteArray() {_		byte[] bytesUnsafe = toByteArrayUnsafe()__		byte[] ret = new byte[bytesUnsafe.length]__		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length)__		return ret__	};creates,a,newly,allocated,byte,array,p,its,size,is,the,current,size,of,this,output,stream,and,the,valid,contents,of,the,buffer,have,been,copied,into,it,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array,unsafe;public,byte,to,byte,array,byte,bytes,unsafe,to,byte,array,unsafe,byte,ret,new,byte,bytes,unsafe,length,system,arraycopy,bytes,unsafe,0,ret,0,bytes,unsafe,length,return,ret
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1420729689;Write the buffers content to the given OutputStream__@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> iter = buffers.iterator()___		while (iter.hasNext()) {_			byte[] bytes = iter.next()__			if (iter.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,iter,buffers,iterator,while,iter,has,next,byte,bytes,iter,next,if,iter,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1425077395;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1435680162;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1447399873;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1452685474;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1461047077;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1461683397;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1467730834;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1496837955;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1498780456;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1506097334;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1519859718;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1530174524;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> public void writeTo(OutputStream out) throws IOException;1542730081;Write the buffers content to the given OutputStream._@param out the OutputStream to write to;public void writeTo(OutputStream out) throws IOException {_		Iterator<byte[]> it = this.buffers.iterator()__		while (it.hasNext()) {_			byte[] bytes = it.next()__			if (it.hasNext()) {_				out.write(bytes, 0, bytes.length)__			}_			else {_				out.write(bytes, 0, this.index)__			}_		}_	};write,the,buffers,content,to,the,given,output,stream,param,out,the,output,stream,to,write,to;public,void,write,to,output,stream,out,throws,ioexception,iterator,byte,it,this,buffers,iterator,while,it,has,next,byte,bytes,it,next,if,it,has,next,out,write,bytes,0,bytes,length,else,out,write,bytes,0,this,index
FastByteArrayOutputStream -> FastByteArrayInputStream -> @Override 		public void updateMessageDigest(MessageDigest messageDigest);1519859718;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;@Override_		public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;override,public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> @Override 		public void updateMessageDigest(MessageDigest messageDigest);1530174524;Update the message digest with the remaining bytes in this stream._@param messageDigest the message digest to update;@Override_		public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;override,public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> @Override 		public void updateMessageDigest(MessageDigest messageDigest);1542730081;Update the message digest with the remaining bytes in this stream._@param messageDigest the message digest to update;@Override_		public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;override,public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1420729689;Create a new buffer and store it in the LinkedList__<p>Adds a new buffer that can store at least {@code minCapacity} bytes</p>;private void addBuffer(int minCapacity) {_		if (buffers.peekLast() != null) {_			alreadyBufferedSize += index__			index = 0__		}_		if (nextBlockSize < minCapacity) {_			nextBlockSize = nextPowerOf2(minCapacity)__		}_		buffers.add(new byte[nextBlockSize])__		nextBlockSize *= 2_ _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes,p;private,void,add,buffer,int,min,capacity,if,buffers,peek,last,null,already,buffered,size,index,index,0,if,next,block,size,min,capacity,next,block,size,next,power,of2,min,capacity,buffers,add,new,byte,next,block,size,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1425077395;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1435680162;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1447399873;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1452685474;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1461047077;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1461683397;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1467730834;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1496837955;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1498780456;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1506097334;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1519859718;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1530174524;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> private void addBuffer(int minCapacity);1542730081;Create a new buffer and store it in the LinkedList_<p>Adds a new buffer that can store at least {@code minCapacity} bytes.;private void addBuffer(int minCapacity) {_		if (this.buffers.peekLast() != null) {_			this.alreadyBufferedSize += this.index__			this.index = 0__		}_		if (this.nextBlockSize < minCapacity) {_			this.nextBlockSize = nextPowerOf2(minCapacity)__		}_		this.buffers.add(new byte[this.nextBlockSize])__		this.nextBlockSize *= 2_  _	};create,a,new,buffer,and,store,it,in,the,linked,list,p,adds,a,new,buffer,that,can,store,at,least,code,min,capacity,bytes;private,void,add,buffer,int,min,capacity,if,this,buffers,peek,last,null,this,already,buffered,size,this,index,this,index,0,if,this,next,block,size,min,capacity,this,next,block,size,next,power,of2,min,capacity,this,buffers,add,new,byte,this,next,block,size,this,next,block,size,2
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1425077395;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1435680162;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1447399873;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1452685474;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1461047077;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1461683397;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1467730834;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1496837955;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1498780456;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest);1506097334;Update the message digest with the remaining bytes in this stream._@param messageDigest The message digest to update;public void updateMessageDigest(MessageDigest messageDigest) {_			updateMessageDigest(messageDigest, available())__		};update,the,message,digest,with,the,remaining,bytes,in,this,stream,param,message,digest,the,message,digest,to,update;public,void,update,message,digest,message,digest,message,digest,update,message,digest,message,digest,available
FastByteArrayOutputStream -> FastByteArrayInputStream -> @Override 		public void updateMessageDigest(MessageDigest messageDigest, int len);1519859718;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;@Override_		public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						updateCurrentBufferLength()__						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;override,public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,update,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> @Override 		public void updateMessageDigest(MessageDigest messageDigest, int len);1530174524;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest the message digest to update_@param len how many bytes to read from this stream and use to update the message digest;@Override_		public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						updateCurrentBufferLength()__						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;override,public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,update,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> @Override 		public void updateMessageDigest(MessageDigest messageDigest, int len);1542730081;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest the message digest to update_@param len how many bytes to read from this stream and use to update the message digest;@Override_		public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						updateCurrentBufferLength()__						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;override,public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,update,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1425077395;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1435680162;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1447399873;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1452685474;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1461047077;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1461683397;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1467730834;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1496837955;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = this.currentBuffer.length__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1498780456;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0)__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,null,this,current,buffer,length,0
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1506097334;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0)__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,null,this,current,buffer,length,0
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1519859718;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0)__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,null,this,current,buffer,length,0
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1530174524;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0)__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,null,this,current,buffer,length,0
FastByteArrayOutputStream -> FastByteArrayInputStream -> public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream);1542730081;Create a new <code>FastByteArrayOutputStreamInputStream</code> backed_by the given <code>FastByteArrayOutputStream</code>.;public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {_			this.fastByteArrayOutputStream = fastByteArrayOutputStream__			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator()__			if (this.buffersIterator.hasNext()) {_				this.currentBuffer = this.buffersIterator.next()__				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {_					this.currentBufferLength = fastByteArrayOutputStream.index__				}_				else {_					this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0)__				}_			}_		};create,a,new,code,fast,byte,array,output,stream,input,stream,code,backed,by,the,given,code,fast,byte,array,output,stream,code;public,fast,byte,array,input,stream,fast,byte,array,output,stream,fast,byte,array,output,stream,this,fast,byte,array,output,stream,fast,byte,array,output,stream,this,buffers,iterator,fast,byte,array,output,stream,buffers,iterator,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,null,this,current,buffer,length,0
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1420729689;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of {@value #DEFAULT_BLOCK_SIZE} bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,value,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1425077395;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1435680162;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1447399873;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1452685474;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1461047077;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1461683397;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1467730834;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1496837955;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1498780456;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1506097334;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1519859718;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1530174524;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public FastByteArrayOutputStream();1542730081;Create a new <code>FastByteArrayOutputStream</code>_with the default initial capacity of 256 bytes.;public FastByteArrayOutputStream() {_		this(DEFAULT_BLOCK_SIZE)__	};create,a,new,code,fast,byte,array,output,stream,code,with,the,default,initial,capacity,of,256,bytes;public,fast,byte,array,output,stream,this
FastByteArrayOutputStream -> public int size();1420729689;Returns the number of bytes stored in this <code>FastByteArrayOutputStream</code>;public int size() {_		return alreadyBufferedSize + index__	};returns,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,already,buffered,size,index
FastByteArrayOutputStream -> public int size();1425077395;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1435680162;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1447399873;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1452685474;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1461047077;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1461683397;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1467730834;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1496837955;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1498780456;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1506097334;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1519859718;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1530174524;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> public int size();1542730081;Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>.;public int size() {_		return (this.alreadyBufferedSize + this.index)__	};return,the,number,of,bytes,stored,in,this,code,fast,byte,array,output,stream,code;public,int,size,return,this,already,buffered,size,this,index
FastByteArrayOutputStream -> @Override 	public String toString();1420729689;Converts the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer.__<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required.</p>__@return String decoded from the buffer's contents.;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};converts,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,p,return,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1425077395;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1435680162;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1447399873;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1452685474;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1461047077;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1461683397;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1467730834;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1496837955;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1498780456;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1506097334;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1519859718;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1530174524;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> @Override 	public String toString();1542730081;Convert the buffer's contents into a string decoding bytes using the_platform's default character set. The length of the new <tt>String</tt>_is a function of the character set, and hence may not be equal to the_size of the buffer._<p>This method always replaces malformed-input and unmappable-character_sequences with the default replacement string for the platform's_default character set. The {@linkplain java.nio.charset.CharsetDecoder}_class should be used when more control over the decoding process is_required._@return a String decoded from the buffer's contents;@Override_	public String toString() {_		return new String(toByteArrayUnsafe())__	};convert,the,buffer,s,contents,into,a,string,decoding,bytes,using,the,platform,s,default,character,set,the,length,of,the,new,tt,string,tt,is,a,function,of,the,character,set,and,hence,may,not,be,equal,to,the,size,of,the,buffer,p,this,method,always,replaces,malformed,input,and,unmappable,character,sequences,with,the,default,replacement,string,for,the,platform,s,default,character,set,the,linkplain,java,nio,charset,charset,decoder,class,should,be,used,when,more,control,over,the,decoding,process,is,required,return,a,string,decoded,from,the,buffer,s,contents;override,public,string,to,string,return,new,string,to,byte,array,unsafe
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1420729689;Convert the stream's data to a byte array and return the byte array.__<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it._This approach also means that if this method is called twice without any writes in between,_the second call is a no-op._This method is "unsafe" as it returns the internal buffer - callers should not modify the returned buffer.</p>__@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,p,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1425077395;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1435680162;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1447399873;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1452685474;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1461047077;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1461683397;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1467730834;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1496837955;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1498780456;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1506097334;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1519859718;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1530174524;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> public byte[] toByteArrayUnsafe();1542730081;Convert the stream's data to a byte array and return the byte array._<p>Also replaces the internal structures with the byte array to conserve memory:_if the byte array is being made anyways, mind as well as use it. This approach_also means that if this method is called twice without any writes in between,_the second call is a no-op._<p>This method is "unsafe" as it returns the internal buffer._Callers should not modify the returned buffer._@return the current contents of this output stream, as a byte array._@see #size()_@see #toByteArray();public byte[] toByteArrayUnsafe() {_		int totalSize = size()__		if (totalSize == 0) {_			return new byte[0]__		}_		resize(totalSize)__		return this.buffers.getFirst()__	};convert,the,stream,s,data,to,a,byte,array,and,return,the,byte,array,p,also,replaces,the,internal,structures,with,the,byte,array,to,conserve,memory,if,the,byte,array,is,being,made,anyways,mind,as,well,as,use,it,this,approach,also,means,that,if,this,method,is,called,twice,without,any,writes,in,between,the,second,call,is,a,no,op,p,this,method,is,unsafe,as,it,returns,the,internal,buffer,callers,should,not,modify,the,returned,buffer,return,the,current,contents,of,this,output,stream,as,a,byte,array,see,size,see,to,byte,array;public,byte,to,byte,array,unsafe,int,total,size,size,if,total,size,0,return,new,byte,0,resize,total,size,return,this,buffers,get,first
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1425077395;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1435680162;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1447399873;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1452685474;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1461047077;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1461683397;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1467730834;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1496837955;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {_							this.currentBufferLength = this.fastByteArrayOutputStream.index__						}_						else {_							this.currentBufferLength = this.currentBuffer.length__						}_						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,if,this,current,buffer,this,fast,byte,array,output,stream,buffers,get,last,this,current,buffer,length,this,fast,byte,array,output,stream,index,else,this,current,buffer,length,this,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1498780456;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						updateCurrentBufferLength()__						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,update,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> FastByteArrayInputStream -> public void updateMessageDigest(MessageDigest messageDigest, int len);1506097334;Update the message digest with the next len bytes in this stream._Avoids creating new byte arrays and use internal buffers for performance._@param messageDigest The message digest to update_@param len how many bytes to read from this stream and use to update the message digest;public void updateMessageDigest(MessageDigest messageDigest, int len) {_			if (this.currentBuffer == null) {_				_				return__			}_			else if (len == 0) {_				return__			}_			else if (len < 0) {_				throw new IllegalArgumentException("len must be 0 or greater: " + len)__			}_			else {_				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {_					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)__					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy)__					this.nextIndexInCurrentBuffer += bytesToCopy__					updateMessageDigest(messageDigest, len - bytesToCopy)__				}_				else {_					if (this.buffersIterator.hasNext()) {_						this.currentBuffer = this.buffersIterator.next()__						updateCurrentBufferLength()__						this.nextIndexInCurrentBuffer = 0__					}_					else {_						this.currentBuffer = null__					}_					updateMessageDigest(messageDigest, len)__				}_			}_		};update,the,message,digest,with,the,next,len,bytes,in,this,stream,avoids,creating,new,byte,arrays,and,use,internal,buffers,for,performance,param,message,digest,the,message,digest,to,update,param,len,how,many,bytes,to,read,from,this,stream,and,use,to,update,the,message,digest;public,void,update,message,digest,message,digest,message,digest,int,len,if,this,current,buffer,null,return,else,if,len,0,return,else,if,len,0,throw,new,illegal,argument,exception,len,must,be,0,or,greater,len,else,if,this,next,index,in,current,buffer,this,current,buffer,length,int,bytes,to,copy,math,min,len,this,current,buffer,length,this,next,index,in,current,buffer,message,digest,update,this,current,buffer,this,next,index,in,current,buffer,bytes,to,copy,this,next,index,in,current,buffer,bytes,to,copy,update,message,digest,message,digest,len,bytes,to,copy,else,if,this,buffers,iterator,has,next,this,current,buffer,this,buffers,iterator,next,update,current,buffer,length,this,next,index,in,current,buffer,0,else,this,current,buffer,null,update,message,digest,message,digest,len
FastByteArrayOutputStream -> public InputStream getInputStream();1420729689;Get an {@link java.io.InputStream} to retrieve the data in this OutputStream__<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the {@link java.io.InputStream}'s_behavior is undefined.</p>__@return {@link java.io.InputStream} of the contents of this <code>FastByteArrayOutputStreamInputStream</code>;public InputStream getInputStream() {_		return new FastByteArrayOutputStreamInputStream(this)__	};get,an,link,java,io,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,p,return,link,java,io,input,stream,of,the,contents,of,this,code,fast,byte,array,output,stream,input,stream,code;public,input,stream,get,input,stream,return,new,fast,byte,array,output,stream,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1425077395;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1435680162;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1447399873;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1452685474;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1461047077;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1461683397;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1467730834;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1496837955;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1498780456;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1506097334;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1519859718;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1530174524;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> public InputStream getInputStream();1542730081;Get an {@link InputStream} to retrieve the data in this OutputStream._<p>Note that if any methods are called on the OutputStream_(including, but not limited to, any of the write methods, {@link #reset()},_{@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the_{@link java.io.InputStream}'s behavior is undefined._@return {@link InputStream} of the contents of this OutputStream;public InputStream getInputStream() {_		return new FastByteArrayInputStream(this)__	};get,an,link,input,stream,to,retrieve,the,data,in,this,output,stream,p,note,that,if,any,methods,are,called,on,the,output,stream,including,but,not,limited,to,any,of,the,write,methods,link,reset,link,to,byte,array,and,link,to,byte,array,unsafe,then,the,link,java,io,input,stream,s,behavior,is,undefined,return,link,input,stream,of,the,contents,of,this,output,stream;public,input,stream,get,input,stream,return,new,fast,byte,array,input,stream,this
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1425077395;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1435680162;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1447399873;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1452685474;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1461047077;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1461683397;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1467730834;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1496837955;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1498780456;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1506097334;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1519859718;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1530174524;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> private static int nextPowerOf2(int val);1542730081;Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).;private static int nextPowerOf2(int val) {_		val--__		val = (val >> 1) | val__		val = (val >> 2) | val__		val = (val >> 4) | val__		val = (val >> 8) | val__		val = (val >> 16) | val__		val++__		return val__	};get,the,next,power,of,2,of,a,number,ex,the,next,power,of,2,of,119,is,128;private,static,int,next,power,of2,int,val,val,val,val,1,val,val,val,2,val,val,val,4,val,val,val,8,val,val,val,16,val,val,return,val
FastByteArrayOutputStream -> public void reset();1420729689;Resets the contents of this <code>FastByteArrayOutputStreamInputStream</code>_<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.</p>;public void reset() {_		buffers.clear()__		nextBlockSize = initialBlockSize__		closed = false__		index = 0__		alreadyBufferedSize = 0__	};resets,the,contents,of,this,code,fast,byte,array,output,stream,input,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again,p;public,void,reset,buffers,clear,next,block,size,initial,block,size,closed,false,index,0,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1425077395;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1435680162;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1447399873;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1452685474;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1461047077;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1461683397;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1467730834;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1496837955;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1498780456;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1506097334;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1519859718;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1530174524;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
FastByteArrayOutputStream -> public void reset();1542730081;Reset the contents of this <code>FastByteArrayOutputStream</code>._<p>All currently accumulated output in the output stream is discarded._The output stream can be used again.;public void reset() {_		this.buffers.clear()__		this.nextBlockSize = this.initialBlockSize__		this.closed = false__		this.index = 0__		this.alreadyBufferedSize = 0__	};reset,the,contents,of,this,code,fast,byte,array,output,stream,code,p,all,currently,accumulated,output,in,the,output,stream,is,discarded,the,output,stream,can,be,used,again;public,void,reset,this,buffers,clear,this,next,block,size,this,initial,block,size,this,closed,false,this,index,0,this,already,buffered,size,0
